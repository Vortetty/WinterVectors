	.text
	.def	 @feat.00;
	.scl	3;
	.type	0;
	.endef
	.globl	@feat.00
.set @feat.00, 1
	.intel_syntax noprefix
	.file	"lodepng.cpp"
	.def	 "?lodepng_load_file@@YAIPAPAEPAIPBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_load_file@@YAIPAPAEPAIPBD@Z" # -- Begin function ?lodepng_load_file@@YAIPAPAEPAIPBD@Z
	.p2align	4, 0x90
"?lodepng_load_file@@YAIPAPAEPAIPBD@Z": # @"?lodepng_load_file@@YAIPAPAEPAIPBD@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebp, dword ptr [esp + 28]
	push	offset "??_C@_02JDPG@rb?$AA@"
	push	ebp
	call	_fopen
	add	esp, 8
	mov	edi, 78
	test	eax, eax
	je	LBB0_8
# %bb.1:
	mov	ebx, eax
	push	2
	push	0
	push	eax
	call	_fseek
	add	esp, 12
	test	eax, eax
	je	LBB0_3
# %bb.2:
	push	ebx
	call	_fclose
	add	esp, 4
	jmp	LBB0_8
LBB0_3:
	push	ebx
	call	_ftell
	add	esp, 4
	mov	esi, eax
	push	ebx
	call	_fclose
	add	esp, 4
	cmp	esi, 2147483646
	ja	LBB0_8
# %bb.4:
	mov	eax, dword ptr [esp + 24]
	mov	edi, dword ptr [esp + 20]
	mov	dword ptr [eax], esi
	push	esi
	call	_malloc
	add	esp, 4
	mov	ebx, eax
	test	esi, esi
	mov	dword ptr [edi], eax
	je	LBB0_6
# %bb.5:
	mov	edi, 83
	test	ebx, ebx
	je	LBB0_8
LBB0_6:
	push	offset "??_C@_02JDPG@rb?$AA@"
	push	ebp
	call	_fopen
	add	esp, 8
	test	eax, eax
	mov	edi, 78
	je	LBB0_8
# %bb.7:
	mov	ebp, eax
	push	eax
	push	esi
	push	1
	push	ebx
	call	_fread
	add	esp, 16
	mov	edi, eax
	push	ebp
	call	_fclose
	add	esp, 4
	xor	eax, eax
	cmp	edi, esi
	mov	edi, 78
	cmove	edi, eax
LBB0_8:
	mov	eax, edi
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_save_file@@YAIPBEIPBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_save_file@@YAIPBEIPBD@Z" # -- Begin function ?lodepng_save_file@@YAIPBEIPBD@Z
	.p2align	4, 0x90
"?lodepng_save_file@@YAIPBEIPBD@Z":     # @"?lodepng_save_file@@YAIPBEIPBD@Z"
# %bb.0:
	push	esi
	push	offset "??_C@_02GMLFBBN@wb?$AA@"
	push	dword ptr [esp + 20]
	call	_fopen
	add	esp, 8
	test	eax, eax
	je	LBB1_1
# %bb.2:
	mov	esi, eax
	push	eax
	push	dword ptr [esp + 16]
	push	1
	push	dword ptr [esp + 20]
	call	_fwrite
	add	esp, 16
	push	esi
	call	_fclose
	add	esp, 4
	xor	eax, eax
	pop	esi
	ret
LBB1_1:
	mov	eax, 79
	pop	esi
	ret
                                        # -- End function
	.def	 "?lode_png_test_bitreader@@YAIPBEIIPBIPAI@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lode_png_test_bitreader@@YAIPBEIIPBIPAI@Z" # -- Begin function ?lode_png_test_bitreader@@YAIPBEIIPBIPAI@Z
	.p2align	4, 0x90
"?lode_png_test_bitreader@@YAIPBEIIPBIPAI@Z": # @"?lode_png_test_bitreader@@YAIPBEIIPBIPAI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [esp + 28]
	mov	ecx, 8
	mul	ecx
	mov	edx, eax
	seto	cl
	xor	eax, eax
	cmp	edx, -65
	mov	dword ptr [esp], edx            # 4-byte Spill
	ja	LBB2_40
# %bb.1:
	test	cl, cl
	jne	LBB2_40
# %bb.2:
	cmp	dword ptr [esp + 32], 0
	mov	eax, 1
	je	LBB2_40
# %bb.3:
	xor	ebp, ebp
	xor	eax, eax
	jmp	LBB2_4
	.p2align	4, 0x90
LBB2_38:                                #   in Loop: Header=BB2_4 Depth=1
	mov	ecx, eax
	lea	edx, [ebx + eax]
	and	cl, 7
	shr	edi, cl
	cmp	edx, dword ptr [esp]            # 4-byte Folded Reload
	ja	LBB2_39
LBB2_7:                                 #   in Loop: Header=BB2_4 Depth=1
	mov	edx, -1
	mov	ecx, ebx
	mov	esi, dword ptr [esp + 40]
	add	eax, ebx
	shl	edx, cl
	not	edx
	and	edx, edi
	mov	dword ptr [esi + 4*ebp], edx
	inc	ebp
	cmp	dword ptr [esp + 32], ebp
	je	LBB2_8
LBB2_4:                                 # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [esp + 36]
	mov	ebx, dword ptr [ecx + 4*ebp]
	cmp	ebx, 26
	jb	LBB2_17
# %bb.5:                                #   in Loop: Header=BB2_4 Depth=1
	mov	edx, eax
	shr	edx, 3
	lea	ecx, [edx + 4]
	cmp	ecx, dword ptr [esp + 28]
	jae	LBB2_9
# %bb.6:                                #   in Loop: Header=BB2_4 Depth=1
	mov	edi, dword ptr [esp + 24]
	mov	ecx, eax
	mov	ch, 8
	and	cl, 7
	sub	ch, cl
	mov	esi, dword ptr [edi + edx]
	movzx	edi, byte ptr [edi + edx + 4]
	shr	esi, cl
	shl	edi, 24
	mov	cl, ch
	shl	edi, cl
	or	edi, esi
	jmp	LBB2_7
	.p2align	4, 0x90
LBB2_17:                                #   in Loop: Header=BB2_4 Depth=1
	mov	ecx, eax
	shr	ecx, 3
	cmp	ebx, 18
	jb	LBB2_27
# %bb.18:                               #   in Loop: Header=BB2_4 Depth=1
	lea	edx, [ecx + 3]
	cmp	edx, dword ptr [esp + 28]
	jae	LBB2_21
# %bb.19:                               #   in Loop: Header=BB2_4 Depth=1
	mov	edx, dword ptr [esp + 24]
	mov	edi, dword ptr [edx + ecx]
	jmp	LBB2_20
	.p2align	4, 0x90
LBB2_9:                                 #   in Loop: Header=BB2_4 Depth=1
	xor	edi, edi
	cmp	edx, dword ptr [esp + 28]
	jb	LBB2_10
# %bb.11:                               #   in Loop: Header=BB2_4 Depth=1
	lea	ecx, [edx + 1]
	cmp	ecx, dword ptr [esp + 28]
	jb	LBB2_12
LBB2_13:                                #   in Loop: Header=BB2_4 Depth=1
	lea	ecx, [edx + 2]
	cmp	ecx, dword ptr [esp + 28]
	jb	LBB2_14
LBB2_15:                                #   in Loop: Header=BB2_4 Depth=1
	add	edx, 3
	cmp	edx, dword ptr [esp + 28]
	jae	LBB2_38
	jmp	LBB2_16
	.p2align	4, 0x90
LBB2_27:                                #   in Loop: Header=BB2_4 Depth=1
	cmp	ebx, 10
	jb	LBB2_34
# %bb.28:                               #   in Loop: Header=BB2_4 Depth=1
	lea	edx, [ecx + 2]
	cmp	edx, dword ptr [esp + 28]
	jae	LBB2_30
# %bb.29:                               #   in Loop: Header=BB2_4 Depth=1
	mov	esi, dword ptr [esp + 24]
	movzx	edi, byte ptr [esi + ecx + 2]
	movzx	edx, word ptr [esi + ecx]
	shl	edi, 16
	or	edi, edx
	jmp	LBB2_20
LBB2_21:                                #   in Loop: Header=BB2_4 Depth=1
	xor	edi, edi
	cmp	ecx, dword ptr [esp + 28]
	jb	LBB2_22
# %bb.23:                               #   in Loop: Header=BB2_4 Depth=1
	lea	esi, [ecx + 1]
	cmp	esi, dword ptr [esp + 28]
	jb	LBB2_24
LBB2_25:                                #   in Loop: Header=BB2_4 Depth=1
	add	ecx, 2
	cmp	ecx, dword ptr [esp + 28]
	jae	LBB2_38
	jmp	LBB2_26
LBB2_10:                                #   in Loop: Header=BB2_4 Depth=1
	mov	ecx, dword ptr [esp + 24]
	movzx	edi, byte ptr [ecx + edx]
	lea	ecx, [edx + 1]
	cmp	ecx, dword ptr [esp + 28]
	jae	LBB2_13
LBB2_12:                                #   in Loop: Header=BB2_4 Depth=1
	mov	esi, dword ptr [esp + 24]
	movzx	ecx, byte ptr [esi + ecx]
	shl	ecx, 8
	or	edi, ecx
	lea	ecx, [edx + 2]
	cmp	ecx, dword ptr [esp + 28]
	jae	LBB2_15
LBB2_14:                                #   in Loop: Header=BB2_4 Depth=1
	mov	esi, dword ptr [esp + 24]
	movzx	ecx, byte ptr [esi + ecx]
	shl	ecx, 16
	or	edi, ecx
	add	edx, 3
	cmp	edx, dword ptr [esp + 28]
	jae	LBB2_38
LBB2_16:                                #   in Loop: Header=BB2_4 Depth=1
	mov	ecx, dword ptr [esp + 24]
	movzx	ecx, byte ptr [ecx + edx]
	shl	ecx, 24
	or	edi, ecx
	jmp	LBB2_38
LBB2_34:                                #   in Loop: Header=BB2_4 Depth=1
	lea	edx, [ecx + 1]
	cmp	edx, dword ptr [esp + 28]
	jae	LBB2_36
# %bb.35:                               #   in Loop: Header=BB2_4 Depth=1
	mov	edx, dword ptr [esp + 24]
	movzx	edi, word ptr [edx + ecx]
LBB2_20:                                #   in Loop: Header=BB2_4 Depth=1
	mov	ecx, eax
	and	cl, 7
	shr	edi, cl
	jmp	LBB2_7
LBB2_30:                                #   in Loop: Header=BB2_4 Depth=1
	xor	edi, edi
	cmp	ecx, dword ptr [esp + 28]
	jae	LBB2_32
# %bb.31:                               #   in Loop: Header=BB2_4 Depth=1
	mov	edx, dword ptr [esp + 24]
	movzx	edi, byte ptr [edx + ecx]
LBB2_32:                                #   in Loop: Header=BB2_4 Depth=1
	inc	ecx
	cmp	ecx, dword ptr [esp + 28]
	jae	LBB2_38
# %bb.33:                               #   in Loop: Header=BB2_4 Depth=1
	mov	edx, dword ptr [esp + 24]
	movzx	ecx, byte ptr [edx + ecx]
	shl	ecx, 8
	or	edi, ecx
	jmp	LBB2_38
LBB2_22:                                #   in Loop: Header=BB2_4 Depth=1
	mov	edx, dword ptr [esp + 24]
	movzx	edi, byte ptr [edx + ecx]
	lea	esi, [ecx + 1]
	cmp	esi, dword ptr [esp + 28]
	jae	LBB2_25
LBB2_24:                                #   in Loop: Header=BB2_4 Depth=1
	mov	edx, dword ptr [esp + 24]
	movzx	edx, byte ptr [edx + esi]
	shl	edx, 8
	or	edi, edx
	add	ecx, 2
	cmp	ecx, dword ptr [esp + 28]
	jae	LBB2_38
LBB2_26:                                #   in Loop: Header=BB2_4 Depth=1
	mov	edx, dword ptr [esp + 24]
	movzx	ecx, byte ptr [edx + ecx]
	shl	ecx, 16
	or	edi, ecx
	jmp	LBB2_38
LBB2_36:                                #   in Loop: Header=BB2_4 Depth=1
	xor	edi, edi
	cmp	ecx, dword ptr [esp + 28]
	jae	LBB2_38
# %bb.37:                               #   in Loop: Header=BB2_4 Depth=1
	mov	edx, dword ptr [esp + 24]
	movzx	edi, byte ptr [edx + ecx]
	jmp	LBB2_38
LBB2_8:
	mov	eax, 1
	jmp	LBB2_40
LBB2_39:
	xor	eax, eax
LBB2_40:
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_huffman_code_lengths@@YAIPAIPBIII@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_huffman_code_lengths@@YAIPAIPBIII@Z" # -- Begin function ?lodepng_huffman_code_lengths@@YAIPAIPBIII@Z
	.p2align	4, 0x90
"?lodepng_huffman_code_lengths@@YAIPAIPBIII@Z": # @"?lodepng_huffman_code_lengths@@YAIPAIPBIII@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 92
	mov	esi, dword ptr [esp + 120]
	mov	ecx, dword ptr [esp + 124]
                                        # kill: def $cl killed $cl killed $ecx
	mov	edi, 80
	lea	eax, [esi - 1]
	shr	eax, cl
	test	eax, eax
	jne	LBB3_78
# %bb.1:
	mov	eax, esi
	shl	eax, 4
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB3_2
# %bb.3:
	mov	edx, dword ptr [esp + 112]
	mov	ebp, eax
	test	esi, esi
	je	LBB3_12
# %bb.4:
	mov	eax, dword ptr [esp + 116]
	xor	ecx, ecx
	mov	dword ptr [esp], 0              # 4-byte Folded Spill
	jmp	LBB3_5
	.p2align	4, 0x90
LBB3_7:                                 #   in Loop: Header=BB3_5 Depth=1
	inc	ecx
	cmp	esi, ecx
	je	LBB3_8
LBB3_5:                                 # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [eax + 4*ecx]
	test	edx, edx
	je	LBB3_7
# %bb.6:                                #   in Loop: Header=BB3_5 Depth=1
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	edi, ebx
	inc	ebx
	shl	edi, 4
	mov	dword ptr [esp], ebx            # 4-byte Spill
	mov	dword ptr [ebp + edi], edx
	mov	dword ptr [ebp + edi + 4], ecx
	jmp	LBB3_7
LBB3_8:
	shl	esi, 2
	test	esi, esi
	je	LBB3_10
# %bb.9:
	push	esi
	push	0
	push	dword ptr [esp + 120]
	call	_memset
	add	esp, 12
LBB3_10:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	edx, dword ptr [esp + 112]
	cmp	eax, 1
	je	LBB3_13
# %bb.11:
	test	eax, eax
	jne	LBB3_14
LBB3_12:
	mov	dword ptr [edx + 4], 1
	mov	dword ptr [edx], 1
	xor	edi, edi
	jmp	LBB3_77
LBB3_2:
	mov	edi, 83
	jmp	LBB3_78
LBB3_13:
	mov	eax, dword ptr [ebp + 4]
	xor	ecx, ecx
	test	eax, eax
	mov	dword ptr [edx + 4*eax], 1
	sete	cl
	xor	edi, edi
	mov	dword ptr [edx + 4*ecx], 1
	jmp	LBB3_77
LBB3_14:
	shl	eax, 4
	mov	esi, 1
	mov	bl, 1
	mov	dword ptr [esp + 52], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 68], eax       # 4-byte Spill
	push	eax
	call	_malloc
	add	esp, 4
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
	mov	dword ptr [esp + 48], ebp       # 4-byte Spill
	jmp	LBB3_15
	.p2align	4, 0x90
LBB3_25:                                #   in Loop: Header=BB3_15 Depth=1
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	mov	esi, ebp
	inc	eax
	test	al, 1
	mov	dword ptr [esp + 52], eax       # 4-byte Spill
	sete	bl
	cmp	ebp, edx
	mov	ebp, dword ptr [esp + 48]       # 4-byte Reload
	jae	LBB3_26
LBB3_15:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_16 Depth 2
                                        #       Child Loop BB3_18 Depth 3
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	test	bl, 1
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esp + 80], esi       # 4-byte Spill
	mov	dword ptr [esp + 60], 0         # 4-byte Folded Spill
	mov	ecx, eax
	cmovne	ecx, ebp
	cmovne	ebp, eax
	mov	dword ptr [esp + 64], ebp       # 4-byte Spill
	lea	ebp, [esi + esi]
	shl	esi, 5
	mov	dword ptr [esp + 72], esi       # 4-byte Spill
	mov	edi, ebp
	xor	esi, esi
	mov	dword ptr [esp + 76], ebp       # 4-byte Spill
	jmp	LBB3_16
	.p2align	4, 0x90
LBB3_24:                                #   in Loop: Header=BB3_16 Depth=2
	mov	ebp, dword ptr [esp + 76]       # 4-byte Reload
	mov	eax, dword ptr [esp + 72]       # 4-byte Reload
	mov	edi, dword ptr [esp + 88]       # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 84]       # 4-byte Reload
	add	dword ptr [esp + 64], eax       # 4-byte Folded Spill
	sub	dword ptr [esp + 60], ebp       # 4-byte Folded Spill
	add	edi, ebp
	cmp	esi, edx
	jae	LBB3_25
LBB3_16:                                #   Parent Loop BB3_15 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB3_18 Depth 3
	cmp	edx, edi
	mov	eax, edi
	mov	dword ptr [esp + 88], edi       # 4-byte Spill
	mov	edi, dword ptr [esp + 80]       # 4-byte Reload
	cmovb	eax, edx
	lea	ebx, [esi + edi]
	lea	edi, [esi + ebp]
	cmp	ebx, edx
	mov	ebp, edi
	mov	dword ptr [esp + 84], edi       # 4-byte Spill
	cmova	ebx, edx
	cmp	edi, edx
	cmova	ebp, edx
	cmp	esi, ebp
	mov	dword ptr [esp + 8], ebp        # 4-byte Spill
	jae	LBB3_24
# %bb.17:                               #   in Loop: Header=BB3_16 Depth=2
	mov	edi, ebx
	add	eax, dword ptr [esp + 60]       # 4-byte Folded Reload
	mov	ebx, dword ptr [esp + 64]       # 4-byte Reload
	mov	edx, edi
	mov	dword ptr [esp + 56], edi       # 4-byte Spill
	jmp	LBB3_18
	.p2align	4, 0x90
LBB3_22:                                #   in Loop: Header=BB3_18 Depth=3
	mov	ebp, edx
	inc	edx
LBB3_23:                                #   in Loop: Header=BB3_18 Depth=3
	shl	ebp, 4
	movsd	xmm0, qword ptr [ecx + ebp]     # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [ecx + ebp + 8] # xmm1 = mem[0],zero
	movsd	qword ptr [ebx + 8], xmm1
	movsd	qword ptr [ebx], xmm0
	add	ebx, 16
	dec	eax
	je	LBB3_24
LBB3_18:                                #   Parent Loop BB3_15 Depth=1
                                        #     Parent Loop BB3_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	esi, edi
	jae	LBB3_22
# %bb.19:                               #   in Loop: Header=BB3_18 Depth=3
	cmp	edx, dword ptr [esp + 8]        # 4-byte Folded Reload
	jae	LBB3_21
# %bb.20:                               #   in Loop: Header=BB3_18 Depth=3
	mov	ebp, esi
	mov	edi, edx
	shl	ebp, 4
	shl	edi, 4
	mov	ebp, dword ptr [ecx + ebp]
	mov	dword ptr [esp + 4], ebp        # 4-byte Spill
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	cmp	ebp, dword ptr [ecx + edi]
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	jg	LBB3_22
LBB3_21:                                #   in Loop: Header=BB3_18 Depth=3
	mov	ebp, esi
	inc	esi
	jmp	LBB3_23
LBB3_26:
	mov	eax, dword ptr [esp + 68]       # 4-byte Reload
	test	eax, eax
	je	LBB3_29
# %bb.27:
	and	dword ptr [esp + 52], 1         # 4-byte Folded Spill
	je	LBB3_29
# %bb.28:
	push	eax
	push	dword ptr [esp + 48]            # 4-byte Folded Reload
	push	ebp
	call	_memcpy
	add	esp, 12
LBB3_29:
	push	dword ptr [esp + 44]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	mov	ebx, dword ptr [esp + 124]
	lea	esi, [ebx + 1]
	mov	dword ptr [esp + 32], ebx
	imul	esi, ebx
	mov	eax, esi
	lea	edi, [esi + esi]
	shl	eax, 5
	mov	dword ptr [esp + 12], edi
	mov	dword ptr [esp + 24], 0
	mov	dword ptr [esp + 20], edi
	push	eax
	call	_malloc
	add	esp, 4
	shl	esi, 3
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	mov	dword ptr [esp + 16], eax
	push	esi
	call	_malloc
	add	esp, 4
	lea	esi, [4*ebx]
	mov	dword ptr [esp + 56], eax       # 4-byte Spill
	mov	dword ptr [esp + 28], eax
	push	esi
	call	_malloc
	add	esp, 4
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	dword ptr [esp + 36], eax
	push	esi
	mov	esi, dword ptr [esp + 60]       # 4-byte Reload
	call	_malloc
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	add	esp, 4
	movd	xmm1, dword ptr [esp + 4]       # 4-byte Folded Reload
                                        # xmm1 = mem[0],zero,zero,zero
	movd	xmm0, esi
	movd	xmm3, edx
	movd	xmm2, eax
	mov	dword ptr [esp + 40], eax
	xor	ecx, ecx
	punpckldq	xmm2, xmm3              # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	punpckldq	xmm0, xmm1              # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	punpcklqdq	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0]
	pxor	xmm0, xmm0
	pcmpeqd	xmm0, xmm2
	movmskps	eax, xmm0
	test	al, al
	mov	eax, 83
	cmove	eax, ecx
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	jne	LBB3_76
# %bb.30:
	test	edi, edi
	je	LBB3_79
# %bb.31:
	mov	eax, 1
	mov	ecx, 16
	mov	dword ptr [esi], edx
	.p2align	4, 0x90
LBB3_32:                                # =>This Inner Loop Header: Depth=1
	mov	esi, dword ptr [esp + 16]
	mov	edx, dword ptr [esp + 28]
	add	esi, ecx
	add	ecx, 16
	mov	dword ptr [edx + 4*eax], esi
	inc	eax
	cmp	edi, eax
	jne	LBB3_32
# %bb.33:
	mov	eax, dword ptr [ebp]
	test	edi, edi
	mov	edx, edi
	jne	LBB3_44
	jmp	LBB3_34
LBB3_79:
	mov	eax, dword ptr [ebp]
LBB3_34:
	test	ebx, ebx
	je	LBB3_43
# %bb.35:
	mov	ecx, dword ptr [esp + 36]
	mov	edx, dword ptr [esp + 40]
	xor	esi, esi
	mov	ebx, dword ptr [ecx + 4*esi]
	test	ebx, ebx
	jne	LBB3_37
	jmp	LBB3_39
	.p2align	4, 0x90
LBB3_42:                                #   in Loop: Header=BB3_39 Depth=1
	mov	ebx, dword ptr [esp + 124]
	inc	esi
	cmp	esi, ebx
	je	LBB3_43
# %bb.36:                               #   in Loop: Header=BB3_39 Depth=1
	mov	ebx, dword ptr [ecx + 4*esi]
	test	ebx, ebx
	je	LBB3_39
	.p2align	4, 0x90
LBB3_37:                                # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebx + 12], 1
	mov	ebx, dword ptr [ebx + 8]
	test	ebx, ebx
	jne	LBB3_37
LBB3_39:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_40 Depth 2
	mov	ebx, dword ptr [edx + 4*esi]
	test	ebx, ebx
	je	LBB3_42
	.p2align	4, 0x90
LBB3_40:                                #   Parent Loop BB3_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	dword ptr [ebx + 12], 1
	mov	ebx, dword ptr [ebx + 8]
	test	ebx, ebx
	jne	LBB3_40
	jmp	LBB3_42
LBB3_43:
	xor	edx, edx
	mov	dword ptr [esp + 20], 0
	mov	dword ptr [esp + 24], 0
LBB3_44:
	mov	ecx, dword ptr [esp + 28]
	mov	dword ptr [esp + 24], 1
	cmp	edx, 1
	mov	esi, dword ptr [ecx]
	mov	dword ptr [esi], eax
	mov	dword ptr [esi + 4], 1
	mov	dword ptr [esi + 8], 0
	mov	esi, 1
	mov	eax, dword ptr [ebp + 16]
	ja	LBB3_64
# %bb.45:
	test	edi, edi
	je	LBB3_48
# %bb.46:
	mov	edx, dword ptr [esp + 16]
	mov	esi, edi
	add	edx, 12
	.p2align	4, 0x90
LBB3_47:                                # =>This Inner Loop Header: Depth=1
	mov	dword ptr [edx], 0
	add	edx, 16
	dec	esi
	jne	LBB3_47
LBB3_48:
	test	ebx, ebx
	je	LBB3_57
# %bb.49:
	mov	edx, dword ptr [esp + 36]
	mov	esi, dword ptr [esp + 40]
	xor	ebx, ebx
	mov	ebp, dword ptr [edx + 4*ebx]
	test	ebp, ebp
	jne	LBB3_51
	jmp	LBB3_53
	.p2align	4, 0x90
LBB3_56:                                #   in Loop: Header=BB3_53 Depth=1
	inc	ebx
	cmp	ebx, dword ptr [esp + 124]
	je	LBB3_57
# %bb.50:                               #   in Loop: Header=BB3_53 Depth=1
	mov	ebp, dword ptr [edx + 4*ebx]
	test	ebp, ebp
	je	LBB3_53
	.p2align	4, 0x90
LBB3_51:                                # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp + 12], 1
	mov	ebp, dword ptr [ebp + 8]
	test	ebp, ebp
	jne	LBB3_51
LBB3_53:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_54 Depth 2
	mov	ebp, dword ptr [esi + 4*ebx]
	test	ebp, ebp
	je	LBB3_56
	.p2align	4, 0x90
LBB3_54:                                #   Parent Loop BB3_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	dword ptr [ebp + 12], 1
	mov	ebp, dword ptr [ebp + 8]
	test	ebp, ebp
	jne	LBB3_54
	jmp	LBB3_56
LBB3_57:
	mov	ebp, dword ptr [esp + 48]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 124]
	test	edi, edi
	mov	dword ptr [esp + 20], 0
	je	LBB3_63
# %bb.58:
	xor	ecx, ecx
	xor	edx, edx
	jmp	LBB3_59
	.p2align	4, 0x90
LBB3_61:                                #   in Loop: Header=BB3_59 Depth=1
	add	ecx, 16
	dec	edi
	je	LBB3_62
LBB3_59:                                # =>This Inner Loop Header: Depth=1
	mov	esi, dword ptr [esp + 16]
	cmp	dword ptr [esi + ecx + 12], 0
	jne	LBB3_61
# %bb.60:                               #   in Loop: Header=BB3_59 Depth=1
	mov	ebx, dword ptr [esp + 28]
	lea	ebp, [edx + 1]
	add	esi, ecx
	mov	dword ptr [esp + 20], ebp
	mov	dword ptr [ebx + 4*edx], esi
	mov	edx, ebp
	mov	ebx, dword ptr [esp + 124]
	mov	ebp, dword ptr [esp + 48]       # 4-byte Reload
	jmp	LBB3_61
LBB3_62:
	mov	ecx, dword ptr [esp + 28]
LBB3_63:
	xor	esi, esi
	mov	dword ptr [esp + 24], 0
LBB3_64:
	lea	edx, [esi + 1]
	test	ebx, ebx
	mov	dword ptr [esp + 24], edx
	mov	ecx, dword ptr [ecx + 4*esi]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], 2
	mov	dword ptr [ecx + 8], 0
	je	LBB3_67
# %bb.65:
	xor	eax, eax
	.p2align	4, 0x90
LBB3_66:                                # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [esp + 16]
	mov	edx, dword ptr [esp + 36]
	mov	dword ptr [edx + 4*eax], ecx
	mov	ecx, dword ptr [esp + 16]
	mov	edx, dword ptr [esp + 40]
	add	ecx, 16
	mov	dword ptr [edx + 4*eax], ecx
	inc	eax
	cmp	ebx, eax
	jne	LBB3_66
LBB3_67:
	mov	esi, dword ptr [esp]            # 4-byte Reload
	lea	eax, [esi + esi]
	cmp	eax, 4
	je	LBB3_70
# %bb.68:
	mov	ecx, dword ptr [esp + 124]
	mov	edi, 4
	mov	ebx, 2
	sub	edi, eax
	dec	ecx
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	.p2align	4, 0x90
LBB3_69:                                # =>This Inner Loop Header: Depth=1
	lea	ecx, [esp + 12]
	mov	edx, ebp
	push	ebx
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	esi
	call	"?boundaryPM@@YAXPAUBPMLists@@PAUBPMNode@@IHH@Z"
	add	esp, 12
	lea	eax, [edi + ebx + 1]
	inc	ebx
	cmp	eax, 2
	jne	LBB3_69
LBB3_70:
	mov	eax, dword ptr [esp + 40]
	mov	ecx, dword ptr [esp + 124]
	mov	ebx, dword ptr [esp + 112]
	mov	eax, dword ptr [eax + 4*ecx - 4]
	test	eax, eax
	je	LBB3_76
# %bb.71:
	mov	ecx, ebp
	add	ecx, 4
	jmp	LBB3_72
	.p2align	4, 0x90
LBB3_75:                                #   in Loop: Header=BB3_72 Depth=1
	mov	eax, dword ptr [eax + 8]
	test	eax, eax
	je	LBB3_76
LBB3_72:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_74 Depth 2
	cmp	dword ptr [eax + 4], 0
	je	LBB3_75
# %bb.73:                               #   in Loop: Header=BB3_72 Depth=1
	xor	edx, edx
	mov	esi, ecx
	.p2align	4, 0x90
LBB3_74:                                #   Parent Loop BB3_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edi, dword ptr [esi]
	inc	edx
	add	esi, 16
	inc	dword ptr [ebx + 4*edi]
	cmp	edx, dword ptr [eax + 4]
	jne	LBB3_74
	jmp	LBB3_75
LBB3_76:
	push	dword ptr [esp + 16]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 28]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 36]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 40]
	call	_free
	add	esp, 4
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
LBB3_77:
	push	ebp
	call	_free
	add	esp, 4
LBB3_78:
	mov	eax, edi
	add	esp, 92
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?boundaryPM@@YAXPAUBPMLists@@PAUBPMNode@@IHH@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?boundaryPM@@YAXPAUBPMLists@@PAUBPMNode@@IHH@Z
"?boundaryPM@@YAXPAUBPMLists@@PAUBPMNode@@IHH@Z": # @"?boundaryPM@@YAXPAUBPMLists@@PAUBPMNode@@IHH@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 28
	mov	ebp, dword ptr [esp + 52]
	mov	eax, dword ptr [ecx + 28]
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	esi, ecx
	mov	ebx, dword ptr [esp + 48]
	mov	edx, dword ptr [eax + 4*ebp]
	test	ebp, ebp
	mov	ecx, dword ptr [edx + 4]
	je	LBB4_11
# %bb.1:
	mov	edi, dword ptr [esp + 56]
	inc	edi
	mov	dword ptr [esp + 24], edi       # 4-byte Spill
	lea	edi, [ebx + ebx - 2]
	mov	dword ptr [esp + 20], edi       # 4-byte Spill
	.p2align	4, 0x90
LBB4_2:                                 # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_50 Depth 2
                                        #     Child Loop BB4_56 Depth 2
                                        #       Child Loop BB4_57 Depth 3
                                        #     Child Loop BB4_54 Depth 2
                                        #     Child Loop BB4_62 Depth 2
	mov	eax, dword ptr [eax + 4*ebp - 4]
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	ecx, dword ptr [esi + 24]
	mov	edi, dword ptr [ecx + 4*ebp - 4]
	mov	eax, dword ptr [eax]
	add	eax, dword ptr [edi]
	mov	dword ptr [ecx + 4*ebp], edx
	mov	edi, eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	cmp	eax, ebx
	jae	LBB4_47
# %bb.3:                                #   in Loop: Header=BB4_2 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	shl	eax, 4
	mov	edx, dword ptr [ecx + eax]
	cmp	edi, edx
	jg	LBB4_4
LBB4_47:                                #   in Loop: Header=BB4_2 Depth=1
	mov	dword ptr [esp], edi            # 4-byte Spill
	mov	eax, dword ptr [esi + 12]
	mov	edi, dword ptr [esi + 28]
	mov	ecx, dword ptr [edi + 4*ebp - 4]
	cmp	eax, dword ptr [esi + 8]
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	jb	LBB4_67
# %bb.48:                               #   in Loop: Header=BB4_2 Depth=1
	mov	dword ptr [esp + 12], ebp       # 4-byte Spill
	mov	ebp, dword ptr [esi]
	test	ebp, ebp
	je	LBB4_51
# %bb.49:                               #   in Loop: Header=BB4_2 Depth=1
	mov	eax, dword ptr [esi + 4]
	mov	ecx, ebp
	add	eax, 12
	.p2align	4, 0x90
LBB4_50:                                #   Parent Loop BB4_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	dword ptr [eax], 0
	add	eax, 16
	dec	ecx
	jne	LBB4_50
LBB4_51:                                #   in Loop: Header=BB4_2 Depth=1
	mov	edx, dword ptr [esi + 20]
	test	edx, edx
	je	LBB4_60
# %bb.52:                               #   in Loop: Header=BB4_2 Depth=1
	mov	eax, dword ptr [esi + 24]
	xor	ecx, ecx
	mov	ebx, dword ptr [eax + 4*ecx]
	test	ebx, ebx
	jne	LBB4_54
	jmp	LBB4_56
	.p2align	4, 0x90
LBB4_59:                                #   in Loop: Header=BB4_56 Depth=2
	inc	ecx
	cmp	ecx, edx
	je	LBB4_60
# %bb.53:                               #   in Loop: Header=BB4_56 Depth=2
	mov	ebx, dword ptr [eax + 4*ecx]
	test	ebx, ebx
	je	LBB4_56
	.p2align	4, 0x90
LBB4_54:                                #   Parent Loop BB4_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	dword ptr [ebx + 12], 1
	mov	ebx, dword ptr [ebx + 8]
	test	ebx, ebx
	jne	LBB4_54
LBB4_56:                                #   Parent Loop BB4_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_57 Depth 3
	mov	ebx, dword ptr [edi + 4*ecx]
	test	ebx, ebx
	je	LBB4_59
	.p2align	4, 0x90
LBB4_57:                                #   Parent Loop BB4_2 Depth=1
                                        #     Parent Loop BB4_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	dword ptr [ebx + 12], 1
	mov	ebx, dword ptr [ebx + 8]
	test	ebx, ebx
	jne	LBB4_57
	jmp	LBB4_59
	.p2align	4, 0x90
LBB4_60:                                #   in Loop: Header=BB4_2 Depth=1
	test	ebp, ebp
	mov	dword ptr [esi + 8], 0
	je	LBB4_66
# %bb.61:                               #   in Loop: Header=BB4_2 Depth=1
	xor	eax, eax
	xor	ecx, ecx
	jmp	LBB4_62
	.p2align	4, 0x90
LBB4_64:                                #   in Loop: Header=BB4_62 Depth=2
	add	eax, 16
	dec	ebp
	je	LBB4_65
LBB4_62:                                #   Parent Loop BB4_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edx, dword ptr [esi + 4]
	cmp	dword ptr [edx + eax + 12], 0
	jne	LBB4_64
# %bb.63:                               #   in Loop: Header=BB4_62 Depth=2
	mov	edi, dword ptr [esi + 16]
	lea	ebx, [ecx + 1]
	add	edx, eax
	mov	dword ptr [esi + 8], ebx
	mov	dword ptr [edi + 4*ecx], edx
	mov	ecx, ebx
	jmp	LBB4_64
	.p2align	4, 0x90
LBB4_65:                                #   in Loop: Header=BB4_2 Depth=1
	mov	edi, dword ptr [esi + 28]
LBB4_66:                                #   in Loop: Header=BB4_2 Depth=1
	mov	ebp, dword ptr [esp + 12]       # 4-byte Reload
	xor	eax, eax
	mov	dword ptr [esi + 12], 0
LBB4_67:                                #   in Loop: Header=BB4_2 Depth=1
	mov	edx, dword ptr [esi + 16]
	lea	ecx, [eax + 1]
	mov	dword ptr [esi + 12], ecx
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [edx + 4*eax]
	mov	dword ptr [eax], ecx
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [eax + 4], ecx
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [eax + 8], ecx
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [edi + 4*ebp], eax
	cmp	dword ptr [esp + 24], ecx       # 4-byte Folded Reload
	jge	LBB4_46
# %bb.68:                               #   in Loop: Header=BB4_2 Depth=1
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, esi
	lea	edi, [ebp - 1]
	push	dword ptr [esp + 56]
	push	edi
	mov	ebx, dword ptr [esp + 56]
	push	ebx
	call	"?boundaryPM@@YAXPAUBPMLists@@PAUBPMNode@@IHH@Z"
	add	esp, 12
	mov	eax, dword ptr [esi + 28]
	test	edi, edi
	mov	edx, dword ptr [eax + 4*ebp - 4]
	mov	ebp, edi
	mov	ecx, dword ptr [edx + 4]
	jne	LBB4_2
LBB4_11:
	cmp	ecx, ebx
	jae	LBB4_46
# %bb.12:
	mov	eax, dword ptr [esi + 24]
	lea	edi, [ecx + 1]
	shl	ecx, 4
	mov	dword ptr [eax], edx
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebx, dword ptr [eax + ecx]
	mov	eax, dword ptr [esi + 12]
	cmp	eax, dword ptr [esi + 8]
	jb	LBB4_31
# %bb.13:
	mov	edx, dword ptr [esi]
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	mov	dword ptr [esp], edi            # 4-byte Spill
	test	edx, edx
	je	LBB4_16
# %bb.14:
	mov	ecx, dword ptr [esi + 4]
	mov	edi, edx
	add	ecx, 12
	.p2align	4, 0x90
LBB4_15:                                # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ecx], 0
	add	ecx, 16
	dec	edi
	jne	LBB4_15
LBB4_16:
	mov	edi, dword ptr [esi + 20]
	test	edi, edi
	je	LBB4_25
# %bb.17:
	mov	ebx, dword ptr [esi + 24]
	mov	ebp, dword ptr [esi + 28]
	xor	ecx, ecx
	mov	eax, dword ptr [ebx + 4*ecx]
	test	eax, eax
	jne	LBB4_19
	jmp	LBB4_21
	.p2align	4, 0x90
LBB4_24:                                #   in Loop: Header=BB4_21 Depth=1
	inc	ecx
	cmp	ecx, edi
	je	LBB4_25
# %bb.18:                               #   in Loop: Header=BB4_21 Depth=1
	mov	eax, dword ptr [ebx + 4*ecx]
	test	eax, eax
	je	LBB4_21
	.p2align	4, 0x90
LBB4_19:                                # =>This Inner Loop Header: Depth=1
	mov	dword ptr [eax + 12], 1
	mov	eax, dword ptr [eax + 8]
	test	eax, eax
	jne	LBB4_19
LBB4_21:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_22 Depth 2
	mov	eax, dword ptr [ebp + 4*ecx]
	test	eax, eax
	je	LBB4_24
	.p2align	4, 0x90
LBB4_22:                                #   Parent Loop BB4_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	dword ptr [eax + 12], 1
	mov	eax, dword ptr [eax + 8]
	test	eax, eax
	jne	LBB4_22
	jmp	LBB4_24
LBB4_25:
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	test	edx, edx
	mov	dword ptr [esi + 8], 0
	je	LBB4_30
# %bb.26:
	xor	ecx, ecx
	xor	edi, edi
	jmp	LBB4_27
	.p2align	4, 0x90
LBB4_29:                                #   in Loop: Header=BB4_27 Depth=1
	add	ecx, 16
	dec	edx
	je	LBB4_30
LBB4_27:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + ecx + 12], 0
	jne	LBB4_29
# %bb.28:                               #   in Loop: Header=BB4_27 Depth=1
	mov	ebx, dword ptr [esi + 16]
	lea	ebp, [edi + 1]
	add	eax, ecx
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [ebx + 4*edi], eax
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edi, ebp
	jmp	LBB4_29
LBB4_30:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	xor	eax, eax
	mov	dword ptr [esi + 12], 0
LBB4_31:
	mov	ecx, dword ptr [esi + 16]
	lea	edx, [eax + 1]
	mov	dword ptr [esi + 12], edx
	mov	eax, dword ptr [ecx + 4*eax]
	mov	dword ptr [eax], ebx
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], 0
	mov	ecx, dword ptr [esi + 28]
	mov	dword ptr [ecx], eax
	jmp	LBB4_46
LBB4_4:
	mov	ecx, dword ptr [esi + 28]
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, dword ptr [esi + 12]
	mov	dword ptr [esp], ecx            # 4-byte Spill
	mov	ecx, dword ptr [ecx + 4*ebp]
	inc	ebx
	cmp	eax, dword ptr [esi + 8]
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	mov	edi, dword ptr [ecx + 8]
	mov	dword ptr [esp + 8], edi        # 4-byte Spill
	jb	LBB4_45
# %bb.5:
	mov	edi, dword ptr [esi]
	mov	dword ptr [esp + 12], ebp       # 4-byte Spill
	test	edi, edi
	je	LBB4_8
# %bb.6:
	mov	eax, dword ptr [esi + 4]
	mov	ecx, edi
	add	eax, 12
	.p2align	4, 0x90
LBB4_7:                                 # =>This Inner Loop Header: Depth=1
	mov	dword ptr [eax], 0
	add	eax, 16
	dec	ecx
	jne	LBB4_7
LBB4_8:
	mov	eax, dword ptr [esi + 20]
	test	eax, eax
	je	LBB4_38
# %bb.9:
	mov	ebp, dword ptr [esi + 24]
	mov	ebx, eax
	xor	eax, eax
	mov	ecx, dword ptr [ebp + 4*eax]
	test	ecx, ecx
	jne	LBB4_32
	jmp	LBB4_34
	.p2align	4, 0x90
LBB4_37:                                #   in Loop: Header=BB4_34 Depth=1
	inc	eax
	cmp	eax, ebx
	je	LBB4_38
# %bb.10:                               #   in Loop: Header=BB4_34 Depth=1
	mov	ecx, dword ptr [ebp + 4*eax]
	test	ecx, ecx
	je	LBB4_34
	.p2align	4, 0x90
LBB4_32:                                # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ecx + 12], 1
	mov	ecx, dword ptr [ecx + 8]
	test	ecx, ecx
	jne	LBB4_32
LBB4_34:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_35 Depth 2
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [ecx + 4*eax]
	test	ecx, ecx
	je	LBB4_37
	.p2align	4, 0x90
LBB4_35:                                #   Parent Loop BB4_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	dword ptr [ecx + 12], 1
	mov	ecx, dword ptr [ecx + 8]
	test	ecx, ecx
	jne	LBB4_35
	jmp	LBB4_37
LBB4_38:
	mov	ebp, dword ptr [esp + 12]       # 4-byte Reload
	test	edi, edi
	mov	dword ptr [esi + 8], 0
	je	LBB4_44
# %bb.39:
	xor	eax, eax
	xor	ecx, ecx
	jmp	LBB4_40
	.p2align	4, 0x90
LBB4_42:                                #   in Loop: Header=BB4_40 Depth=1
	add	eax, 16
	dec	edi
	je	LBB4_43
LBB4_40:                                # =>This Inner Loop Header: Depth=1
	mov	ebx, dword ptr [esi + 4]
	cmp	dword ptr [ebx + eax + 12], 0
	jne	LBB4_42
# %bb.41:                               #   in Loop: Header=BB4_40 Depth=1
	mov	ebp, dword ptr [esi + 16]
	add	ebx, eax
	mov	dword ptr [esp], ebp            # 4-byte Spill
	mov	ebp, ecx
	inc	ecx
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	dword ptr [esi + 8], ecx
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [ecx + 4*ebp], ebx
	mov	ebp, dword ptr [esp + 12]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	jmp	LBB4_42
LBB4_43:
	mov	eax, dword ptr [esi + 28]
	mov	dword ptr [esp], eax            # 4-byte Spill
LBB4_44:
	xor	eax, eax
	mov	dword ptr [esi + 12], 0
LBB4_45:
	mov	ecx, dword ptr [esi + 16]
	lea	edi, [eax + 1]
	mov	dword ptr [esi + 12], edi
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	mov	eax, dword ptr [ecx + 4*eax]
	mov	dword ptr [eax], edx
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [eax + 4], edx
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [edx + 4*ebp], eax
LBB4_46:
	add	esp, 28
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z" # -- Begin function ?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z
	.p2align	4, 0x90
"?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z": # @"?lodepng_inflate@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	edi, dword ptr [esp + 32]
	mov	ebx, dword ptr [esp + 36]
	mov	esi, dword ptr [esp + 48]
	mov	edx, dword ptr [esp + 40]
	mov	eax, dword ptr [esp + 44]
	mov	ecx, dword ptr [ebx]
	mov	ebp, dword ptr [edi]
	mov	dword ptr [esp], ebp
	mov	dword ptr [esp + 4], ecx
	mov	dword ptr [esp + 8], ecx
	mov	ecx, esp
	push	esi
	push	eax
	call	"?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
	add	esp, 8
	mov	ecx, dword ptr [esp]
	mov	dword ptr [edi], ecx
	mov	ecx, dword ptr [esp + 4]
	mov	dword ptr [ebx], ecx
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z
"?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z": # @"?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 148
	mov	ebp, dword ptr [esp + 168]
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	mov	ecx, 8
	mov	edi, edx
	mov	eax, ebp
	mul	ecx
	seto	cl
	mov	dword ptr [esp + 40], eax       # 4-byte Spill
	cmp	eax, -65
	mov	eax, 105
	ja	LBB6_183
# %bb.1:
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	test	cl, cl
	jne	LBB6_183
# %bb.2:
	xor	ebx, ebx
	mov	dword ptr [esp + 4], edi        # 4-byte Spill
	jmp	LBB6_4
	.p2align	4, 0x90
LBB6_3:                                 #   in Loop: Header=BB6_4 Depth=1
	test	byte ptr [esp + 144], 1         # 1-byte Folded Reload
	jne	LBB6_176
LBB6_4:                                 # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_95 Depth 2
                                        #     Child Loop BB6_101 Depth 2
                                        #     Child Loop BB6_121 Depth 2
                                        #       Child Loop BB6_139 Depth 3
                                        #       Child Loop BB6_145 Depth 3
                                        #       Child Loop BB6_142 Depth 3
                                        #     Child Loop BB6_32 Depth 2
                                        #       Child Loop BB6_78 Depth 3
	mov	eax, ebx
	shr	eax, 3
	lea	ecx, [eax + 1]
	cmp	ecx, ebp
	jae	LBB6_6
# %bb.5:                                #   in Loop: Header=BB6_4 Depth=1
	movzx	esi, word ptr [edi + eax]
	mov	ecx, ebx
	mov	ebp, edi
	mov	edi, ebx
	add	ebx, 3
	and	cl, 7
	shr	esi, cl
	jmp	LBB6_9
	.p2align	4, 0x90
LBB6_6:                                 #   in Loop: Header=BB6_4 Depth=1
	xor	esi, esi
	cmp	eax, ebp
	jae	LBB6_8
# %bb.7:                                #   in Loop: Header=BB6_4 Depth=1
	movzx	esi, byte ptr [edi + eax]
LBB6_8:                                 #   in Loop: Header=BB6_4 Depth=1
	mov	ecx, ebx
	mov	ebp, edi
	mov	edi, ebx
	add	ebx, 3
	and	cl, 7
	shr	esi, cl
	cmp	ebx, dword ptr [esp + 40]       # 4-byte Folded Reload
	ja	LBB6_179
LBB6_9:                                 #   in Loop: Header=BB6_4 Depth=1
	mov	eax, esi
	mov	dword ptr [esp + 144], esi      # 4-byte Spill
	shr	eax
	and	eax, 3
	je	LBB6_14
# %bb.10:                               #   in Loop: Header=BB6_4 Depth=1
	cmp	eax, 3
	je	LBB6_175
# %bb.11:                               #   in Loop: Header=BB6_4 Depth=1
	mov	ecx, dword ptr [esp + 172]
	cmp	eax, 1
	mov	ecx, dword ptr [ecx + 8]
	mov	dword ptr [esp + 88], 0
	mov	dword ptr [esp + 92], 0
	mov	dword ptr [esp + 104], 0
	mov	dword ptr [esp + 64], 0
	mov	dword ptr [esp + 68], 0
	mov	dword ptr [esp + 80], 0
	mov	dword ptr [esp + 108], 0
	mov	dword ptr [esp + 84], 0
	mov	dword ptr [esp + 48], ecx       # 4-byte Spill
	jne	LBB6_24
# %bb.12:                               #   in Loop: Header=BB6_4 Depth=1
	lea	ecx, [esp + 88]
	call	"?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z"
	test	eax, eax
	je	LBB6_30
# %bb.13:                               #   in Loop: Header=BB6_4 Depth=1
	mov	ebp, dword ptr [esp + 168]
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	dword ptr [esp + 12], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	jmp	LBB6_157
	.p2align	4, 0x90
LBB6_14:                                #   in Loop: Header=BB6_4 Depth=1
	add	edi, 10
	shr	edi, 3
	lea	esi, [edi + 4]
	cmp	esi, dword ptr [esp + 168]
	jae	LBB6_179
# %bb.15:                               #   in Loop: Header=BB6_4 Depth=1
	mov	eax, dword ptr [esp + 172]
	movzx	ecx, word ptr [ebp + edi]
	cmp	dword ptr [eax + 4], 0
	jne	LBB6_17
# %bb.16:                               #   in Loop: Header=BB6_4 Depth=1
	movzx	eax, word ptr [edi + ebp + 2]
	add	eax, ecx
	cmp	eax, 65535
	jne	LBB6_182
LBB6_17:                                #   in Loop: Header=BB6_4 Depth=1
	mov	eax, dword ptr [edx + 4]
	mov	ebx, dword ptr [edx + 8]
	lea	ebp, [eax + ecx]
	cmp	ebx, ebp
	jae	LBB6_20
# %bb.18:                               #   in Loop: Header=BB6_4 Depth=1
	shr	ebx
	mov	dword ptr [esp + 48], eax       # 4-byte Spill
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	add	ebx, ebp
	push	ebx
	push	dword ptr [edx]
	mov	edi, edx
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB6_181
# %bb.19:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [edi + 8], ebx
	mov	dword ptr [edi], eax
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	eax, dword ptr [esp + 48]       # 4-byte Reload
	mov	edx, edi
LBB6_20:                                #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [edx + 4], ebp
	mov	ebp, dword ptr [esp + 168]
	lea	ebx, [ecx + esi]
	cmp	ebx, ebp
	ja	LBB6_180
# %bb.21:                               #   in Loop: Header=BB6_4 Depth=1
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	test	ecx, ecx
	je	LBB6_23
# %bb.22:                               #   in Loop: Header=BB6_4 Depth=1
	add	eax, dword ptr [edx]
	add	esi, edi
	push	ecx
	push	esi
	push	eax
	call	_memcpy
	mov	edx, dword ptr [esp + 40]       # 4-byte Reload
	add	esp, 12
LBB6_23:                                #   in Loop: Header=BB6_4 Depth=1
	shl	ebx, 3
	jmp	LBB6_159
	.p2align	4, 0x90
LBB6_24:                                #   in Loop: Header=BB6_4 Depth=1
	mov	edx, dword ptr [esp + 168]
	mov	eax, ebx
	shr	eax, 3
	lea	ecx, [eax + 2]
	cmp	ecx, edx
	jae	LBB6_26
# %bb.25:                               #   in Loop: Header=BB6_4 Depth=1
	movzx	ecx, word ptr [ebp + eax]
	movzx	eax, byte ptr [ebp + eax + 2]
	and	bl, 7
	add	edi, 17
	shl	eax, 16
	or	eax, ecx
	mov	ecx, ebx
	mov	ebx, edi
	mov	edi, ebp
	mov	ebp, edx
	shr	eax, cl
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	jmp	LBB6_89
LBB6_26:                                #   in Loop: Header=BB6_4 Depth=1
	xor	ecx, ecx
	cmp	eax, edx
	jae	LBB6_28
# %bb.27:                               #   in Loop: Header=BB6_4 Depth=1
	movzx	ecx, byte ptr [ebp + eax]
LBB6_28:                                #   in Loop: Header=BB6_4 Depth=1
	inc	eax
	cmp	eax, dword ptr [esp + 168]
	jae	LBB6_87
# %bb.29:                               #   in Loop: Header=BB6_4 Depth=1
	movzx	eax, byte ptr [ebp + eax]
	mov	edx, ecx
	shl	eax, 8
	or	edx, eax
	jmp	LBB6_88
LBB6_30:                                #   in Loop: Header=BB6_4 Depth=1
	lea	ecx, [esp + 64]
	call	"?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z"
	mov	edi, ebp
	mov	ebp, dword ptr [esp + 168]
	test	eax, eax
	jne	LBB6_156
LBB6_31:                                #   in Loop: Header=BB6_4 Depth=1
	mov	esi, dword ptr [esp + 104]
	mov	eax, dword ptr [esp + 108]
	mov	edx, dword ptr [esp + 80]
	mov	ecx, dword ptr [esp + 84]
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	mov	dword ptr [esp + 20], esi       # 4-byte Spill
	.p2align	4, 0x90
LBB6_32:                                #   Parent Loop BB6_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_78 Depth 3
	mov	ecx, ebx
	shr	ecx, 3
	lea	eax, [ecx + 3]
	cmp	eax, ebp
	jae	LBB6_34
# %bb.33:                               #   in Loop: Header=BB6_32 Depth=2
	movzx	edx, byte ptr [edi + ecx + 2]
	movzx	eax, word ptr [edi + ecx]
	shl	edx, 16
	or	edx, eax
	movzx	eax, byte ptr [edi + ecx + 3]
	shl	eax, 24
	jmp	LBB6_40
	.p2align	4, 0x90
LBB6_34:                                #   in Loop: Header=BB6_32 Depth=2
	xor	eax, eax
	cmp	ecx, ebp
	jae	LBB6_35
# %bb.37:                               #   in Loop: Header=BB6_32 Depth=2
	movzx	eax, byte ptr [edi + ecx]
	lea	edx, [ecx + 1]
	cmp	edx, ebp
	jb	LBB6_38
LBB6_36:                                #   in Loop: Header=BB6_32 Depth=2
	add	ecx, 2
	mov	ebp, dword ptr [esp + 24]       # 4-byte Reload
	cmp	ecx, dword ptr [esp + 168]
	jb	LBB6_39
	jmp	LBB6_41
	.p2align	4, 0x90
LBB6_35:                                #   in Loop: Header=BB6_32 Depth=2
	lea	edx, [ecx + 1]
	cmp	edx, ebp
	jae	LBB6_36
LBB6_38:                                #   in Loop: Header=BB6_32 Depth=2
	movzx	edx, byte ptr [edi + edx]
	shl	edx, 8
	or	eax, edx
	add	ecx, 2
	mov	ebp, dword ptr [esp + 24]       # 4-byte Reload
	cmp	ecx, dword ptr [esp + 168]
	jae	LBB6_41
LBB6_39:                                #   in Loop: Header=BB6_32 Depth=2
	movzx	edx, byte ptr [edi + ecx]
	shl	edx, 16
LBB6_40:                                #   in Loop: Header=BB6_32 Depth=2
	mov	ebp, dword ptr [esp + 24]       # 4-byte Reload
	or	eax, edx
LBB6_41:                                #   in Loop: Header=BB6_32 Depth=2
	mov	ecx, ebx
	mov	dword ptr [esp + 8], ebx        # 4-byte Spill
	and	cl, 7
	shr	eax, cl
	mov	ecx, eax
	and	ecx, 511
	movzx	ebx, byte ptr [esi + ecx]
	movzx	edx, word ptr [ebp + 2*ecx]
	cmp	ebx, 9
	ja	LBB6_43
# %bb.42:                               #   in Loop: Header=BB6_32 Depth=2
	mov	ecx, ebx
	jmp	LBB6_44
	.p2align	4, 0x90
LBB6_43:                                #   in Loop: Header=BB6_32 Depth=2
	add	bl, -9
	mov	edi, esi
	mov	esi, -1
	shr	eax, 9
	movzx	edx, dx
	mov	ecx, ebx
	shl	esi, cl
	not	esi
	and	esi, eax
	add	esi, edx
	movzx	ebx, byte ptr [edi + esi]
	movzx	edx, word ptr [ebp + 2*esi]
	mov	ecx, ebx
	add	cl, -9
LBB6_44:                                #   in Loop: Header=BB6_32 Depth=2
	shr	eax, cl
	mov	ebp, dword ptr [esp + 168]
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	add	ebx, dword ptr [esp + 8]        # 4-byte Folded Reload
	movzx	ecx, dx
	cmp	ecx, 255
	ja	LBB6_49
# %bb.46:                               #   in Loop: Header=BB6_32 Depth=2
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	dword ptr [esp + 8], ebx        # 4-byte Spill
	mov	esi, dword ptr [edx + 4]
	mov	ebx, dword ptr [edx + 8]
	lea	edi, [esi + 1]
	cmp	ebx, edi
	jae	LBB6_53
# %bb.47:                               #   in Loop: Header=BB6_32 Depth=2
	shr	ebx
	mov	dword ptr [esp], ecx            # 4-byte Spill
	add	ebx, edi
	push	ebx
	push	dword ptr [edx]
	mov	ebp, edx
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB6_111
# %bb.48:                               #   in Loop: Header=BB6_32 Depth=2
	mov	dword ptr [ebp + 8], ebx
	mov	dword ptr [ebp], eax
	mov	edx, ebp
	mov	ebp, dword ptr [esp + 168]
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	jmp	LBB6_54
	.p2align	4, 0x90
LBB6_49:                                #   in Loop: Header=BB6_32 Depth=2
	cmp	ecx, 256
	je	LBB6_109
# %bb.50:                               #   in Loop: Header=BB6_32 Depth=2
	mov	esi, ecx
	movzx	ecx, dx
	cmp	ecx, 285
	mov	ecx, esi
	ja	LBB6_109
# %bb.51:                               #   in Loop: Header=BB6_32 Depth=2
	mov	esi, ebx
	mov	ebx, dword ptr [4*ecx + _LENGTHBASE-1028]
	mov	edx, ecx
	add	ecx, -265
	cmp	ecx, 19
	jbe	LBB6_55
# %bb.52:                               #   in Loop: Header=BB6_32 Depth=2
	mov	edx, esi
	jmp	LBB6_56
	.p2align	4, 0x90
LBB6_53:                                #   in Loop: Header=BB6_32 Depth=2
	mov	eax, dword ptr [edx]
LBB6_54:                                #   in Loop: Header=BB6_32 Depth=2
	mov	dword ptr [edx + 4], edi
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	byte ptr [eax + esi], cl
	cmp	ebx, dword ptr [esp + 40]       # 4-byte Folded Reload
	jbe	LBB6_82
	jmp	LBB6_105
	.p2align	4, 0x90
LBB6_55:                                #   in Loop: Header=BB6_32 Depth=2
	mov	ecx, dword ptr [4*edx + _LENGTHEXTRA-1028]
	mov	edx, -1
	shl	edx, cl
	not	edx
	and	eax, edx
	mov	edx, esi
	add	edx, ecx
	add	ebx, eax
LBB6_56:                                #   in Loop: Header=BB6_32 Depth=2
	mov	eax, edx
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	shr	eax, 3
	lea	ecx, [eax + 4]
	cmp	ecx, ebp
	jae	LBB6_58
# %bb.57:                               #   in Loop: Header=BB6_32 Depth=2
	mov	ecx, edx
	movzx	edx, byte ptr [edi + eax + 4]
	mov	esi, dword ptr [edi + eax]
	mov	al, 8
	and	cl, 7
	sub	al, cl
	shr	esi, cl
	shl	edx, 24
	mov	ecx, eax
	shl	edx, cl
	or	edx, esi
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	jmp	LBB6_64
	.p2align	4, 0x90
LBB6_58:                                #   in Loop: Header=BB6_32 Depth=2
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	xor	edx, edx
	cmp	eax, ebp
	mov	ecx, ebp
	jae	LBB6_59
# %bb.84:                               #   in Loop: Header=BB6_32 Depth=2
	movzx	edx, byte ptr [edi + eax]
	lea	ecx, [eax + 1]
	cmp	ecx, dword ptr [esp + 168]
	jb	LBB6_85
LBB6_60:                                #   in Loop: Header=BB6_32 Depth=2
	lea	ecx, [eax + 2]
	cmp	ecx, dword ptr [esp + 168]
	jae	LBB6_61
LBB6_86:                                #   in Loop: Header=BB6_32 Depth=2
	movzx	ecx, byte ptr [edi + ecx]
	shl	ecx, 16
	or	edx, ecx
	add	eax, 3
	cmp	eax, dword ptr [esp + 168]
	jb	LBB6_62
	jmp	LBB6_63
	.p2align	4, 0x90
LBB6_59:                                #   in Loop: Header=BB6_32 Depth=2
	lea	ecx, [eax + 1]
	cmp	ecx, dword ptr [esp + 168]
	jae	LBB6_60
LBB6_85:                                #   in Loop: Header=BB6_32 Depth=2
	movzx	ecx, byte ptr [edi + ecx]
	shl	ecx, 8
	or	edx, ecx
	lea	ecx, [eax + 2]
	cmp	ecx, dword ptr [esp + 168]
	jb	LBB6_86
LBB6_61:                                #   in Loop: Header=BB6_32 Depth=2
	add	eax, 3
	cmp	eax, dword ptr [esp + 168]
	jae	LBB6_63
LBB6_62:                                #   in Loop: Header=BB6_32 Depth=2
	movzx	eax, byte ptr [edi + eax]
	shl	eax, 24
	or	edx, eax
LBB6_63:                                #   in Loop: Header=BB6_32 Depth=2
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, eax
	and	cl, 7
	shr	edx, cl
LBB6_64:                                #   in Loop: Header=BB6_32 Depth=2
	mov	ecx, edx
	and	ecx, 511
	movzx	eax, byte ptr [esi + ecx]
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	movzx	edi, word ptr [esi + 2*ecx]
	cmp	eax, 9
	ja	LBB6_66
# %bb.65:                               #   in Loop: Header=BB6_32 Depth=2
	mov	ecx, eax
	shr	edx, cl
	add	dword ptr [esp + 8], eax        # 4-byte Folded Spill
	cmp	di, 30
	jb	LBB6_67
	jmp	LBB6_110
	.p2align	4, 0x90
LBB6_66:                                #   in Loop: Header=BB6_32 Depth=2
	add	al, -9
	movzx	ebp, di
	mov	edi, -1
	shr	edx, 9
	mov	ecx, eax
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	shl	edi, cl
	not	edi
	and	edi, edx
	add	edi, ebp
	movzx	eax, byte ptr [eax + edi]
	movzx	edi, word ptr [esi + 2*edi]
	mov	ecx, eax
	add	cl, -9
	shr	edx, cl
	add	dword ptr [esp + 8], eax        # 4-byte Folded Spill
	cmp	di, 30
	jae	LBB6_110
LBB6_67:                                #   in Loop: Header=BB6_32 Depth=2
	movzx	eax, di
	cmp	di, 4
	mov	esi, dword ptr [4*eax + _DISTANCEBASE]
	jb	LBB6_69
# %bb.68:                               #   in Loop: Header=BB6_32 Depth=2
	mov	ecx, dword ptr [4*eax + _DISTANCEEXTRA]
	mov	eax, -1
	shl	eax, cl
	add	dword ptr [esp + 8], ecx        # 4-byte Folded Spill
	not	eax
	and	edx, eax
	add	esi, edx
LBB6_69:                                #   in Loop: Header=BB6_32 Depth=2
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	ebp, dword ptr [edx + 4]
	mov	edi, ebp
	sub	edi, esi
	jb	LBB6_112
# %bb.70:                               #   in Loop: Header=BB6_32 Depth=2
	mov	dword ptr [esp], esi            # 4-byte Spill
	mov	esi, dword ptr [edx + 8]
	lea	ecx, [ebp + ebx]
	cmp	esi, ecx
	jae	LBB6_73
# %bb.71:                               #   in Loop: Header=BB6_32 Depth=2
	shr	esi
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	add	esi, ecx
	push	esi
	push	dword ptr [edx]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB6_111
# %bb.72:                               #   in Loop: Header=BB6_32 Depth=2
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	mov	dword ptr [edx + 8], esi
	mov	dword ptr [edx], eax
	jmp	LBB6_74
	.p2align	4, 0x90
LBB6_73:                                #   in Loop: Header=BB6_32 Depth=2
	mov	eax, dword ptr [edx]
LBB6_74:                                #   in Loop: Header=BB6_32 Depth=2
	mov	esi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edx + 4], ecx
	lea	ecx, [eax + edi]
	add	eax, ebp
	cmp	esi, ebx
	jae	LBB6_79
# %bb.75:                               #   in Loop: Header=BB6_32 Depth=2
	test	esi, esi
	je	LBB6_77
# %bb.76:                               #   in Loop: Header=BB6_32 Depth=2
	push	esi
	push	ecx
	push	eax
	call	_memcpy
	mov	edx, dword ptr [esp + 40]       # 4-byte Reload
	add	esp, 12
LBB6_77:                                #   in Loop: Header=BB6_32 Depth=2
	add	ebp, esi
	sub	ebx, esi
	.p2align	4, 0x90
LBB6_78:                                #   Parent Loop BB6_4 Depth=1
                                        #     Parent Loop BB6_32 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	eax, dword ptr [edx]
	movzx	ecx, byte ptr [eax + edi]
	inc	edi
	mov	byte ptr [eax + ebp], cl
	inc	ebp
	dec	ebx
	jne	LBB6_78
	jmp	LBB6_81
	.p2align	4, 0x90
LBB6_79:                                #   in Loop: Header=BB6_32 Depth=2
	test	ebx, ebx
	je	LBB6_81
# %bb.80:                               #   in Loop: Header=BB6_32 Depth=2
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	mov	edx, dword ptr [esp + 40]       # 4-byte Reload
	add	esp, 12
LBB6_81:                                #   in Loop: Header=BB6_32 Depth=2
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebp, dword ptr [esp + 168]
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	cmp	ebx, dword ptr [esp + 40]       # 4-byte Folded Reload
	ja	LBB6_105
LBB6_82:                                #   in Loop: Header=BB6_32 Depth=2
	cmp	dword ptr [esp + 48], 0         # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	je	LBB6_32
# %bb.83:                               #   in Loop: Header=BB6_32 Depth=2
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	mov	eax, ebx
	cmp	dword ptr [edx + 4], ecx
	jbe	LBB6_32
# %bb.115:                              #   in Loop: Header=BB6_4 Depth=1
	mov	edi, esi
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	mov	ebx, eax
	mov	dword ptr [esp], 109            # 4-byte Folded Spill
	jmp	LBB6_158
LBB6_87:                                #   in Loop: Header=BB6_4 Depth=1
	mov	edx, ecx
LBB6_88:                                #   in Loop: Header=BB6_4 Depth=1
	mov	ecx, ebx
	add	edi, 17
	mov	esi, ebx
	mov	eax, 49
	and	cl, 7
	mov	ebx, edi
	shr	edx, cl
	cmp	edi, dword ptr [esp + 40]       # 4-byte Folded Reload
	mov	edi, ebp
	mov	ebp, dword ptr [esp + 168]
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	ja	LBB6_155
LBB6_89:                                #   in Loop: Header=BB6_4 Depth=1
	push	76
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB6_98
# %bb.90:                               #   in Loop: Header=BB6_4 Depth=1
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 112], 0
	mov	dword ptr [esp + 116], 0
	mov	dword ptr [esp + 128], 0
	mov	dword ptr [esp + 132], 0
	mov	dword ptr [esp + 20], 0         # 4-byte Folded Spill
	mov	dword ptr [esp], 50             # 4-byte Folded Spill
	mov	esi, edx
	shr	esi, 10
	and	esi, 15
	lea	ecx, [esi + 4]
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	lea	ecx, [ecx + 2*ecx]
	add	ecx, ebx
	cmp	ecx, ebx
	jb	LBB6_107
# %bb.91:                               #   in Loop: Header=BB6_4 Depth=1
	cmp	ecx, dword ptr [esp + 40]       # 4-byte Folded Reload
	ja	LBB6_107
# %bb.92:                               #   in Loop: Header=BB6_4 Depth=1
	mov	ecx, edx
	shr	edx, 5
	mov	edi, -16
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	and	ecx, 31
	and	edx, 31
	mov	dword ptr [esp + 36], ecx       # 4-byte Spill
	add	ecx, 257
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	mov	ecx, edx
	lea	ecx, [edx + 1]
	lea	edx, [4*esi]
	mov	dword ptr [esp + 56], ecx       # 4-byte Spill
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	jmp	LBB6_95
	.p2align	4, 0x90
LBB6_93:                                #   in Loop: Header=BB6_95 Depth=2
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	movzx	ebp, word ptr [ebp + ecx]
LBB6_94:                                #   in Loop: Header=BB6_95 Depth=2
	mov	ebx, edx
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	ecx, ebx
	add	ebx, 3
	and	cl, 7
	shr	ebp, cl
	mov	ecx, dword ptr [edi + _CLCL_ORDER+16]
	add	edi, 4
	and	ebp, 7
	cmp	dword ptr [esp + 8], edi        # 4-byte Folded Reload
	mov	dword ptr [eax + 4*ecx], ebp
	je	LBB6_99
LBB6_95:                                #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, ebx
	mov	edx, ebx
	mov	ebx, dword ptr [esp + 168]
	shr	ecx, 3
	lea	ebp, [ecx + 1]
	cmp	ebp, ebx
	jb	LBB6_93
# %bb.96:                               #   in Loop: Header=BB6_95 Depth=2
	xor	ebp, ebp
	cmp	ecx, ebx
	jae	LBB6_94
# %bb.97:                               #   in Loop: Header=BB6_95 Depth=2
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	movzx	ebp, byte ptr [ebp + ecx]
	jmp	LBB6_94
LBB6_98:                                #   in Loop: Header=BB6_4 Depth=1
	mov	eax, 83
	jmp	LBB6_154
LBB6_99:                                #   in Loop: Header=BB6_4 Depth=1
	cmp	dword ptr [esp + 32], 19        # 4-byte Folded Reload
	je	LBB6_102
# %bb.100:                              #   in Loop: Header=BB6_4 Depth=1
	add	esi, -15
	.p2align	4, 0x90
LBB6_101:                               #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, dword ptr [4*esi + _CLCL_ORDER+76]
	inc	esi
	mov	dword ptr [eax + 4*ecx], 0
	jne	LBB6_101
LBB6_102:                               #   in Loop: Header=BB6_4 Depth=1
	push	76
	call	_malloc
	add	esp, 4
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebp, dword ptr [esp + 168]
	test	eax, eax
	mov	dword ptr [esp + 116], eax
	je	LBB6_108
# %bb.103:                              #   in Loop: Header=BB6_4 Depth=1
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ecx, 19
	mov	edi, eax
	rep movsd es:[edi], [esi]
	lea	ecx, [esp + 112]
	mov	dword ptr [esp + 124], 19
	mov	dword ptr [esp + 120], 7
	call	"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
	test	eax, eax
	je	LBB6_116
# %bb.104:                              #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], eax            # 4-byte Spill
	xor	esi, esi
	jmp	LBB6_151
LBB6_107:                               #   in Loop: Header=BB6_4 Depth=1
	xor	esi, esi
	jmp	LBB6_153
LBB6_105:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], 51             # 4-byte Folded Spill
	jmp	LBB6_114
LBB6_108:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], 83             # 4-byte Folded Spill
	xor	esi, esi
	jmp	LBB6_152
LBB6_109:                               #   in Loop: Header=BB6_4 Depth=1
	xor	eax, eax
	cmp	ecx, 256
	setne	al
	shl	eax, 4
	mov	dword ptr [esp], eax            # 4-byte Spill
	jmp	LBB6_114
LBB6_110:                               #   in Loop: Header=BB6_4 Depth=1
	xor	eax, eax
	cmp	di, 32
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebp, dword ptr [esp + 168]
	setb	al
	lea	eax, [eax + eax + 16]
	mov	dword ptr [esp], eax            # 4-byte Spill
	jmp	LBB6_114
LBB6_111:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], 83             # 4-byte Folded Spill
	jmp	LBB6_113
LBB6_112:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], 52             # 4-byte Folded Spill
LBB6_113:                               #   in Loop: Header=BB6_4 Depth=1
	mov	ebp, dword ptr [esp + 168]
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
LBB6_114:                               #   in Loop: Header=BB6_4 Depth=1
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	jmp	LBB6_158
LBB6_116:                               #   in Loop: Header=BB6_4 Depth=1
	push	1152
	call	_malloc
	add	esp, 4
	mov	esi, eax
	push	128
	call	_malloc
	add	esp, 4
	mov	edi, eax
	test	esi, esi
	mov	dword ptr [esp + 20], esi       # 4-byte Spill
	je	LBB6_150
# %bb.117:                              #   in Loop: Header=BB6_4 Depth=1
	test	edi, edi
	je	LBB6_150
# %bb.118:                              #   in Loop: Header=BB6_4 Depth=1
	push	1152
	push	0
	push	dword ptr [esp + 28]            # 4-byte Folded Reload
	call	_memset
	add	esp, 12
	mov	eax, dword ptr [esp + 56]       # 4-byte Reload
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 132]
	mov	dword ptr [edi + 4], 0
	mov	dword ptr [edi], 0
	mov	dword ptr [edi + 12], 0
	mov	dword ptr [edi + 8], 0
	mov	dword ptr [edi + 20], 0
	mov	dword ptr [edi + 16], 0
	mov	dword ptr [edi + 28], 0
	mov	dword ptr [edi + 24], 0
	mov	dword ptr [edi + 36], 0
	mov	dword ptr [edi + 32], 0
	mov	dword ptr [edi + 44], 0
	mov	dword ptr [edi + 40], 0
	mov	dword ptr [edi + 52], 0
	mov	dword ptr [edi + 48], 0
	mov	dword ptr [edi + 60], 0
	mov	dword ptr [edi + 56], 0
	mov	dword ptr [edi + 68], 0
	mov	dword ptr [edi + 64], 0
	mov	dword ptr [edi + 76], 0
	mov	dword ptr [edi + 72], 0
	mov	dword ptr [edi + 84], 0
	mov	dword ptr [edi + 80], 0
	mov	dword ptr [edi + 92], 0
	mov	dword ptr [edi + 88], 0
	mov	dword ptr [edi + 100], 0
	mov	dword ptr [edi + 96], 0
	mov	dword ptr [edi + 108], 0
	mov	dword ptr [edi + 104], 0
	mov	dword ptr [edi + 116], 0
	mov	dword ptr [edi + 112], 0
	mov	dword ptr [edi + 124], 0
	mov	dword ptr [edi + 120], 0
	mov	dword ptr [esp + 44], 0         # 4-byte Folded Spill
	add	eax, dword ptr [esp + 24]       # 4-byte Folded Reload
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	mov	dword ptr [esp + 56], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 128]
	mov	dword ptr [esp + 60], eax       # 4-byte Spill
	lea	eax, [edx + 258]
	mov	dword ptr [esp + 140], eax      # 4-byte Spill
	mov	eax, -258
	sub	eax, edx
	mov	dword ptr [esp + 136], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 12], edi       # 4-byte Spill
	lea	eax, [edx + eax + 258]
	shl	edx, 2
	neg	edx
	mov	dword ptr [esp + 52], eax       # 4-byte Spill
	lea	eax, [edi + edx - 1028]
	xor	edi, edi
	mov	dword ptr [esp + 36], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	jmp	LBB6_121
LBB6_119:                               #   in Loop: Header=BB6_121 Depth=2
	mov	ecx, edi
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	movzx	eax, bx
	sub	ecx, dword ptr [esp + 24]       # 4-byte Folded Reload
	lea	ecx, [edx + 4*ecx]
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	lea	edx, [edx + 4*edi]
	cmovae	edx, ecx
	inc	edi
	mov	dword ptr [edx], eax
LBB6_120:                               #   in Loop: Header=BB6_121 Depth=2
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	cmp	ebx, dword ptr [esp + 40]       # 4-byte Folded Reload
	ja	LBB6_163
LBB6_121:                               #   Parent Loop BB6_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_139 Depth 3
                                        #       Child Loop BB6_145 Depth 3
                                        #       Child Loop BB6_142 Depth 3
	cmp	edi, dword ptr [esp + 56]       # 4-byte Folded Reload
	jae	LBB6_161
# %bb.122:                              #   in Loop: Header=BB6_121 Depth=2
	mov	eax, ebx
	shr	eax, 3
	lea	ecx, [eax + 3]
	cmp	ecx, ebp
	jae	LBB6_124
# %bb.123:                              #   in Loop: Header=BB6_121 Depth=2
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	movzx	ecx, byte ptr [esi + eax + 2]
	movzx	edx, word ptr [esi + eax]
	shl	ecx, 16
	or	ecx, edx
	movzx	edx, byte ptr [esi + eax + 3]
	shl	edx, 24
	jmp	LBB6_130
LBB6_124:                               #   in Loop: Header=BB6_121 Depth=2
	xor	edx, edx
	cmp	eax, ebp
	jae	LBB6_125
# %bb.127:                              #   in Loop: Header=BB6_121 Depth=2
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	movzx	edx, byte ptr [ecx + eax]
	lea	ecx, [eax + 1]
	cmp	ecx, ebp
	jb	LBB6_128
LBB6_126:                               #   in Loop: Header=BB6_121 Depth=2
	add	eax, 2
	cmp	eax, ebp
	jb	LBB6_129
	jmp	LBB6_131
LBB6_125:                               #   in Loop: Header=BB6_121 Depth=2
	lea	ecx, [eax + 1]
	cmp	ecx, ebp
	jae	LBB6_126
LBB6_128:                               #   in Loop: Header=BB6_121 Depth=2
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	movzx	ecx, byte ptr [esi + ecx]
	shl	ecx, 8
	or	edx, ecx
	add	eax, 2
	cmp	eax, ebp
	jae	LBB6_131
LBB6_129:                               #   in Loop: Header=BB6_121 Depth=2
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	movzx	ecx, byte ptr [ecx + eax]
	shl	ecx, 16
LBB6_130:                               #   in Loop: Header=BB6_121 Depth=2
	or	edx, ecx
LBB6_131:                               #   in Loop: Header=BB6_121 Depth=2
	mov	ecx, ebx
	mov	esi, dword ptr [esp + 60]       # 4-byte Reload
	mov	dword ptr [esp + 8], ebx        # 4-byte Spill
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	and	cl, 7
	shr	edx, cl
	mov	ecx, edx
	and	ecx, 511
	movzx	eax, byte ptr [esi + ecx]
	movzx	ebx, word ptr [ebx + 2*ecx]
	cmp	eax, 9
	ja	LBB6_133
# %bb.132:                              #   in Loop: Header=BB6_121 Depth=2
	mov	ecx, eax
	shr	edx, cl
	add	dword ptr [esp + 8], eax        # 4-byte Folded Spill
	cmp	bx, 15
	jbe	LBB6_119
	jmp	LBB6_134
LBB6_133:                               #   in Loop: Header=BB6_121 Depth=2
	add	al, -9
	mov	ebp, -1
	shr	edx, 9
	movzx	ebx, bx
	mov	ecx, eax
	shl	ebp, cl
	not	ebp
	and	ebp, edx
	add	ebp, ebx
	movzx	eax, byte ptr [esi + ebp]
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	movzx	ebx, word ptr [esi + 2*ebp]
	mov	ebp, dword ptr [esp + 168]
	mov	ecx, eax
	add	cl, -9
	shr	edx, cl
	add	dword ptr [esp + 8], eax        # 4-byte Folded Spill
	cmp	bx, 15
	jbe	LBB6_119
LBB6_134:                               #   in Loop: Header=BB6_121 Depth=2
	cmp	bx, 18
	je	LBB6_141
# %bb.135:                              #   in Loop: Header=BB6_121 Depth=2
	cmp	bx, 17
	je	LBB6_144
# %bb.136:                              #   in Loop: Header=BB6_121 Depth=2
	cmp	bx, 16
	jne	LBB6_164
# %bb.137:                              #   in Loop: Header=BB6_121 Depth=2
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	test	edi, edi
	je	LBB6_169
# %bb.138:                              #   in Loop: Header=BB6_121 Depth=2
	mov	eax, dword ptr [esp + 136]      # 4-byte Reload
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	add	ebx, 2
	and	edx, 3
	cmp	edi, dword ptr [esp + 140]      # 4-byte Folded Reload
	mov	dword ptr [esp + 8], ebx        # 4-byte Spill
	lea	ecx, [eax + edi]
	lea	eax, [esi + 4*edi]
	lea	ebx, [esi + 4*edi - 4]
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	lea	ecx, [esi + 4*ecx]
	mov	esi, 0
	cmovb	ecx, ebx
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	mov	ecx, dword ptr [ecx]
	sub	ebx, edi
	cmovb	ebx, esi
	mov	esi, dword ptr [esp + 36]       # 4-byte Reload
	add	edx, 3
	lea	esi, [esi + 4*edi]
	.p2align	4, 0x90
LBB6_139:                               #   Parent Loop BB6_4 Depth=1
                                        #     Parent Loop BB6_121 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	test	ebx, ebx
	je	LBB6_149
# %bb.140:                              #   in Loop: Header=BB6_139 Depth=3
	cmp	edi, dword ptr [esp + 24]       # 4-byte Folded Reload
	mov	ebp, esi
	cmovb	ebp, eax
	inc	edi
	add	eax, 4
	add	esi, 4
	dec	ebx
	dec	edx
	mov	dword ptr [ebp], ecx
	mov	ebp, dword ptr [esp + 168]
	jne	LBB6_139
	jmp	LBB6_120
LBB6_141:                               #   in Loop: Header=BB6_121 Depth=2
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	and	edx, 127
	add	dword ptr [esp + 8], 7          # 4-byte Folded Spill
	mov	ecx, 0
	mov	esi, dword ptr [esp + 36]       # 4-byte Reload
	sub	eax, edi
	lea	ebx, [esi + 4*edi]
	cmovb	eax, ecx
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	add	edx, 11
	lea	ecx, [ecx + 4*edi]
	.p2align	4, 0x90
LBB6_142:                               #   Parent Loop BB6_4 Depth=1
                                        #     Parent Loop BB6_121 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	test	eax, eax
	je	LBB6_147
# %bb.143:                              #   in Loop: Header=BB6_142 Depth=3
	cmp	edi, dword ptr [esp + 24]       # 4-byte Folded Reload
	mov	esi, ebx
	cmovb	esi, ecx
	inc	edi
	add	ecx, 4
	add	ebx, 4
	dec	eax
	dec	edx
	mov	dword ptr [esi], 0
	jne	LBB6_142
	jmp	LBB6_120
LBB6_144:                               #   in Loop: Header=BB6_121 Depth=2
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	and	edx, 7
	add	dword ptr [esp + 8], 3          # 4-byte Folded Spill
	mov	ecx, 0
	mov	esi, dword ptr [esp + 36]       # 4-byte Reload
	sub	eax, edi
	lea	ebx, [esi + 4*edi]
	cmovb	eax, ecx
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	add	edx, 3
	lea	ecx, [ecx + 4*edi]
	.p2align	4, 0x90
LBB6_145:                               #   Parent Loop BB6_4 Depth=1
                                        #     Parent Loop BB6_121 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	test	eax, eax
	je	LBB6_148
# %bb.146:                              #   in Loop: Header=BB6_145 Depth=3
	cmp	edi, dword ptr [esp + 24]       # 4-byte Folded Reload
	mov	esi, ebx
	cmovb	esi, ecx
	inc	edi
	add	ecx, 4
	add	ebx, 4
	dec	eax
	dec	edx
	mov	dword ptr [esi], 0
	jne	LBB6_145
	jmp	LBB6_120
LBB6_147:                               #   in Loop: Header=BB6_121 Depth=2
	mov	dword ptr [esp + 44], 15        # 4-byte Folded Spill
	jmp	LBB6_120
LBB6_148:                               #   in Loop: Header=BB6_121 Depth=2
	mov	dword ptr [esp + 44], 14        # 4-byte Folded Spill
	jmp	LBB6_120
LBB6_149:                               #   in Loop: Header=BB6_121 Depth=2
	mov	dword ptr [esp + 44], 13        # 4-byte Folded Spill
	jmp	LBB6_120
LBB6_150:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], 83             # 4-byte Folded Spill
	mov	esi, edi
LBB6_151:                               #   in Loop: Header=BB6_4 Depth=1
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
LBB6_152:                               #   in Loop: Header=BB6_4 Depth=1
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
LBB6_153:                               #   in Loop: Header=BB6_4 Depth=1
	push	eax
	call	_free
	add	esp, 4
	push	dword ptr [esp + 20]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	esi
	call	_free
	add	esp, 4
	push	dword ptr [esp + 112]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 116]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 128]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 132]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp]            # 4-byte Reload
LBB6_154:                               #   in Loop: Header=BB6_4 Depth=1
	mov	esi, ebx
LBB6_155:                               #   in Loop: Header=BB6_4 Depth=1
	mov	ebx, esi
	test	eax, eax
	je	LBB6_31
LBB6_156:                               #   in Loop: Header=BB6_4 Depth=1
	mov	edx, dword ptr [esp + 80]
	mov	ecx, dword ptr [esp + 84]
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
LBB6_157:                               #   in Loop: Header=BB6_4 Depth=1
	mov	edi, dword ptr [esp + 104]
	mov	esi, dword ptr [esp + 108]
LBB6_158:                               #   in Loop: Header=BB6_4 Depth=1
	push	dword ptr [esp + 88]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 92]
	call	_free
	add	esp, 4
	push	edi
	call	_free
	add	esp, 4
	push	esi
	call	_free
	add	esp, 4
	push	dword ptr [esp + 64]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 68]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 16]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	test	eax, eax
	jne	LBB6_183
LBB6_159:                               #   in Loop: Header=BB6_4 Depth=1
	mov	eax, dword ptr [esp + 172]
	mov	eax, dword ptr [eax + 8]
	test	eax, eax
	je	LBB6_3
# %bb.160:                              #   in Loop: Header=BB6_4 Depth=1
	cmp	dword ptr [edx + 4], eax
	jbe	LBB6_3
	jmp	LBB6_177
LBB6_161:                               #   in Loop: Header=BB6_4 Depth=1
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	test	ecx, ecx
	je	LBB6_165
# %bb.162:                              #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], ecx            # 4-byte Spill
LBB6_163:                               #   in Loop: Header=BB6_4 Depth=1
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	jmp	LBB6_153
LBB6_164:                               #   in Loop: Header=BB6_4 Depth=1
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp], 16             # 4-byte Folded Spill
	jmp	LBB6_174
LBB6_165:                               #   in Loop: Header=BB6_4 Depth=1
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	cmp	dword ptr [ecx + 1024], 0
	je	LBB6_170
# %bb.166:                              #   in Loop: Header=BB6_4 Depth=1
	push	1152
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 92], eax
	je	LBB6_173
# %bb.167:                              #   in Loop: Header=BB6_4 Depth=1
	push	1152
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	eax
	call	_memcpy
	add	esp, 12
	lea	ecx, [esp + 88]
	mov	dword ptr [esp + 100], 288
	mov	dword ptr [esp + 96], 15
	call	"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
	test	eax, eax
	je	LBB6_171
# %bb.168:                              #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], eax            # 4-byte Spill
	jmp	LBB6_174
LBB6_169:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], 54             # 4-byte Folded Spill
	jmp	LBB6_174
LBB6_170:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], 64             # 4-byte Folded Spill
	jmp	LBB6_163
LBB6_171:                               #   in Loop: Header=BB6_4 Depth=1
	push	128
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 68], eax
	je	LBB6_173
# %bb.172:                              #   in Loop: Header=BB6_4 Depth=1
	mov	edi, eax
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	mov	ecx, 32
	mov	esi, eax
	rep movsd es:[edi], [esi]
	lea	ecx, [esp + 64]
	mov	dword ptr [esp + 76], 32
	mov	esi, eax
	mov	dword ptr [esp + 72], 15
	call	"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
	mov	dword ptr [esp], eax            # 4-byte Spill
	jmp	LBB6_151
LBB6_173:                               #   in Loop: Header=BB6_4 Depth=1
	mov	dword ptr [esp], 83             # 4-byte Folded Spill
LBB6_174:                               #   in Loop: Header=BB6_4 Depth=1
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	jmp	LBB6_153
LBB6_175:
	mov	eax, 20
	jmp	LBB6_183
LBB6_179:
	mov	eax, 52
	jmp	LBB6_183
LBB6_176:
	xor	eax, eax
	jmp	LBB6_183
LBB6_177:
	mov	eax, 109
	jmp	LBB6_183
LBB6_180:
	mov	eax, 23
	jmp	LBB6_183
LBB6_181:
	mov	eax, 83
	jmp	LBB6_183
LBB6_182:
	mov	eax, 21
LBB6_183:
	add	esp, 148
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_deflate@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@00070006000500040003000200010000 # -- Begin function ?lodepng_deflate@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z
	.section	.rdata,"dr",discard,__xmm@00070006000500040003000200010000
	.p2align	4
__xmm@00070006000500040003000200010000:
	.short	0                               # 0x0
	.short	1                               # 0x1
	.short	2                               # 0x2
	.short	3                               # 0x3
	.short	4                               # 0x4
	.short	5                               # 0x5
	.short	6                               # 0x6
	.short	7                               # 0x7
	.globl	__xmm@00080008000800080008000800080008
	.section	.rdata,"dr",discard,__xmm@00080008000800080008000800080008
	.p2align	4
__xmm@00080008000800080008000800080008:
	.short	8                               # 0x8
	.short	8                               # 0x8
	.short	8                               # 0x8
	.short	8                               # 0x8
	.short	8                               # 0x8
	.short	8                               # 0x8
	.short	8                               # 0x8
	.short	8                               # 0x8
	.text
	.globl	"?lodepng_deflate@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
	.p2align	4, 0x90
"?lodepng_deflate@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z": # @"?lodepng_deflate@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 252
	mov	esi, dword ptr [esp + 276]
	mov	edi, dword ptr [esp + 272]
	mov	edx, dword ptr [esp + 288]
	lea	ecx, [esp + 76]
	mov	ebx, 61
	mov	ebp, dword ptr [esi]
	mov	eax, dword ptr [edi]
	mov	dword ptr [esp], ecx
	mov	byte ptr [esp + 4], 0
	mov	dword ptr [esp + 76], eax
	mov	dword ptr [esp + 80], ebp
	mov	dword ptr [esp + 84], ebp
	mov	ecx, dword ptr [edx]
	cmp	ecx, 2
	ja	LBB7_435
# %bb.1:
	mov	eax, dword ptr [esp + 284]
	cmp	ecx, 1
	mov	ebx, eax
	je	LBB7_14
# %bb.2:
	test	ecx, ecx
	jne	LBB7_13
# %bb.3:
	lea	ecx, [eax + 65534]
	mov	edx, -2147450879
	xor	ebx, ebx
	mov	eax, ecx
	mul	edx
	cmp	ecx, 65535
	jb	LBB7_435
# %bb.4:
	shr	edx, 15
	xor	eax, eax
	mov	edi, ebp
	dec	edx
	.p2align	4, 0x90
LBB7_5:                                 # =>This Inner Loop Header: Depth=1
	mov	ebx, dword ptr [esp + 284]
	mov	ecx, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	sub	ebx, eax
	mov	eax, 65535
	cmp	ebx, 65535
	cmovae	ebx, eax
	lea	esi, [edi + ebx + 5]
	cmp	ebp, esi
	jae	LBB7_8
# %bb.6:                                #   in Loop: Header=BB7_5 Depth=1
	shr	ebp
	mov	dword ptr [esp + 64], edx       # 4-byte Spill
	add	ebp, esi
	push	ebp
	push	dword ptr [esp + 80]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_26
# %bb.7:                                #   in Loop: Header=BB7_5 Depth=1
	mov	edx, dword ptr [esp + 64]       # 4-byte Reload
	mov	dword ptr [esp + 84], ebp
	mov	dword ptr [esp + 76], eax
	jmp	LBB7_9
	.p2align	4, 0x90
LBB7_8:                                 #   in Loop: Header=BB7_5 Depth=1
	mov	eax, dword ptr [esp + 76]
LBB7_9:                                 #   in Loop: Header=BB7_5 Depth=1
	mov	ecx, ebx
	mov	dword ptr [esp + 80], esi
	xor	ecx, 65535
	test	edx, edx
	sete	byte ptr [eax + edi]
	test	ebx, ebx
	mov	eax, dword ptr [esp + 76]
	mov	byte ptr [edi + eax + 1], bl
	mov	eax, dword ptr [esp + 76]
	mov	byte ptr [edi + eax + 2], bh
	mov	eax, dword ptr [esp + 76]
	mov	byte ptr [edi + eax + 3], cl
	mov	eax, dword ptr [esp + 76]
	mov	byte ptr [edi + eax + 4], ch
	je	LBB7_11
# %bb.10:                               #   in Loop: Header=BB7_5 Depth=1
	mov	eax, dword ptr [esp + 76]
	mov	ecx, dword ptr [esp + 280]
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	lea	eax, [eax + edi + 5]
	add	ecx, esi
	push	ebx
	push	ecx
	push	eax
	mov	esi, edx
	call	_memcpy
	mov	edx, esi
	add	esp, 12
LBB7_11:                                #   in Loop: Header=BB7_5 Depth=1
	test	edx, edx
	je	LBB7_24
# %bb.12:                               #   in Loop: Header=BB7_5 Depth=1
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	mov	edi, dword ptr [esp + 80]
	mov	ebp, dword ptr [esp + 84]
	dec	edx
	add	eax, ebx
	jmp	LBB7_5
LBB7_13:
	mov	eax, dword ptr [esp + 284]
	mov	esi, ecx
	mov	ecx, 65528
	mov	ebx, 262136
	shr	eax, 3
	cmp	eax, 65528
	cmova	ecx, eax
	mov	eax, dword ptr [esp + 284]
	cmp	ecx, 262136
	cmovb	ebx, ecx
	mov	ecx, esi
	add	ebx, 8
LBB7_14:
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	lea	ecx, [eax - 1]
	mov	esi, edx
	xor	edx, edx
	lea	eax, [ecx + ebx]
	div	ebx
	mov	esi, dword ptr [esi + 8]
	add	ecx, ebx
	mov	ecx, 1
	mov	dword ptr [esp + 164], ebx      # 4-byte Spill
	cmovae	ecx, eax
	mov	dword ptr [esp + 208], ecx      # 4-byte Spill
	push	262144
	call	_malloc
	add	esp, 4
	mov	edi, eax
	mov	dword ptr [esp + 228], eax
	lea	eax, [4*esi]
	mov	dword ptr [esp + 64], eax       # 4-byte Spill
	push	eax
	call	_malloc
	add	esp, 4
	mov	ebx, eax
	lea	ebp, [esi + esi]
	mov	dword ptr [esp + 236], eax
	push	ebp
	call	_malloc
	add	esp, 4
	mov	dword ptr [esp + 160], eax      # 4-byte Spill
	mov	dword ptr [esp + 232], eax
	push	ebp
	call	_malloc
	add	esp, 4
	mov	dword ptr [esp + 204], eax      # 4-byte Spill
	mov	dword ptr [esp + 248], eax
	push	1036
	call	_malloc
	add	esp, 4
	mov	dword ptr [esp + 116], eax      # 4-byte Spill
	mov	dword ptr [esp + 240], eax
	push	ebp
	call	_malloc
	add	esp, 4
	mov	dword ptr [esp + 196], ebx      # 4-byte Spill
	test	ebx, ebx
	mov	ebx, 83
	mov	dword ptr [esp + 244], eax
	mov	dword ptr [esp + 156], eax      # 4-byte Spill
	mov	dword ptr [esp + 200], edi      # 4-byte Spill
	je	LBB7_433
# %bb.15:
	test	edi, edi
	je	LBB7_433
# %bb.16:
	cmp	dword ptr [esp + 160], 0        # 4-byte Folded Reload
	je	LBB7_433
# %bb.17:
	cmp	dword ptr [esp + 204], 0        # 4-byte Folded Reload
	je	LBB7_433
# %bb.18:
	cmp	dword ptr [esp + 116], 0        # 4-byte Folded Reload
	je	LBB7_433
# %bb.19:
	test	eax, eax
	je	LBB7_433
# %bb.20:
	push	262144
	push	255
	push	dword ptr [esp + 208]           # 4-byte Folded Reload
	call	_memset
	add	esp, 12
	test	esi, esi
	je	LBB7_25
# %bb.21:
	push	dword ptr [esp + 64]            # 4-byte Folded Reload
	push	255
	push	dword ptr [esp + 204]           # 4-byte Folded Reload
	call	_memset
	add	esp, 12
	mov	edi, dword ptr [esp + 160]      # 4-byte Reload
	xor	eax, eax
	cmp	esi, 7
	jbe	LBB7_28
# %bb.22:
	movdqa	xmm0, xmmword ptr [__xmm@00070006000500040003000200010000] # xmm0 = [0,1,2,3,4,5,6,7]
	movdqa	xmm1, xmmword ptr [__xmm@00080008000800080008000800080008] # xmm1 = [8,8,8,8,8,8,8,8]
	mov	eax, esi
	mov	edx, edi
	and	eax, -8
	mov	ecx, eax
	.p2align	4, 0x90
LBB7_23:                                # =>This Inner Loop Header: Depth=1
	movdqu	xmmword ptr [edx], xmm0
	add	edx, 16
	paddw	xmm0, xmm1
	add	ecx, -8
	jne	LBB7_23
	jmp	LBB7_27
LBB7_24:
	xor	ebx, ebx
	jmp	LBB7_434
LBB7_25:
	push	1036
	push	255
	push	dword ptr [esp + 124]           # 4-byte Folded Reload
	call	_memset
	add	esp, 12
	jmp	LBB7_34
LBB7_26:
	mov	ebx, 83
	jmp	LBB7_434
LBB7_27:
	cmp	esi, eax
	je	LBB7_29
LBB7_28:
	mov	word ptr [edi + 2*eax], ax
	inc	eax
	jmp	LBB7_27
LBB7_29:
	push	1036
	push	255
	push	dword ptr [esp + 124]           # 4-byte Folded Reload
	call	_memset
	add	esp, 12
	mov	edx, dword ptr [esp + 156]      # 4-byte Reload
	xor	eax, eax
	cmp	esi, 7
	jbe	LBB7_33
# %bb.30:
	movdqa	xmm0, xmmword ptr [__xmm@00070006000500040003000200010000] # xmm0 = [0,1,2,3,4,5,6,7]
	movdqa	xmm1, xmmword ptr [__xmm@00080008000800080008000800080008] # xmm1 = [8,8,8,8,8,8,8,8]
	mov	eax, esi
	and	eax, -8
	mov	ecx, eax
	.p2align	4, 0x90
LBB7_31:                                # =>This Inner Loop Header: Depth=1
	movdqu	xmmword ptr [edx], xmm0
	add	edx, 16
	paddw	xmm0, xmm1
	add	ecx, -8
	jne	LBB7_31
# %bb.32:
	mov	edx, dword ptr [esp + 156]      # 4-byte Reload
	cmp	esi, eax
	je	LBB7_34
	.p2align	4, 0x90
LBB7_33:                                # =>This Inner Loop Header: Depth=1
	mov	word ptr [edx + 2*eax], ax
	inc	eax
	cmp	esi, eax
	jne	LBB7_33
LBB7_34:
	mov	eax, dword ptr [esp + 208]      # 4-byte Reload
	test	eax, eax
	je	LBB7_431
# %bb.35:
	dec	eax
	mov	edx, dword ptr [esp + 164]      # 4-byte Reload
	mov	esi, dword ptr [esp + 288]
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 168], 0        # 4-byte Folded Spill
	mov	dword ptr [esp + 64], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 224], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 280]
	mov	ebp, edx
	add	eax, 4
	mov	dword ptr [esp + 72], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 284]
	.p2align	4, 0x90
LBB7_36:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_137 Depth 2
                                        #       Child Loop BB7_142 Depth 3
                                        #       Child Loop BB7_152 Depth 3
                                        #     Child Loop BB7_125 Depth 2
                                        #       Child Loop BB7_130 Depth 3
                                        #     Child Loop BB7_185 Depth 2
                                        #     Child Loop BB7_60 Depth 2
                                        #     Child Loop BB7_63 Depth 2
                                        #     Child Loop BB7_69 Depth 2
                                        #     Child Loop BB7_72 Depth 2
                                        #     Child Loop BB7_79 Depth 2
                                        #     Child Loop BB7_159 Depth 2
                                        #       Child Loop BB7_161 Depth 3
                                        #       Child Loop BB7_171 Depth 3
                                        #     Child Loop BB7_195 Depth 2
                                        #     Child Loop BB7_205 Depth 2
                                        #     Child Loop BB7_321 Depth 2
                                        #     Child Loop BB7_364 Depth 2
                                        #       Child Loop BB7_369 Depth 3
                                        #       Child Loop BB7_384 Depth 3
                                        #     Child Loop BB7_341 Depth 2
                                        #       Child Loop BB7_346 Depth 3
                                        #       Child Loop BB7_356 Depth 3
                                        #     Child Loop BB7_424 Depth 2
	mov	ebx, dword ptr [esp + 64]       # 4-byte Reload
	cmp	eax, ebp
	mov	ecx, edx
	mov	dword ptr [esp + 36], ebp       # 4-byte Spill
	cmovb	ebp, eax
	imul	ecx, ebx
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	add	ecx, edx
	cmp	ecx, eax
	cmova	ecx, eax
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	xor	ecx, ecx
	cmp	ebx, dword ptr [esp + 224]      # 4-byte Folded Reload
	sete	cl
	cmp	edi, 2
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	je	LBB7_41
# %bb.37:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	cmp	edi, 1
	mov	dword ptr [esp + 12], 0         # 4-byte Folded Spill
	jne	LBB7_99
# %bb.38:                               #   in Loop: Header=BB7_36 Depth=1
	lea	ecx, [esp + 88]
	mov	dword ptr [esp + 88], 0
	mov	dword ptr [esp + 92], 0
	mov	dword ptr [esp + 104], 0
	mov	dword ptr [esp + 120], 0
	mov	dword ptr [esp + 124], 0
	mov	dword ptr [esp + 136], 0
	mov	dword ptr [esp + 108], 0
	mov	dword ptr [esp + 140], 0
	call	"?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z"
	mov	esi, eax
	test	eax, eax
	jne	LBB7_40
# %bb.39:                               #   in Loop: Header=BB7_36 Depth=1
	lea	ecx, [esp + 120]
	call	"?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z"
	mov	esi, eax
	test	eax, eax
	je	LBB7_51
LBB7_40:                                #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 12], esi       # 4-byte Spill
	push	dword ptr [esp + 88]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 92]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 104]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 108]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 120]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 124]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 136]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 140]
	jmp	LBB7_98
	.p2align	4, 0x90
LBB7_41:                                #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 144], 0
	mov	dword ptr [esp + 152], 0
	mov	dword ptr [esp + 88], 0
	mov	dword ptr [esp + 92], 0
	mov	dword ptr [esp + 104], 0
	mov	dword ptr [esp + 120], 0
	mov	dword ptr [esp + 124], 0
	mov	dword ptr [esp + 136], 0
	mov	dword ptr [esp + 172], 0
	mov	dword ptr [esp + 176], 0
	mov	dword ptr [esp + 188], 0
	mov	dword ptr [esp + 148], 0
	mov	dword ptr [esp + 108], 0
	mov	dword ptr [esp + 140], 0
	mov	dword ptr [esp + 192], 0
	push	1144
	call	_malloc
	add	esp, 4
	mov	ebx, eax
	push	120
	call	_malloc
	add	esp, 4
	mov	esi, eax
	push	76
	call	_malloc
	add	esp, 4
	test	ebx, ebx
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	dword ptr [esp + 48], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 12], 83        # 4-byte Folded Spill
	mov	dword ptr [esp + 40], esi       # 4-byte Spill
	je	LBB7_94
# %bb.42:                               #   in Loop: Header=BB7_36 Depth=1
	mov	edi, dword ptr [esp + 280]
	test	esi, esi
	je	LBB7_94
# %bb.43:                               #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	test	esi, esi
	je	LBB7_47
# %bb.44:                               #   in Loop: Header=BB7_36 Depth=1
	push	1144
	push	0
	push	ebx
	call	_memset
	add	esp, 12
	mov	eax, dword ptr [esp + 40]       # 4-byte Reload
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 16], 0
	mov	dword ptr [esi + 28], 0
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 36], 0
	mov	dword ptr [esi + 32], 0
	mov	dword ptr [esi + 44], 0
	mov	dword ptr [esi + 40], 0
	mov	dword ptr [esi + 52], 0
	mov	dword ptr [esi + 48], 0
	mov	dword ptr [esi + 60], 0
	mov	dword ptr [esi + 56], 0
	mov	dword ptr [esi + 68], 0
	mov	dword ptr [esi + 64], 0
	mov	dword ptr [esi + 72], 0
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 68], 0
	mov	dword ptr [eax + 64], 0
	mov	dword ptr [eax + 76], 0
	mov	dword ptr [eax + 72], 0
	mov	dword ptr [eax + 84], 0
	mov	dword ptr [eax + 80], 0
	mov	dword ptr [eax + 92], 0
	mov	dword ptr [eax + 88], 0
	mov	dword ptr [eax + 100], 0
	mov	dword ptr [eax + 96], 0
	mov	dword ptr [eax + 108], 0
	mov	dword ptr [eax + 104], 0
	mov	dword ptr [eax + 116], 0
	mov	dword ptr [eax + 112], 0
	mov	eax, dword ptr [esp + 288]
	cmp	dword ptr [eax + 4], 0
	je	LBB7_48
# %bb.45:                               #   in Loop: Header=BB7_36 Depth=1
	lea	ecx, [esp + 144]
	lea	edx, [esp + 228]
	push	dword ptr [eax + 20]
	push	dword ptr [eax + 16]
	push	dword ptr [eax + 12]
	push	dword ptr [eax + 8]
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	push	edi
	call	"?encodeLZ77@@YAIPAUuivector@@PAUHash@@PBEIIIIII@Z"
	add	esp, 28
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	test	eax, eax
	je	LBB7_55
LBB7_46:                                #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	xor	edi, edi
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	jmp	LBB7_97
LBB7_47:                                #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	jmp	LBB7_96
LBB7_48:                                #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	sub	eax, dword ptr [esp + 16]       # 4-byte Folded Reload
	lea	esi, [4*eax]
	mov	dword ptr [esp + 60], eax       # 4-byte Spill
	test	esi, esi
	je	LBB7_56
# %bb.49:                               #   in Loop: Header=BB7_36 Depth=1
	push	esi
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB7_93
# %bb.50:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 152], esi
	mov	dword ptr [esp + 144], eax
	jmp	LBB7_57
LBB7_51:                                #   in Loop: Header=BB7_36 Depth=1
	mov	al, byte ptr [esp + 4]
	mov	ecx, eax
	and	cl, 7
	jne	LBB7_104
# %bb.52:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ebx, dword ptr [esp]
	mov	ebp, dword ptr [ebx + 4]
	mov	edi, dword ptr [ebx + 8]
	lea	esi, [ebp + 1]
	cmp	edi, esi
	jae	LBB7_102
# %bb.53:                               #   in Loop: Header=BB7_36 Depth=1
	shr	edi
	add	edi, esi
	push	edi
	push	dword ptr [ebx]
	mov	byte ptr [esp + 48], al         # 1-byte Spill
	call	_realloc
	mov	dl, byte ptr [esp + 48]         # 1-byte Reload
	add	esp, 8
	test	eax, eax
	je	LBB7_105
# %bb.54:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [ebx + 8], edi
	mov	dword ptr [ebx], eax
	jmp	LBB7_103
LBB7_55:                                #   in Loop: Header=BB7_36 Depth=1
	mov	edi, dword ptr [esp + 148]
	mov	esi, dword ptr [esp + 40]       # 4-byte Reload
	jmp	LBB7_66
LBB7_56:                                #   in Loop: Header=BB7_36 Depth=1
	xor	eax, eax
LBB7_57:                                #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	edx, dword ptr [esp + 60]       # 4-byte Reload
	mov	esi, dword ptr [esp + 40]       # 4-byte Reload
	pxor	xmm2, xmm2
	cmp	ecx, dword ptr [esp + 16]       # 4-byte Folded Reload
	mov	dword ptr [esp + 148], edx
	jbe	LBB7_65
# %bb.58:                               #   in Loop: Header=BB7_36 Depth=1
	cmp	edx, 8
	jb	LBB7_62
# %bb.59:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 168]      # 4-byte Reload
	and	edx, -8
	xor	esi, esi
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	add	dword ptr [esp + 16], edx       # 4-byte Folded Spill
	mov	edx, dword ptr [esp + 72]       # 4-byte Reload
	add	ecx, ebp
	and	ecx, -8
	.p2align	4, 0x90
LBB7_60:                                #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	xmm0, dword ptr [edx + esi - 4] # xmm0 = mem[0],zero,zero,zero
	movd	xmm1, dword ptr [edx + esi]     # xmm1 = mem[0],zero,zero,zero
	punpcklbw	xmm0, xmm2              # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3],xmm0[4],xmm2[4],xmm0[5],xmm2[5],xmm0[6],xmm2[6],xmm0[7],xmm2[7]
	punpcklbw	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3],xmm1[4],xmm2[4],xmm1[5],xmm2[5],xmm1[6],xmm2[6],xmm1[7],xmm2[7]
	punpcklwd	xmm0, xmm2              # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	punpcklwd	xmm1, xmm2              # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1],xmm1[2],xmm2[2],xmm1[3],xmm2[3]
	movdqu	xmmword ptr [eax + 4*esi], xmm0
	movdqu	xmmword ptr [eax + 4*esi + 16], xmm1
	add	esi, 8
	cmp	ecx, esi
	jne	LBB7_60
# %bb.61:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	esi, dword ptr [esp + 40]       # 4-byte Reload
	cmp	dword ptr [esp + 60], ecx       # 4-byte Folded Reload
	je	LBB7_64
LBB7_62:                                #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 168]      # 4-byte Reload
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	lea	eax, [eax + 4*ecx]
	.p2align	4, 0x90
LBB7_63:                                #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ecx, byte ptr [edi + edx]
	mov	dword ptr [eax + 4*edx], ecx
	inc	edx
	cmp	ebp, edx
	jne	LBB7_63
LBB7_64:                                #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	mov	edi, dword ptr [esp + 60]       # 4-byte Reload
	jmp	LBB7_66
LBB7_65:                                #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	mov	edi, edx
LBB7_66:                                #   in Loop: Header=BB7_36 Depth=1
	test	edi, edi
	je	LBB7_71
# %bb.67:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 144]
	xor	eax, eax
	jmp	LBB7_69
	.p2align	4, 0x90
LBB7_68:                                #   in Loop: Header=BB7_69 Depth=2
	inc	eax
	cmp	eax, edi
	je	LBB7_71
LBB7_69:                                #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edx, dword ptr [ecx + 4*eax]
	inc	dword ptr [ebx + 4*edx]
	cmp	edx, 257
	jb	LBB7_68
# %bb.70:                               #   in Loop: Header=BB7_69 Depth=2
	mov	edx, dword ptr [ecx + 4*eax + 8]
	add	eax, 3
	inc	dword ptr [esi + 4*edx]
	jmp	LBB7_68
LBB7_71:                                #   in Loop: Header=BB7_36 Depth=1
	mov	eax, 286
	mov	dword ptr [ebx + 1024], 1
	.p2align	4, 0x90
LBB7_72:                                #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	esi, eax
	cmp	eax, 258
	jb	LBB7_74
# %bb.73:                               #   in Loop: Header=BB7_72 Depth=2
	cmp	dword ptr [ebx + 4*esi - 4], 0
	lea	eax, [esi - 1]
	je	LBB7_72
LBB7_74:                                #   in Loop: Header=BB7_36 Depth=1
	lea	eax, [4*esi]
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 92], eax
	je	LBB7_95
# %bb.75:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 96], 15
	mov	dword ptr [esp + 100], esi
	push	15
	push	esi
	push	ebx
	push	eax
	call	"?lodepng_huffman_code_lengths@@YAIPAIPBIII@Z"
	add	esp, 16
	test	eax, eax
	je	LBB7_77
LBB7_76:                                #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	xor	edi, edi
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	jmp	LBB7_97
LBB7_77:                                #   in Loop: Header=BB7_36 Depth=1
	lea	ecx, [esp + 88]
	call	"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	test	eax, eax
	jne	LBB7_46
# %bb.78:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, 30
	.p2align	4, 0x90
LBB7_79:                                #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	esi, eax
	cmp	eax, 3
	jb	LBB7_81
# %bb.80:                               #   in Loop: Header=BB7_79 Depth=2
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	lea	eax, [esi - 1]
	cmp	dword ptr [ecx + 4*esi - 4], 0
	je	LBB7_79
LBB7_81:                                #   in Loop: Header=BB7_36 Depth=1
	lea	eax, [4*esi]
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 124], eax
	je	LBB7_95
# %bb.82:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 128], 15
	mov	dword ptr [esp + 132], esi
	push	15
	push	esi
	push	dword ptr [esp + 48]            # 4-byte Folded Reload
	push	eax
	call	"?lodepng_huffman_code_lengths@@YAIPAIPBIII@Z"
	add	esp, 16
	test	eax, eax
	jne	LBB7_76
# %bb.83:                               #   in Loop: Header=BB7_36 Depth=1
	lea	ecx, [esp + 120]
	call	"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	test	eax, eax
	jne	LBB7_46
# %bb.84:                               #   in Loop: Header=BB7_36 Depth=1
	mov	edx, dword ptr [esp + 100]
	mov	ecx, dword ptr [esp + 132]
	mov	eax, 286
	mov	dword ptr [esp + 60], edi       # 4-byte Spill
	cmp	edx, 286
	cmovae	edx, eax
	cmp	ecx, 30
	mov	eax, 30
	cmovae	ecx, eax
	mov	dword ptr [esp + 52], edx       # 4-byte Spill
	lea	esi, [ecx + edx]
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	lea	edi, [4*esi]
	push	edi
	call	_malloc
	add	esp, 4
	mov	dword ptr [esp + 56], eax       # 4-byte Spill
	push	edi
	call	_malloc
	add	esp, 4
	cmp	dword ptr [esp + 56], 0         # 4-byte Folded Reload
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	je	LBB7_191
# %bb.85:                               #   in Loop: Header=BB7_36 Depth=1
	test	eax, eax
	je	LBB7_191
# %bb.86:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	test	eax, eax
	je	LBB7_88
# %bb.87:                               #   in Loop: Header=BB7_36 Depth=1
	lea	eax, [4*eax]
	push	eax
	push	dword ptr [esp + 96]
	push	edi
	call	_memcpy
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	add	esp, 12
LBB7_88:                                #   in Loop: Header=BB7_36 Depth=1
	cmp	dword ptr [esp + 44], 0         # 4-byte Folded Reload
	je	LBB7_90
# %bb.89:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	lea	eax, [edi + 4*eax]
	lea	ecx, [4*ecx]
	push	ecx
	push	dword ptr [esp + 128]
	push	eax
	call	_memcpy
	add	esp, 12
LBB7_90:                                #   in Loop: Header=BB7_36 Depth=1
	mov	al, 1
	test	esi, esi
	mov	dword ptr [esp + 48], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 112], eax      # 4-byte Spill
	je	LBB7_199
# %bb.91:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, edi
	mov	dword ptr [esp + 68], ebx       # 4-byte Spill
	xor	ebx, ebx
	mov	dword ptr [esp + 20], 0         # 4-byte Folded Spill
	add	eax, 4
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	jmp	LBB7_159
LBB7_93:                                #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 48], 0         # 4-byte Folded Spill
LBB7_94:                                #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
LBB7_95:                                #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
LBB7_96:                                #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	xor	edi, edi
LBB7_97:                                #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 152], 0
	mov	dword ptr [esp + 148], 0
	push	dword ptr [esp + 144]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 88]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 92]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 104]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 108]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 120]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 124]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 136]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 140]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 172]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 48]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 188]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 192]
	call	_free
	add	esp, 4
	push	ebx
	call	_free
	add	esp, 4
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	esi
	call	_free
	add	esp, 4
	push	edi
	call	_free
	add	esp, 4
	push	dword ptr [esp + 16]            # 4-byte Folded Reload
LBB7_98:                                #   in Loop: Header=BB7_36 Depth=1
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 284]
	mov	esi, dword ptr [esp + 288]
	mov	edx, dword ptr [esp + 164]      # 4-byte Reload
LBB7_99:                                #   in Loop: Header=BB7_36 Depth=1
	mov	ebx, dword ptr [esp + 64]       # 4-byte Reload
	inc	ebx
	cmp	ebx, dword ptr [esp + 208]      # 4-byte Folded Reload
	mov	dword ptr [esp + 64], ebx       # 4-byte Spill
	je	LBB7_432
# %bb.100:                              #   in Loop: Header=BB7_36 Depth=1
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	test	ebx, ebx
	jne	LBB7_433
# %bb.101:                              #   in Loop: Header=BB7_36 Depth=1
	mov	edi, dword ptr [esi]
	add	dword ptr [esp + 72], edx       # 4-byte Folded Spill
	sub	dword ptr [esp + 168], edx      # 4-byte Folded Spill
	add	ebp, edx
	jmp	LBB7_36
LBB7_102:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [ebx]
LBB7_103:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [ebx + 4], esi
	mov	byte ptr [eax + ebp], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_104:                               #   in Loop: Header=BB7_36 Depth=1
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	mov	eax, dword ptr [esp]
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	mov	dl, byte ptr [esp + 4]
	inc	dl
	mov	byte ptr [esp + 4], dl
LBB7_105:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, edx
	and	cl, 7
	jne	LBB7_111
# %bb.106:                              #   in Loop: Header=BB7_36 Depth=1
	mov	ebx, dword ptr [esp]
	mov	ebp, dword ptr [ebx + 4]
	mov	edi, dword ptr [ebx + 8]
	lea	esi, [ebp + 1]
	cmp	edi, esi
	jae	LBB7_109
# %bb.107:                              #   in Loop: Header=BB7_36 Depth=1
	shr	edi
	add	edi, esi
	push	edi
	push	dword ptr [ebx]
	mov	byte ptr [esp + 48], dl         # 1-byte Spill
	call	_realloc
	mov	dl, byte ptr [esp + 48]         # 1-byte Reload
	add	esp, 8
	test	eax, eax
	je	LBB7_112
# %bb.108:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [ebx + 8], edi
	mov	dword ptr [ebx], eax
	jmp	LBB7_110
LBB7_109:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [ebx]
LBB7_110:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [ebx + 4], esi
	mov	byte ptr [eax + ebp], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_111:                               #   in Loop: Header=BB7_36 Depth=1
	mov	al, 1
	shl	al, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	dl, byte ptr [esp + 4]
	inc	dl
	mov	byte ptr [esp + 4], dl
LBB7_112:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 288]
	test	dl, 7
	jne	LBB7_118
# %bb.113:                              #   in Loop: Header=BB7_36 Depth=1
	mov	ebx, dword ptr [esp]
	mov	ebp, dword ptr [ebx + 4]
	mov	edi, dword ptr [ebx + 8]
	lea	esi, [ebp + 1]
	cmp	edi, esi
	jae	LBB7_116
# %bb.114:                              #   in Loop: Header=BB7_36 Depth=1
	shr	edi
	add	edi, esi
	push	edi
	push	dword ptr [ebx]
	mov	byte ptr [esp + 48], dl         # 1-byte Spill
	call	_realloc
	mov	dl, byte ptr [esp + 48]         # 1-byte Reload
	mov	ecx, dword ptr [esp + 296]
	add	esp, 8
	test	eax, eax
	je	LBB7_119
# %bb.115:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [ebx + 8], edi
	mov	dword ptr [ebx], eax
	jmp	LBB7_117
LBB7_116:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [ebx]
LBB7_117:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [ebx + 4], esi
	mov	byte ptr [eax + ebp], 0
	mov	dl, byte ptr [esp + 4]
LBB7_118:                               #   in Loop: Header=BB7_36 Depth=1
	inc	dl
	mov	byte ptr [esp + 4], dl
LBB7_119:                               #   in Loop: Header=BB7_36 Depth=1
	cmp	dword ptr [ecx + 4], 0
	je	LBB7_122
# %bb.120:                              #   in Loop: Header=BB7_36 Depth=1
	mov	eax, ecx
	mov	dword ptr [esp + 172], 0
	mov	dword ptr [esp + 180], 0
	mov	dword ptr [esp + 176], 0
	lea	ecx, [esp + 172]
	lea	edx, [esp + 228]
	push	dword ptr [eax + 20]
	push	dword ptr [eax + 16]
	push	dword ptr [eax + 12]
	push	dword ptr [eax + 8]
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	push	dword ptr [esp + 304]
	call	"?encodeLZ77@@YAIPAUuivector@@PAUHash@@PBEIIIIII@Z"
	add	esp, 28
	test	eax, eax
	je	LBB7_134
# %bb.121:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, eax
	mov	dword ptr [esp + 180], 0
	mov	dword ptr [esp + 176], 0
	push	dword ptr [esp + 172]
	call	_free
	add	esp, 4
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	jmp	LBB7_40
LBB7_122:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	cmp	dword ptr [esp + 20], ecx       # 4-byte Folded Reload
	jbe	LBB7_180
# %bb.123:                              #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 88]
	mov	esi, dword ptr [esp + 92]
	mov	dword ptr [esp + 48], eax       # 4-byte Spill
	mov	dword ptr [esp + 32], esi       # 4-byte Spill
	jmp	LBB7_125
	.p2align	4, 0x90
LBB7_124:                               #   in Loop: Header=BB7_125 Depth=2
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	inc	ecx
	cmp	ecx, dword ptr [esp + 20]       # 4-byte Folded Reload
	je	LBB7_180
LBB7_125:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_130 Depth 3
	mov	eax, dword ptr [esp + 280]
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	movzx	eax, byte ptr [eax + ecx]
	mov	ebx, dword ptr [esi + 4*eax]
	test	ebx, ebx
	je	LBB7_124
# %bb.126:                              #   in Loop: Header=BB7_125 Depth=2
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	dec	ebx
	mov	eax, dword ptr [ecx + 4*eax]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	jmp	LBB7_130
LBB7_127:                               #   in Loop: Header=BB7_130 Depth=3
	mov	eax, dword ptr [edi]
LBB7_128:                               #   in Loop: Header=BB7_130 Depth=3
	mov	dword ptr [edi + 4], ebp
	mov	byte ptr [eax + ecx], 0
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_129:                               #   in Loop: Header=BB7_130 Depth=3
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ecx, ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	edx, byte ptr [esp + 4]
	inc	dl
	add	ebx, -1
	mov	byte ptr [esp + 4], dl
	jae	LBB7_124
LBB7_130:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_125 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	eax, edx
	and	al, 7
	jne	LBB7_129
# %bb.131:                              #   in Loop: Header=BB7_130 Depth=3
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	esi, dword ptr [edi + 8]
	lea	ebp, [ecx + 1]
	cmp	esi, ebp
	jae	LBB7_127
# %bb.132:                              #   in Loop: Header=BB7_130 Depth=3
	shr	esi
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	add	esi, ebp
	push	esi
	push	dword ptr [edi]
	mov	byte ptr [esp + 48], dl         # 1-byte Spill
	call	_realloc
	movzx	edx, byte ptr [esp + 48]        # 1-byte Folded Reload
	add	esp, 8
	test	eax, eax
	je	LBB7_124
# %bb.133:                              #   in Loop: Header=BB7_130 Depth=3
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [edi + 8], esi
	mov	dword ptr [edi], eax
	jmp	LBB7_128
LBB7_134:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 176]
	test	eax, eax
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	je	LBB7_178
# %bb.135:                              #   in Loop: Header=BB7_36 Depth=1
	mov	edx, dword ptr [esp + 92]
	mov	eax, dword ptr [esp + 172]
	mov	ecx, dword ptr [esp + 88]
	mov	edi, dword ptr [esp + 120]
	xor	esi, esi
	mov	dword ptr [esp + 48], edx       # 4-byte Spill
	mov	edx, dword ptr [esp + 124]
	mov	dword ptr [esp + 56], ecx       # 4-byte Spill
	mov	dword ptr [esp + 44], edi       # 4-byte Spill
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	mov	dword ptr [esp + 28], edx       # 4-byte Spill
	jmp	LBB7_137
LBB7_136:                               #   in Loop: Header=BB7_137 Depth=2
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, esp
	add	esi, 3
	push	dword ptr [esp + 60]            # 4-byte Folded Reload
	call	"?writeBits@@YAXPAULodePNGBitWriter@@II@Z"
	add	esp, 4
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	inc	esi
	cmp	esi, dword ptr [esp + 32]       # 4-byte Folded Reload
	je	LBB7_179
LBB7_137:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_142 Depth 3
                                        #       Child Loop BB7_152 Depth 3
	mov	ecx, dword ptr [eax + 4*esi]
	mov	edx, dword ptr [esp + 48]       # 4-byte Reload
	mov	dword ptr [esp + 24], esi       # 4-byte Spill
	mov	ebx, dword ptr [edx + 4*ecx]
	mov	dword ptr [esp + 40], ecx       # 4-byte Spill
	test	ebx, ebx
	je	LBB7_146
# %bb.138:                              #   in Loop: Header=BB7_137 Depth=2
	mov	eax, dword ptr [esp + 56]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	dec	ebx
	mov	eax, dword ptr [eax + 4*ecx]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	mov	al, byte ptr [esp + 4]
	jmp	LBB7_142
LBB7_139:                               #   in Loop: Header=BB7_142 Depth=3
	mov	eax, dword ptr [edi]
LBB7_140:                               #   in Loop: Header=BB7_142 Depth=3
	mov	dword ptr [edi + 4], esi
	mov	byte ptr [eax + ecx], 0
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_141:                               #   in Loop: Header=BB7_142 Depth=3
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ecx, ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	eax, byte ptr [esp + 4]
	inc	al
	add	ebx, -1
	mov	byte ptr [esp + 4], al
	jae	LBB7_146
LBB7_142:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	and	al, 7
	jne	LBB7_141
# %bb.143:                              #   in Loop: Header=BB7_142 Depth=3
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	ebp, dword ptr [edi + 8]
	lea	esi, [ecx + 1]
	cmp	ebp, esi
	jae	LBB7_139
# %bb.144:                              #   in Loop: Header=BB7_142 Depth=3
	shr	ebp
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	add	ebp, esi
	push	ebp
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_146
# %bb.145:                              #   in Loop: Header=BB7_142 Depth=3
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [edi + 8], ebp
	mov	dword ptr [edi], eax
	jmp	LBB7_140
	.p2align	4, 0x90
LBB7_146:                               #   in Loop: Header=BB7_137 Depth=2
	mov	ebx, dword ptr [esp + 40]       # 4-byte Reload
	cmp	ebx, 257
	jb	LBB7_156
# %bb.147:                              #   in Loop: Header=BB7_137 Depth=2
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	esi, dword ptr [eax + 4*ecx + 8]
	mov	edx, dword ptr [eax + 4*ecx + 4]
	mov	eax, dword ptr [eax + 4*ecx + 12]
	mov	ecx, esp
	mov	edi, dword ptr [4*esi + _DISTANCEEXTRA]
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	mov	dword ptr [esp + 60], edi       # 4-byte Spill
	push	dword ptr [4*ebx + _LENGTHEXTRA-1028]
	call	"?writeBits@@YAXPAULodePNGBitWriter@@II@Z"
	add	esp, 4
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ebx, dword ptr [eax + 4*esi]
	test	ebx, ebx
	je	LBB7_136
# %bb.148:                              #   in Loop: Header=BB7_137 Depth=2
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	dec	ebx
	mov	eax, dword ptr [eax + 4*esi]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	mov	al, byte ptr [esp + 4]
	jmp	LBB7_152
LBB7_149:                               #   in Loop: Header=BB7_152 Depth=3
	mov	eax, dword ptr [edi]
LBB7_150:                               #   in Loop: Header=BB7_152 Depth=3
	mov	dword ptr [edi + 4], esi
	mov	byte ptr [eax + ecx], 0
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_151:                               #   in Loop: Header=BB7_152 Depth=3
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ecx, ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	eax, byte ptr [esp + 4]
	inc	al
	add	ebx, -1
	mov	byte ptr [esp + 4], al
	jae	LBB7_136
LBB7_152:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	and	al, 7
	jne	LBB7_151
# %bb.153:                              #   in Loop: Header=BB7_152 Depth=3
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	ebp, dword ptr [edi + 8]
	lea	esi, [ecx + 1]
	cmp	ebp, esi
	jae	LBB7_149
# %bb.154:                              #   in Loop: Header=BB7_152 Depth=3
	shr	ebp
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	add	ebp, esi
	push	ebp
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_136
# %bb.155:                              #   in Loop: Header=BB7_152 Depth=3
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [edi + 8], ebp
	mov	dword ptr [edi], eax
	jmp	LBB7_150
LBB7_156:                               #   in Loop: Header=BB7_137 Depth=2
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	inc	esi
	cmp	esi, dword ptr [esp + 32]       # 4-byte Folded Reload
	jne	LBB7_137
	jmp	LBB7_179
LBB7_157:                               #   in Loop: Header=BB7_159 Depth=2
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [eax + 4*ecx], ebp
	inc	ecx
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
LBB7_158:                               #   in Loop: Header=BB7_159 Depth=2
	inc	ebx
	cmp	ebx, esi
	je	LBB7_193
LBB7_159:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_161 Depth 3
                                        #       Child Loop BB7_171 Depth 3
	mov	ebp, dword ptr [edi + 4*ebx]
	lea	eax, [ebx + 1]
	cmp	eax, esi
	jae	LBB7_157
# %bb.160:                              #   in Loop: Header=BB7_159 Depth=2
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	eax, ebx
	not	eax
	add	eax, esi
	lea	edx, [ecx + 4*ebx]
	xor	ecx, ecx
LBB7_161:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	dword ptr [edx + 4*ecx], ebp
	jne	LBB7_164
# %bb.162:                              #   in Loop: Header=BB7_161 Depth=3
	inc	ecx
	cmp	eax, ecx
	jne	LBB7_161
# %bb.163:                              #   in Loop: Header=BB7_159 Depth=2
	mov	ecx, eax
LBB7_164:                               #   in Loop: Header=BB7_159 Depth=2
	test	ebp, ebp
	jne	LBB7_168
# %bb.165:                              #   in Loop: Header=BB7_159 Depth=2
	cmp	ecx, 2
	jb	LBB7_168
# %bb.166:                              #   in Loop: Header=BB7_159 Depth=2
	lea	eax, [ecx + 1]
	cmp	eax, 10
	ja	LBB7_175
# %bb.167:                              #   in Loop: Header=BB7_159 Depth=2
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 20]       # 4-byte Reload
	add	ecx, -2
	mov	dword ptr [edx + 4*ebp], 17
	jmp	LBB7_176
LBB7_168:                               #   in Loop: Header=BB7_159 Depth=2
	cmp	ecx, 3
	jb	LBB7_157
# %bb.169:                              #   in Loop: Header=BB7_159 Depth=2
	mov	eax, ecx
	mov	edx, -1431655765
	mul	edx
	shr	edx, 2
	lea	eax, [edx + edx]
	lea	edi, [eax + 2*eax]
	mov	eax, ecx
	sub	eax, edi
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	cmp	ecx, 6
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [eax + 4*edi], ebp
	jb	LBB7_173
# %bb.170:                              #   in Loop: Header=BB7_159 Depth=2
	xor	ebp, ebp
LBB7_171:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	inc	ebp
	mov	dword ptr [eax + 4*edi + 4], 16
	mov	dword ptr [eax + 4*edi + 8], 3
	add	edi, 2
	cmp	ebp, edx
	jb	LBB7_171
# %bb.172:                              #   in Loop: Header=BB7_159 Depth=2
	mov	dword ptr [esp + 20], edi       # 4-byte Spill
LBB7_173:                               #   in Loop: Header=BB7_159 Depth=2
	mov	ebp, dword ptr [esp + 28]       # 4-byte Reload
	lea	edx, [edi + 1]
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	cmp	ebp, 3
	jb	LBB7_177
# %bb.174:                              #   in Loop: Header=BB7_159 Depth=2
	mov	dword ptr [eax + 4*edx], 16
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	add	ebp, -3
	add	ebx, ecx
	mov	dword ptr [eax + 4*edx + 8], ebp
	add	edx, 3
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	jmp	LBB7_158
LBB7_175:                               #   in Loop: Header=BB7_159 Depth=2
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 20]       # 4-byte Reload
	cmp	eax, 138
	mov	ecx, 138
	cmovae	eax, ecx
	lea	ecx, [eax - 11]
	mov	dword ptr [edx + 4*ebp], 18
LBB7_176:                               #   in Loop: Header=BB7_159 Depth=2
	mov	dword ptr [edx + 4*ebp + 4], ecx
	add	ebp, 2
	lea	ebx, [ebx + eax - 1]
	mov	dword ptr [esp + 20], ebp       # 4-byte Spill
	jmp	LBB7_158
LBB7_177:                               #   in Loop: Header=BB7_159 Depth=2
	sub	ecx, ebp
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	add	ebx, ecx
	jmp	LBB7_158
LBB7_178:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 172]
LBB7_179:                               #   in Loop: Header=BB7_36 Depth=1
	push	eax
	call	_free
	add	esp, 4
LBB7_180:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 92]
	mov	ebx, dword ptr [eax + 1024]
	test	ebx, ebx
	je	LBB7_190
# %bb.181:                              #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 88]
	mov	esi, dword ptr [esp + 72]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	dec	ebx
	mov	edi, dword ptr [eax + 1024]
	mov	al, byte ptr [esp + 4]
	mov	dword ptr [esp + 12], edi       # 4-byte Spill
	jmp	LBB7_185
LBB7_182:                               #   in Loop: Header=BB7_185 Depth=2
	mov	eax, dword ptr [edi]
LBB7_183:                               #   in Loop: Header=BB7_185 Depth=2
	mov	dword ptr [edi + 4], esi
	mov	byte ptr [eax + ecx], 0
	mov	esi, dword ptr [esp + 72]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_184:                               #   in Loop: Header=BB7_185 Depth=2
	mov	edx, edi
	mov	ecx, ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	eax, byte ptr [esp + 4]
	inc	al
	add	ebx, -1
	mov	byte ptr [esp + 4], al
	jae	LBB7_189
LBB7_185:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	and	al, 7
	jne	LBB7_184
# %bb.186:                              #   in Loop: Header=BB7_185 Depth=2
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	ebp, dword ptr [edi + 8]
	lea	esi, [ecx + 1]
	cmp	ebp, esi
	jae	LBB7_182
# %bb.187:                              #   in Loop: Header=BB7_185 Depth=2
	shr	ebp
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	add	ebp, esi
	push	ebp
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_190
# %bb.188:                              #   in Loop: Header=BB7_185 Depth=2
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [edi + 8], ebp
	mov	dword ptr [edi], eax
	jmp	LBB7_183
LBB7_189:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 72], esi       # 4-byte Spill
	xor	esi, esi
	jmp	LBB7_40
LBB7_190:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	xor	esi, esi
	jmp	LBB7_40
LBB7_193:                               #   in Loop: Header=BB7_36 Depth=1
	cmp	dword ptr [esp + 20], 0         # 4-byte Folded Reload
	mov	ebx, dword ptr [esp + 68]       # 4-byte Reload
	je	LBB7_198
# %bb.194:                              #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	xor	eax, eax
LBB7_195:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, dword ptr [edi + 4*eax]
	xor	edx, edx
	inc	dword ptr [esi + 4*ecx]
	cmp	ecx, 15
	seta	dl
	lea	eax, [eax + edx + 1]
	cmp	eax, dword ptr [esp + 20]       # 4-byte Folded Reload
	jne	LBB7_195
# %bb.196:                              #   in Loop: Header=BB7_36 Depth=1
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	mov	dword ptr [esp + 112], 0        # 4-byte Folded Spill
	jmp	LBB7_200
LBB7_198:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
LBB7_199:                               #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	mov	dword ptr [esp + 20], 0         # 4-byte Folded Spill
LBB7_200:                               #   in Loop: Header=BB7_36 Depth=1
	push	76
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 176], eax
	je	LBB7_97
# %bb.201:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 180], 7
	mov	dword ptr [esp + 184], 19
	push	7
	push	19
	push	esi
	mov	dword ptr [esp + 60], eax       # 4-byte Spill
	push	eax
	call	"?lodepng_huffman_code_lengths@@YAIPAIPBIII@Z"
	add	esp, 16
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	jne	LBB7_97
# %bb.202:                              #   in Loop: Header=BB7_36 Depth=1
	lea	ecx, [esp + 172]
	call	"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB7_204
# %bb.203:                              #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 176]
	mov	dword ptr [esp + 48], eax       # 4-byte Spill
	jmp	LBB7_192
LBB7_204:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 176]
	mov	eax, 20
	mov	dword ptr [esp + 68], ebx       # 4-byte Spill
	mov	dword ptr [esp + 48], ecx       # 4-byte Spill
LBB7_205:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lea	edx, [eax - 1]
	cmp	edx, 5
	jb	LBB7_207
# %bb.206:                              #   in Loop: Header=BB7_205 Depth=2
	mov	eax, dword ptr [4*eax + _CLCL_ORDER-8]
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	cmp	dword ptr [ecx + 4*eax], 0
	mov	eax, edx
	je	LBB7_205
	jmp	LBB7_208
LBB7_207:                               #   in Loop: Header=BB7_36 Depth=1
	mov	edx, 4
LBB7_208:                               #   in Loop: Header=BB7_36 Depth=1
	mov	cl, byte ptr [esp + 4]
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_214
# %bb.209:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_212
# %bb.210:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_215
# %bb.211:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_213
LBB7_212:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_213:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_214:                               #   in Loop: Header=BB7_36 Depth=1
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	mov	eax, dword ptr [esp]
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	mov	al, byte ptr [esp + 4]
	inc	al
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	byte ptr [esp + 4], al
LBB7_215:                               #   in Loop: Header=BB7_36 Depth=1
	test	byte ptr [esp + 8], 7           # 1-byte Folded Reload
	jne	LBB7_221
# %bb.216:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_219
# %bb.217:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_222
# %bb.218:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_220
LBB7_219:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_220:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	al, byte ptr [esp + 4]
	mov	byte ptr [esp + 8], al          # 1-byte Spill
LBB7_221:                               #   in Loop: Header=BB7_36 Depth=1
	mov	al, byte ptr [esp + 8]          # 1-byte Reload
	inc	al
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	byte ptr [esp + 4], al
LBB7_222:                               #   in Loop: Header=BB7_36 Depth=1
	mov	cl, byte ptr [esp + 8]          # 1-byte Reload
	and	cl, 7
	jne	LBB7_228
# %bb.223:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_226
# %bb.224:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_229
# %bb.225:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_227
LBB7_226:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_227:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_228:                               #   in Loop: Header=BB7_36 Depth=1
	mov	al, 1
	shl	al, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	al, byte ptr [esp + 4]
	inc	al
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	byte ptr [esp + 4], al
LBB7_229:                               #   in Loop: Header=BB7_36 Depth=1
	mov	cl, byte ptr [esp + 8]          # 1-byte Reload
	and	cl, 7
	jne	LBB7_235
# %bb.230:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_233
# %bb.231:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_260
# %bb.232:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_234
LBB7_233:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_234:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_235:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	add	eax, -257
	mov	dword ptr [esp + 52], eax       # 4-byte Spill
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_241
# %bb.236:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_239
# %bb.237:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_260
# %bb.238:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_240
LBB7_239:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_240:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_241:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	shr	eax
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_247
# %bb.242:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_245
# %bb.243:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_260
# %bb.244:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_246
LBB7_245:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_246:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_247:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	shr	eax, 2
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_253
# %bb.248:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_251
# %bb.249:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_260
# %bb.250:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_252
LBB7_251:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_252:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_253:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	shr	eax, 3
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_259
# %bb.254:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_257
# %bb.255:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_260
# %bb.256:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_258
LBB7_257:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_258:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_259:                               #   in Loop: Header=BB7_36 Depth=1
	mov	edx, dword ptr [esp + 52]       # 4-byte Reload
	mov	eax, dword ptr [esp]
	shr	edx, 4
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	mov	al, byte ptr [esp + 4]
	inc	al
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	byte ptr [esp + 4], al
LBB7_260:                               #   in Loop: Header=BB7_36 Depth=1
	mov	cl, byte ptr [esp + 8]          # 1-byte Reload
	and	cl, 7
	jne	LBB7_266
# %bb.261:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_264
# %bb.262:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_291
# %bb.263:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_265
LBB7_264:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_265:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_266:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	dec	eax
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_272
# %bb.267:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_270
# %bb.268:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_291
# %bb.269:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_271
LBB7_270:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_271:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_272:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	shr	eax
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_278
# %bb.273:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_276
# %bb.274:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_291
# %bb.275:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_277
LBB7_276:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_277:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_278:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	shr	eax, 2
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_284
# %bb.279:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_282
# %bb.280:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_291
# %bb.281:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_283
LBB7_282:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_283:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_284:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	shr	eax, 3
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_290
# %bb.285:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_288
# %bb.286:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_291
# %bb.287:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_289
LBB7_288:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_289:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_290:                               #   in Loop: Header=BB7_36 Depth=1
	mov	edx, dword ptr [esp + 44]       # 4-byte Reload
	mov	eax, dword ptr [esp]
	shr	edx, 4
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	mov	al, byte ptr [esp + 4]
	inc	al
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	byte ptr [esp + 4], al
LBB7_291:                               #   in Loop: Header=BB7_36 Depth=1
	mov	cl, byte ptr [esp + 8]          # 1-byte Reload
	and	cl, 7
	jne	LBB7_297
# %bb.292:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_295
# %bb.293:                              #   in Loop: Header=BB7_36 Depth=1
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_316
# %bb.294:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_296
LBB7_295:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_296:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_297:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	lea	ebx, [eax - 4]
	mov	eax, ebx
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_303
# %bb.298:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	ecx, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	lea	ebp, [ecx + 1]
	mov	eax, ecx
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	cmp	edi, ebp
	jae	LBB7_301
# %bb.299:                              #   in Loop: Header=BB7_36 Depth=1
	shr	edi
	add	edi, ebp
	push	edi
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_316
# %bb.300:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], edi
	mov	dword ptr [esi], eax
	jmp	LBB7_302
LBB7_301:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_302:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esi + 4], ebp
	mov	byte ptr [eax + ecx], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_303:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, ebx
	shr	eax
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_309
# %bb.304:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	ecx, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	lea	ebp, [ecx + 1]
	mov	eax, ecx
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	cmp	edi, ebp
	jae	LBB7_307
# %bb.305:                              #   in Loop: Header=BB7_36 Depth=1
	shr	edi
	add	edi, ebp
	push	edi
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_316
# %bb.306:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], edi
	mov	dword ptr [esi], eax
	jmp	LBB7_308
LBB7_307:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_308:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esi + 4], ebp
	mov	byte ptr [eax + ecx], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_309:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, ebx
	shr	eax, 2
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	cl, byte ptr [esp + 4]
	inc	cl
	mov	byte ptr [esp + 4], cl
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	and	cl, 7
	jne	LBB7_315
# %bb.310:                              #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp]
	mov	ecx, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	lea	ebp, [ecx + 1]
	mov	eax, ecx
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	cmp	edi, ebp
	jae	LBB7_313
# %bb.311:                              #   in Loop: Header=BB7_36 Depth=1
	shr	edi
	add	edi, ebp
	push	edi
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_316
# %bb.312:                              #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esi + 8], edi
	mov	dword ptr [esi], eax
	jmp	LBB7_314
LBB7_313:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esi]
LBB7_314:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esi + 4], ebp
	mov	byte ptr [eax + ecx], 0
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_315:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp]
	shr	ebx, 3
	and	ebx, 1
	shl	ebx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], bl
	mov	al, byte ptr [esp + 4]
	inc	al
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	byte ptr [esp + 4], al
LBB7_316:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dl, byte ptr [esp + 8]          # 1-byte Reload
	shl	dword ptr [esp + 12], 2         # 4-byte Folded Spill
	xor	esi, esi
	jmp	LBB7_321
LBB7_317:                               #   in Loop: Header=BB7_321 Depth=2
	mov	eax, dword ptr [edi]
LBB7_318:                               #   in Loop: Header=BB7_321 Depth=2
	mov	dword ptr [edi + 4], edx
	mov	byte ptr [eax + ecx], 0
	movzx	ecx, byte ptr [esp + 4]
	and	cl, 7
LBB7_319:                               #   in Loop: Header=BB7_321 Depth=2
	mov	eax, dword ptr [esp]
	shr	ebx, 2
	and	ebx, 1
	shl	ebx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], bl
	movzx	edx, byte ptr [esp + 4]
	inc	dl
	mov	byte ptr [esp + 4], dl
LBB7_320:                               #   in Loop: Header=BB7_321 Depth=2
	add	esi, 4
	cmp	dword ptr [esp + 12], esi       # 4-byte Folded Reload
	je	LBB7_337
LBB7_321:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esi + _CLCL_ORDER]
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	mov	ebx, dword ptr [ecx + 4*eax]
	mov	ecx, edx
	and	cl, 7
	jne	LBB7_327
# %bb.322:                              #   in Loop: Header=BB7_321 Depth=2
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	ebp, dword ptr [edi + 8]
	lea	eax, [ecx + 1]
	cmp	ebp, eax
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	jae	LBB7_325
# %bb.323:                              #   in Loop: Header=BB7_321 Depth=2
	shr	ebp
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	add	ebp, eax
	push	ebp
	push	dword ptr [edi]
	mov	byte ptr [esp + 16], dl         # 1-byte Spill
	call	_realloc
	movzx	edx, byte ptr [esp + 16]        # 1-byte Folded Reload
	add	esp, 8
	test	eax, eax
	je	LBB7_320
# %bb.324:                              #   in Loop: Header=BB7_321 Depth=2
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	dword ptr [edi + 8], ebp
	mov	dword ptr [edi], eax
	jmp	LBB7_326
LBB7_325:                               #   in Loop: Header=BB7_321 Depth=2
	mov	eax, dword ptr [edi]
LBB7_326:                               #   in Loop: Header=BB7_321 Depth=2
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [edi + 4], edx
	mov	byte ptr [eax + ecx], 0
	movzx	ecx, byte ptr [esp + 4]
	and	cl, 7
LBB7_327:                               #   in Loop: Header=BB7_321 Depth=2
	mov	eax, ebx
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	movzx	eax, byte ptr [esp + 4]
	inc	al
	mov	ecx, eax
	mov	byte ptr [esp + 4], al
	and	cl, 7
	jne	LBB7_333
# %bb.328:                              #   in Loop: Header=BB7_321 Depth=2
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	ebp, dword ptr [edi + 8]
	lea	edx, [ecx + 1]
	cmp	ebp, edx
	jae	LBB7_331
# %bb.329:                              #   in Loop: Header=BB7_321 Depth=2
	shr	ebp
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	mov	dword ptr [esp + 28], edx       # 4-byte Spill
	add	ebp, edx
	push	ebp
	push	dword ptr [edi]
	mov	byte ptr [esp + 16], al         # 1-byte Spill
	call	_realloc
	movzx	edx, byte ptr [esp + 16]        # 1-byte Folded Reload
	add	esp, 8
	test	eax, eax
	je	LBB7_320
# %bb.330:                              #   in Loop: Header=BB7_321 Depth=2
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	dword ptr [edi + 8], ebp
	mov	dword ptr [edi], eax
	jmp	LBB7_332
LBB7_331:                               #   in Loop: Header=BB7_321 Depth=2
	mov	eax, dword ptr [edi]
LBB7_332:                               #   in Loop: Header=BB7_321 Depth=2
	mov	dword ptr [edi + 4], edx
	mov	byte ptr [eax + ecx], 0
	movzx	ecx, byte ptr [esp + 4]
	and	cl, 7
LBB7_333:                               #   in Loop: Header=BB7_321 Depth=2
	mov	eax, ebx
	shr	eax
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	movzx	eax, byte ptr [esp + 4]
	inc	al
	mov	ecx, eax
	mov	byte ptr [esp + 4], al
	and	cl, 7
	jne	LBB7_319
# %bb.334:                              #   in Loop: Header=BB7_321 Depth=2
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	ebp, dword ptr [edi + 8]
	lea	edx, [ecx + 1]
	cmp	ebp, edx
	jae	LBB7_317
# %bb.335:                              #   in Loop: Header=BB7_321 Depth=2
	shr	ebp
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	mov	dword ptr [esp + 28], edx       # 4-byte Spill
	add	ebp, edx
	push	ebp
	push	dword ptr [edi]
	mov	byte ptr [esp + 16], al         # 1-byte Spill
	call	_realloc
	movzx	edx, byte ptr [esp + 16]        # 1-byte Folded Reload
	add	esp, 8
	test	eax, eax
	je	LBB7_320
# %bb.336:                              #   in Loop: Header=BB7_321 Depth=2
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	dword ptr [edi + 8], ebp
	mov	dword ptr [edi], eax
	jmp	LBB7_318
LBB7_337:                               #   in Loop: Header=BB7_36 Depth=1
	cmp	byte ptr [esp + 112], 0         # 1-byte Folded Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	je	LBB7_361
LBB7_338:                               #   in Loop: Header=BB7_36 Depth=1
	cmp	dword ptr [esp + 60], 0         # 4-byte Folded Reload
	je	LBB7_418
# %bb.339:                              #   in Loop: Header=BB7_36 Depth=1
	mov	edx, dword ptr [esp + 88]
	mov	ecx, dword ptr [esp + 92]
	mov	eax, dword ptr [esp + 144]
	xor	esi, esi
	mov	dword ptr [esp + 220], edx      # 4-byte Spill
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	mov	edx, dword ptr [esp + 120]
	mov	ecx, dword ptr [esp + 124]
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	dword ptr [esp + 212], edx      # 4-byte Spill
	mov	dword ptr [esp + 216], ecx      # 4-byte Spill
	jmp	LBB7_341
LBB7_340:                               #   in Loop: Header=BB7_341 Depth=2
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 112]      # 4-byte Reload
	mov	ecx, esp
	add	esi, 3
	push	dword ptr [esp + 52]            # 4-byte Folded Reload
	call	"?writeBits@@YAXPAULodePNGBitWriter@@II@Z"
	add	esp, 4
	inc	esi
	cmp	esi, dword ptr [esp + 60]       # 4-byte Folded Reload
	je	LBB7_419
LBB7_341:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_346 Depth 3
                                        #       Child Loop BB7_356 Depth 3
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	dword ptr [esp + 8], esi        # 4-byte Spill
	mov	ecx, dword ptr [eax + 4*esi]
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4*ecx]
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	test	eax, eax
	je	LBB7_350
# %bb.342:                              #   in Loop: Header=BB7_341 Depth=2
	mov	esi, eax
	mov	eax, dword ptr [esp + 220]      # 4-byte Reload
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	dec	esi
	mov	eax, dword ptr [eax + 4*ecx]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	mov	al, byte ptr [esp + 4]
	jmp	LBB7_346
LBB7_343:                               #   in Loop: Header=BB7_346 Depth=3
	mov	eax, dword ptr [edi]
LBB7_344:                               #   in Loop: Header=BB7_346 Depth=3
	mov	dword ptr [edi + 4], ebp
	mov	byte ptr [eax + ecx], 0
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_345:                               #   in Loop: Header=BB7_346 Depth=3
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebx, esi
	mov	ecx, ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	eax, byte ptr [esp + 4]
	inc	al
	add	ebx, -1
	mov	esi, ebx
	mov	byte ptr [esp + 4], al
	jae	LBB7_350
LBB7_346:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_341 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	and	al, 7
	jne	LBB7_345
# %bb.347:                              #   in Loop: Header=BB7_346 Depth=3
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	ebx, dword ptr [edi + 8]
	lea	ebp, [ecx + 1]
	cmp	ebx, ebp
	jae	LBB7_343
# %bb.348:                              #   in Loop: Header=BB7_346 Depth=3
	shr	ebx
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	add	ebx, ebp
	push	ebx
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_350
# %bb.349:                              #   in Loop: Header=BB7_346 Depth=3
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [edi + 8], ebx
	mov	dword ptr [edi], eax
	jmp	LBB7_344
LBB7_350:                               #   in Loop: Header=BB7_341 Depth=2
	mov	ebx, dword ptr [esp + 20]       # 4-byte Reload
	cmp	ebx, 257
	jb	LBB7_360
# %bb.351:                              #   in Loop: Header=BB7_341 Depth=2
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	esi, dword ptr [eax + 4*ecx + 8]
	mov	edx, dword ptr [eax + 4*ecx + 4]
	mov	eax, dword ptr [eax + 4*ecx + 12]
	mov	ecx, esp
	mov	edi, dword ptr [4*esi + _DISTANCEEXTRA]
	mov	dword ptr [esp + 112], eax      # 4-byte Spill
	mov	dword ptr [esp + 52], edi       # 4-byte Spill
	push	dword ptr [4*ebx + _LENGTHEXTRA-1028]
	call	"?writeBits@@YAXPAULodePNGBitWriter@@II@Z"
	add	esp, 4
	mov	eax, dword ptr [esp + 216]      # 4-byte Reload
	mov	eax, dword ptr [eax + 4*esi]
	test	eax, eax
	je	LBB7_340
# %bb.352:                              #   in Loop: Header=BB7_341 Depth=2
	mov	ebx, eax
	mov	eax, dword ptr [esp + 212]      # 4-byte Reload
	dec	ebx
	mov	eax, dword ptr [eax + 4*esi]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	mov	al, byte ptr [esp + 4]
	jmp	LBB7_356
LBB7_353:                               #   in Loop: Header=BB7_356 Depth=3
	mov	eax, dword ptr [edi]
LBB7_354:                               #   in Loop: Header=BB7_356 Depth=3
	mov	dword ptr [edi + 4], ebp
	mov	byte ptr [eax + ecx], 0
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_355:                               #   in Loop: Header=BB7_356 Depth=3
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ecx, ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	eax, byte ptr [esp + 4]
	inc	al
	add	ebx, -1
	mov	byte ptr [esp + 4], al
	jae	LBB7_340
LBB7_356:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_341 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	and	al, 7
	jne	LBB7_355
# %bb.357:                              #   in Loop: Header=BB7_356 Depth=3
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	esi, dword ptr [edi + 8]
	lea	ebp, [ecx + 1]
	cmp	esi, ebp
	jae	LBB7_353
# %bb.358:                              #   in Loop: Header=BB7_356 Depth=3
	shr	esi
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	add	esi, ebp
	push	esi
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_340
# %bb.359:                              #   in Loop: Header=BB7_356 Depth=3
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [edi + 8], esi
	mov	dword ptr [edi], eax
	jmp	LBB7_354
LBB7_360:                               #   in Loop: Header=BB7_341 Depth=2
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	inc	esi
	cmp	esi, dword ptr [esp + 60]       # 4-byte Folded Reload
	jne	LBB7_341
	jmp	LBB7_419
LBB7_361:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ecx, dword ptr [esp + 172]
	xor	eax, eax
	mov	dword ptr [esp + 52], ecx       # 4-byte Spill
	jmp	LBB7_364
LBB7_362:                               #   in Loop: Header=BB7_364 Depth=2
	mov	edi, esi
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
LBB7_363:                               #   in Loop: Header=BB7_364 Depth=2
	inc	eax
	cmp	eax, edi
	je	LBB7_338
LBB7_364:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_369 Depth 3
                                        #       Child Loop BB7_384 Depth 3
	mov	ecx, dword ptr [esi + 4*eax]
	mov	esi, dword ptr [esp + 48]       # 4-byte Reload
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	ebx, dword ptr [esi + 4*ecx]
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	test	ebx, ebx
	je	LBB7_373
# %bb.365:                              #   in Loop: Header=BB7_364 Depth=2
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	dec	ebx
	mov	eax, dword ptr [eax + 4*ecx]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	jmp	LBB7_369
LBB7_366:                               #   in Loop: Header=BB7_369 Depth=3
	mov	eax, dword ptr [ebp]
LBB7_367:                               #   in Loop: Header=BB7_369 Depth=3
	mov	dword ptr [ebp + 4], esi
	mov	byte ptr [eax + ecx], 0
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_368:                               #   in Loop: Header=BB7_369 Depth=3
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ecx, ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	edx, byte ptr [esp + 4]
	inc	dl
	add	ebx, -1
	mov	byte ptr [esp + 4], dl
	jae	LBB7_373
LBB7_369:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_364 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	eax, edx
	and	al, 7
	jne	LBB7_368
# %bb.370:                              #   in Loop: Header=BB7_369 Depth=3
	mov	ebp, dword ptr [esp]
	mov	ecx, dword ptr [ebp + 4]
	mov	edi, dword ptr [ebp + 8]
	lea	esi, [ecx + 1]
	cmp	edi, esi
	jae	LBB7_366
# %bb.371:                              #   in Loop: Header=BB7_369 Depth=3
	shr	edi
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	add	edi, esi
	push	edi
	push	dword ptr [ebp]
	mov	byte ptr [esp + 16], dl         # 1-byte Spill
	call	_realloc
	movzx	edx, byte ptr [esp + 16]        # 1-byte Folded Reload
	add	esp, 8
	test	eax, eax
	je	LBB7_373
# %bb.372:                              #   in Loop: Header=BB7_369 Depth=3
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [ebp + 8], edi
	mov	dword ptr [ebp], eax
	jmp	LBB7_367
LBB7_373:                               #   in Loop: Header=BB7_364 Depth=2
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	cmp	ecx, 18
	je	LBB7_380
# %bb.374:                              #   in Loop: Header=BB7_364 Depth=2
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	cmp	ecx, 17
	je	LBB7_388
# %bb.375:                              #   in Loop: Header=BB7_364 Depth=2
	cmp	ecx, 16
	jne	LBB7_363
# %bb.376:                              #   in Loop: Header=BB7_364 Depth=2
	mov	ebx, dword ptr [esi + 4*eax + 4]
	mov	ecx, edx
	inc	eax
	and	cl, 7
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	jne	LBB7_394
# %bb.377:                              #   in Loop: Header=BB7_364 Depth=2
	mov	esi, dword ptr [esp]
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	mov	byte ptr [esp + 8], dl          # 1-byte Spill
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_392
# %bb.378:                              #   in Loop: Header=BB7_364 Depth=2
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_413
# %bb.379:                              #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_393
LBB7_380:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	xor	ebp, ebp
	mov	edi, dword ptr [ecx + 4*eax + 4]
	inc	eax
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	dword ptr [esp + 12], edi       # 4-byte Spill
	jmp	LBB7_384
LBB7_381:                               #   in Loop: Header=BB7_384 Depth=3
	mov	eax, dword ptr [edi]
LBB7_382:                               #   in Loop: Header=BB7_384 Depth=3
	mov	dword ptr [edi + 4], ebx
	mov	byte ptr [eax + ecx], 0
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_383:                               #   in Loop: Header=BB7_384 Depth=3
	mov	ebx, ebp
	mov	edx, edi
	mov	ecx, ebx
	inc	ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	mov	ebp, ebx
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	edx, byte ptr [esp + 4]
	inc	dl
	cmp	ebx, 7
	mov	byte ptr [esp + 4], dl
	je	LBB7_362
LBB7_384:                               #   Parent Loop BB7_36 Depth=1
                                        #     Parent Loop BB7_364 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	eax, edx
	and	al, 7
	jne	LBB7_383
# %bb.385:                              #   in Loop: Header=BB7_384 Depth=3
	mov	edi, dword ptr [esp]
	mov	ecx, dword ptr [edi + 4]
	mov	esi, dword ptr [edi + 8]
	lea	ebx, [ecx + 1]
	cmp	esi, ebx
	jae	LBB7_381
# %bb.386:                              #   in Loop: Header=BB7_384 Depth=3
	shr	esi
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	mov	byte ptr [esp + 8], dl          # 1-byte Spill
	add	esi, ebx
	push	esi
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_413
# %bb.387:                              #   in Loop: Header=BB7_384 Depth=3
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [edi + 8], esi
	mov	dword ptr [edi], eax
	jmp	LBB7_382
LBB7_388:                               #   in Loop: Header=BB7_364 Depth=2
	mov	ebx, dword ptr [esi + 4*eax + 4]
	mov	ecx, edx
	inc	eax
	and	cl, 7
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	jne	LBB7_400
# %bb.389:                              #   in Loop: Header=BB7_364 Depth=2
	mov	esi, dword ptr [esp]
	mov	byte ptr [esp + 8], dl          # 1-byte Spill
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_398
# %bb.390:                              #   in Loop: Header=BB7_364 Depth=2
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_413
# %bb.391:                              #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_399
LBB7_392:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, dword ptr [esi]
LBB7_393:                               #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_394:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, ebx
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	al, byte ptr [esp + 4]
	inc	al
	mov	ecx, eax
	mov	byte ptr [esp + 4], al
	and	cl, 7
	jne	LBB7_406
# %bb.395:                              #   in Loop: Header=BB7_364 Depth=2
	mov	esi, dword ptr [esp]
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_404
# %bb.396:                              #   in Loop: Header=BB7_364 Depth=2
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_413
# %bb.397:                              #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_405
LBB7_398:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, dword ptr [esi]
LBB7_399:                               #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_400:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, ebx
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	al, byte ptr [esp + 4]
	inc	al
	mov	ecx, eax
	mov	byte ptr [esp + 4], al
	and	cl, 7
	jne	LBB7_409
# %bb.401:                              #   in Loop: Header=BB7_364 Depth=2
	mov	esi, dword ptr [esp]
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_407
# %bb.402:                              #   in Loop: Header=BB7_364 Depth=2
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_413
# %bb.403:                              #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_408
LBB7_404:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, dword ptr [esi]
LBB7_405:                               #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_406:                               #   in Loop: Header=BB7_364 Depth=2
	shr	ebx
	jmp	LBB7_417
LBB7_407:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, dword ptr [esi]
LBB7_408:                               #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_409:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, ebx
	shr	eax
	and	eax, 1
	shl	eax, cl
	mov	ecx, dword ptr [esp]
	mov	edx, dword ptr [ecx]
	mov	ecx, dword ptr [ecx + 4]
	or	byte ptr [ecx + edx - 1], al
	mov	al, byte ptr [esp + 4]
	inc	al
	mov	ecx, eax
	mov	byte ptr [esp + 4], al
	and	cl, 7
	jne	LBB7_416
# %bb.410:                              #   in Loop: Header=BB7_364 Depth=2
	mov	esi, dword ptr [esp]
	mov	byte ptr [esp + 8], al          # 1-byte Spill
	mov	edi, dword ptr [esi + 4]
	mov	ebp, dword ptr [esi + 8]
	lea	ebx, [edi + 1]
	cmp	ebp, ebx
	jae	LBB7_414
# %bb.411:                              #   in Loop: Header=BB7_364 Depth=2
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_413
# %bb.412:                              #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 8], ebp
	mov	dword ptr [esi], eax
	jmp	LBB7_415
LBB7_413:                               #   in Loop: Header=BB7_364 Depth=2
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	dl, byte ptr [esp + 8]          # 1-byte Reload
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	jmp	LBB7_363
LBB7_414:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, dword ptr [esi]
LBB7_415:                               #   in Loop: Header=BB7_364 Depth=2
	mov	dword ptr [esi + 4], ebx
	mov	byte ptr [eax + edi], 0
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	cl, byte ptr [esp + 4]
	and	cl, 7
LBB7_416:                               #   in Loop: Header=BB7_364 Depth=2
	shr	ebx, 2
LBB7_417:                               #   in Loop: Header=BB7_364 Depth=2
	mov	eax, dword ptr [esp]
	and	ebx, 1
	shl	ebx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], bl
	mov	dl, byte ptr [esp + 4]
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	inc	dl
	mov	byte ptr [esp + 4], dl
	jmp	LBB7_363
LBB7_418:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 92]
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
LBB7_419:                               #   in Loop: Header=BB7_36 Depth=1
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	mov	eax, dword ptr [eax + 1024]
	test	eax, eax
	je	LBB7_429
# %bb.420:                              #   in Loop: Header=BB7_36 Depth=1
	mov	ebx, eax
	mov	eax, dword ptr [esp + 88]
	dec	ebx
	mov	esi, dword ptr [eax + 1024]
	mov	al, byte ptr [esp + 4]
	mov	dword ptr [esp + 24], esi       # 4-byte Spill
	jmp	LBB7_424
LBB7_421:                               #   in Loop: Header=BB7_424 Depth=2
	mov	eax, dword ptr [edi]
LBB7_422:                               #   in Loop: Header=BB7_424 Depth=2
	mov	dword ptr [edi + 4], ebp
	mov	byte ptr [eax + ebx], 0
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	movzx	eax, byte ptr [esp + 4]
	and	al, 7
LBB7_423:                               #   in Loop: Header=BB7_424 Depth=2
	mov	edx, esi
	mov	ecx, ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esp]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	eax, byte ptr [esp + 4]
	inc	al
	add	ebx, -1
	mov	byte ptr [esp + 4], al
	jae	LBB7_428
LBB7_424:                               #   Parent Loop BB7_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	and	al, 7
	jne	LBB7_423
# %bb.425:                              #   in Loop: Header=BB7_424 Depth=2
	mov	edi, dword ptr [esp]
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	mov	ebx, dword ptr [edi + 4]
	mov	esi, dword ptr [edi + 8]
	lea	ebp, [ebx + 1]
	cmp	esi, ebp
	jae	LBB7_421
# %bb.426:                              #   in Loop: Header=BB7_424 Depth=2
	shr	esi
	add	esi, ebp
	push	esi
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB7_428
# %bb.427:                              #   in Loop: Header=BB7_424 Depth=2
	mov	dword ptr [edi + 8], esi
	mov	dword ptr [edi], eax
	jmp	LBB7_422
LBB7_428:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 12], 0         # 4-byte Folded Spill
	jmp	LBB7_430
LBB7_429:                               #   in Loop: Header=BB7_36 Depth=1
	mov	dword ptr [esp + 12], 64        # 4-byte Folded Spill
LBB7_430:                               #   in Loop: Header=BB7_36 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 68]       # 4-byte Reload
LBB7_191:                               #   in Loop: Header=BB7_36 Depth=1
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
LBB7_192:                               #   in Loop: Header=BB7_36 Depth=1
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	jmp	LBB7_97
LBB7_431:
	xor	ebx, ebx
	jmp	LBB7_433
LBB7_432:
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
LBB7_433:
	push	dword ptr [esp + 200]           # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 196]           # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 160]           # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 204]           # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 116]           # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 156]           # 4-byte Folded Reload
	call	_free
	add	esp, 4
LBB7_434:
	mov	esi, dword ptr [esp + 276]
	mov	edi, dword ptr [esp + 272]
LBB7_435:
	mov	eax, dword ptr [esp + 76]
	mov	dword ptr [edi], eax
	mov	eax, dword ptr [esp + 80]
	mov	dword ptr [esi], eax
	mov	eax, ebx
	add	esp, 252
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z" # -- Begin function ?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z
	.p2align	4, 0x90
"?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z": # @"?lodepng_zlib_decompress@@YAIPAPAEPAIPBEIPBULodePNGDecompressSettings@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	edi, dword ptr [esp + 32]
	mov	ebx, dword ptr [esp + 36]
	mov	esi, dword ptr [esp + 48]
	mov	edx, dword ptr [esp + 40]
	mov	eax, dword ptr [esp + 44]
	mov	ecx, dword ptr [ebx]
	mov	ebp, dword ptr [edi]
	mov	dword ptr [esp], ebp
	mov	dword ptr [esp + 4], ecx
	mov	dword ptr [esp + 8], ecx
	mov	ecx, esp
	push	esi
	push	eax
	call	"?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
	add	esp, 8
	mov	ecx, dword ptr [esp]
	mov	dword ptr [edi], ecx
	mov	ecx, dword ptr [esp + 4]
	mov	dword ptr [ebx], ecx
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z
"?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z": # @"?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	ebx, dword ptr [esp + 28]
	mov	eax, 53
	cmp	ebx, 2
	jb	LBB9_21
# %bb.1:
	mov	edi, edx
	movzx	edx, byte ptr [edx]
	mov	esi, ecx
	movzx	ecx, byte ptr [edi + 1]
	mov	eax, edx
	shl	eax, 8
	or	eax, ecx
	imul	ebp, eax, -1108378657
	mov	eax, 24
	cmp	ebp, 138547332
	jbe	LBB9_2
LBB9_21:
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB9_2:
	test	dl, dl
	mov	eax, 25
	js	LBB9_21
# %bb.3:
	and	edx, 15
	cmp	edx, 8
	jne	LBB9_21
# %bb.4:
	mov	eax, 26
	test	cl, 32
	jne	LBB9_21
# %bb.5:
	mov	ecx, dword ptr [esp + 32]
	lea	eax, [ebx - 2]
	lea	edx, [edi + 2]
	mov	ecx, dword ptr [ecx + 16]
	test	ecx, ecx
	je	LBB9_10
# %bb.6:
	lea	ebp, [esi + 4]
	push	dword ptr [esp + 32]
	push	eax
	push	edx
	push	ebp
	push	esi
	call	ecx
	add	esp, 20
	mov	ecx, dword ptr [esi + 4]
	test	eax, eax
	mov	dword ptr [esi + 8], ecx
	je	LBB9_11
# %bb.7:
	mov	eax, dword ptr [esp + 32]
	mov	eax, dword ptr [eax + 8]
	test	eax, eax
	je	LBB9_8
# %bb.9:
	cmp	eax, ecx
	mov	eax, 110
	sbb	eax, 0
	jmp	LBB9_21
LBB9_10:
	mov	ecx, esi
	push	dword ptr [esp + 32]
	push	eax
	call	"?lodepng_inflatev@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
	add	esp, 8
	test	eax, eax
	jne	LBB9_21
LBB9_11:
	mov	eax, dword ptr [esp + 32]
	cmp	dword ptr [eax], 0
	jne	LBB9_20
# %bb.12:
	mov	edx, dword ptr [ebx + edi - 4]
	mov	ebx, dword ptr [esi + 4]
	bswap	edx
	test	ebx, ebx
	je	LBB9_13
# %bb.14:
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	edx, dword ptr [esi]
	mov	ecx, 1
	xor	esi, esi
LBB9_15:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_16 Depth 2
	cmp	ebx, 5552
	mov	edi, 5552
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	cmovb	edi, ebx
	mov	eax, edi
	.p2align	4, 0x90
LBB9_16:                                #   Parent Loop BB9_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebp, byte ptr [edx]
	inc	edx
	add	ecx, ebp
	add	esi, ecx
	dec	eax
	jne	LBB9_16
# %bb.17:                               #   in Loop: Header=BB9_15 Depth=1
	mov	eax, ecx
	mov	ebp, -2146992015
	mul	ebp
	shr	edx, 15
	imul	eax, edx, 65521
	sub	ecx, eax
	mov	eax, esi
	mul	ebp
	shr	edx, 15
	imul	eax, edx, 65521
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	sub	esi, eax
	add	edx, edi
	sub	ebx, edi
	jne	LBB9_15
# %bb.18:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	shl	esi, 16
	jmp	LBB9_19
LBB9_8:
	mov	eax, 110
	jmp	LBB9_21
LBB9_13:
	xor	esi, esi
	mov	ecx, 1
LBB9_19:
	or	ecx, esi
	mov	eax, 58
	cmp	ecx, edx
	jne	LBB9_21
LBB9_20:
	xor	eax, eax
	jmp	LBB9_21
                                        # -- End function
	.def	 "?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z" # -- Begin function ?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z
	.p2align	4, 0x90
"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z": # @"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	eax, dword ptr [esp + 56]
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp], 0
	mov	edi, dword ptr [esp + 52]
	mov	ebp, dword ptr [esp + 48]
	mov	ebx, dword ptr [esp + 40]
	mov	ecx, dword ptr [eax + 28]
	test	ecx, ecx
	je	LBB10_2
# %bb.1:
	lea	esi, [esp + 4]
	mov	edx, esp
	push	eax
	push	edi
	push	ebp
	push	edx
	push	esi
	call	ecx
	add	esp, 20
	mov	ecx, dword ptr [esp + 44]
	test	eax, eax
	mov	esi, 111
	mov	dword ptr [ebx], 0
	mov	dword ptr [ecx], 0
	jne	LBB10_18
	jmp	LBB10_3
LBB10_2:
	mov	ecx, esp
	lea	edx, [esp + 4]
	push	eax
	push	edi
	push	ebp
	push	ecx
	push	edx
	call	"?lodepng_deflate@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
	add	esp, 20
	mov	ecx, dword ptr [esp + 44]
	mov	esi, eax
	test	eax, eax
	mov	dword ptr [ebx], 0
	mov	dword ptr [ecx], 0
	jne	LBB10_18
LBB10_3:
	mov	eax, dword ptr [esp]
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	add	eax, 6
	mov	dword ptr [ecx], eax
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [ebx], eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB10_4
# %bb.5:
	test	edi, edi
	je	LBB10_6
# %bb.7:
	mov	ebx, 1
	xor	ecx, ecx
	mov	edx, ebp
	.p2align	4, 0x90
LBB10_8:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_9 Depth 2
	cmp	edi, 5552
	mov	esi, 5552
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	cmovb	esi, edi
	mov	eax, esi
	.p2align	4, 0x90
LBB10_9:                                #   Parent Loop BB10_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebp, byte ptr [edx]
	inc	edx
	add	ebx, ebp
	add	ecx, ebx
	dec	eax
	jne	LBB10_9
# %bb.10:                               #   in Loop: Header=BB10_8 Depth=1
	mov	eax, ebx
	mov	ebp, -2146992015
	mul	ebp
	shr	edx, 15
	imul	eax, edx, 65521
	sub	ebx, eax
	mov	eax, ecx
	mul	ebp
	shr	edx, 15
	imul	eax, edx, 65521
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	sub	ecx, eax
	add	edx, esi
	sub	edi, esi
	jne	LBB10_8
# %bb.11:
	mov	esi, dword ptr [esp + 40]
	shl	ecx, 16
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	cmp	dword ptr [esp + 8], 0          # 4-byte Folded Reload
	mov	word ptr [edi], 376
	je	LBB10_13
LBB10_14:
	xor	eax, eax
	.p2align	4, 0x90
LBB10_15:                               # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [esp + 4]
	movzx	edx, byte ptr [edx + eax]
	mov	byte ptr [edi + eax + 2], dl
	inc	eax
	mov	edi, dword ptr [esi]
	cmp	eax, dword ptr [esp]
	jne	LBB10_15
# %bb.16:
	mov	eax, dword ptr [esp + 44]
	mov	eax, dword ptr [eax]
	add	eax, -4
	jmp	LBB10_17
LBB10_4:
	mov	esi, 83
	jmp	LBB10_18
LBB10_6:
	mov	esi, ebx
	xor	ecx, ecx
	mov	ebx, 1
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	cmp	dword ptr [esp + 8], 0          # 4-byte Folded Reload
	mov	word ptr [edi], 376
	jne	LBB10_14
LBB10_13:
	mov	eax, 2
LBB10_17:
	mov	edx, ecx
	xor	esi, esi
	shr	ecx, 16
	shr	edx, 24
	mov	byte ptr [edi + eax], dl
	mov	byte ptr [edi + eax + 1], cl
	mov	byte ptr [edi + eax + 2], bh
	mov	byte ptr [edi + eax + 3], bl
LBB10_18:
	push	dword ptr [esp + 4]
	call	_free
	add	esp, 4
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@00000003000008000000000100000002 # -- Begin function ?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z
	.section	.rdata,"dr",discard,__xmm@00000003000008000000000100000002
	.p2align	4
__xmm@00000003000008000000000100000002:
	.long	2                               # 0x2
	.long	1                               # 0x1
	.long	2048                            # 0x800
	.long	3                               # 0x3
	.text
	.globl	"?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z"
	.p2align	4, 0x90
"?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z": # @"?lodepng_compress_settings_init@@YAXPAULodePNGCompressSettings@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	movaps	xmm0, xmmword ptr [__xmm@00000003000008000000000100000002] # xmm0 = [2,1,2048,3]
	movups	xmmword ptr [eax], xmm0
	mov	dword ptr [eax + 16], 128
	mov	dword ptr [eax + 20], 1
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 32], 0
	ret
                                        # -- End function
	.def	 "?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z" # -- Begin function ?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z
	.p2align	4, 0x90
"?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z": # @"?lodepng_decompress_settings_init@@YAXPAULodePNGDecompressSettings@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	ret
                                        # -- End function
	.def	 "?lodepng_crc32@@YAIPBEI@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_crc32@@YAIPBEI@Z"     # -- Begin function ?lodepng_crc32@@YAIPBEI@Z
	.p2align	4, 0x90
"?lodepng_crc32@@YAIPBEI@Z":            # @"?lodepng_crc32@@YAIPBEI@Z"
# %bb.0:
	push	edi
	push	esi
	mov	ecx, dword ptr [esp + 16]
	test	ecx, ecx
	je	LBB13_1
# %bb.2:
	mov	edx, dword ptr [esp + 12]
	mov	eax, -1
	.p2align	4, 0x90
LBB13_3:                                # =>This Inner Loop Header: Depth=1
	movzx	esi, byte ptr [edx]
	movzx	edi, al
	shr	eax, 8
	inc	edx
	xor	edi, esi
	xor	eax, dword ptr [4*edi + _lodepng_crc32_table]
	dec	ecx
	jne	LBB13_3
# %bb.4:
	not	eax
	pop	esi
	pop	edi
	ret
LBB13_1:
	xor	eax, eax
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_length@@YAIPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_length@@YAIPBE@Z" # -- Begin function ?lodepng_chunk_length@@YAIPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_length@@YAIPBE@Z":      # @"?lodepng_chunk_length@@YAIPBE@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	eax, dword ptr [eax]
	bswap	eax
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_type@@YAXQADPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_type@@YAXQADPBE@Z" # -- Begin function ?lodepng_chunk_type@@YAXQADPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_type@@YAXQADPBE@Z":     # @"?lodepng_chunk_type@@YAXQADPBE@Z"
# %bb.0:
	mov	ecx, dword ptr [esp + 8]
	mov	eax, dword ptr [esp + 4]
	mov	dl, byte ptr [ecx + 4]
	mov	byte ptr [eax], dl
	mov	dl, byte ptr [ecx + 5]
	mov	byte ptr [eax + 1], dl
	mov	dl, byte ptr [ecx + 6]
	mov	byte ptr [eax + 2], dl
	mov	cl, byte ptr [ecx + 7]
	mov	byte ptr [eax + 3], cl
	mov	byte ptr [eax + 4], 0
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_type_equals@@YAEPBEPBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_type_equals@@YAEPBEPBD@Z" # -- Begin function ?lodepng_chunk_type_equals@@YAEPBEPBD@Z
	.p2align	4, 0x90
"?lodepng_chunk_type_equals@@YAEPBEPBD@Z": # @"?lodepng_chunk_type_equals@@YAEPBEPBD@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 12]
	mov	ecx, dword ptr [esp + 8]
	lea	edx, [eax - 1]
	.p2align	4, 0x90
LBB16_1:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [edx + 1], 0
	lea	edx, [edx + 1]
	jne	LBB16_1
# %bb.2:
	sub	edx, eax
	cmp	edx, 4
	jne	LBB16_7
# %bb.3:
	movzx	edx, byte ptr [ecx + 4]
	movsx	esi, byte ptr [eax]
	cmp	edx, esi
	jne	LBB16_7
# %bb.4:
	movzx	edx, byte ptr [ecx + 5]
	movsx	esi, byte ptr [eax + 1]
	cmp	edx, esi
	jne	LBB16_7
# %bb.5:
	movzx	edx, byte ptr [ecx + 6]
	movsx	esi, byte ptr [eax + 2]
	cmp	edx, esi
	jne	LBB16_7
# %bb.6:
	movzx	ecx, byte ptr [ecx + 7]
	movsx	eax, byte ptr [eax + 3]
	cmp	ecx, eax
	sete	al
                                        # kill: def $al killed $al killed $eax
	pop	esi
	ret
LBB16_7:
	xor	eax, eax
                                        # kill: def $al killed $al killed $eax
	pop	esi
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_ancillary@@YAEPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_ancillary@@YAEPBE@Z" # -- Begin function ?lodepng_chunk_ancillary@@YAEPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_ancillary@@YAEPBE@Z":   # @"?lodepng_chunk_ancillary@@YAEPBE@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	al, byte ptr [eax + 4]
	shr	al, 5
	and	al, 1
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_private@@YAEPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_private@@YAEPBE@Z" # -- Begin function ?lodepng_chunk_private@@YAEPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_private@@YAEPBE@Z":     # @"?lodepng_chunk_private@@YAEPBE@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	al, byte ptr [eax + 6]
	shr	al, 5
	and	al, 1
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_safetocopy@@YAEPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_safetocopy@@YAEPBE@Z" # -- Begin function ?lodepng_chunk_safetocopy@@YAEPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_safetocopy@@YAEPBE@Z":  # @"?lodepng_chunk_safetocopy@@YAEPBE@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	al, byte ptr [eax + 7]
	shr	al, 5
	and	al, 1
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_data@@YAPAEPAE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_data@@YAPAEPAE@Z" # -- Begin function ?lodepng_chunk_data@@YAPAEPAE@Z
	.p2align	4, 0x90
"?lodepng_chunk_data@@YAPAEPAE@Z":      # @"?lodepng_chunk_data@@YAPAEPAE@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	add	eax, 8
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_data_const@@YAPBEPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_data_const@@YAPBEPBE@Z" # -- Begin function ?lodepng_chunk_data_const@@YAPBEPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_data_const@@YAPBEPBE@Z": # @"?lodepng_chunk_data_const@@YAPBEPBE@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	add	eax, 8
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_check_crc@@YAIPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_check_crc@@YAIPBE@Z" # -- Begin function ?lodepng_chunk_check_crc@@YAIPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_check_crc@@YAIPBE@Z":   # @"?lodepng_chunk_check_crc@@YAIPBE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	edi, dword ptr [esp + 28]
	mov	ebp, dword ptr [edi]
	bswap	ebp
	movzx	eax, byte ptr [ebp + edi + 8]
	movzx	esi, byte ptr [ebp + edi + 9]
	movzx	ecx, byte ptr [ebp + edi + 10]
	movzx	edx, byte ptr [ebp + edi + 11]
	add	ebp, 4
	je	LBB22_1
# %bb.2:
	add	edi, 4
	mov	ebx, -1
	mov	dword ptr [esp], esi            # 4-byte Spill
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	.p2align	4, 0x90
LBB22_3:                                # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi]
	movzx	esi, bl
	shr	ebx, 8
	inc	edi
	xor	esi, edx
	xor	ebx, dword ptr [4*esi + _lodepng_crc32_table]
	dec	ebp
	jne	LBB22_3
# %bb.4:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	esi, dword ptr [esp]            # 4-byte Reload
	not	ebx
	jmp	LBB22_5
LBB22_1:
	xor	ebx, ebx
LBB22_5:
	shl	esi, 16
	shl	eax, 24
	shl	ecx, 8
	or	eax, esi
	or	ecx, eax
	xor	eax, eax
	or	ecx, edx
	cmp	ecx, ebx
	setne	al
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_generate_crc@@YAXPAE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_generate_crc@@YAXPAE@Z" # -- Begin function ?lodepng_chunk_generate_crc@@YAXPAE@Z
	.p2align	4, 0x90
"?lodepng_chunk_generate_crc@@YAXPAE@Z": # @"?lodepng_chunk_generate_crc@@YAXPAE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	eax, dword ptr [esp + 20]
	mov	ecx, dword ptr [eax]
	bswap	ecx
	mov	esi, ecx
	add	esi, 4
	je	LBB23_1
# %bb.2:
	lea	edi, [eax + 4]
	mov	edx, -1
	.p2align	4, 0x90
LBB23_3:                                # =>This Inner Loop Header: Depth=1
	movzx	ebx, byte ptr [edi]
	movzx	ebp, dl
	shr	edx, 8
	inc	edi
	xor	ebp, ebx
	xor	edx, dword ptr [4*ebp + _lodepng_crc32_table]
	dec	esi
	jne	LBB23_3
# %bb.4:
	not	edx
	jmp	LBB23_5
LBB23_1:
	xor	edx, edx
LBB23_5:
	bswap	edx
	mov	dword ptr [eax + ecx + 8], edx
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_next@@YAPAEPAE0@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_next@@YAPAEPAE0@Z" # -- Begin function ?lodepng_chunk_next@@YAPAEPAE0@Z
	.p2align	4, 0x90
"?lodepng_chunk_next@@YAPAEPAE0@Z":     # @"?lodepng_chunk_next@@YAPAEPAE0@Z"
# %bb.0:
	push	ebx
	push	esi
	mov	eax, dword ptr [esp + 16]
	mov	ecx, dword ptr [esp + 12]
	cmp	ecx, eax
	jae	LBB24_12
# %bb.1:
	mov	edx, eax
	sub	edx, ecx
	cmp	edx, 12
	jl	LBB24_12
# %bb.2:
	movzx	edx, byte ptr [ecx]
	mov	bl, byte ptr [ecx + 1]
	cmp	edx, 137
	jne	LBB24_11
# %bb.3:
	cmp	bl, 80
	jne	LBB24_11
# %bb.4:
	cmp	byte ptr [ecx + 2], 78
	mov	bl, 80
	jne	LBB24_11
# %bb.5:
	cmp	byte ptr [ecx + 3], 71
	jne	LBB24_11
# %bb.6:
	cmp	byte ptr [ecx + 4], 13
	jne	LBB24_11
# %bb.7:
	cmp	byte ptr [ecx + 5], 10
	jne	LBB24_11
# %bb.8:
	cmp	byte ptr [ecx + 6], 26
	jne	LBB24_11
# %bb.9:
	cmp	byte ptr [ecx + 7], 10
	jne	LBB24_11
# %bb.10:
	add	ecx, 8
	mov	eax, ecx
	jmp	LBB24_12
LBB24_11:
	movzx	esi, bl
	shl	edx, 24
	movzx	ebx, byte ptr [ecx + 3]
	shl	esi, 16
	or	esi, edx
	movzx	edx, byte ptr [ecx + 2]
	shl	edx, 8
	or	edx, esi
	or	ebx, edx
	lea	edx, [ebx + 12]
	add	edx, ecx
	cmp	ebx, -12
	cmovs	edx, eax
	cmovb	eax, edx
LBB24_12:
	pop	esi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_next_const@@YAPBEPBE0@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_next_const@@YAPBEPBE0@Z" # -- Begin function ?lodepng_chunk_next_const@@YAPBEPBE0@Z
	.p2align	4, 0x90
"?lodepng_chunk_next_const@@YAPBEPBE0@Z": # @"?lodepng_chunk_next_const@@YAPBEPBE0@Z"
# %bb.0:
	push	ebx
	push	esi
	mov	eax, dword ptr [esp + 16]
	mov	ecx, dword ptr [esp + 12]
	cmp	ecx, eax
	jae	LBB25_12
# %bb.1:
	mov	edx, eax
	sub	edx, ecx
	cmp	edx, 12
	jl	LBB25_12
# %bb.2:
	movzx	edx, byte ptr [ecx]
	mov	bl, byte ptr [ecx + 1]
	cmp	edx, 137
	jne	LBB25_11
# %bb.3:
	cmp	bl, 80
	jne	LBB25_11
# %bb.4:
	cmp	byte ptr [ecx + 2], 78
	mov	bl, 80
	jne	LBB25_11
# %bb.5:
	cmp	byte ptr [ecx + 3], 71
	jne	LBB25_11
# %bb.6:
	cmp	byte ptr [ecx + 4], 13
	jne	LBB25_11
# %bb.7:
	cmp	byte ptr [ecx + 5], 10
	jne	LBB25_11
# %bb.8:
	cmp	byte ptr [ecx + 6], 26
	jne	LBB25_11
# %bb.9:
	cmp	byte ptr [ecx + 7], 10
	jne	LBB25_11
# %bb.10:
	add	ecx, 8
	mov	eax, ecx
	jmp	LBB25_12
LBB25_11:
	movzx	esi, bl
	shl	edx, 24
	movzx	ebx, byte ptr [ecx + 3]
	shl	esi, 16
	or	esi, edx
	movzx	edx, byte ptr [ecx + 2]
	shl	edx, 8
	or	edx, esi
	or	ebx, edx
	lea	edx, [ebx + 12]
	add	edx, ecx
	cmp	ebx, -12
	cmovs	edx, eax
	cmovb	eax, edx
LBB25_12:
	pop	esi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_find@@YAPAEPAE0QBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_find@@YAPAEPAE0QBD@Z" # -- Begin function ?lodepng_chunk_find@@YAPAEPAE0QBD@Z
	.p2align	4, 0x90
"?lodepng_chunk_find@@YAPAEPAE0QBD@Z":  # @"?lodepng_chunk_find@@YAPAEPAE0QBD@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebp, dword ptr [esp + 24]
	mov	edx, dword ptr [esp + 20]
	xor	eax, eax
	cmp	edx, ebp
	jae	LBB26_23
# %bb.1:
	mov	eax, dword ptr [esp + 28]
	lea	edi, [eax - 1]
	.p2align	4, 0x90
LBB26_2:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_4 Depth 2
	mov	ecx, ebp
	sub	ecx, edx
	cmp	ecx, 12
	jl	LBB26_22
# %bb.3:                                #   in Loop: Header=BB26_2 Depth=1
	mov	ecx, edi
	.p2align	4, 0x90
LBB26_4:                                #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [ecx + 1], 0
	lea	ecx, [ecx + 1]
	jne	LBB26_4
# %bb.5:                                #   in Loop: Header=BB26_2 Depth=1
	sub	ecx, eax
	cmp	ecx, 4
	jne	LBB26_11
# %bb.6:                                #   in Loop: Header=BB26_2 Depth=1
	movzx	ecx, byte ptr [edx + 4]
	movsx	ebx, byte ptr [eax]
	cmp	ecx, ebx
	jne	LBB26_11
# %bb.7:                                #   in Loop: Header=BB26_2 Depth=1
	movzx	ecx, byte ptr [edx + 5]
	movsx	ebx, byte ptr [eax + 1]
	cmp	ecx, ebx
	jne	LBB26_11
# %bb.8:                                #   in Loop: Header=BB26_2 Depth=1
	movzx	ecx, byte ptr [edx + 6]
	movsx	ebx, byte ptr [eax + 2]
	cmp	ecx, ebx
	jne	LBB26_11
# %bb.9:                                #   in Loop: Header=BB26_2 Depth=1
	movzx	ecx, byte ptr [edx + 7]
	movsx	ebx, byte ptr [eax + 3]
	cmp	ecx, ebx
	je	LBB26_10
	.p2align	4, 0x90
LBB26_11:                               #   in Loop: Header=BB26_2 Depth=1
	movzx	ebx, byte ptr [edx]
	mov	ch, byte ptr [edx + 1]
	mov	cl, byte ptr [edx + 2]
	cmp	ebx, 137
	jne	LBB26_20
# %bb.12:                               #   in Loop: Header=BB26_2 Depth=1
	cmp	ch, 80
	jne	LBB26_20
# %bb.13:                               #   in Loop: Header=BB26_2 Depth=1
	cmp	cl, 78
	jne	LBB26_20
# %bb.14:                               #   in Loop: Header=BB26_2 Depth=1
	cmp	byte ptr [edx + 3], 71
	mov	cl, 78
	jne	LBB26_20
# %bb.15:                               #   in Loop: Header=BB26_2 Depth=1
	cmp	byte ptr [edx + 4], 13
	jne	LBB26_20
# %bb.16:                               #   in Loop: Header=BB26_2 Depth=1
	cmp	byte ptr [edx + 5], 10
	jne	LBB26_20
# %bb.17:                               #   in Loop: Header=BB26_2 Depth=1
	cmp	byte ptr [edx + 6], 26
	jne	LBB26_20
# %bb.18:                               #   in Loop: Header=BB26_2 Depth=1
	cmp	byte ptr [edx + 7], 10
	jne	LBB26_20
# %bb.19:                               #   in Loop: Header=BB26_2 Depth=1
	add	edx, 8
	mov	ecx, edx
	cmp	ecx, ebp
	jb	LBB26_2
	jmp	LBB26_22
	.p2align	4, 0x90
LBB26_20:                               #   in Loop: Header=BB26_2 Depth=1
	movzx	esi, ch
	shl	ebx, 24
	movzx	ecx, cl
	shl	esi, 16
	shl	ecx, 8
	or	esi, ebx
	movzx	ebx, byte ptr [edx + 3]
	or	ecx, esi
	or	ebx, ecx
	lea	ecx, [ebx + 12]
	add	ecx, edx
	cmp	ebx, -12
	cmovs	ecx, ebp
	cmovae	ecx, ebp
	mov	edx, ecx
	cmp	ecx, ebp
	jb	LBB26_2
LBB26_22:
	xor	eax, eax
LBB26_23:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB26_10:
	mov	eax, edx
	jmp	LBB26_23
                                        # -- End function
	.def	 "?lodepng_chunk_find_const@@YAPBEPBE0QBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_find_const@@YAPBEPBE0QBD@Z" # -- Begin function ?lodepng_chunk_find_const@@YAPBEPBE0QBD@Z
	.p2align	4, 0x90
"?lodepng_chunk_find_const@@YAPBEPBE0QBD@Z": # @"?lodepng_chunk_find_const@@YAPBEPBE0QBD@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebp, dword ptr [esp + 24]
	mov	edx, dword ptr [esp + 20]
	xor	eax, eax
	cmp	edx, ebp
	jae	LBB27_23
# %bb.1:
	mov	eax, dword ptr [esp + 28]
	lea	edi, [eax - 1]
	.p2align	4, 0x90
LBB27_2:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_4 Depth 2
	mov	ecx, ebp
	sub	ecx, edx
	cmp	ecx, 12
	jl	LBB27_22
# %bb.3:                                #   in Loop: Header=BB27_2 Depth=1
	mov	ecx, edi
	.p2align	4, 0x90
LBB27_4:                                #   Parent Loop BB27_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [ecx + 1], 0
	lea	ecx, [ecx + 1]
	jne	LBB27_4
# %bb.5:                                #   in Loop: Header=BB27_2 Depth=1
	sub	ecx, eax
	cmp	ecx, 4
	jne	LBB27_11
# %bb.6:                                #   in Loop: Header=BB27_2 Depth=1
	movzx	ecx, byte ptr [edx + 4]
	movsx	ebx, byte ptr [eax]
	cmp	ecx, ebx
	jne	LBB27_11
# %bb.7:                                #   in Loop: Header=BB27_2 Depth=1
	movzx	ecx, byte ptr [edx + 5]
	movsx	ebx, byte ptr [eax + 1]
	cmp	ecx, ebx
	jne	LBB27_11
# %bb.8:                                #   in Loop: Header=BB27_2 Depth=1
	movzx	ecx, byte ptr [edx + 6]
	movsx	ebx, byte ptr [eax + 2]
	cmp	ecx, ebx
	jne	LBB27_11
# %bb.9:                                #   in Loop: Header=BB27_2 Depth=1
	movzx	ecx, byte ptr [edx + 7]
	movsx	ebx, byte ptr [eax + 3]
	cmp	ecx, ebx
	je	LBB27_10
	.p2align	4, 0x90
LBB27_11:                               #   in Loop: Header=BB27_2 Depth=1
	movzx	ebx, byte ptr [edx]
	mov	ch, byte ptr [edx + 1]
	mov	cl, byte ptr [edx + 2]
	cmp	ebx, 137
	jne	LBB27_20
# %bb.12:                               #   in Loop: Header=BB27_2 Depth=1
	cmp	ch, 80
	jne	LBB27_20
# %bb.13:                               #   in Loop: Header=BB27_2 Depth=1
	cmp	cl, 78
	jne	LBB27_20
# %bb.14:                               #   in Loop: Header=BB27_2 Depth=1
	cmp	byte ptr [edx + 3], 71
	mov	cl, 78
	jne	LBB27_20
# %bb.15:                               #   in Loop: Header=BB27_2 Depth=1
	cmp	byte ptr [edx + 4], 13
	jne	LBB27_20
# %bb.16:                               #   in Loop: Header=BB27_2 Depth=1
	cmp	byte ptr [edx + 5], 10
	jne	LBB27_20
# %bb.17:                               #   in Loop: Header=BB27_2 Depth=1
	cmp	byte ptr [edx + 6], 26
	jne	LBB27_20
# %bb.18:                               #   in Loop: Header=BB27_2 Depth=1
	cmp	byte ptr [edx + 7], 10
	jne	LBB27_20
# %bb.19:                               #   in Loop: Header=BB27_2 Depth=1
	add	edx, 8
	mov	ecx, edx
	cmp	ecx, ebp
	jb	LBB27_2
	jmp	LBB27_22
	.p2align	4, 0x90
LBB27_20:                               #   in Loop: Header=BB27_2 Depth=1
	movzx	esi, ch
	shl	ebx, 24
	movzx	ecx, cl
	shl	esi, 16
	shl	ecx, 8
	or	esi, ebx
	movzx	ebx, byte ptr [edx + 3]
	or	ecx, esi
	or	ebx, ecx
	lea	ecx, [ebx + 12]
	add	ecx, edx
	cmp	ebx, -12
	cmovs	ecx, ebp
	cmovae	ecx, ebp
	mov	edx, ecx
	cmp	ecx, ebp
	jb	LBB27_2
LBB27_22:
	xor	eax, eax
LBB27_23:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB27_10:
	mov	eax, edx
	jmp	LBB27_23
                                        # -- End function
	.def	 "?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z" # -- Begin function ?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z": # @"?lodepng_chunk_append@@YAIPAPAEPAIPBE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	eax, dword ptr [esp + 28]
	mov	esi, 77
	mov	ebx, dword ptr [eax]
	bswap	ebx
	sub	ebx, -12
	jae	LBB28_6
# %bb.1:
	mov	eax, dword ptr [esp + 24]
	mov	edi, dword ptr [eax]
	mov	ebp, edi
	add	ebp, ebx
	jb	LBB28_6
# %bb.2:
	mov	esi, dword ptr [esp + 20]
	push	ebp
	push	dword ptr [esi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB28_3
# %bb.4:
	mov	ecx, dword ptr [esp + 24]
	mov	dword ptr [esi], eax
	xor	esi, esi
	test	ebx, ebx
	mov	dword ptr [ecx], ebp
	je	LBB28_6
# %bb.5:
	add	eax, edi
	push	ebx
	push	dword ptr [esp + 32]
	push	eax
	call	_memcpy
	add	esp, 12
	jmp	LBB28_6
LBB28_3:
	mov	esi, 83
LBB28_6:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_chunk_create@@YAIPAPAEPAIIPBDPBE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_chunk_create@@YAIPAPAEPAIIPBDPBE@Z" # -- Begin function ?lodepng_chunk_create@@YAIPAPAEPAIIPBDPBE@Z
	.p2align	4, 0x90
"?lodepng_chunk_create@@YAIPAPAEPAIIPBDPBE@Z": # @"?lodepng_chunk_create@@YAIPAPAEPAIIPBDPBE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	ebx, dword ptr [esp + 28]
	mov	ecx, dword ptr [esp + 24]
	mov	edx, dword ptr [esp + 32]
	mov	eax, 77
	mov	edi, dword ptr [ebx]
	mov	esi, dword ptr [ecx]
	mov	ebp, edi
	add	ebp, edx
	jb	LBB29_1
# %bb.2:
	sub	ebp, -12
	jae	LBB29_1
# %bb.3:
	cmp	edi, ebp
	jae	LBB29_6
# %bb.4:
	mov	eax, edi
	shr	eax
	add	eax, ebp
	push	eax
	push	esi
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB29_18
# %bb.5:
	mov	edx, dword ptr [esp + 32]
	mov	esi, eax
LBB29_6:
	lea	ecx, [esi + ebp]
	mov	ebx, dword ptr [esp + 36]
	sub	ecx, edx
	mov	edx, dword ptr [esp + 32]
	lea	eax, [ecx - 12]
	mov	dword ptr [esp], eax            # 4-byte Spill
	bswap	edx
	mov	dword ptr [ecx - 12], edx
	mov	edx, dword ptr [esp + 32]
	mov	ebx, dword ptr [ebx]
	test	edx, edx
	mov	dword ptr [ecx - 8], ebx
	je	LBB29_10
# %bb.7:
	add	eax, 8
	push	edx
	push	dword ptr [esp + 44]
	push	eax
	call	_memcpy
	mov	edx, dword ptr [esp + 44]
	add	esp, 12
	mov	ecx, edx
	add	ecx, 4
	jne	LBB29_11
# %bb.8:
	xor	eax, eax
	jmp	LBB29_15
LBB29_1:
	mov	ebp, edi
	jmp	LBB29_17
LBB29_10:
	mov	ecx, 4
LBB29_11:
	not	ebx
	mov	eax, 16777215
	movzx	edx, bl
	xor	eax, dword ptr [4*edx + _lodepng_crc32_table]
	cmp	ecx, 1
	je	LBB29_14
# %bb.12:
	dec	ecx
	lea	edx, [edi + esi + 5]
	.p2align	4, 0x90
LBB29_13:                               # =>This Inner Loop Header: Depth=1
	movzx	edi, byte ptr [edx]
	movzx	ebx, al
	shr	eax, 8
	inc	edx
	xor	ebx, edi
	xor	eax, dword ptr [4*ebx + _lodepng_crc32_table]
	dec	ecx
	jne	LBB29_13
LBB29_14:
	mov	edx, dword ptr [esp + 32]
	not	eax
LBB29_15:
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [esp + 28]
	bswap	eax
	mov	dword ptr [ecx + edx + 8], eax
	xor	eax, eax
LBB29_16:
	mov	ecx, dword ptr [esp + 24]
LBB29_17:
	mov	dword ptr [ecx], esi
	mov	dword ptr [ebx], ebp
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB29_18:
	mov	eax, 83
	mov	ebp, edi
	jmp	LBB29_16
                                        # -- End function
	.def	 "?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z" # -- Begin function ?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z": # @"?lodepng_color_mode_init@@YAXPAULodePNGColorMode@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax], 6
	mov	dword ptr [eax + 4], 8
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 12], 0
	ret
                                        # -- End function
	.def	 "?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z" # -- Begin function ?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z": # @"?lodepng_color_mode_cleanup@@YAXPAULodePNGColorMode@@@Z"
# %bb.0:
	push	esi
	mov	esi, dword ptr [esp + 8]
	mov	eax, dword ptr [esi + 8]
	test	eax, eax
	je	LBB31_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB31_2:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 12], 0
	pop	esi
	ret
                                        # -- End function
	.def	 "?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z" # -- Begin function ?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z": # @"?lodepng_palette_clear@@YAXPAULodePNGColorMode@@@Z"
# %bb.0:
	push	esi
	mov	esi, dword ptr [esp + 8]
	mov	eax, dword ptr [esi + 8]
	test	eax, eax
	je	LBB32_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB32_2:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 12], 0
	pop	esi
	ret
                                        # -- End function
	.def	 "?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z" # -- Begin function ?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z
	.p2align	4, 0x90
"?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z": # @"?lodepng_color_mode_copy@@YAIPAULodePNGColorMode@@PBU1@@Z"
# %bb.0:
	push	edi
	push	esi
	mov	edi, dword ptr [esp + 12]
	mov	esi, dword ptr [esp + 16]
	mov	eax, dword ptr [edi + 8]
	test	eax, eax
	je	LBB33_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB33_2:
	mov	dword ptr [edi + 8], 0
	mov	dword ptr [edi + 12], 0
	movsd	xmm0, qword ptr [esi + 24]      # xmm0 = mem[0],zero
	movsd	qword ptr [edi + 24], xmm0
	movsd	xmm0, qword ptr [esi + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [edi + 16], xmm0
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [esi + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [edi + 8], xmm1
	movsd	qword ptr [edi], xmm0
	cmp	dword ptr [esi + 8], 0
	je	LBB33_7
# %bb.3:
	push	1024
	call	_malloc
	add	esp, 4
	mov	dword ptr [edi + 8], eax
	test	eax, eax
	mov	ecx, dword ptr [esi + 12]
	je	LBB33_4
# %bb.5:
	shl	ecx, 2
	test	ecx, ecx
	je	LBB33_7
# %bb.6:
	push	ecx
	push	dword ptr [esi + 8]
	push	eax
	call	_memcpy
	add	esp, 12
LBB33_7:
	xor	eax, eax
	pop	esi
	pop	edi
	ret
LBB33_4:
	test	ecx, ecx
	mov	eax, 83
	cmove	eax, ecx
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?lodepng_color_mode_make@@YA?AULodePNGColorMode@@W4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_color_mode_make@@YA?AULodePNGColorMode@@W4LodePNGColorType@@I@Z" # -- Begin function ?lodepng_color_mode_make@@YA?AULodePNGColorMode@@W4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?lodepng_color_mode_make@@YA?AULodePNGColorMode@@W4LodePNGColorType@@I@Z": # @"?lodepng_color_mode_make@@YA?AULodePNGColorMode@@W4LodePNGColorType@@I@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	ecx, dword ptr [esp + 12]
	mov	edx, dword ptr [esp + 8]
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax], edx
	mov	dword ptr [eax + 4], ecx
	ret
                                        # -- End function
	.def	 "?lodepng_palette_add@@YAIPAULodePNGColorMode@@EEEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_palette_add@@YAIPAULodePNGColorMode@@EEEE@Z" # -- Begin function ?lodepng_palette_add@@YAIPAULodePNGColorMode@@EEEE@Z
	.p2align	4, 0x90
"?lodepng_palette_add@@YAIPAULodePNGColorMode@@EEEE@Z": # @"?lodepng_palette_add@@YAIPAULodePNGColorMode@@EEEE@Z"
# %bb.0:
	push	ebx
	push	esi
	mov	esi, dword ptr [esp + 12]
	mov	eax, dword ptr [esi + 8]
	test	eax, eax
	je	LBB35_1
LBB35_5:
	mov	edx, dword ptr [esi + 12]
	mov	ecx, 108
	cmp	edx, 255
	ja	LBB35_7
# %bb.6:
	mov	bh, byte ptr [esp + 16]
	mov	bl, byte ptr [esp + 20]
	mov	ch, byte ptr [esp + 24]
	mov	cl, byte ptr [esp + 28]
	mov	byte ptr [eax + 4*edx], bh
	mov	eax, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 12]
	mov	byte ptr [eax + 4*edx + 1], bl
	mov	eax, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 12]
	mov	byte ptr [eax + 4*edx + 2], ch
	mov	eax, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 12]
	mov	byte ptr [eax + 4*edx + 3], cl
	inc	dword ptr [esi + 12]
	xor	ecx, ecx
	jmp	LBB35_7
LBB35_1:
	push	1024
	call	_malloc
	add	esp, 4
	mov	ecx, 83
	test	eax, eax
	mov	dword ptr [esi + 8], eax
	je	LBB35_7
# %bb.2:
	mov	edx, -1024
	.p2align	4, 0x90
LBB35_3:                                # =>This Inner Loop Header: Depth=1
	mov	byte ptr [eax + edx + 1024], 0
	mov	eax, dword ptr [esi + 8]
	mov	byte ptr [eax + edx + 1025], 0
	mov	eax, dword ptr [esi + 8]
	mov	byte ptr [eax + edx + 1026], 0
	mov	eax, dword ptr [esi + 8]
	mov	byte ptr [eax + edx + 1027], -1
	add	edx, 4
	mov	eax, dword ptr [esi + 8]
	jne	LBB35_3
# %bb.4:
	test	eax, eax
	jne	LBB35_5
LBB35_7:
	mov	eax, ecx
	pop	esi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z": # @"?lodepng_get_bpp@@YAIPBULodePNGColorMode@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	edx, dword ptr [eax]
	mov	ecx, dword ptr [eax + 4]
	cmp	edx, 6
	ja	LBB36_1
# %bb.3:
	mov	eax, 1
	jmp	dword ptr [4*edx + LJTI36_0]
LBB36_7:
	imul	eax, ecx
	ret
LBB36_1:
	cmp	edx, 255
LBB36_2:
	xor	eax, eax
	imul	eax, ecx
	ret
LBB36_4:
	mov	eax, 3
	imul	eax, ecx
	ret
LBB36_5:
	mov	eax, 2
	imul	eax, ecx
	ret
LBB36_6:
	mov	eax, 4
	imul	eax, ecx
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI36_0:
	.long	LBB36_7
	.long	LBB36_2
	.long	LBB36_4
	.long	LBB36_7
	.long	LBB36_5
	.long	LBB36_2
	.long	LBB36_6
                                        # -- End function
	.def	 "?lodepng_get_channels@@YAIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?lodepng_get_channels@@YAIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_get_channels@@YAIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_get_channels@@YAIPBULodePNGColorMode@@@Z": # @"?lodepng_get_channels@@YAIPBULodePNGColorMode@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	ecx, dword ptr [eax]
	cmp	ecx, 6
	ja	LBB37_1
# %bb.3:
	mov	eax, 1
	jmp	dword ptr [4*ecx + LJTI37_0]
LBB37_7:
	ret
LBB37_1:
	cmp	ecx, 255
LBB37_2:
	xor	eax, eax
	ret
LBB37_4:
	mov	eax, 3
	ret
LBB37_5:
	mov	eax, 2
	ret
LBB37_6:
	mov	eax, 4
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI37_0:
	.long	LBB37_7
	.long	LBB37_2
	.long	LBB37_4
	.long	LBB37_7
	.long	LBB37_5
	.long	LBB37_2
	.long	LBB37_6
                                        # -- End function
	.def	 "?lodepng_is_greyscale_type@@YAIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?lodepng_is_greyscale_type@@YAIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_is_greyscale_type@@YAIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_is_greyscale_type@@YAIPBULodePNGColorMode@@@Z": # @"?lodepng_is_greyscale_type@@YAIPBULodePNGColorMode@@@Z"
# %bb.0:
	mov	ecx, dword ptr [esp + 4]
	xor	eax, eax
	test	dword ptr [ecx], -5
	sete	al
	ret
                                        # -- End function
	.def	 "?lodepng_is_alpha_type@@YAIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_is_alpha_type@@YAIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_is_alpha_type@@YAIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_is_alpha_type@@YAIPBULodePNGColorMode@@@Z": # @"?lodepng_is_alpha_type@@YAIPBULodePNGColorMode@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	eax, dword ptr [eax]
	shr	eax, 2
	and	eax, 1
	ret
                                        # -- End function
	.def	 "?lodepng_is_palette_type@@YAIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_is_palette_type@@YAIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_is_palette_type@@YAIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_is_palette_type@@YAIPBULodePNGColorMode@@@Z": # @"?lodepng_is_palette_type@@YAIPBULodePNGColorMode@@@Z"
# %bb.0:
	mov	ecx, dword ptr [esp + 4]
	xor	eax, eax
	cmp	dword ptr [ecx], 3
	sete	al
	ret
                                        # -- End function
	.def	 "?lodepng_has_palette_alpha@@YAIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_has_palette_alpha@@YAIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_has_palette_alpha@@YAIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_has_palette_alpha@@YAIPBULodePNGColorMode@@@Z": # @"?lodepng_has_palette_alpha@@YAIPBULodePNGColorMode@@@Z"
# %bb.0:
	mov	edx, dword ptr [esp + 4]
	xor	eax, eax
	mov	ecx, dword ptr [edx + 12]
	test	ecx, ecx
	je	LBB41_5
# %bb.1:
	mov	edx, dword ptr [edx + 8]
	add	edx, 3
	.p2align	4, 0x90
LBB41_3:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [edx], -1
	jne	LBB41_4
# %bb.2:                                #   in Loop: Header=BB41_3 Depth=1
	add	edx, 4
	dec	ecx
	jne	LBB41_3
LBB41_5:
	ret
LBB41_4:
	mov	eax, 1
	ret
                                        # -- End function
	.def	 "?lodepng_can_have_alpha@@YAIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_can_have_alpha@@YAIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_can_have_alpha@@YAIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_can_have_alpha@@YAIPBULodePNGColorMode@@@Z": # @"?lodepng_can_have_alpha@@YAIPBULodePNGColorMode@@@Z"
# %bb.0:
	mov	edx, dword ptr [esp + 4]
	mov	eax, 1
	cmp	dword ptr [edx + 16], 0
	je	LBB42_1
LBB42_7:
	ret
LBB42_1:
	test	byte ptr [edx], 4
	jne	LBB42_7
# %bb.2:
	mov	ecx, dword ptr [edx + 12]
	test	ecx, ecx
	je	LBB42_6
# %bb.3:
	mov	edx, dword ptr [edx + 8]
	add	edx, 3
	.p2align	4, 0x90
LBB42_4:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [edx], -1
	jne	LBB42_7
# %bb.5:                                #   in Loop: Header=BB42_4 Depth=1
	add	edx, 4
	dec	ecx
	jne	LBB42_4
LBB42_6:
	xor	eax, eax
	ret
                                        # -- End function
	.def	 "?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z": # @"?lodepng_get_raw_size@@YAIIIPBULodePNGColorMode@@@Z"
# %bb.0:
	push	edi
	push	esi
	mov	edx, dword ptr [esp + 20]
	mov	eax, dword ptr [esp + 16]
	mov	ecx, dword ptr [esp + 12]
	mov	edi, dword ptr [edx]
	mov	edx, dword ptr [edx + 4]
	cmp	edi, 6
	ja	LBB43_1
# %bb.3:
	mov	esi, 1
	jmp	dword ptr [4*edi + LJTI43_0]
LBB43_4:
	mov	esi, 3
	jmp	LBB43_7
LBB43_1:
	cmp	edi, 255
LBB43_2:
	xor	esi, esi
	jmp	LBB43_7
LBB43_5:
	mov	esi, 2
	jmp	LBB43_7
LBB43_6:
	mov	esi, 4
LBB43_7:
	imul	eax, ecx
	imul	esi, edx
	mov	ecx, eax
	and	eax, 7
	imul	eax, esi
	shr	ecx, 3
	add	eax, 7
	imul	ecx, esi
	shr	eax, 3
	add	eax, ecx
	pop	esi
	pop	edi
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI43_0:
	.long	LBB43_7
	.long	LBB43_2
	.long	LBB43_4
	.long	LBB43_7
	.long	LBB43_5
	.long	LBB43_2
	.long	LBB43_6
                                        # -- End function
	.def	 "?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z" # -- Begin function ?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z
	.p2align	4, 0x90
"?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z": # @"?lodepng_add_text@@YAIPAULodePNGInfo@@PBD1@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 16]
	mov	edx, dword ptr [esp + 12]
	mov	ecx, dword ptr [esp + 8]
	lea	esi, [eax - 1]
	.p2align	4, 0x90
LBB44_1:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [esi + 1], 0
	lea	esi, [esi + 1]
	jne	LBB44_1
# %bb.2:
	sub	esi, eax
	push	esi
	push	eax
	call	"?lodepng_add_text_sized@@YAIPAULodePNGInfo@@PBD1I@Z"
	add	esp, 8
	pop	esi
	ret
                                        # -- End function
	.def	 "?lodepng_add_text_sized@@YAIPAULodePNGInfo@@PBD1I@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?lodepng_add_text_sized@@YAIPAULodePNGInfo@@PBD1I@Z
"?lodepng_add_text_sized@@YAIPAULodePNGInfo@@PBD1I@Z": # @"?lodepng_add_text_sized@@YAIPAULodePNGInfo@@PBD1I@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [ecx + 60]
	mov	edi, edx
	mov	esi, ecx
	lea	eax, [4*eax + 4]
	push	eax
	push	dword ptr [ecx + 64]
	call	_realloc
	add	esp, 8
	mov	ebx, eax
	mov	eax, dword ptr [esi + 60]
	lea	eax, [4*eax + 4]
	push	eax
	push	dword ptr [esi + 68]
	call	_realloc
	add	esp, 8
	test	ebx, ebx
	je	LBB45_1
# %bb.15:
	test	eax, eax
	mov	dword ptr [esi + 64], ebx
	je	LBB45_16
# %bb.3:
	mov	dword ptr [esi + 68], eax
	lea	ebp, [edi - 1]
	mov	eax, dword ptr [esi + 60]
	mov	dword ptr [esp], eax            # 4-byte Spill
	inc	eax
	mov	dword ptr [esi + 60], eax
	.p2align	4, 0x90
LBB45_4:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebp + 1], 0
	lea	ebp, [ebp + 1]
	jne	LBB45_4
# %bb.5:
	sub	ebp, edi
	lea	eax, [ebp + 1]
	push	eax
	call	_malloc
	add	esp, 4
	mov	ebx, eax
	test	eax, eax
	je	LBB45_9
# %bb.6:
	test	ebp, ebp
	je	LBB45_8
# %bb.7:
	push	ebp
	push	edi
	push	ebx
	call	_memcpy
	add	esp, 12
LBB45_8:
	mov	byte ptr [ebx + ebp], 0
LBB45_9:
	mov	eax, dword ptr [esi + 64]
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	ebp, dword ptr [esp + 28]
	mov	dword ptr [eax + 4*ecx], ebx
	mov	ebx, ecx
	lea	eax, [ebp + 1]
	push	eax
	call	_malloc
	add	esp, 4
	mov	edi, eax
	test	eax, eax
	je	LBB45_13
# %bb.10:
	test	ebp, ebp
	je	LBB45_12
# %bb.11:
	push	ebp
	push	dword ptr [esp + 28]
	push	edi
	call	_memcpy
	add	esp, 12
LBB45_12:
	mov	byte ptr [edi + ebp], 0
LBB45_13:
	mov	eax, dword ptr [esi + 68]
	mov	dword ptr [eax + 4*ebx], edi
	mov	eax, dword ptr [esi + 64]
	cmp	dword ptr [eax + 4*ebx], 0
	je	LBB45_16
# %bb.14:
	mov	eax, dword ptr [esi + 68]
	xor	ecx, ecx
	cmp	dword ptr [eax + 4*ebx], 0
	mov	eax, 83
	cmovne	eax, ecx
	jmp	LBB45_17
LBB45_1:
	test	eax, eax
	je	LBB45_16
# %bb.2:
	mov	dword ptr [esi + 68], eax
LBB45_16:
	mov	eax, 83
LBB45_17:
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_clear_text@@YAXPAULodePNGInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_clear_text@@YAXPAULodePNGInfo@@@Z" # -- Begin function ?lodepng_clear_text@@YAXPAULodePNGInfo@@@Z
	.p2align	4, 0x90
"?lodepng_clear_text@@YAXPAULodePNGInfo@@@Z": # @"?lodepng_clear_text@@YAXPAULodePNGInfo@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 16]
	cmp	dword ptr [esi + 60], 0
	mov	ebx, dword ptr [esi + 64]
	je	LBB46_3
# %bb.1:
	xor	edi, edi
	.p2align	4, 0x90
LBB46_2:                                # =>This Inner Loop Header: Depth=1
	push	dword ptr [ebx + 4*edi]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 4*edi], 0
	mov	ebx, dword ptr [esi + 68]
	push	dword ptr [ebx + 4*edi]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 4*edi], 0
	inc	edi
	mov	ebx, dword ptr [esi + 64]
	cmp	edi, dword ptr [esi + 60]
	jne	LBB46_2
LBB46_3:
	push	ebx
	call	_free
	add	esp, 4
	push	dword ptr [esi + 68]
	call	_free
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_clear_itext@@YAXPAULodePNGInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_clear_itext@@YAXPAULodePNGInfo@@@Z" # -- Begin function ?lodepng_clear_itext@@YAXPAULodePNGInfo@@@Z
	.p2align	4, 0x90
"?lodepng_clear_itext@@YAXPAULodePNGInfo@@@Z": # @"?lodepng_clear_itext@@YAXPAULodePNGInfo@@@Z"
# %bb.0:
	mov	ecx, dword ptr [esp + 4]
	jmp	"?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z" # TAILCALL
                                        # -- End function
	.def	 "?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z
"?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z": # @"?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	cmp	dword ptr [ecx + 72], 0
	mov	ebx, dword ptr [ecx + 76]
	mov	esi, ecx
	je	LBB48_3
# %bb.1:
	xor	edi, edi
	.p2align	4, 0x90
LBB48_2:                                # =>This Inner Loop Header: Depth=1
	push	dword ptr [ebx + 4*edi]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 4*edi], 0
	mov	ebx, dword ptr [esi + 80]
	push	dword ptr [ebx + 4*edi]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 4*edi], 0
	mov	ebx, dword ptr [esi + 84]
	push	dword ptr [ebx + 4*edi]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 4*edi], 0
	mov	ebx, dword ptr [esi + 88]
	push	dword ptr [ebx + 4*edi]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 4*edi], 0
	inc	edi
	mov	ebx, dword ptr [esi + 76]
	cmp	edi, dword ptr [esi + 72]
	jne	LBB48_2
LBB48_3:
	push	ebx
	call	_free
	add	esp, 4
	push	dword ptr [esi + 80]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 84]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 88]
	call	_free
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z" # -- Begin function ?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z
	.p2align	4, 0x90
"?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z": # @"?lodepng_add_itext@@YAIPAULodePNGInfo@@PBD111@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	edi, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 28]
	mov	eax, dword ptr [esp + 24]
	mov	edx, dword ptr [esp + 20]
	mov	ecx, dword ptr [esp + 16]
	lea	ebx, [edi - 1]
	.p2align	4, 0x90
LBB49_1:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebx + 1], 0
	lea	ebx, [ebx + 1]
	jne	LBB49_1
# %bb.2:
	sub	ebx, edi
	push	ebx
	push	edi
	push	esi
	push	eax
	call	"?lodepng_add_itext_sized@@YAIPAULodePNGInfo@@PBD111I@Z"
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_add_itext_sized@@YAIPAULodePNGInfo@@PBD111I@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?lodepng_add_itext_sized@@YAIPAULodePNGInfo@@PBD111I@Z
"?lodepng_add_itext_sized@@YAIPAULodePNGInfo@@PBD111I@Z": # @"?lodepng_add_itext_sized@@YAIPAULodePNGInfo@@PBD111I@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [ecx + 72]
	mov	esi, ecx
	mov	dword ptr [esp], edx            # 4-byte Spill
	lea	eax, [4*eax + 4]
	push	eax
	push	dword ptr [ecx + 76]
	call	_realloc
	add	esp, 8
	mov	ebx, eax
	mov	eax, dword ptr [esi + 72]
	lea	eax, [4*eax + 4]
	push	eax
	push	dword ptr [esi + 80]
	call	_realloc
	add	esp, 8
	mov	ebp, eax
	mov	eax, dword ptr [esi + 72]
	lea	eax, [4*eax + 4]
	push	eax
	push	dword ptr [esi + 84]
	call	_realloc
	add	esp, 8
	mov	edi, eax
	mov	eax, dword ptr [esi + 72]
	lea	eax, [4*eax + 4]
	push	eax
	push	dword ptr [esi + 88]
	call	_realloc
	add	esp, 8
	mov	ecx, eax
	test	ebx, ebx
	je	LBB50_2
# %bb.1:
	mov	dword ptr [esi + 76], ebx
LBB50_2:
	test	ebp, ebp
	je	LBB50_4
# %bb.3:
	mov	dword ptr [esi + 80], ebp
LBB50_4:
	test	edi, edi
	je	LBB50_6
# %bb.5:
	mov	dword ptr [esi + 84], edi
LBB50_6:
	mov	eax, 83
	test	ecx, ecx
	je	LBB50_33
# %bb.7:
	test	ebx, ebx
	mov	dword ptr [esi + 88], ecx
	je	LBB50_33
# %bb.8:
	test	ebp, ebp
	je	LBB50_33
# %bb.9:
	test	edi, edi
	je	LBB50_33
# %bb.10:
	mov	ebp, dword ptr [esi + 72]
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	lea	eax, [ebp + 1]
	lea	ebx, [ecx - 1]
	mov	dword ptr [esi + 72], eax
	.p2align	4, 0x90
LBB50_11:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebx + 1], 0
	lea	ebx, [ebx + 1]
	jne	LBB50_11
# %bb.12:
	sub	ebx, dword ptr [esp]            # 4-byte Folded Reload
	lea	eax, [ebx + 1]
	push	eax
	call	_malloc
	add	esp, 4
	mov	edi, eax
	test	eax, eax
	je	LBB50_16
# %bb.13:
	test	ebx, ebx
	je	LBB50_15
# %bb.14:
	push	ebx
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	push	edi
	call	_memcpy
	add	esp, 12
LBB50_15:
	mov	byte ptr [edi + ebx], 0
LBB50_16:
	mov	ecx, dword ptr [esp + 24]
	mov	eax, dword ptr [esi + 76]
	lea	ebx, [ecx - 1]
	mov	dword ptr [eax + 4*ebp], edi
	.p2align	4, 0x90
LBB50_17:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebx + 1], 0
	lea	ebx, [ebx + 1]
	jne	LBB50_17
# %bb.18:
	sub	ebx, dword ptr [esp + 24]
	lea	eax, [ebx + 1]
	push	eax
	call	_malloc
	add	esp, 4
	mov	edi, eax
	test	eax, eax
	je	LBB50_22
# %bb.19:
	test	ebx, ebx
	je	LBB50_21
# %bb.20:
	push	ebx
	push	dword ptr [esp + 28]
	push	edi
	call	_memcpy
	add	esp, 12
LBB50_21:
	mov	byte ptr [edi + ebx], 0
LBB50_22:
	mov	ecx, dword ptr [esp + 28]
	mov	eax, dword ptr [esi + 80]
	lea	ebx, [ecx - 1]
	mov	dword ptr [eax + 4*ebp], edi
	.p2align	4, 0x90
LBB50_23:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebx + 1], 0
	lea	ebx, [ebx + 1]
	jne	LBB50_23
# %bb.24:
	sub	ebx, dword ptr [esp + 28]
	lea	eax, [ebx + 1]
	push	eax
	call	_malloc
	add	esp, 4
	mov	edi, eax
	test	eax, eax
	je	LBB50_28
# %bb.25:
	test	ebx, ebx
	je	LBB50_27
# %bb.26:
	push	ebx
	push	dword ptr [esp + 32]
	push	edi
	call	_memcpy
	add	esp, 12
LBB50_27:
	mov	byte ptr [edi + ebx], 0
LBB50_28:
	mov	eax, dword ptr [esi + 84]
	mov	ebx, dword ptr [esp + 36]
	mov	dword ptr [eax + 4*ebp], edi
	lea	eax, [ebx + 1]
	push	eax
	call	_malloc
	add	esp, 4
	mov	edi, eax
	test	eax, eax
	je	LBB50_32
# %bb.29:
	test	ebx, ebx
	je	LBB50_31
# %bb.30:
	push	ebx
	push	dword ptr [esp + 36]
	push	edi
	call	_memcpy
	add	esp, 12
LBB50_31:
	mov	byte ptr [edi + ebx], 0
LBB50_32:
	mov	eax, dword ptr [esi + 88]
	mov	dword ptr [eax + 4*ebp], edi
	xor	eax, eax
LBB50_33:
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_set_icc@@YAIPAULodePNGInfo@@PBDPBEI@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_set_icc@@YAIPAULodePNGInfo@@PBDPBEI@Z" # -- Begin function ?lodepng_set_icc@@YAIPAULodePNGInfo@@PBDPBEI@Z
	.p2align	4, 0x90
"?lodepng_set_icc@@YAIPAULodePNGInfo@@PBDPBEI@Z": # @"?lodepng_set_icc@@YAIPAULodePNGInfo@@PBDPBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebx, dword ptr [esp + 20]
	mov	eax, dword ptr [ebx + 192]
	test	eax, eax
	je	LBB51_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 192], 0
	push	dword ptr [ebx + 196]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 196], 0
	mov	dword ptr [ebx + 200], 0
	mov	dword ptr [ebx + 188], 0
LBB51_2:
	cmp	dword ptr [esp + 32], 0
	mov	dword ptr [ebx + 188], 1
	je	LBB51_3
# %bb.4:
	mov	edi, dword ptr [esp + 24]
	lea	ebp, [edi - 1]
	.p2align	4, 0x90
LBB51_5:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebp + 1], 0
	lea	ebp, [ebp + 1]
	jne	LBB51_5
# %bb.6:
	sub	ebp, edi
	lea	eax, [ebp + 1]
	push	eax
	call	_malloc
	add	esp, 4
	mov	esi, eax
	test	eax, eax
	je	LBB51_10
# %bb.7:
	test	ebp, ebp
	je	LBB51_9
# %bb.8:
	push	ebp
	push	edi
	push	esi
	call	_memcpy
	add	esp, 12
LBB51_9:
	mov	byte ptr [esi + ebp], 0
LBB51_10:
	mov	edi, dword ptr [esp + 32]
	mov	dword ptr [ebx + 192], esi
	push	edi
	call	_malloc
	add	esp, 4
	test	esi, esi
	mov	ecx, 83
	mov	dword ptr [ebx + 196], eax
	je	LBB51_13
# %bb.11:
	test	eax, eax
	je	LBB51_13
# %bb.12:
	push	edi
	push	dword ptr [esp + 32]
	push	eax
	call	_memcpy
	add	esp, 12
	xor	ecx, ecx
	mov	dword ptr [ebx + 200], edi
	jmp	LBB51_13
LBB51_3:
	mov	ecx, 100
LBB51_13:
	mov	eax, ecx
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_clear_icc@@YAXPAULodePNGInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_clear_icc@@YAXPAULodePNGInfo@@@Z" # -- Begin function ?lodepng_clear_icc@@YAXPAULodePNGInfo@@@Z
	.p2align	4, 0x90
"?lodepng_clear_icc@@YAXPAULodePNGInfo@@@Z": # @"?lodepng_clear_icc@@YAXPAULodePNGInfo@@@Z"
# %bb.0:
	push	esi
	mov	esi, dword ptr [esp + 8]
	push	dword ptr [esi + 192]
	call	_free
	add	esp, 4
	mov	dword ptr [esi + 192], 0
	push	dword ptr [esi + 196]
	call	_free
	add	esp, 4
	mov	dword ptr [esi + 196], 0
	mov	dword ptr [esi + 200], 0
	mov	dword ptr [esi + 188], 0
	pop	esi
	ret
                                        # -- End function
	.def	 "?lodepng_info_init@@YAXPAULodePNGInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@00000006000000000000000000000000 # -- Begin function ?lodepng_info_init@@YAXPAULodePNGInfo@@@Z
	.section	.rdata,"dr",discard,__xmm@00000006000000000000000000000000
	.p2align	4
__xmm@00000006000000000000000000000000:
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	6                               # 0x6
	.text
	.globl	"?lodepng_info_init@@YAXPAULodePNGInfo@@@Z"
	.p2align	4, 0x90
"?lodepng_info_init@@YAXPAULodePNGInfo@@@Z": # @"?lodepng_info_init@@YAXPAULodePNGInfo@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	movaps	xmm0, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm0 = [0,0,0,6]
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 16], 8
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 24], 0
	movups	xmmword ptr [eax], xmm0
	mov	dword ptr [eax + 120], 0
	mov	dword ptr [eax + 136], 0
	mov	dword ptr [eax + 144], 0
	mov	dword ptr [eax + 180], 0
	mov	dword ptr [eax + 188], 0
	mov	dword ptr [eax + 192], 0
	mov	dword ptr [eax + 196], 0
	mov	dword ptr [eax + 208], 0
	mov	dword ptr [eax + 204], 0
	mov	dword ptr [eax + 216], 0
	mov	dword ptr [eax + 212], 0
	mov	dword ptr [eax + 224], 0
	mov	dword ptr [eax + 220], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 64], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 72], 0
	mov	dword ptr [eax + 68], 0
	mov	dword ptr [eax + 80], 0
	mov	dword ptr [eax + 76], 0
	mov	dword ptr [eax + 88], 0
	mov	dword ptr [eax + 84], 0
	mov	dword ptr [eax + 92], 0
	ret
                                        # -- End function
	.def	 "?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z" # -- Begin function ?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z
	.p2align	4, 0x90
"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z": # @"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 16]
	mov	eax, dword ptr [esi + 20]
	test	eax, eax
	je	LBB54_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB54_2:
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 24], 0
	cmp	dword ptr [esi + 60], 0
	mov	ebx, dword ptr [esi + 64]
	je	LBB54_5
# %bb.3:
	xor	edi, edi
	.p2align	4, 0x90
LBB54_4:                                # =>This Inner Loop Header: Depth=1
	push	dword ptr [ebx + 4*edi]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 4*edi], 0
	mov	ebx, dword ptr [esi + 68]
	push	dword ptr [ebx + 4*edi]
	call	_free
	add	esp, 4
	mov	dword ptr [ebx + 4*edi], 0
	inc	edi
	mov	ebx, dword ptr [esi + 64]
	cmp	edi, dword ptr [esi + 60]
	jne	LBB54_4
LBB54_5:
	push	ebx
	call	_free
	add	esp, 4
	push	dword ptr [esi + 68]
	call	_free
	add	esp, 4
	mov	ecx, esi
	call	"?LodePNGIText_cleanup@@YAXPAULodePNGInfo@@@Z"
	push	dword ptr [esi + 192]
	call	_free
	add	esp, 4
	mov	dword ptr [esi + 192], 0
	push	dword ptr [esi + 196]
	call	_free
	add	esp, 4
	mov	dword ptr [esi + 196], 0
	mov	dword ptr [esi + 200], 0
	mov	dword ptr [esi + 188], 0
	push	dword ptr [esi + 204]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 208]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 212]
	call	_free
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_info_copy@@YAIPAULodePNGInfo@@PBU1@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_info_copy@@YAIPAULodePNGInfo@@PBU1@@Z" # -- Begin function ?lodepng_info_copy@@YAIPAULodePNGInfo@@PBU1@@Z
	.p2align	4, 0x90
"?lodepng_info_copy@@YAIPAULodePNGInfo@@PBU1@@Z": # @"?lodepng_info_copy@@YAIPAULodePNGInfo@@PBU1@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	ebx, dword ptr [esp + 36]
	mov	esi, dword ptr [esp + 32]
	push	esi
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	push	228
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12
	mov	dword ptr [esi + 40], 0
	mov	dword ptr [esi + 36], 0
	mov	dword ptr [esi + 32], 0
	mov	dword ptr [esi + 28], 0
	mov	dword ptr [esi + 12], 6
	mov	dword ptr [esi + 16], 8
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 20], 0
	movsd	xmm0, qword ptr [ebx + 36]      # xmm0 = mem[0],zero
	movsd	qword ptr [esi + 36], xmm0
	movsd	xmm0, qword ptr [ebx + 20]      # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [ebx + 28]      # xmm1 = mem[0],zero
	movsd	qword ptr [esi + 28], xmm1
	movsd	qword ptr [esi + 20], xmm0
	movsd	xmm0, qword ptr [ebx + 12]      # xmm0 = mem[0],zero
	movsd	qword ptr [esi + 12], xmm0
	cmp	dword ptr [ebx + 20], 0
	je	LBB55_5
# %bb.1:
	push	1024
	call	_malloc
	add	esp, 4
	mov	dword ptr [esi + 20], eax
	test	eax, eax
	mov	ecx, dword ptr [ebx + 24]
	je	LBB55_4
# %bb.2:
	shl	ecx, 2
	test	ecx, ecx
	je	LBB55_5
# %bb.3:
	push	ecx
	push	dword ptr [ebx + 20]
	push	eax
	call	_memcpy
	add	esp, 12
	jmp	LBB55_5
LBB55_4:
	mov	edi, 83
	test	ecx, ecx
	jne	LBB55_52
LBB55_5:
	mov	dword ptr [esi + 64], 0
	mov	dword ptr [esi + 68], 0
	mov	dword ptr [esi + 60], 0
	cmp	dword ptr [ebx + 60], 0
	je	LBB55_11
# %bb.6:
	xor	ebp, ebp
	.p2align	4, 0x90
LBB55_7:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_8 Depth 2
	mov	eax, dword ptr [ebx + 68]
	mov	ecx, dword ptr [ebx + 64]
	mov	eax, dword ptr [eax + 4*ebp]
	mov	edx, dword ptr [ecx + 4*ebp]
	lea	esi, [eax - 1]
	.p2align	4, 0x90
LBB55_8:                                #   Parent Loop BB55_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [esi + 1], 0
	lea	esi, [esi + 1]
	jne	LBB55_8
# %bb.9:                                #   in Loop: Header=BB55_7 Depth=1
	mov	ecx, dword ptr [esp + 32]
	sub	esi, eax
	push	esi
	push	eax
	call	"?lodepng_add_text_sized@@YAIPAULodePNGInfo@@PBD1I@Z"
	add	esp, 8
	test	eax, eax
	jne	LBB55_50
# %bb.10:                               #   in Loop: Header=BB55_7 Depth=1
	inc	ebp
	cmp	ebp, dword ptr [ebx + 60]
	jne	LBB55_7
LBB55_11:
	mov	eax, dword ptr [esp + 32]
	mov	dword ptr [eax + 76], 0
	mov	dword ptr [eax + 72], 0
	mov	dword ptr [eax + 84], 0
	mov	dword ptr [eax + 80], 0
	mov	dword ptr [eax + 88], 0
	cmp	dword ptr [ebx + 72], 0
	je	LBB55_17
# %bb.12:
	xor	ebp, ebp
	.p2align	4, 0x90
LBB55_13:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_14 Depth 2
	mov	ecx, dword ptr [ebx + 84]
	mov	eax, dword ptr [ebx + 88]
	mov	edx, dword ptr [ebx + 80]
	mov	edi, dword ptr [ecx + 4*ebp]
	mov	ecx, dword ptr [ebx + 76]
	mov	eax, dword ptr [eax + 4*ebp]
	mov	esi, dword ptr [edx + 4*ebp]
	mov	edx, dword ptr [ecx + 4*ebp]
	lea	ebx, [eax - 1]
	.p2align	4, 0x90
LBB55_14:                               #   Parent Loop BB55_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [ebx + 1], 0
	lea	ebx, [ebx + 1]
	jne	LBB55_14
# %bb.15:                               #   in Loop: Header=BB55_13 Depth=1
	mov	ecx, dword ptr [esp + 32]
	sub	ebx, eax
	push	ebx
	push	eax
	push	edi
	push	esi
	call	"?lodepng_add_itext_sized@@YAIPAULodePNGInfo@@PBD111I@Z"
	add	esp, 16
	test	eax, eax
	jne	LBB55_50
# %bb.16:                               #   in Loop: Header=BB55_13 Depth=1
	mov	ebx, dword ptr [esp + 36]
	inc	ebp
	cmp	ebp, dword ptr [ebx + 72]
	jne	LBB55_13
LBB55_17:
	cmp	dword ptr [ebx + 188], 0
	mov	esi, dword ptr [esp + 32]
	je	LBB55_28
# %bb.18:
	mov	eax, dword ptr [ebx + 200]
	test	eax, eax
	je	LBB55_51
# %bb.19:
	mov	ecx, dword ptr [ebx + 192]
	mov	edx, dword ptr [ebx + 196]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	ebp, [ecx - 1]
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	.p2align	4, 0x90
LBB55_20:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebp + 1], 0
	lea	ebp, [ebp + 1]
	jne	LBB55_20
# %bb.21:
	sub	ebp, ecx
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	lea	eax, [ebp + 1]
	push	eax
	call	_malloc
	add	esp, 4
	mov	edi, eax
	test	eax, eax
	je	LBB55_25
# %bb.22:
	test	ebp, ebp
	je	LBB55_24
# %bb.23:
	push	ebp
	push	dword ptr [esp + 8]             # 4-byte Folded Reload
	push	edi
	call	_memcpy
	add	esp, 12
LBB55_24:
	mov	byte ptr [edi + ebp], 0
LBB55_25:
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esi + 192], edi
	push	ebp
	call	_malloc
	add	esp, 4
	test	edi, edi
	mov	edi, 83
	mov	dword ptr [esi + 196], eax
	je	LBB55_52
# %bb.26:
	test	eax, eax
	je	LBB55_52
# %bb.27:
	push	ebp
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	eax
	call	_memcpy
	add	esp, 12
	mov	dword ptr [esi + 200], ebp
LBB55_28:
	mov	dword ptr [esi + 204], 0
	mov	dword ptr [esi + 208], 0
	mov	dword ptr [esi + 216], 0
	mov	dword ptr [esi + 212], 0
	mov	dword ptr [esi + 224], 0
	mov	dword ptr [esi + 220], 0
	push	0
	call	_free
	add	esp, 4
	push	dword ptr [esi + 212]
	call	_free
	add	esp, 4
	mov	edi, esi
	mov	esi, dword ptr [ebx + 216]
	mov	dword ptr [edi + 216], esi
	mov	ebp, dword ptr [ebx + 216]
	push	ebp
	call	_malloc
	add	esp, 4
	mov	dword ptr [edi + 204], eax
	test	esi, esi
	mov	edi, 83
	je	LBB55_30
# %bb.29:
	test	eax, eax
	je	LBB55_52
LBB55_30:
	test	ebp, ebp
	je	LBB55_35
# %bb.31:
	mov	ecx, dword ptr [ebx + 204]
	cmp	ebp, 1
	mov	dl, byte ptr [ecx]
	mov	byte ptr [eax], dl
	je	LBB55_35
# %bb.32:
	mov	cl, byte ptr [ecx + 1]
	mov	byte ptr [eax + 1], cl
	cmp	dword ptr [ebx + 216], 3
	jb	LBB55_35
# %bb.33:
	mov	eax, dword ptr [esp + 32]
	mov	ecx, 2
	add	eax, 204
	.p2align	4, 0x90
LBB55_34:                               # =>This Inner Loop Header: Depth=1
	mov	esi, dword ptr [ebx + 204]
	mov	edx, dword ptr [eax]
	movzx	ebx, byte ptr [esi + ecx]
	mov	byte ptr [edx + ecx], bl
	mov	ebx, dword ptr [esp + 36]
	inc	ecx
	cmp	ecx, dword ptr [ebx + 216]
	jb	LBB55_34
LBB55_35:
	mov	eax, ebx
	mov	ebx, dword ptr [ebx + 220]
	mov	ebp, dword ptr [esp + 32]
	mov	dword ptr [ebp + 220], ebx
	mov	esi, dword ptr [eax + 220]
	push	esi
	call	_malloc
	add	esp, 4
	test	ebx, ebx
	mov	dword ptr [ebp + 208], eax
	je	LBB55_37
# %bb.36:
	test	eax, eax
	je	LBB55_52
LBB55_37:
	mov	ebx, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 32]
	test	esi, esi
	je	LBB55_42
# %bb.38:
	mov	ecx, dword ptr [ebx + 208]
	cmp	esi, 1
	mov	dl, byte ptr [ecx]
	mov	byte ptr [eax], dl
	je	LBB55_42
# %bb.39:
	mov	cl, byte ptr [ecx + 1]
	mov	byte ptr [eax + 1], cl
	cmp	dword ptr [ebx + 220], 3
	jb	LBB55_42
# %bb.40:
	mov	eax, 2
	.p2align	4, 0x90
LBB55_41:                               # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [ebx + 208]
	mov	ecx, dword ptr [ebp + 208]
	movzx	edx, byte ptr [edx + eax]
	mov	byte ptr [ecx + eax], dl
	inc	eax
	cmp	eax, dword ptr [ebx + 220]
	jb	LBB55_41
LBB55_42:
	mov	esi, dword ptr [ebx + 224]
	mov	dword ptr [ebp + 224], esi
	mov	eax, dword ptr [ebx + 224]
	mov	dword ptr [esp], eax            # 4-byte Spill
	push	eax
	call	_malloc
	add	esp, 4
	test	esi, esi
	mov	dword ptr [ebp + 212], eax
	je	LBB55_44
# %bb.43:
	test	eax, eax
	je	LBB55_52
LBB55_44:
	mov	esi, dword ptr [esp]            # 4-byte Reload
	xor	edi, edi
	test	esi, esi
	je	LBB55_52
# %bb.45:
	mov	ecx, dword ptr [ebx + 212]
	cmp	esi, 1
	mov	dl, byte ptr [ecx]
	mov	byte ptr [eax], dl
	je	LBB55_52
# %bb.46:
	mov	cl, byte ptr [ecx + 1]
	mov	byte ptr [eax + 1], cl
	cmp	dword ptr [ebx + 224], 3
	jb	LBB55_52
# %bb.47:
	mov	eax, 2
LBB55_48:                               # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [ebx + 212]
	mov	ecx, dword ptr [ebp + 212]
	movzx	edx, byte ptr [edx + eax]
	mov	byte ptr [ecx + eax], dl
	inc	eax
	cmp	eax, dword ptr [ebx + 224]
	jb	LBB55_48
	jmp	LBB55_52
LBB55_50:
	mov	edi, eax
LBB55_52:
	mov	eax, edi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB55_51:
	mov	edi, 100
	jmp	LBB55_52
                                        # -- End function
	.def	 "?lodepng_convert@@YAIPAEPBEPBULodePNGColorMode@@2II@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_convert@@YAIPAEPBEPBULodePNGColorMode@@2II@Z" # -- Begin function ?lodepng_convert@@YAIPAEPBEPBULodePNGColorMode@@2II@Z
	.p2align	4, 0x90
"?lodepng_convert@@YAIPAEPBEPBULodePNGColorMode@@2II@Z": # @"?lodepng_convert@@YAIPAEPBEPBULodePNGColorMode@@2II@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -16
	sub	esp, 128
	mov	ecx, dword ptr [ebp + 20]
	mov	eax, dword ptr [ecx]
	cmp	eax, 3
	jne	LBB56_3
# %bb.1:
	cmp	dword ptr [ecx + 8], 0
	je	LBB56_2
LBB56_3:
	mov	edi, dword ptr [ebp + 16]
	mov	ebx, dword ptr [ebp + 28]
	mov	edx, dword ptr [edi]
	imul	ebx, dword ptr [ebp + 24]
	cmp	edx, eax
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	jne	LBB56_15
# %bb.4:
	mov	ecx, dword ptr [edi + 4]
	mov	esi, dword ptr [ebp + 20]
	cmp	ecx, dword ptr [esi + 4]
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	jne	LBB56_15
# %bb.5:
	mov	esi, dword ptr [edi + 16]
	mov	ecx, dword ptr [ebp + 20]
	cmp	esi, dword ptr [ecx + 16]
	jne	LBB56_15
# %bb.6:
	test	esi, esi
	je	LBB56_10
# %bb.7:
	mov	esi, dword ptr [edi + 20]
	mov	ecx, dword ptr [ebp + 20]
	cmp	esi, dword ptr [ecx + 20]
	jne	LBB56_15
# %bb.8:
	mov	esi, dword ptr [edi + 24]
	mov	ecx, dword ptr [ebp + 20]
	cmp	esi, dword ptr [ecx + 24]
	jne	LBB56_15
# %bb.9:
	mov	esi, dword ptr [edi + 28]
	mov	ecx, dword ptr [ebp + 20]
	cmp	esi, dword ptr [ecx + 28]
	jne	LBB56_15
LBB56_10:
	mov	esi, dword ptr [edi + 12]
	mov	ecx, dword ptr [ebp + 20]
	cmp	esi, dword ptr [ecx + 12]
	jne	LBB56_15
# %bb.11:
	shl	esi, 2
	test	esi, esi
	je	LBB56_20
# %bb.12:
	mov	ecx, dword ptr [edi + 8]
	xor	edi, edi
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ebp + 20]
	mov	ecx, dword ptr [ecx + 8]
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	.p2align	4, 0x90
LBB56_14:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	movzx	ebx, byte ptr [ecx + edi]
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	cmp	bl, byte ptr [ecx + edi]
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	jne	LBB56_15
# %bb.13:                               #   in Loop: Header=BB56_14 Depth=1
	inc	edi
	cmp	esi, edi
	jne	LBB56_14
LBB56_20:
	cmp	eax, 6
	ja	LBB56_21
# %bb.23:
	mov	esi, dword ptr [ebp + 8]
	mov	edx, 1
	jmp	dword ptr [4*eax + LJTI56_4]
LBB56_24:
	mov	edx, 3
	jmp	LBB56_27
LBB56_15:
	cmp	edx, 3
	jne	LBB56_37
# %bb.16:
	mov	esi, dword ptr [ebp + 16]
	mov	edi, 1
	mov	ecx, dword ptr [esi + 4]
	mov	edx, dword ptr [esi + 12]
	shl	edi, cl
	test	edx, edx
	je	LBB56_30
# %bb.17:
	mov	eax, dword ptr [esi + 8]
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	jmp	LBB56_18
LBB56_2:
	mov	eax, 107
	jmp	LBB56_221
LBB56_30:
	cmp	eax, 3
	mov	eax, dword ptr [ebp + 20]
	mov	edx, dword ptr [eax + 8]
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	edx, dword ptr [eax + 12]
	jne	LBB56_18
# %bb.31:
	cmp	dword ptr [eax + 4], ecx
	jne	LBB56_18
# %bb.32:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	xor	eax, eax
	mov	esi, edx
	and	edx, 7
	imul	edx, ecx
	shr	esi, 3
	add	edx, 7
	imul	esi, ecx
	shr	edx, 3
	add	edx, esi
	je	LBB56_221
# %bb.33:
	push	edx
	push	dword ptr [ebp + 12]
	push	dword ptr [ebp + 8]
	jmp	LBB56_29
LBB56_18:
	cmp	edx, edi
	pxor	xmm0, xmm0
	cmovb	edi, edx
	movdqa	xmmword ptr [esp + 96], xmm0
	movdqa	xmmword ptr [esp + 80], xmm0
	movdqa	xmmword ptr [esp + 64], xmm0
	movdqa	xmmword ptr [esp + 48], xmm0
	mov	dword ptr [esp + 112], -1
	test	edi, edi
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	je	LBB56_37
# %bb.19:
	xor	edi, edi
	.p2align	4, 0x90
LBB56_35:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	movzx	eax, byte ptr [ecx + 4*edi + 3]
	movzx	ebx, byte ptr [ecx + 4*edi + 2]
	movzx	esi, byte ptr [ecx + 4*edi + 1]
	movzx	edx, byte ptr [ecx + 4*edi]
	lea	ecx, [esp + 48]
	push	edi
	push	eax
	push	ebx
	push	esi
	call	"?color_tree_add@@YAIPAUColorTree@@EEEEI@Z"
	add	esp, 16
	test	eax, eax
	jne	LBB56_36
# %bb.34:                               #   in Loop: Header=BB56_35 Depth=1
	inc	edi
	cmp	dword ptr [esp + 16], edi       # 4-byte Folded Reload
	jne	LBB56_35
LBB56_37:
	mov	esi, dword ptr [ebp + 20]
	mov	ebx, dword ptr [ebp + 16]
	mov	ecx, dword ptr [esi + 4]
	mov	eax, dword ptr [ebx + 4]
	cmp	ecx, 16
	jne	LBB56_51
# %bb.38:
	cmp	eax, 16
	jne	LBB56_51
# %bb.39:
	cmp	dword ptr [esp + 12], 0         # 4-byte Folded Reload
	mov	eax, dword ptr [ebp + 12]
	je	LBB56_40
# %bb.41:
	mov	edi, dword ptr [ebp + 8]
	xor	ebx, ebx
	jmp	LBB56_42
	.p2align	4, 0x90
LBB56_47:                               #   in Loop: Header=BB56_42 Depth=1
	mov	byte ptr [edi + 8*ebx], ch
	mov	byte ptr [edi + 8*ebx + 1], cl
	mov	byte ptr [edi + 8*ebx + 2], ah
	mov	byte ptr [edi + 8*ebx + 3], al
	movzx	eax, word ptr [esp + 8]         # 2-byte Folded Reload
	mov	byte ptr [edi + 8*ebx + 4], ah
	mov	byte ptr [edi + 8*ebx + 5], al
	lea	eax, [8*ebx + 7]
	mov	byte ptr [edi + 8*ebx + 6], dh
LBB56_48:                               #   in Loop: Header=BB56_42 Depth=1
	mov	ecx, edx
LBB56_49:                               #   in Loop: Header=BB56_42 Depth=1
	mov	byte ptr [edi + eax], cl
LBB56_50:                               #   in Loop: Header=BB56_42 Depth=1
	inc	ebx
	mov	eax, dword ptr [ebp + 12]
	mov	esi, dword ptr [ebp + 20]
	cmp	ebx, dword ptr [esp + 12]       # 4-byte Folded Reload
	je	LBB56_216
LBB56_42:                               # =>This Inner Loop Header: Depth=1
	mov	word ptr [esp + 26], 0
	mov	word ptr [esp + 24], 0
	mov	word ptr [esp + 22], 0
	mov	word ptr [esp + 20], 0
	lea	ecx, [esp + 26]
	lea	edx, [esp + 24]
	push	esi
	push	ebx
	push	eax
	lea	eax, [esp + 32]
	push	eax
	lea	eax, [esp + 38]
	push	eax
	call	"?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z"
	add	esp, 20
	mov	eax, dword ptr [ebp + 16]
	mov	esi, dword ptr [eax]
	cmp	esi, 6
	ja	LBB56_50
# %bb.43:                               #   in Loop: Header=BB56_42 Depth=1
	movzx	eax, word ptr [esp + 22]
	movzx	edx, word ptr [esp + 20]
	movzx	ecx, word ptr [esp + 26]
	mov	word ptr [esp + 8], ax          # 2-byte Spill
	movzx	eax, word ptr [esp + 24]
	jmp	dword ptr [4*esi + LJTI56_3]
LBB56_44:                               #   in Loop: Header=BB56_42 Depth=1
	mov	byte ptr [edi + 2*ebx], ch
	lea	eax, [ebx + ebx + 1]
	jmp	LBB56_49
	.p2align	4, 0x90
LBB56_45:                               #   in Loop: Header=BB56_42 Depth=1
	mov	esi, dword ptr [ebp + 8]
	lea	edx, [ebx + ebx]
	lea	edi, [edx + 2*edx]
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp + 8]
	mov	byte ptr [esi + edi], ch
	mov	esi, edi
	or	esi, 1
	mov	byte ptr [edx + esi], cl
	mov	ecx, dword ptr [ebp + 8]
	mov	byte ptr [ecx + edi + 2], ah
	mov	ecx, dword ptr [ebp + 8]
	mov	byte ptr [ecx + edi + 3], al
	mov	eax, dword ptr [ebp + 8]
	movzx	ecx, word ptr [esp + 8]         # 2-byte Folded Reload
	mov	byte ptr [eax + edi + 4], ch
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [eax + 2*eax + 5]
	jmp	LBB56_49
	.p2align	4, 0x90
LBB56_46:                               #   in Loop: Header=BB56_42 Depth=1
	mov	byte ptr [edi + 4*ebx], ch
	mov	byte ptr [edi + 4*ebx + 1], cl
	mov	byte ptr [edi + 4*ebx + 2], dh
	lea	eax, [4*ebx + 3]
	jmp	LBB56_48
LBB56_51:
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	esi, dword ptr [ebp + 12]
	cmp	eax, 8
	jne	LBB56_187
# %bb.52:
	mov	eax, dword ptr [ebp + 16]
	mov	eax, dword ptr [eax]
	cmp	eax, 2
	je	LBB56_139
# %bb.53:
	cmp	eax, 6
	jne	LBB56_187
# %bb.54:
	mov	eax, dword ptr [ebp + 20]
	mov	edi, dword ptr [ebp + 8]
	mov	edx, dword ptr [eax]
	xor	eax, eax
	cmp	edx, 6
	ja	LBB56_221
# %bb.55:
	jmp	dword ptr [4*edx + LJTI56_1]
LBB56_56:
	cmp	ecx, 8
	je	LBB56_62
# %bb.57:
	cmp	ecx, 16
	jne	LBB56_72
# %bb.58:
	test	ebx, ebx
	je	LBB56_216
# %bb.59:
	mov	eax, dword ptr [ebp + 20]
	cmp	dword ptr [eax + 16], 0
	je	LBB56_60
# %bb.70:
	mov	eax, dword ptr [eax + 20]
	xor	ecx, ecx
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_71:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [esi + 2*ecx]
	mov	esi, dword ptr [ebp + 12]
	mov	byte ptr [edi + 4*ecx + 2], dl
	mov	byte ptr [edi + 4*ecx + 1], dl
	mov	byte ptr [edi + 4*ecx], dl
	shl	edx, 8
	movzx	esi, byte ptr [esi + 2*ecx + 1]
	or	esi, edx
	cmp	esi, eax
	mov	esi, dword ptr [ebp + 12]
	setne	dl
	neg	dl
	mov	byte ptr [edi + 4*ecx + 3], dl
	inc	ecx
	cmp	ebx, ecx
	jne	LBB56_71
	jmp	LBB56_217
LBB56_187:
	test	ebx, ebx
	mov	byte ptr [esp + 26], 0
	mov	byte ptr [esp + 24], 0
	mov	byte ptr [esp + 22], 0
	mov	byte ptr [esp + 20], 0
	je	LBB56_216
# %bb.188:
	xor	edi, edi
	jmp	LBB56_189
LBB56_214:                              #   in Loop: Header=BB56_189 Depth=1
	mov	edx, dword ptr [ebp + 8]
	mov	byte ptr [edx + 8*edi + 1], cl
	mov	byte ptr [edx + 8*edi], cl
	mov	byte ptr [edx + 8*edi + 3], ch
	mov	byte ptr [edx + 8*edi + 2], ch
	mov	byte ptr [edx + 8*edi + 5], ah
	mov	byte ptr [edx + 8*edi + 4], ah
	mov	byte ptr [edx + 8*edi + 7], al
	mov	byte ptr [edx + 8*edi + 6], al
	.p2align	4, 0x90
LBB56_215:                              #   in Loop: Header=BB56_189 Depth=1
	mov	esi, dword ptr [ebp + 12]
	inc	edi
	cmp	edi, ebx
	je	LBB56_216
LBB56_189:                              # =>This Inner Loop Header: Depth=1
	lea	ecx, [esp + 26]
	lea	edx, [esp + 24]
	push	dword ptr [ebp + 20]
	push	edi
	push	esi
	lea	eax, [esp + 32]
	push	eax
	lea	eax, [esp + 38]
	push	eax
	call	"?getPixelColorRGBA8@@YAXPAE000PBEIPBULodePNGColorMode@@@Z"
	add	esp, 20
	mov	eax, dword ptr [ebp + 16]
	mov	esi, dword ptr [eax]
	cmp	esi, 6
	ja	LBB56_215
# %bb.190:                              #   in Loop: Header=BB56_189 Depth=1
	movzx	ecx, byte ptr [esp + 26]
	movzx	eax, byte ptr [esp + 20]
	mov	ah, byte ptr [esp + 22]
	mov	ch, byte ptr [esp + 24]
	movzx	edx, cl
	jmp	dword ptr [4*esi + LJTI56_2]
LBB56_191:                              #   in Loop: Header=BB56_189 Depth=1
	mov	eax, dword ptr [ebp + 16]
	mov	eax, dword ptr [eax + 4]
	cmp	eax, 16
	je	LBB56_194
# %bb.192:                              #   in Loop: Header=BB56_189 Depth=1
	cmp	eax, 8
	jne	LBB56_195
# %bb.193:                              #   in Loop: Header=BB56_189 Depth=1
	mov	eax, dword ptr [ebp + 8]
	mov	byte ptr [eax + edi], cl
	jmp	LBB56_215
LBB56_198:                              #   in Loop: Header=BB56_189 Depth=1
	mov	edx, dword ptr [ebp + 16]
	cmp	dword ptr [edx + 4], 8
	jne	LBB56_200
# %bb.199:                              #   in Loop: Header=BB56_189 Depth=1
	mov	esi, dword ptr [ebp + 8]
	lea	edx, [edi + 2*edi]
	mov	byte ptr [esi + edx], cl
	mov	byte ptr [esi + edx + 1], ch
	mov	byte ptr [esi + edx + 2], ah
	jmp	LBB56_215
LBB56_201:                              #   in Loop: Header=BB56_189 Depth=1
	movzx	esi, al
	movzx	eax, ah
	movzx	ebx, ch
	lea	ecx, [esp + 48]
	push	esi
	push	eax
	push	ebx
	call	"?color_tree_get@@YAHPAUColorTree@@EEEE@Z"
	add	esp, 12
	test	eax, eax
	js	LBB56_202
# %bb.203:                              #   in Loop: Header=BB56_189 Depth=1
	mov	ebx, dword ptr [ebp + 16]
	mov	edx, dword ptr [ebx + 4]
	cmp	edx, 8
	jne	LBB56_205
# %bb.204:                              #   in Loop: Header=BB56_189 Depth=1
	mov	ecx, dword ptr [ebp + 8]
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	byte ptr [ecx + edi], al
	jmp	LBB56_215
LBB56_208:                              #   in Loop: Header=BB56_189 Depth=1
	mov	edx, dword ptr [ebp + 16]
	mov	edx, dword ptr [edx + 4]
	cmp	edx, 16
	je	LBB56_211
# %bb.209:                              #   in Loop: Header=BB56_189 Depth=1
	cmp	edx, 8
	jne	LBB56_215
# %bb.210:                              #   in Loop: Header=BB56_189 Depth=1
	mov	edx, dword ptr [ebp + 8]
	mov	byte ptr [edx + 2*edi], cl
	mov	byte ptr [edx + 2*edi + 1], al
	jmp	LBB56_215
LBB56_212:                              #   in Loop: Header=BB56_189 Depth=1
	mov	edx, dword ptr [ebp + 16]
	cmp	dword ptr [edx + 4], 8
	jne	LBB56_214
# %bb.213:                              #   in Loop: Header=BB56_189 Depth=1
	mov	edx, dword ptr [ebp + 8]
	mov	byte ptr [edx + 4*edi], cl
	mov	byte ptr [edx + 4*edi + 1], ch
	mov	byte ptr [edx + 4*edi + 2], ah
	mov	byte ptr [edx + 4*edi + 3], al
	jmp	LBB56_215
LBB56_200:                              #   in Loop: Header=BB56_189 Depth=1
	lea	edx, [edi + edi]
	mov	ebx, dword ptr [ebp + 8]
	lea	edx, [edx + 2*edx]
	mov	esi, edx
	or	esi, 1
	mov	byte ptr [ebx + esi], cl
	mov	byte ptr [ebx + edx], cl
	mov	byte ptr [ebx + edx + 3], ch
	mov	byte ptr [ebx + edx + 2], ch
	mov	byte ptr [ebx + edx + 5], ah
	mov	byte ptr [ebx + edx + 4], ah
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	jmp	LBB56_215
LBB56_205:                              #   in Loop: Header=BB56_189 Depth=1
	xor	ecx, ecx
	cmp	edx, 2
	mov	esi, -1
	sete	cl
	cmp	edx, 1
	lea	ebx, [ecx + ecx + 1]
	mov	ecx, 7
	cmove	ebx, ecx
	mov	ecx, edx
	shl	esi, cl
	not	esi
	and	eax, esi
	mov	esi, ebx
	and	esi, edi
	sub	ebx, esi
	imul	ebx, edx
	imul	edx, edi
	mov	ecx, ebx
	shr	edx, 3
	shl	eax, cl
	mov	ecx, dword ptr [ebp + 8]
	test	esi, esi
	je	LBB56_206
# %bb.207:                              #   in Loop: Header=BB56_189 Depth=1
	or	byte ptr [ecx + edx], al
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	jmp	LBB56_215
LBB56_194:                              #   in Loop: Header=BB56_189 Depth=1
	mov	eax, dword ptr [ebp + 8]
	mov	byte ptr [eax + 2*edi + 1], cl
	mov	byte ptr [eax + 2*edi], cl
	jmp	LBB56_215
LBB56_195:                              #   in Loop: Header=BB56_189 Depth=1
	mov	cl, 8
	mov	ebx, -1
	mov	esi, 7
	sub	cl, al
	shr	edx, cl
	mov	ecx, eax
	shl	ebx, cl
	xor	ecx, ecx
	cmp	eax, 2
	sete	cl
	cmp	eax, 1
	not	ebx
	lea	ecx, [ecx + ecx + 1]
	cmove	ecx, esi
	and	ebx, edx
	mov	edx, ecx
	and	edx, edi
	sub	ecx, edx
	imul	ecx, eax
                                        # kill: def $cl killed $cl killed $ecx
	shl	ebx, cl
	mov	ecx, dword ptr [ebp + 8]
	imul	eax, edi
	shr	eax, 3
	test	edx, edx
	je	LBB56_196
# %bb.197:                              #   in Loop: Header=BB56_189 Depth=1
	or	byte ptr [ecx + eax], bl
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	jmp	LBB56_215
LBB56_211:                              #   in Loop: Header=BB56_189 Depth=1
	mov	edx, dword ptr [ebp + 8]
	mov	byte ptr [edx + 4*edi + 1], cl
	mov	byte ptr [edx + 4*edi], cl
	mov	byte ptr [edx + 4*edi + 3], al
	mov	byte ptr [edx + 4*edi + 2], al
	jmp	LBB56_215
LBB56_206:                              #   in Loop: Header=BB56_189 Depth=1
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	byte ptr [ecx + edx], al
	jmp	LBB56_215
LBB56_196:                              #   in Loop: Header=BB56_189 Depth=1
	mov	byte ptr [ecx + eax], bl
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	jmp	LBB56_215
LBB56_40:
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	jmp	LBB56_218
LBB56_36:
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	jmp	LBB56_217
LBB56_139:
	mov	eax, dword ptr [ebp + 20]
	mov	edx, dword ptr [eax]
	xor	eax, eax
	cmp	edx, 6
	ja	LBB56_221
# %bb.140:
	mov	edi, dword ptr [ebp + 8]
	jmp	dword ptr [4*edx + LJTI56_0]
LBB56_141:
	cmp	ecx, 8
	je	LBB56_146
# %bb.142:
	cmp	ecx, 16
	jne	LBB56_149
# %bb.143:
	test	ebx, ebx
	je	LBB56_216
# %bb.144:
	add	edi, 2
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_145:                              # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi]
	add	esi, 2
	mov	byte ptr [edi], al
	mov	byte ptr [edi - 1], al
	mov	byte ptr [edi - 2], al
	add	edi, 3
	dec	ebx
	jne	LBB56_145
	jmp	LBB56_217
LBB56_202:
	mov	dword ptr [esp + 8], 82         # 4-byte Folded Spill
	jmp	LBB56_217
LBB56_86:
	cmp	ecx, 8
	jne	LBB56_87
# %bb.91:
	test	ebx, ebx
	je	LBB56_216
# %bb.92:
	xor	eax, eax
LBB56_93:                               # =>This Inner Loop Header: Depth=1
	lea	ecx, [eax + 2*eax]
	inc	eax
	movzx	edx, byte ptr [esi + ecx + 2]
	mov	byte ptr [edi + 2], dl
	movzx	ecx, word ptr [esi + ecx]
	mov	word ptr [edi], cx
	mov	byte ptr [edi + 3], -1
	add	edi, 4
	cmp	eax, ebx
	jne	LBB56_93
# %bb.94:
	mov	edx, dword ptr [ebp + 20]
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	cmp	dword ptr [edx + 16], 0
	je	LBB56_217
# %bb.95:
	mov	esi, dword ptr [ebp + 28]
	mov	eax, dword ptr [edx + 20]
	mov	ebx, dword ptr [ebp + 16]
	imul	esi, dword ptr [ebp + 24]
	neg	esi
	jmp	LBB56_96
LBB56_100:                              #   in Loop: Header=BB56_96 Depth=1
	inc	esi
	je	LBB56_218
LBB56_96:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [edi + 4*esi]
	cmp	eax, ecx
	jne	LBB56_100
# %bb.97:                               #   in Loop: Header=BB56_96 Depth=1
	movzx	ecx, byte ptr [edi + 4*esi + 1]
	cmp	dword ptr [edx + 24], ecx
	jne	LBB56_100
# %bb.98:                               #   in Loop: Header=BB56_96 Depth=1
	movzx	ecx, byte ptr [edi + 4*esi + 2]
	cmp	dword ptr [edx + 28], ecx
	jne	LBB56_100
# %bb.99:                               #   in Loop: Header=BB56_96 Depth=1
	mov	byte ptr [edi + 4*esi + 3], 0
	jmp	LBB56_100
LBB56_107:
	cmp	ecx, 8
	jne	LBB56_108
# %bb.121:
	test	ebx, ebx
	je	LBB56_216
# %bb.122:
	mov	eax, dword ptr [ebp + 20]
	xor	ecx, ecx
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	mov	eax, dword ptr [eax + 8]
LBB56_123:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [esi + ecx]
	mov	edx, dword ptr [eax + 4*edx]
	mov	dword ptr [edi + 4*ecx], edx
	inc	ecx
	cmp	ebx, ecx
	jne	LBB56_123
	jmp	LBB56_217
LBB56_124:
	cmp	ecx, 8
	jne	LBB56_125
# %bb.128:
	test	ebx, ebx
	je	LBB56_216
# %bb.129:
	xor	eax, eax
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_130:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [esi + 2*eax]
	mov	byte ptr [edi + 4*eax + 2], cl
	mov	byte ptr [edi + 4*eax + 1], cl
	mov	byte ptr [edi + 4*eax], cl
	movzx	ecx, byte ptr [esi + 2*eax + 1]
	mov	byte ptr [edi + 4*eax + 3], cl
	inc	eax
	cmp	ebx, eax
	jne	LBB56_130
	jmp	LBB56_217
LBB56_131:
	cmp	ecx, 8
	jne	LBB56_132
# %bb.135:
	shl	ebx, 2
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	test	ebx, ebx
	je	LBB56_217
# %bb.136:
	push	ebx
	jmp	LBB56_137
LBB56_155:
	cmp	ecx, 8
	jne	LBB56_156
# %bb.159:
	lea	eax, [ebx + 2*ebx]
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	test	eax, eax
	je	LBB56_217
# %bb.160:
	push	eax
LBB56_137:
	push	esi
	push	edi
	call	_memcpy
	add	esp, 12
	jmp	LBB56_217
LBB56_161:
	cmp	ecx, 8
	jne	LBB56_162
# %bb.166:
	test	ebx, ebx
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	je	LBB56_217
LBB56_167:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [ebp + 20]
	movzx	eax, byte ptr [esi]
	inc	esi
	mov	ecx, dword ptr [ecx + 8]
	movzx	edx, byte ptr [ecx + 4*eax + 2]
	mov	byte ptr [edi + 2], dl
	movzx	eax, word ptr [ecx + 4*eax]
	mov	word ptr [edi], ax
	add	edi, 3
	dec	ebx
	jne	LBB56_167
	jmp	LBB56_217
LBB56_173:
	cmp	ecx, 8
	jne	LBB56_174
# %bb.177:
	test	ebx, ebx
	je	LBB56_216
# %bb.178:
	add	edi, 2
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_179:                              # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi]
	add	esi, 2
	mov	byte ptr [edi], al
	mov	byte ptr [edi - 1], al
	mov	byte ptr [edi - 2], al
	add	edi, 3
	dec	ebx
	jne	LBB56_179
	jmp	LBB56_217
LBB56_180:
	cmp	ecx, 8
	jne	LBB56_181
# %bb.184:
	test	ebx, ebx
	je	LBB56_216
# %bb.185:
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_186:                              # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi + 2]
	mov	byte ptr [edi + 2], al
	movzx	eax, word ptr [esi]
	add	esi, 4
	mov	word ptr [edi], ax
	add	edi, 3
	dec	ebx
	jne	LBB56_186
	jmp	LBB56_217
LBB56_87:
	test	ebx, ebx
	je	LBB56_216
# %bb.88:
	mov	eax, dword ptr [ebp + 20]
	cmp	dword ptr [eax + 16], 0
	je	LBB56_89
# %bb.101:
	mov	eax, dword ptr [eax + 20]
	add	esi, 5
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	mov	eax, esi
	jmp	LBB56_102
LBB56_105:                              #   in Loop: Header=BB56_102 Depth=1
	movzx	ebx, byte ptr [eax]
	shl	ecx, 8
	mov	esi, edx
	or	ebx, ecx
	cmp	ebx, dword ptr [esi + 28]
	sete	bl
LBB56_106:                              #   in Loop: Header=BB56_102 Depth=1
	dec	bl
	add	eax, 6
	mov	byte ptr [edi + 3], bl
	add	edi, 4
	dec	dword ptr [esp + 12]            # 4-byte Folded Spill
	mov	ebx, dword ptr [ebp + 16]
	je	LBB56_218
LBB56_102:                              # =>This Inner Loop Header: Depth=1
	movzx	ebx, byte ptr [eax - 5]
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	mov	byte ptr [edi], bl
	shl	ebx, 8
	movzx	edx, byte ptr [eax - 3]
	mov	byte ptr [edi + 1], dl
	movzx	ecx, byte ptr [eax - 1]
	mov	byte ptr [edi + 2], cl
	movzx	esi, byte ptr [eax - 4]
	or	esi, ebx
	mov	ebx, 0
	cmp	esi, dword ptr [esp + 16]       # 4-byte Folded Reload
	jne	LBB56_106
# %bb.103:                              #   in Loop: Header=BB56_102 Depth=1
	movzx	esi, byte ptr [eax - 2]
	shl	edx, 8
	or	esi, edx
	mov	edx, dword ptr [ebp + 20]
	cmp	esi, dword ptr [edx + 24]
	je	LBB56_105
# %bb.104:                              #   in Loop: Header=BB56_102 Depth=1
	xor	ebx, ebx
	jmp	LBB56_106
LBB56_108:
	test	ebx, ebx
	je	LBB56_216
# %bb.109:
	mov	eax, dword ptr [ebp + 20]
	test	ecx, ecx
	mov	edx, dword ptr [eax + 8]
	je	LBB56_114
# %bb.110:
	xor	eax, eax
	xor	esi, esi
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	mov	dword ptr [esp + 36], edx       # 4-byte Spill
LBB56_111:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_112 Depth 2
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	mov	dword ptr [esp + 32], esi       # 4-byte Spill
	mov	eax, esi
	mov	esi, dword ptr [ebp + 12]
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	mov	ebx, ecx
	xor	edi, edi
	.p2align	4, 0x90
LBB56_112:                              #   Parent Loop BB56_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, eax
	shr	ecx, 3
	movzx	edx, byte ptr [esi + ecx]
	mov	ecx, eax
	inc	eax
	not	cl
	and	cl, 7
	shr	edx, cl
	and	edx, 1
	dec	ebx
	lea	edi, [edx + 2*edi]
	jne	LBB56_112
# %bb.113:                              #   in Loop: Header=BB56_111 Depth=1
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp + 16]
	mov	eax, dword ptr [edx + 4*edi]
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	add	esi, ecx
	mov	dword ptr [edi], eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	add	edi, 4
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	inc	eax
	cmp	eax, dword ptr [esp + 12]       # 4-byte Folded Reload
	jne	LBB56_111
	jmp	LBB56_218
LBB56_125:
	test	ebx, ebx
	je	LBB56_216
# %bb.126:
	xor	eax, eax
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_127:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [esi + 4*eax]
	mov	byte ptr [edi + 4*eax + 2], cl
	mov	byte ptr [edi + 4*eax + 1], cl
	mov	byte ptr [edi + 4*eax], cl
	movzx	ecx, byte ptr [esi + 4*eax + 2]
	mov	byte ptr [edi + 4*eax + 3], cl
	inc	eax
	cmp	ebx, eax
	jne	LBB56_127
	jmp	LBB56_217
LBB56_132:
	test	ebx, ebx
	je	LBB56_216
# %bb.133:
	xor	eax, eax
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_134:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [esi + 8*eax]
	mov	byte ptr [edi + 4*eax], cl
	movzx	ecx, byte ptr [esi + 8*eax + 2]
	mov	byte ptr [edi + 4*eax + 1], cl
	movzx	ecx, byte ptr [esi + 8*eax + 4]
	mov	byte ptr [edi + 4*eax + 2], cl
	movzx	ecx, byte ptr [esi + 8*eax + 6]
	mov	byte ptr [edi + 4*eax + 3], cl
	inc	eax
	cmp	ebx, eax
	jne	LBB56_134
	jmp	LBB56_217
LBB56_156:
	test	ebx, ebx
	je	LBB56_216
# %bb.157:
	xor	eax, eax
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_158:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [esi + 2*eax]
	mov	byte ptr [edi + eax], cl
	movzx	ecx, byte ptr [esi + 2*eax + 2]
	mov	byte ptr [edi + eax + 1], cl
	movzx	ecx, byte ptr [esi + 2*eax + 4]
	mov	byte ptr [edi + eax + 2], cl
	add	eax, 3
	dec	ebx
	jne	LBB56_158
	jmp	LBB56_217
LBB56_162:
	test	ebx, ebx
	je	LBB56_216
# %bb.163:
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	mov	dword ptr [esp + 32], 0         # 4-byte Folded Spill
	test	ecx, ecx
	je	LBB56_165
LBB56_168:
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp + 12]
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	xor	esi, esi
	mov	edi, ecx
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	.p2align	4, 0x90
LBB56_169:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, ebx
	shr	ecx, 3
	movzx	edx, byte ptr [eax + ecx]
	mov	ecx, ebx
	inc	ebx
	not	cl
	and	cl, 7
	shr	edx, cl
	and	edx, 1
	dec	edi
	lea	esi, [edx + 2*esi]
	jne	LBB56_169
# %bb.170:
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	add	eax, dword ptr [esp + 28]       # 4-byte Folded Reload
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	jmp	LBB56_171
LBB56_165:
	xor	esi, esi
LBB56_171:
	mov	eax, dword ptr [ebp + 20]
	mov	ecx, dword ptr [eax + 8]
	mov	dl, byte ptr [ecx + 4*esi + 2]
	mov	byte ptr [edi + 2], dl
	movzx	ecx, word ptr [ecx + 4*esi]
	mov	word ptr [edi], cx
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	inc	ecx
	cmp	ecx, ebx
	je	LBB56_216
# %bb.172:
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	mov	ecx, dword ptr [eax + 4]
	add	edi, 3
	test	ecx, ecx
	jne	LBB56_168
	jmp	LBB56_165
LBB56_174:
	test	ebx, ebx
	je	LBB56_216
# %bb.175:
	add	edi, 2
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_176:                              # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi]
	add	esi, 4
	mov	byte ptr [edi], al
	mov	byte ptr [edi - 1], al
	mov	byte ptr [edi - 2], al
	add	edi, 3
	dec	ebx
	jne	LBB56_176
	jmp	LBB56_217
LBB56_181:
	test	ebx, ebx
	je	LBB56_216
# %bb.182:
	add	esi, 4
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_183:                              # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi - 4]
	mov	byte ptr [edi], al
	movzx	eax, byte ptr [esi - 2]
	mov	byte ptr [edi + 1], al
	movzx	eax, byte ptr [esi]
	add	esi, 8
	mov	byte ptr [edi + 2], al
	add	edi, 3
	dec	ebx
	jne	LBB56_183
	jmp	LBB56_217
LBB56_21:
	mov	esi, dword ptr [ebp + 8]
	cmp	eax, 255
LBB56_22:
	xor	edx, edx
	jmp	LBB56_27
LBB56_62:
	test	ebx, ebx
	je	LBB56_216
# %bb.63:
	xor	eax, eax
LBB56_64:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [esi + eax]
	inc	eax
	mov	byte ptr [edi + 2], cl
	mov	byte ptr [edi + 1], cl
	mov	byte ptr [edi], cl
	mov	byte ptr [edi + 3], -1
	add	edi, 4
	cmp	eax, ebx
	jne	LBB56_64
# %bb.65:
	mov	eax, dword ptr [ebp + 20]
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	cmp	dword ptr [eax + 16], 0
	je	LBB56_217
# %bb.66:
	mov	edx, dword ptr [ebp + 28]
	mov	eax, dword ptr [eax + 20]
	mov	ebx, dword ptr [ebp + 16]
	imul	edx, dword ptr [ebp + 24]
	neg	edx
	jmp	LBB56_67
LBB56_69:                               #   in Loop: Header=BB56_67 Depth=1
	inc	edx
	je	LBB56_218
LBB56_67:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [edi + 4*edx]
	cmp	eax, ecx
	jne	LBB56_69
# %bb.68:                               #   in Loop: Header=BB56_67 Depth=1
	mov	byte ptr [edi + 4*edx + 3], 0
	jmp	LBB56_69
LBB56_72:
	mov	eax, -1
	shl	eax, cl
	test	ebx, ebx
	mov	dword ptr [esp + 40], eax       # 4-byte Spill
	je	LBB56_216
# %bb.73:
	mov	eax, dword ptr [ebp + 20]
	mov	ebx, dword ptr [ebp + 16]
	test	ecx, ecx
	mov	eax, dword ptr [eax + 16]
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
	je	LBB56_79
# %bb.74:
	not	dword ptr [esp + 40]            # 4-byte Folded Spill
	xor	eax, eax
	xor	edx, edx
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	jmp	LBB56_75
LBB56_84:                               #   in Loop: Header=BB56_75 Depth=1
	mov	eax, dword ptr [ebp + 20]
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	cmp	esi, dword ptr [eax + 20]
	sete	al
LBB56_85:                               #   in Loop: Header=BB56_75 Depth=1
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	dec	al
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	mov	ebx, dword ptr [ebp + 16]
	mov	byte ptr [edi + 3], al
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	add	edx, ecx
	add	edi, 4
	inc	eax
	cmp	eax, dword ptr [esp + 12]       # 4-byte Folded Reload
	je	LBB56_218
LBB56_75:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_76 Depth 2
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	mov	edi, dword ptr [ebp + 12]
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	eax, ecx
	xor	esi, esi
	mov	dword ptr [esp + 36], edx       # 4-byte Spill
	.p2align	4, 0x90
LBB56_76:                               #   Parent Loop BB56_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, edx
	shr	ecx, 3
	movzx	ebx, byte ptr [edi + ecx]
	mov	ecx, edx
	inc	edx
	not	cl
	and	cl, 7
	shr	ebx, cl
	and	ebx, 1
	dec	eax
	lea	esi, [ebx + 2*esi]
	jne	LBB56_76
# %bb.77:                               #   in Loop: Header=BB56_75 Depth=1
	mov	eax, esi
	xor	edx, edx
	shl	eax, 8
	sub	eax, esi
	div	dword ptr [esp + 40]            # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	cmp	dword ptr [esp + 44], 0         # 4-byte Folded Reload
	mov	byte ptr [ecx + 2], al
	mov	byte ptr [ecx + 1], al
	mov	byte ptr [ecx], al
	jne	LBB56_84
# %bb.78:                               #   in Loop: Header=BB56_75 Depth=1
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	xor	eax, eax
	jmp	LBB56_85
LBB56_146:
	test	ebx, ebx
	je	LBB56_216
# %bb.147:
	add	edi, 2
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_148:                              # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi]
	inc	esi
	mov	byte ptr [edi], al
	mov	byte ptr [edi - 1], al
	mov	byte ptr [edi - 2], al
	add	edi, 3
	dec	ebx
	jne	LBB56_148
	jmp	LBB56_217
LBB56_149:
	mov	eax, -1
	shl	eax, cl
	test	ebx, ebx
	mov	dword ptr [esp + 36], eax       # 4-byte Spill
	je	LBB56_216
# %bb.150:
	test	ecx, ecx
	je	LBB56_222
# %bb.151:
	not	dword ptr [esp + 36]            # 4-byte Folded Spill
	xor	eax, eax
	xor	esi, esi
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
LBB56_152:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_153 Depth 2
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	mov	edi, dword ptr [ebp + 12]
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	eax, ecx
	mov	ebx, esi
	xor	edx, edx
	mov	dword ptr [esp + 8], esi        # 4-byte Spill
	.p2align	4, 0x90
LBB56_153:                              #   Parent Loop BB56_152 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, ebx
	shr	ecx, 3
	movzx	esi, byte ptr [edi + ecx]
	mov	ecx, ebx
	inc	ebx
	not	cl
	and	cl, 7
	shr	esi, cl
	and	esi, 1
	dec	eax
	lea	edx, [esi + 2*edx]
	jne	LBB56_153
# %bb.154:                              #   in Loop: Header=BB56_152 Depth=1
	mov	eax, edx
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebx, dword ptr [ebp + 16]
	shl	eax, 8
	sub	eax, edx
	xor	edx, edx
	div	dword ptr [esp + 36]            # 4-byte Folded Reload
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	add	esi, ecx
	mov	byte ptr [edi + 2], al
	mov	byte ptr [edi + 1], al
	mov	byte ptr [edi], al
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	add	edi, 3
	inc	eax
	cmp	eax, dword ptr [esp + 12]       # 4-byte Folded Reload
	jne	LBB56_152
	jmp	LBB56_218
LBB56_216:
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_217:
	mov	ebx, dword ptr [ebp + 16]
LBB56_218:
	cmp	dword ptr [ebx], 3
	jne	LBB56_220
# %bb.219:
	lea	ecx, [esp + 48]
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
LBB56_220:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
LBB56_221:
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB56_25:
	mov	edx, 2
	jmp	LBB56_27
LBB56_26:
	mov	edx, 4
LBB56_27:
	imul	edx, dword ptr [esp + 8]        # 4-byte Folded Reload
	mov	ecx, ebx
	and	ebx, 7
	xor	eax, eax
	shr	ecx, 3
	imul	ebx, edx
	imul	ecx, edx
	add	ebx, 7
	shr	ebx, 3
	add	ebx, ecx
	je	LBB56_221
# %bb.28:
	push	ebx
	push	dword ptr [ebp + 12]
	push	esi
LBB56_29:
	call	_memcpy
	xor	eax, eax
	add	esp, 12
	jmp	LBB56_221
LBB56_89:
	add	esi, 4
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_90:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi - 4]
	mov	byte ptr [edi], al
	movzx	eax, byte ptr [esi - 2]
	mov	byte ptr [edi + 1], al
	movzx	eax, byte ptr [esi]
	add	esi, 6
	mov	byte ptr [edi + 2], al
	mov	byte ptr [edi + 3], -1
	add	edi, 4
	dec	ebx
	jne	LBB56_90
	jmp	LBB56_217
LBB56_114:
	mov	eax, dword ptr [edx]
	xor	edx, edx
	cmp	ebx, 8
	jae	LBB56_116
# %bb.115:
	mov	ebx, dword ptr [ebp + 16]
	mov	ecx, edi
	jmp	LBB56_119
LBB56_60:
	xor	eax, eax
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
LBB56_61:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [esi + 2*eax]
	mov	byte ptr [edi + 4*eax + 2], cl
	mov	byte ptr [edi + 4*eax + 1], cl
	mov	byte ptr [edi + 4*eax], cl
	mov	byte ptr [edi + 4*eax + 3], -1
	inc	eax
	cmp	ebx, eax
	jne	LBB56_61
	jmp	LBB56_217
LBB56_79:
	add	edi, 3
	mov	ecx, edi
	jmp	LBB56_80
LBB56_82:                               #   in Loop: Header=BB56_80 Depth=1
	mov	eax, dword ptr [ebp + 20]
	cmp	dword ptr [eax + 20], 0
	sete	al
LBB56_83:                               #   in Loop: Header=BB56_80 Depth=1
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	dec	al
	mov	byte ptr [ecx], al
	add	ecx, 4
	dec	edx
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	je	LBB56_218
LBB56_80:                               # =>This Inner Loop Header: Depth=1
	cmp	dword ptr [esp + 44], 0         # 4-byte Folded Reload
	mov	byte ptr [ecx - 1], 0
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	mov	word ptr [ecx - 3], 0
	jne	LBB56_82
# %bb.81:                               #   in Loop: Header=BB56_80 Depth=1
	xor	eax, eax
	jmp	LBB56_83
LBB56_222:
	lea	eax, [ebx + 2*ebx]
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	push	eax
	push	0
	push	edi
	call	_memset
	add	esp, 12
	jmp	LBB56_217
LBB56_116:
	mov	edx, ebx
	movd	xmm0, eax
	and	edx, -8
	pshufd	xmm0, xmm0, 0                   # xmm0 = xmm0[0,0,0,0]
	lea	ecx, [edi + 4*edx]
	add	edi, 16
	mov	esi, edx
LBB56_117:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmmword ptr [edi - 16], xmm0
	movdqu	xmmword ptr [edi], xmm0
	add	edi, 32
	add	esi, -8
	jne	LBB56_117
# %bb.118:
	cmp	ebx, edx
	mov	ebx, dword ptr [ebp + 16]
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	je	LBB56_218
LBB56_119:
	sub	dword ptr [esp + 12], edx       # 4-byte Folded Spill
LBB56_120:                              # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ecx], eax
	add	ecx, 4
	dec	dword ptr [esp + 12]            # 4-byte Folded Spill
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	jne	LBB56_120
	jmp	LBB56_218
	.section	.rdata,"dr"
	.p2align	2
LJTI56_0:
	.long	LBB56_141
	.long	LBB56_221
	.long	LBB56_155
	.long	LBB56_161
	.long	LBB56_173
	.long	LBB56_221
	.long	LBB56_180
LJTI56_1:
	.long	LBB56_56
	.long	LBB56_221
	.long	LBB56_86
	.long	LBB56_107
	.long	LBB56_124
	.long	LBB56_221
	.long	LBB56_131
LJTI56_2:
	.long	LBB56_191
	.long	LBB56_215
	.long	LBB56_198
	.long	LBB56_201
	.long	LBB56_208
	.long	LBB56_215
	.long	LBB56_212
LJTI56_3:
	.long	LBB56_44
	.long	LBB56_50
	.long	LBB56_45
	.long	LBB56_50
	.long	LBB56_46
	.long	LBB56_50
	.long	LBB56_47
LJTI56_4:
	.long	LBB56_27
	.long	LBB56_22
	.long	LBB56_24
	.long	LBB56_27
	.long	LBB56_25
	.long	LBB56_22
	.long	LBB56_26
                                        # -- End function
	.def	 "?color_tree_add@@YAIPAUColorTree@@EEEEI@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function ?color_tree_add@@YAIPAUColorTree@@EEEEI@Z
"?color_tree_add@@YAIPAUColorTree@@EEEEI@Z": # @"?color_tree_add@@YAIPAUColorTree@@EEEEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	movzx	ebx, byte ptr [esp + 40]
	mov	edi, ecx
	movzx	ecx, byte ptr [esp + 48]
	movzx	ebp, byte ptr [esp + 44]
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	mov	eax, ebx
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	and	ecx, 1
	mov	dword ptr [esp + 4], ebp        # 4-byte Spill
	mov	dword ptr [esp], ebx            # 4-byte Spill
	and	eax, 1
	lea	eax, [ecx + 4*eax]
	mov	ecx, edx
	mov	edx, ebx
	and	ecx, 1
	lea	eax, [eax + 8*ecx]
	mov	ecx, ebp
	and	ecx, 1
	lea	esi, [eax + 2*ecx]
	mov	edi, dword ptr [edi + 4*esi]
	test	edi, edi
	jne	LBB57_3
# %bb.1:
	push	68
	call	_malloc
	add	esp, 4
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, eax
	test	edi, edi
	mov	dword ptr [ecx + 4*esi], edi
	je	LBB57_32
# %bb.2:
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi + 4], 0
	mov	dword ptr [edi], 0
	mov	dword ptr [edi + 12], 0
	mov	dword ptr [edi + 8], 0
	mov	dword ptr [edi + 20], 0
	mov	dword ptr [edi + 16], 0
	mov	dword ptr [edi + 28], 0
	mov	dword ptr [edi + 24], 0
	mov	dword ptr [edi + 36], 0
	mov	dword ptr [edi + 32], 0
	mov	dword ptr [edi + 44], 0
	mov	dword ptr [edi + 40], 0
	mov	dword ptr [edi + 52], 0
	mov	dword ptr [edi + 48], 0
	mov	dword ptr [edi + 60], 0
	mov	dword ptr [edi + 56], 0
	mov	dword ptr [edi + 64], -1
LBB57_3:
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	eax, edx
	and	eax, 2
	shr	ecx
	and	ecx, 1
	lea	eax, [ecx + 2*eax]
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	and	ecx, 2
	lea	ebx, [eax + 4*ecx]
	mov	ecx, ebp
	and	ecx, 2
	or	ebx, ecx
	mov	esi, dword ptr [edi + 4*ebx]
	test	esi, esi
	jne	LBB57_6
# %bb.4:
	push	68
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [edi + 4*ebx], eax
	je	LBB57_32
# %bb.5:
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 64], -1
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [edi + 4*ebx]
LBB57_6:
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	eax, edx
	and	eax, 4
	shr	ecx, 2
	and	ecx, 1
	or	ecx, eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	and	eax, 4
	lea	edi, [ecx + 2*eax]
	mov	ecx, ebp
	shr	ecx
	and	ecx, 2
	or	edi, ecx
	mov	ecx, ebp
	mov	ebx, dword ptr [esi + 4*edi]
	test	ebx, ebx
	jne	LBB57_9
# %bb.7:
	push	68
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esi + 4*edi], eax
	je	LBB57_32
# %bb.8:
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 64], -1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [esi + 4*edi]
LBB57_9:
	mov	ebp, dword ptr [esp + 12]       # 4-byte Reload
	mov	eax, edx
	mov	edi, ecx
	shr	eax
	shr	edi, 2
	and	eax, 4
	and	edi, 2
	mov	esi, ebp
	shr	esi, 3
	and	esi, 1
	or	esi, eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	and	eax, 8
	or	esi, eax
	or	esi, edi
	mov	edi, dword ptr [ebx + 4*esi]
	test	edi, edi
	jne	LBB57_12
# %bb.10:
	push	68
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [ebx + 4*esi], eax
	je	LBB57_32
# %bb.11:
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 64], -1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	edi, dword ptr [ebx + 4*esi]
LBB57_12:
	mov	eax, edx
	mov	esi, ebp
	mov	ebx, ecx
	shr	eax, 2
	shr	esi, 4
	shr	ebx, 3
	and	eax, 4
	and	esi, 1
	and	ebx, 2
	or	esi, eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	shr	eax
	and	eax, 8
	or	esi, eax
	or	esi, ebx
	mov	ebx, dword ptr [edi + 4*esi]
	test	ebx, ebx
	jne	LBB57_15
# %bb.13:
	push	68
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [edi + 4*esi], eax
	je	LBB57_32
# %bb.14:
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 64], -1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [edi + 4*esi]
LBB57_15:
	mov	eax, edx
	mov	esi, ebp
	mov	edi, ecx
	shr	eax, 3
	shr	esi, 5
	shr	edi, 4
	and	eax, 4
	and	esi, 1
	and	edi, 2
	or	esi, eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	shr	eax, 2
	and	eax, 8
	or	esi, eax
	or	esi, edi
	mov	edi, dword ptr [ebx + 4*esi]
	test	edi, edi
	jne	LBB57_18
# %bb.16:
	push	68
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [ebx + 4*esi], eax
	je	LBB57_32
# %bb.17:
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 64], -1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	edi, dword ptr [ebx + 4*esi]
LBB57_18:
	mov	eax, edx
	mov	ebx, ebp
	mov	esi, ecx
	shr	eax, 4
	shr	ebx, 6
	shr	esi, 5
	and	eax, 4
	and	ebx, 1
	and	esi, 2
	or	ebx, eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	shr	eax, 3
	and	eax, 8
	or	ebx, eax
	or	ebx, esi
	mov	esi, dword ptr [edi + 4*ebx]
	test	esi, esi
	jne	LBB57_21
# %bb.19:
	push	68
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [edi + 4*ebx], eax
	je	LBB57_32
# %bb.20:
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 64], -1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [edi + 4*ebx]
LBB57_21:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	shr	edx, 7
	shr	ebp, 7
	shr	ecx, 7
	lea	eax, [ebp + 4*edx]
	shr	edi, 7
	lea	eax, [eax + 8*edi]
	lea	edi, [eax + 2*ecx]
	mov	eax, dword ptr [esi + 4*edi]
	test	eax, eax
	jne	LBB57_24
# %bb.22:
	push	68
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esi + 4*edi], eax
	je	LBB57_32
# %bb.23:
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 44], 0
	mov	dword ptr [eax + 40], 0
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 60], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 64], -1
	mov	eax, dword ptr [esi + 4*edi]
LBB57_24:
	mov	ecx, dword ptr [esp + 52]
	mov	dword ptr [eax + 64], ecx
	xor	eax, eax
	jmp	LBB57_33
LBB57_32:
	mov	eax, 83
LBB57_33:
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z
"?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z": # @"?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 36]
	mov	ebp, dword ptr [esi]
	cmp	ebp, 6
	ja	LBB58_17
# %bb.1:
	mov	edi, dword ptr [esp + 32]
	mov	eax, dword ptr [esp + 28]
	mov	ebx, dword ptr [esp + 20]
	jmp	dword ptr [4*ebp + LJTI58_0]
LBB58_2:
	movzx	ebp, byte ptr [eax + 2*edi]
	movzx	ebx, byte ptr [eax + 2*edi + 1]
	shl	ebp, 8
	or	ebx, ebp
	mov	ebp, dword ptr [esp + 20]
	mov	word ptr [ebp], bx
	mov	word ptr [edx], bx
	mov	word ptr [ecx], bx
	cmp	dword ptr [esi + 16], 0
	je	LBB58_15
# %bb.3:
	lea	ecx, [edi + edi]
	lea	edx, [edi + edi + 1]
	movzx	ecx, byte ptr [eax + ecx]
	movzx	eax, byte ptr [eax + edx]
	shl	ecx, 8
	or	eax, ecx
	cmp	eax, dword ptr [esi + 20]
	jne	LBB58_15
	jmp	LBB58_4
LBB58_5:
	add	edi, edi
	lea	edi, [edi + 2*edi]
	mov	ebp, edi
	movzx	ebx, byte ptr [eax + edi]
	or	ebp, 1
	movzx	esi, byte ptr [eax + ebp]
	shl	ebx, 8
	or	esi, ebx
	mov	word ptr [ecx], si
	mov	esi, dword ptr [esp + 36]
	movzx	ecx, word ptr [eax + edi + 2]
	rol	cx, 8
	mov	word ptr [edx], cx
	mov	edx, dword ptr [esp + 20]
	movzx	ecx, word ptr [eax + edi + 4]
	rol	cx, 8
	mov	word ptr [edx], cx
	cmp	dword ptr [esi + 16], 0
	je	LBB58_15
# %bb.6:
	movzx	ecx, byte ptr [eax + edi]
	movzx	edx, byte ptr [eax + ebp]
	shl	ecx, 8
	or	edx, ecx
	cmp	edx, dword ptr [esi + 20]
	jne	LBB58_15
# %bb.7:
	movzx	ecx, word ptr [eax + edi + 2]
	shl	ecx, 16
	bswap	ecx
	cmp	ecx, dword ptr [esi + 24]
	jne	LBB58_15
# %bb.8:
	movzx	eax, word ptr [eax + edi + 4]
	shl	eax, 16
	bswap	eax
	cmp	eax, dword ptr [esi + 28]
	jne	LBB58_15
LBB58_4:
	xor	eax, eax
	jmp	LBB58_16
LBB58_15:
	mov	ax, -1
	jmp	LBB58_16
LBB58_10:
	movzx	esi, byte ptr [eax + 4*edi]
	mov	ebp, ebx
	movzx	ebx, byte ptr [eax + 4*edi + 1]
	shl	esi, 8
	or	ebx, esi
	mov	word ptr [ebp], bx
	mov	word ptr [edx], bx
	mov	word ptr [ecx], bx
	movzx	ecx, byte ptr [eax + 4*edi + 2]
	movzx	eax, byte ptr [eax + 4*edi + 3]
	jmp	LBB58_12
LBB58_11:
	movzx	esi, byte ptr [eax + 8*edi]
	mov	ebp, ebx
	movzx	ebx, byte ptr [eax + 8*edi + 1]
	shl	esi, 8
	or	ebx, esi
	mov	word ptr [ecx], bx
	movzx	ecx, byte ptr [eax + 8*edi + 2]
	movzx	esi, byte ptr [eax + 8*edi + 3]
	shl	ecx, 8
	or	esi, ecx
	mov	word ptr [edx], si
	movzx	ecx, byte ptr [eax + 8*edi + 4]
	movzx	edx, byte ptr [eax + 8*edi + 5]
	shl	ecx, 8
	or	edx, ecx
	mov	word ptr [ebp], dx
	movzx	ecx, byte ptr [eax + 8*edi + 6]
	movzx	eax, byte ptr [eax + 8*edi + 7]
LBB58_12:
	shl	ecx, 8
	or	eax, ecx
LBB58_16:
	mov	ecx, dword ptr [esp + 24]
	mov	word ptr [ecx], ax
LBB58_17:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI58_0:
	.long	LBB58_2
	.long	LBB58_17
	.long	LBB58_5
	.long	LBB58_17
	.long	LBB58_10
	.long	LBB58_17
	.long	LBB58_11
                                        # -- End function
	.def	 "?getPixelColorRGBA8@@YAXPAE000PBEIPBULodePNGColorMode@@@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function ?getPixelColorRGBA8@@YAXPAE000PBEIPBULodePNGColorMode@@@Z
"?getPixelColorRGBA8@@YAXPAE000PBEIPBULodePNGColorMode@@@Z": # @"?getPixelColorRGBA8@@YAXPAE000PBEIPBULodePNGColorMode@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	ebp, dword ptr [esp + 48]
	mov	eax, dword ptr [ebp]
	cmp	eax, 6
	ja	LBB59_40
# %bb.1:
	mov	esi, ecx
	mov	ebx, dword ptr [esp + 44]
	mov	edi, dword ptr [esp + 40]
	mov	ecx, dword ptr [esp + 32]
	jmp	dword ptr [4*eax + LJTI59_0]
LBB59_2:
	mov	eax, dword ptr [ebp + 4]
	cmp	eax, 16
	je	LBB59_29
# %bb.3:
	cmp	eax, 8
	jne	LBB59_32
# %bb.4:
	movzx	eax, byte ptr [edi + ebx]
	mov	byte ptr [ecx], al
	mov	byte ptr [edx], al
	mov	byte ptr [esi], al
	cmp	dword ptr [ebp + 16], 0
	je	LBB59_41
# %bb.5:
	cmp	dword ptr [ebp + 20], eax
	jne	LBB59_41
	jmp	LBB59_6
LBB59_7:
	cmp	dword ptr [ebp + 4], 8
	jne	LBB59_20
# %bb.8:
	lea	eax, [ebx + 2*ebx]
	mov	cl, byte ptr [edi + eax]
	mov	byte ptr [esi], cl
	mov	cl, byte ptr [edi + eax + 1]
	mov	byte ptr [edx], cl
	mov	ecx, dword ptr [esp + 32]
	movzx	eax, byte ptr [edi + eax + 2]
	mov	byte ptr [ecx], al
	cmp	dword ptr [ebp + 16], 0
	je	LBB59_41
# %bb.9:
	movzx	ecx, byte ptr [esi]
	cmp	dword ptr [ebp + 20], ecx
	jne	LBB59_41
# %bb.10:
	movzx	ecx, byte ptr [edx]
	cmp	dword ptr [ebp + 24], ecx
	jne	LBB59_41
# %bb.11:
	cmp	dword ptr [ebp + 28], eax
	je	LBB59_6
	jmp	LBB59_41
LBB59_13:
	mov	ebp, dword ptr [ebp + 4]
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	mov	dword ptr [esp], esi            # 4-byte Spill
	test	ebp, ebp
	je	LBB59_35
# %bb.14:
	cmp	ebp, 8
	jne	LBB59_36
# %bb.15:
	movzx	eax, byte ptr [edi + ebx]
	jmp	LBB59_38
LBB59_16:
	cmp	dword ptr [ebp + 4], 8
	jne	LBB59_25
# %bb.17:
	mov	al, byte ptr [edi + 2*ebx]
	mov	byte ptr [ecx], al
	mov	byte ptr [edx], al
	mov	byte ptr [esi], al
	mov	al, byte ptr [edi + 2*ebx + 1]
	jmp	LBB59_39
LBB59_18:
	cmp	dword ptr [ebp + 4], 8
	jne	LBB59_26
# %bb.19:
	mov	al, byte ptr [edi + 4*ebx]
	mov	byte ptr [esi], al
	mov	al, byte ptr [edi + 4*ebx + 1]
	mov	byte ptr [edx], al
	mov	al, byte ptr [edi + 4*ebx + 2]
	mov	byte ptr [ecx], al
	mov	al, byte ptr [edi + 4*ebx + 3]
	jmp	LBB59_39
LBB59_20:
	add	ebx, ebx
	lea	eax, [ebx + 2*ebx]
	mov	cl, byte ptr [edi + eax]
	mov	byte ptr [esi], cl
	mov	cl, byte ptr [edi + eax + 2]
	mov	byte ptr [edx], cl
	mov	edx, dword ptr [esp + 32]
	mov	cl, byte ptr [edi + eax + 4]
	mov	byte ptr [edx], cl
	cmp	dword ptr [ebp + 16], 0
	je	LBB59_41
# %bb.21:
	mov	esi, eax
	movzx	ecx, byte ptr [edi + eax]
	or	esi, 1
	movzx	esi, byte ptr [edi + esi]
	shl	ecx, 8
	or	esi, ecx
	cmp	esi, dword ptr [ebp + 20]
	jne	LBB59_41
# %bb.22:
	movzx	ecx, word ptr [edi + eax + 2]
	shl	ecx, 16
	bswap	ecx
	cmp	ecx, dword ptr [ebp + 24]
	jne	LBB59_41
# %bb.23:
	movzx	eax, word ptr [edi + eax + 4]
	shl	eax, 16
	bswap	eax
	cmp	eax, dword ptr [ebp + 28]
	je	LBB59_6
	jmp	LBB59_41
LBB59_25:
	mov	al, byte ptr [edi + 4*ebx]
	mov	byte ptr [ecx], al
	mov	byte ptr [edx], al
	mov	byte ptr [esi], al
	mov	al, byte ptr [edi + 4*ebx + 2]
	jmp	LBB59_39
LBB59_26:
	mov	al, byte ptr [edi + 8*ebx]
	mov	byte ptr [esi], al
	mov	al, byte ptr [edi + 8*ebx + 2]
	mov	byte ptr [edx], al
	mov	al, byte ptr [edi + 8*ebx + 4]
	mov	byte ptr [ecx], al
	mov	al, byte ptr [edi + 8*ebx + 6]
	jmp	LBB59_39
LBB59_29:
	mov	al, byte ptr [edi + 2*ebx]
	mov	byte ptr [ecx], al
	mov	byte ptr [edx], al
	mov	byte ptr [esi], al
	cmp	dword ptr [ebp + 16], 0
	je	LBB59_41
# %bb.30:
	add	ebx, ebx
	movzx	eax, byte ptr [edi + ebx]
	or	ebx, 1
	movzx	ecx, byte ptr [edi + ebx]
	shl	eax, 8
	or	ecx, eax
	cmp	ecx, dword ptr [ebp + 20]
	je	LBB59_6
	jmp	LBB59_41
LBB59_32:
	mov	ebp, -1
	mov	ecx, eax
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	mov	dword ptr [esp], esi            # 4-byte Spill
	shl	ebp, cl
	test	eax, eax
	not	ebp
	mov	dword ptr [esp + 8], ebp        # 4-byte Spill
	je	LBB59_43
# %bb.33:
	imul	ebx, eax
	xor	ebp, ebp
	.p2align	4, 0x90
LBB59_34:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, ebx
	shr	ecx, 3
	movzx	esi, byte ptr [edi + ecx]
	mov	ecx, ebx
	inc	ebx
	not	cl
	and	cl, 7
	shr	esi, cl
	and	esi, 1
	dec	eax
	lea	ebp, [esi + 2*ebp]
	jne	LBB59_34
	jmp	LBB59_44
LBB59_35:
	mov	eax, ebp
	jmp	LBB59_38
LBB59_36:
	imul	ebx, ebp
	xor	eax, eax
	.p2align	4, 0x90
LBB59_37:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, ebx
	shr	ecx, 3
	movzx	esi, byte ptr [edi + ecx]
	mov	ecx, ebx
	inc	ebx
	not	cl
	and	cl, 7
	shr	esi, cl
	and	esi, 1
	dec	ebp
	lea	eax, [esi + 2*eax]
	jne	LBB59_37
LBB59_38:
	mov	edx, dword ptr [esp + 48]
	mov	esi, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [edx + 8]
	mov	cl, byte ptr [ecx + 4*eax]
	mov	byte ptr [esi], cl
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, dword ptr [edx + 8]
	mov	cl, byte ptr [ecx + 4*eax + 1]
	mov	byte ptr [esi], cl
	mov	esi, dword ptr [esp + 32]
	mov	ecx, dword ptr [edx + 8]
	mov	cl, byte ptr [ecx + 4*eax + 2]
	mov	byte ptr [esi], cl
	mov	ecx, dword ptr [edx + 8]
	mov	al, byte ptr [ecx + 4*eax + 3]
	jmp	LBB59_39
LBB59_43:
	xor	ebp, ebp
LBB59_44:
	mov	eax, ebp
	xor	edx, edx
	mov	ecx, dword ptr [esp + 32]
	shl	eax, 8
	sub	eax, ebp
	div	dword ptr [esp + 8]             # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	byte ptr [ecx], al
	mov	byte ptr [esi], al
	mov	byte ptr [edx], al
	mov	eax, dword ptr [esp + 48]
	cmp	dword ptr [eax + 16], 0
	je	LBB59_41
# %bb.45:
	cmp	ebp, dword ptr [eax + 20]
	jne	LBB59_41
LBB59_6:
	xor	eax, eax
	jmp	LBB59_39
LBB59_41:
	mov	al, -1
LBB59_39:
	mov	ecx, dword ptr [esp + 36]
	mov	byte ptr [ecx], al
LBB59_40:
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI59_0:
	.long	LBB59_2
	.long	LBB59_40
	.long	LBB59_7
	.long	LBB59_13
	.long	LBB59_16
	.long	LBB59_40
	.long	LBB59_18
                                        # -- End function
	.def	 "?color_tree_cleanup@@YAXPAUColorTree@@@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function ?color_tree_cleanup@@YAXPAUColorTree@@@Z
"?color_tree_cleanup@@YAXPAUColorTree@@@Z": # @"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
# %bb.0:
	push	esi
	mov	esi, ecx
	mov	ecx, dword ptr [ecx]
	test	ecx, ecx
	je	LBB60_2
# %bb.1:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi]
	call	_free
	add	esp, 4
LBB60_2:
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB60_4
# %bb.3:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 4]
	call	_free
	add	esp, 4
LBB60_4:
	mov	ecx, dword ptr [esi + 8]
	test	ecx, ecx
	je	LBB60_6
# %bb.5:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 8]
	call	_free
	add	esp, 4
LBB60_6:
	mov	ecx, dword ptr [esi + 12]
	test	ecx, ecx
	je	LBB60_8
# %bb.7:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 12]
	call	_free
	add	esp, 4
LBB60_8:
	mov	ecx, dword ptr [esi + 16]
	test	ecx, ecx
	je	LBB60_10
# %bb.9:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 16]
	call	_free
	add	esp, 4
LBB60_10:
	mov	ecx, dword ptr [esi + 20]
	test	ecx, ecx
	je	LBB60_12
# %bb.11:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 20]
	call	_free
	add	esp, 4
LBB60_12:
	mov	ecx, dword ptr [esi + 24]
	test	ecx, ecx
	je	LBB60_14
# %bb.13:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 24]
	call	_free
	add	esp, 4
LBB60_14:
	mov	ecx, dword ptr [esi + 28]
	test	ecx, ecx
	je	LBB60_16
# %bb.15:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 28]
	call	_free
	add	esp, 4
LBB60_16:
	mov	ecx, dword ptr [esi + 32]
	test	ecx, ecx
	je	LBB60_18
# %bb.17:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 32]
	call	_free
	add	esp, 4
LBB60_18:
	mov	ecx, dword ptr [esi + 36]
	test	ecx, ecx
	je	LBB60_20
# %bb.19:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 36]
	call	_free
	add	esp, 4
LBB60_20:
	mov	ecx, dword ptr [esi + 40]
	test	ecx, ecx
	je	LBB60_22
# %bb.21:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 40]
	call	_free
	add	esp, 4
LBB60_22:
	mov	ecx, dword ptr [esi + 44]
	test	ecx, ecx
	je	LBB60_24
# %bb.23:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 44]
	call	_free
	add	esp, 4
LBB60_24:
	mov	ecx, dword ptr [esi + 48]
	test	ecx, ecx
	je	LBB60_26
# %bb.25:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 48]
	call	_free
	add	esp, 4
LBB60_26:
	mov	ecx, dword ptr [esi + 52]
	test	ecx, ecx
	je	LBB60_28
# %bb.27:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 52]
	call	_free
	add	esp, 4
LBB60_28:
	mov	ecx, dword ptr [esi + 56]
	test	ecx, ecx
	je	LBB60_30
# %bb.29:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 56]
	call	_free
	add	esp, 4
LBB60_30:
	mov	ecx, dword ptr [esi + 60]
	test	ecx, ecx
	je	LBB60_32
# %bb.31:
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	push	dword ptr [esi + 60]
	call	_free
	add	esp, 4
LBB60_32:
	pop	esi
	ret
                                        # -- End function
	.def	 "?lodepng_convert_rgb@@YAIPAI00IIIPBULodePNGColorMode@@1@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_convert_rgb@@YAIPAI00IIIPBULodePNGColorMode@@1@Z" # -- Begin function ?lodepng_convert_rgb@@YAIPAI00IIIPBULodePNGColorMode@@1@Z
	.p2align	4, 0x90
"?lodepng_convert_rgb@@YAIPAI00IIIPBULodePNGColorMode@@1@Z": # @"?lodepng_convert_rgb@@YAIPAI00IIIPBULodePNGColorMode@@1@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	edi, dword ptr [esp + 52]
	mov	esi, -1
	mov	eax, 65535
	xor	edx, edx
	mov	cl, byte ptr [edi + 4]
	shl	esi, cl
	not	esi
	div	esi
	mov	edx, eax
	mov	eax, dword ptr [edi]
	cmp	eax, 6
	ja	LBB61_20
# %bb.1:
	mov	esi, dword ptr [esp + 48]
	mov	ecx, 16
	mov	ebx, dword ptr [esp + 36]
	mov	ebp, 31
	sub	ecx, dword ptr [esi + 4]
	jmp	dword ptr [4*eax + LJTI61_0]
LBB61_2:
	imul	edx, ebx
	mov	eax, edx
	mov	ebx, edx
	mov	esi, dword ptr [esp + 48]
	mov	edi, dword ptr [esi]
	cmp	edi, 6
	jbe	LBB61_4
LBB61_20:
	mov	ebp, 31
	jmp	LBB61_21
LBB61_3:
	mov	eax, dword ptr [esp + 40]
	imul	ebx, edx
	imul	eax, edx
	imul	edx, dword ptr [esp + 44]
	mov	esi, dword ptr [esp + 48]
	mov	edi, dword ptr [esi]
	cmp	edi, 6
	ja	LBB61_20
LBB61_4:
	mov	esi, dword ptr [esp + 24]
	mov	ebp, 31
	jmp	dword ptr [4*edi + LJTI61_1]
LBB61_5:
                                        # kill: def $cl killed $cl killed $ecx
	shr	ebx, cl
	xor	ebp, ebp
	mov	dword ptr [esi], ebx
	jmp	LBB61_21
LBB61_6:
	shr	ebx, cl
	shr	eax, cl
                                        # kill: def $cl killed $cl killed $ecx
	shr	edx, cl
	mov	edi, dword ptr [esp + 28]
	mov	ecx, dword ptr [esp + 32]
	xor	ebp, ebp
	mov	dword ptr [esi], ebx
	mov	dword ptr [edi], eax
	mov	dword ptr [ecx], edx
	jmp	LBB61_21
LBB61_7:
	cmp	dword ptr [edi + 12], ebx
	mov	ebp, 82
	jbe	LBB61_21
# %bb.8:
	mov	eax, dword ptr [edi + 8]
	movzx	edx, byte ptr [eax + 4*ebx]
	movzx	edi, byte ptr [eax + 4*ebx + 1]
	movzx	ebx, byte ptr [eax + 4*ebx + 2]
	mov	ebp, edx
	mov	eax, edi
	shl	ebp, 8
	shl	eax, 8
	or	ebp, edx
	mov	edx, ebx
	or	eax, edi
	shl	edx, 8
	or	edx, ebx
	mov	ebx, ebp
	mov	esi, dword ptr [esp + 48]
	mov	edi, dword ptr [esi]
	cmp	edi, 6
	jbe	LBB61_4
	jmp	LBB61_20
LBB61_10:
	mov	ecx, ebx
	movzx	edi, bl
	mov	ebp, 82
	shr	ecx, 8
	cmp	ecx, edi
	jne	LBB61_21
# %bb.11:
	mov	ebx, eax
	movzx	eax, al
	shr	ebx, 8
	cmp	ebx, eax
	jne	LBB61_21
# %bb.12:
	mov	esi, edx
	movzx	eax, dl
	shr	esi, 8
	cmp	esi, eax
	jne	LBB61_21
# %bb.13:
	mov	eax, dword ptr [esp + 48]
	mov	dword ptr [esp], esi            # 4-byte Spill
	mov	edx, dword ptr [eax + 12]
	test	edx, edx
	je	LBB61_21
# %bb.14:
	mov	eax, dword ptr [eax + 8]
	xor	esi, esi
	jmp	LBB61_16
	.p2align	4, 0x90
LBB61_15:                               #   in Loop: Header=BB61_16 Depth=1
	inc	esi
	cmp	esi, edx
	jae	LBB61_21
LBB61_16:                               # =>This Inner Loop Header: Depth=1
	movzx	edi, byte ptr [eax + 4*esi]
	cmp	ecx, edi
	jne	LBB61_15
# %bb.17:                               #   in Loop: Header=BB61_16 Depth=1
	movzx	edi, byte ptr [eax + 4*esi + 1]
	cmp	ebx, edi
	jne	LBB61_15
# %bb.18:                               #   in Loop: Header=BB61_16 Depth=1
	movzx	edi, byte ptr [eax + 4*esi + 2]
	cmp	dword ptr [esp], edi            # 4-byte Folded Reload
	jne	LBB61_15
# %bb.19:
	mov	eax, dword ptr [esp + 24]
	xor	ebp, ebp
	mov	dword ptr [eax], esi
LBB61_21:
	mov	eax, ebp
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI61_0:
	.long	LBB61_2
	.long	LBB61_21
	.long	LBB61_3
	.long	LBB61_7
	.long	LBB61_2
	.long	LBB61_21
	.long	LBB61_3
LJTI61_1:
	.long	LBB61_5
	.long	LBB61_21
	.long	LBB61_6
	.long	LBB61_10
	.long	LBB61_5
	.long	LBB61_21
	.long	LBB61_6
                                        # -- End function
	.def	 "?lodepng_color_stats_init@@YAXPAULodePNGColorStats@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@00000001000000010000000000000001 # -- Begin function ?lodepng_color_stats_init@@YAXPAULodePNGColorStats@@@Z
	.section	.rdata,"dr",discard,__xmm@00000001000000010000000000000001
	.p2align	4
__xmm@00000001000000010000000000000001:
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	1                               # 0x1
	.text
	.globl	"?lodepng_color_stats_init@@YAXPAULodePNGColorStats@@@Z"
	.p2align	4, 0x90
"?lodepng_color_stats_init@@YAXPAULodePNGColorStats@@@Z": # @"?lodepng_color_stats_init@@YAXPAULodePNGColorStats@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	movaps	xmm0, xmmword ptr [__xmm@00000001000000010000000000000001] # xmm0 = [1,0,1,1]
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 10], 0
	mov	dword ptr [eax + 6], 0
	movups	xmmword ptr [eax + 1048], xmm0
	ret
                                        # -- End function
	.def	 "?lodepng_compute_color_stats@@YAIPAULodePNGColorStats@@PBEIIPBULodePNGColorMode@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_compute_color_stats@@YAIPAULodePNGColorStats@@PBEIIPBULodePNGColorMode@@@Z" # -- Begin function ?lodepng_compute_color_stats@@YAIPAULodePNGColorStats@@PBEIIPBULodePNGColorMode@@@Z
	.p2align	4, 0x90
"?lodepng_compute_color_stats@@YAIPAULodePNGColorStats@@PBEIIPBULodePNGColorMode@@@Z": # @"?lodepng_compute_color_stats@@YAIPAULodePNGColorStats@@PBEIIPBULodePNGColorMode@@@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -16
	sub	esp, 160
	mov	esi, dword ptr [ebp + 24]
	mov	eax, dword ptr [ebp + 20]
	xor	edi, edi
	mov	ecx, dword ptr [esi]
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	eax, ecx
	and	eax, 4
	or	eax, dword ptr [esi + 16]
	jne	LBB63_1
# %bb.4:
	mov	eax, dword ptr [esi + 12]
	test	eax, eax
	je	LBB63_136
# %bb.5:
	mov	edx, dword ptr [esi + 8]
	add	edx, 3
	.p2align	4, 0x90
LBB63_6:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [edx], -1
	jne	LBB63_1
# %bb.7:                                #   in Loop: Header=BB63_6 Depth=1
	add	edx, 4
	dec	eax
	jne	LBB63_6
LBB63_136:
	mov	edi, 1
LBB63_1:
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	imul	eax, dword ptr [ebp + 16]
	cmp	ecx, 6
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	eax, dword ptr [esi + 4]
	ja	LBB63_9
# %bb.2:
	mov	ebx, 1
	jmp	dword ptr [4*ecx + LJTI63_0]
LBB63_3:
	mov	ebx, 3
	jmp	LBB63_13
LBB63_9:
	cmp	ecx, 255
LBB63_10:
	xor	ebx, ebx
	jmp	LBB63_13
LBB63_11:
	mov	ebx, 2
	jmp	LBB63_13
LBB63_12:
	mov	ebx, 4
LBB63_13:
	mov	esi, dword ptr [edx + 1048]
	test	ecx, -5
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	xorps	xmm0, xmm0
	sete	byte ptr [esp + 48]             # 1-byte Folded Spill
	imul	ebx, eax
	mov	eax, edx
	mov	edx, ebx
	mov	edi, dword ptr [eax + 20]
	xor	edx, 1
	mov	ecx, esi
	xor	ecx, 1
	or	edx, ecx
	mov	edx, 1
	mov	ecx, ebx
	mov	dword ptr [esp + 28], edi       # 4-byte Spill
	sete	byte ptr [esp + 27]             # 1-byte Folded Spill
	shl	edx, cl
	mov	ecx, 257
	add	edx, edi
	mov	edi, 1
	cmp	edx, 257
	cmovae	edx, ecx
	cmp	ebx, 9
	cmovae	edx, ecx
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	add	dword ptr [eax + 1052], ecx
	mov	dword ptr [esp + 72], edx       # 4-byte Spill
	mov	dword ptr [esp + 60], ebx       # 4-byte Spill
	cmp	dword ptr [eax + 1056], 0
	movaps	xmmword ptr [esp + 128], xmm0
	movaps	xmmword ptr [esp + 112], xmm0
	movaps	xmmword ptr [esp + 96], xmm0
	movaps	xmmword ptr [esp + 80], xmm0
	mov	dword ptr [esp + 144], -1
	sete	cl
	cmp	dword ptr [eax + 16], 0
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	cmovne	eax, edi
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp + 8]
	cmp	dword ptr [eax], 0
	setne	ah
	cmp	esi, 16
	sete	ch
	cmp	esi, ebx
	mov	esi, dword ptr [esp + 28]       # 4-byte Reload
	setae	byte ptr [esp + 44]             # 1-byte Folded Spill
	cmp	esi, edx
	setae	dl
	or	dl, cl
	or	dl, ch
	jne	LBB63_20
# %bb.14:
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	test	esi, esi
	je	LBB63_21
# %bb.15:
	mov	edi, dword ptr [ebp + 8]
	mov	byte ptr [esp + 52], dl         # 1-byte Spill
	mov	byte ptr [esp + 40], ah         # 1-byte Spill
	xor	ebx, ebx
	.p2align	4, 0x90
LBB63_16:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [edi + 4*ebx + 25]
	movzx	eax, byte ptr [edi + 4*ebx + 27]
	movzx	esi, byte ptr [edi + 4*ebx + 26]
	movzx	edx, byte ptr [edi + 4*ebx + 24]
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	lea	ecx, [esp + 80]
	push	ebx
	push	eax
	push	esi
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	call	"?color_tree_add@@YAIPAUColorTree@@EEEEI@Z"
	add	esp, 16
	test	eax, eax
	jne	LBB63_19
# %bb.17:                               #   in Loop: Header=BB63_16 Depth=1
	inc	ebx
	cmp	ebx, dword ptr [edi + 20]
	jb	LBB63_16
# %bb.18:
	mov	eax, dword ptr [ebp + 24]
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	mov	dl, byte ptr [esp + 52]         # 1-byte Reload
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	mov	ah, byte ptr [esp + 40]         # 1-byte Reload
	jmp	LBB63_21
LBB63_20:
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
LBB63_21:
	mov	al, byte ptr [esp + 48]         # 1-byte Reload
	movzx	edx, dl
	or	al, ah
	movzx	esi, al
	mov	al, byte ptr [esp + 44]         # 1-byte Reload
	mov	dword ptr [esp + 48], esi       # 4-byte Spill
	or	al, byte ptr [esp + 27]         # 1-byte Folded Reload
	cmp	dword ptr [esp + 20], 16        # 4-byte Folded Reload
	movzx	eax, al
	jne	LBB63_31
# %bb.22:
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	mov	cl, 1
	mov	word ptr [esp + 12], 0
	mov	word ptr [esp + 10], 0
	mov	word ptr [esp + 8], 0
	mov	word ptr [esp + 14], 0
	je	LBB63_30
# %bb.23:
	xor	edi, edi
	lea	ebx, [esp + 8]
	lea	esi, [esp + 10]
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	.p2align	4, 0x90
LBB63_24:                               # =>This Inner Loop Header: Depth=1
	lea	ecx, [esp + 12]
	mov	edx, esi
	push	dword ptr [ebp + 24]
	push	edi
	push	dword ptr [ebp + 12]
	lea	eax, [esp + 26]
	push	eax
	push	ebx
	call	"?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z"
	add	esp, 20
	movzx	eax, word ptr [esp + 12]
	movzx	ecx, al
	shr	eax, 8
	cmp	ecx, eax
	jne	LBB63_86
# %bb.25:                               #   in Loop: Header=BB63_24 Depth=1
	movzx	eax, word ptr [esp + 10]
	movzx	ecx, al
	shr	eax, 8
	cmp	ecx, eax
	jne	LBB63_86
# %bb.26:                               #   in Loop: Header=BB63_24 Depth=1
	movzx	eax, word ptr [esp + 8]
	movzx	ecx, al
	shr	eax, 8
	cmp	ecx, eax
	jne	LBB63_86
# %bb.27:                               #   in Loop: Header=BB63_24 Depth=1
	movzx	eax, word ptr [esp + 14]
	movzx	ecx, al
	shr	eax, 8
	cmp	ecx, eax
	jne	LBB63_86
# %bb.28:                               #   in Loop: Header=BB63_24 Depth=1
	inc	edi
	cmp	dword ptr [esp + 32], edi       # 4-byte Folded Reload
	jne	LBB63_24
# %bb.29:
	mov	esi, dword ptr [esp + 48]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	cl, 1
LBB63_30:
	test	cl, cl
	je	LBB63_87
LBB63_31:
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	mov	ebx, eax
	mov	byte ptr [esp + 12], 0
	mov	byte ptr [esp + 10], 0
	mov	byte ptr [esp + 8], 0
	mov	byte ptr [esp + 14], 0
	je	LBB63_72
# %bb.32:
	xor	edi, edi
	jmp	LBB63_35
	.p2align	4, 0x90
LBB63_33:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	ecx, byte ptr [esp + 12]
	mov	dword ptr [esp + 56], ebx       # 4-byte Spill
	mov	ebx, edi
	movzx	edi, byte ptr [esp + 14]
	movzx	eax, byte ptr [esp + 8]
	movzx	esi, byte ptr [esp + 10]
	movzx	edx, cl
	mov	byte ptr [esp + 39], cl         # 1-byte Spill
	lea	ecx, [esp + 80]
	mov	dword ptr [esp + 40], edi       # 4-byte Spill
	mov	dword ptr [esp + 76], edx       # 4-byte Spill
	push	edi
	mov	edi, ebx
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	push	eax
	mov	dword ptr [esp + 60], esi       # 4-byte Spill
	push	esi
	call	"?color_tree_get@@YAHPAUColorTree@@EEEE@Z"
	add	esp, 12
	xor	edx, edx
	test	eax, eax
	js	LBB63_62
LBB63_34:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	eax, byte ptr [esp + 27]        # 1-byte Folded Reload
	inc	edi
	xor	ebx, ebx
	cmp	dword ptr [esp + 32], edi       # 4-byte Folded Reload
	mov	bl, al
	je	LBB63_72
LBB63_35:                               # =>This Inner Loop Header: Depth=1
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	lea	edx, [esp + 10]
	lea	ecx, [esp + 12]
	push	dword ptr [ebp + 24]
	push	edi
	push	dword ptr [ebp + 12]
	lea	eax, [esp + 26]
	push	eax
	lea	eax, [esp + 24]
	push	eax
	call	"?getPixelColorRGBA8@@YAXPAE000PBEIPBULodePNGColorMode@@@Z"
	add	esp, 20
	mov	edx, dword ptr [ebp + 8]
	test	ebx, ebx
	mov	ebx, dword ptr [edx + 1048]
	jne	LBB63_41
# %bb.36:                               #   in Loop: Header=BB63_35 Depth=1
	cmp	ebx, 7
	ja	LBB63_41
# %bb.37:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	ecx, byte ptr [esp + 12]
	mov	eax, 1
	mov	edx, ecx
	inc	dl
	cmp	dl, 2
	jb	LBB63_39
# %bb.38:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	ecx, cl
	mov	eax, ecx
	mov	edx, ecx
	shl	eax, 4
	sub	edx, eax
	mov	eax, 8
	cmp	dl, 15
	jbe	LBB63_71
LBB63_39:                               #   in Loop: Header=BB63_35 Depth=1
	mov	edx, dword ptr [ebp + 8]
	cmp	eax, ebx
	jbe	LBB63_41
LBB63_40:                               #   in Loop: Header=BB63_35 Depth=1
	mov	ebx, eax
	mov	dword ptr [edx + 1048], eax
LBB63_41:                               #   in Loop: Header=BB63_35 Depth=1
	cmp	ebx, dword ptr [esp + 60]       # 4-byte Folded Reload
	mov	al, 1
	mov	cl, 1
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	mov	eax, ebx
	mov	ecx, 1
	setae	byte ptr [esp + 27]             # 1-byte Folded Spill
	cmp	dword ptr [esp + 48], 0         # 4-byte Folded Reload
	jne	LBB63_46
# %bb.42:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	eax, byte ptr [esp + 12]
	cmp	al, byte ptr [esp + 10]
	jne	LBB63_44
# %bb.43:                               #   in Loop: Header=BB63_35 Depth=1
	cmp	al, byte ptr [esp + 8]
	mov	eax, ebx
	mov	ecx, 0
	mov	dword ptr [esp + 44], 0         # 4-byte Folded Spill
	je	LBB63_46
LBB63_44:                               #   in Loop: Header=BB63_35 Depth=1
	mov	cl, 1
	cmp	ebx, 7
	mov	eax, ebx
	mov	dword ptr [edx], 1
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	mov	ecx, 1
	ja	LBB63_46
# %bb.45:                               #   in Loop: Header=BB63_35 Depth=1
	mov	cl, 1
	mov	eax, 8
	mov	dword ptr [edx + 1048], 8
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	mov	ecx, 1
	.p2align	4, 0x90
LBB63_46:                               #   in Loop: Header=BB63_35 Depth=1
	cmp	dword ptr [esp + 16], 0         # 4-byte Folded Reload
	mov	dword ptr [esp + 48], ecx       # 4-byte Spill
	je	LBB63_52
LBB63_47:                               #   in Loop: Header=BB63_35 Depth=1
	mov	al, 1
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
LBB63_48:                               #   in Loop: Header=BB63_35 Depth=1
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [esp + 16], 1         # 4-byte Folded Spill
LBB63_49:                               #   in Loop: Header=BB63_35 Depth=1
	test	edx, edx
	je	LBB63_33
# %bb.50:                               #   in Loop: Header=BB63_35 Depth=1
	test	edx, edx
	setne	al
	cmp	ebx, dword ptr [esp + 60]       # 4-byte Folded Reload
	jb	LBB63_34
LBB63_51:                               #   in Loop: Header=BB63_35 Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	and	cl, al
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	and	al, cl
	je	LBB63_34
	jmp	LBB63_72
	.p2align	4, 0x90
LBB63_52:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	esi, byte ptr [esp + 12]
	cmp	word ptr [edx + 8], si
	jne	LBB63_55
# %bb.53:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	ecx, byte ptr [esp + 10]
	cmp	word ptr [edx + 10], cx
	jne	LBB63_55
# %bb.54:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	ecx, byte ptr [esp + 8]
	cmp	word ptr [edx + 12], cx
	sete	dl
	movzx	ecx, byte ptr [esp + 14]
	cmp	cl, -1
	jne	LBB63_56
LBB63_67:                               #   in Loop: Header=BB63_35 Depth=1
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [esp + 28], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	cmp	dword ptr [esi + 4], 0
	sete	cl
	xor	dl, 1
	or	dl, cl
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	jne	LBB63_49
# %bb.68:                               #   in Loop: Header=BB63_35 Depth=1
	mov	ecx, esi
	cmp	eax, 7
	mov	dword ptr [esi + 16], 1
	mov	dword ptr [esi + 4], 0
	ja	LBB63_70
# %bb.69:                               #   in Loop: Header=BB63_35 Depth=1
	mov	dword ptr [ecx + 1048], 8
LBB63_70:                               #   in Loop: Header=BB63_35 Depth=1
	mov	al, 1
	mov	dword ptr [esp + 16], 1         # 4-byte Folded Spill
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	jmp	LBB63_49
	.p2align	4, 0x90
LBB63_55:                               #   in Loop: Header=BB63_35 Depth=1
	xor	edx, edx
	movzx	ecx, byte ptr [esp + 14]
	cmp	cl, -1
	je	LBB63_67
LBB63_56:                               #   in Loop: Header=BB63_35 Depth=1
	test	cl, cl
	mov	dword ptr [esp + 40], esi       # 4-byte Spill
	jne	LBB63_60
# %bb.57:                               #   in Loop: Header=BB63_35 Depth=1
	mov	ecx, dword ptr [ebp + 8]
	mov	esi, dword ptr [ecx + 4]
	test	esi, esi
	sete	cl
	or	dl, cl
	je	LBB63_60
# %bb.58:                               #   in Loop: Header=BB63_35 Depth=1
	mov	ecx, dword ptr [ebp + 8]
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [esp + 28], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	or	esi, dword ptr [ecx + 16]
	jne	LBB63_49
# %bb.59:                               #   in Loop: Header=BB63_35 Depth=1
	mov	eax, dword ptr [esp + 40]       # 4-byte Reload
	mov	dword ptr [ecx + 4], 1
	mov	dword ptr [esp + 28], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	mov	word ptr [ecx + 8], ax
	movzx	eax, byte ptr [esp + 10]
	mov	word ptr [ecx + 10], ax
	movzx	eax, byte ptr [esp + 8]
	mov	word ptr [ecx + 12], ax
	jmp	LBB63_49
LBB63_60:                               #   in Loop: Header=BB63_35 Depth=1
	mov	ecx, dword ptr [ebp + 8]
	cmp	eax, 7
	mov	dword ptr [ecx + 16], 1
	mov	dword ptr [ecx + 4], 0
	ja	LBB63_48
# %bb.61:                               #   in Loop: Header=BB63_35 Depth=1
	mov	dword ptr [ecx + 1048], 8
	jmp	LBB63_47
LBB63_62:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	ecx, byte ptr [esp + 20]        # 1-byte Folded Reload
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	movzx	eax, byte ptr [esp + 40]        # 1-byte Folded Reload
	mov	edx, dword ptr [esp + 76]       # 4-byte Reload
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [esp + 68], ecx       # 4-byte Spill
	movzx	ecx, bl
	mov	dword ptr [esp + 64], ecx       # 4-byte Spill
	lea	ecx, [esp + 80]
	push	dword ptr [esi + 20]
	push	eax
	push	dword ptr [esp + 76]            # 4-byte Folded Reload
	push	dword ptr [esp + 76]            # 4-byte Folded Reload
	call	"?color_tree_add@@YAIPAUColorTree@@EEEEI@Z"
	add	esp, 16
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	test	eax, eax
	jne	LBB63_19
# %bb.63:                               #   in Loop: Header=BB63_35 Depth=1
	mov	esi, dword ptr [ebp + 8]
	mov	eax, dword ptr [esi + 20]
	cmp	eax, 255
	ja	LBB63_65
# %bb.64:                               #   in Loop: Header=BB63_35 Depth=1
	movzx	ecx, byte ptr [esp + 39]        # 1-byte Folded Reload
	mov	byte ptr [esi + 4*eax + 24], cl
	mov	byte ptr [esi + 4*eax + 25], bl
	mov	byte ptr [esi + 4*eax + 26], dl
	mov	edx, dword ptr [esp + 40]       # 4-byte Reload
	mov	byte ptr [esi + 4*eax + 27], dl
	mov	eax, dword ptr [esi + 20]
LBB63_65:                               #   in Loop: Header=BB63_35 Depth=1
	inc	eax
	xor	edx, edx
	mov	ebx, dword ptr [esp + 56]       # 4-byte Reload
	cmp	eax, dword ptr [esp + 72]       # 4-byte Folded Reload
	mov	dword ptr [esi + 20], eax
	setae	dl
	test	edx, edx
	setne	al
	cmp	ebx, dword ptr [esp + 60]       # 4-byte Folded Reload
	jae	LBB63_51
	jmp	LBB63_34
LBB63_71:                               #   in Loop: Header=BB63_35 Depth=1
	lea	eax, [ecx + 2*ecx]
	xor	ecx, ecx
	neg	eax
	cmp	al, 3
	seta	cl
	lea	eax, [ecx + ecx + 2]
	mov	edx, dword ptr [ebp + 8]
	cmp	eax, ebx
	ja	LBB63_40
	jmp	LBB63_41
LBB63_72:
	mov	edx, dword ptr [ebp + 8]
	cmp	dword ptr [edx + 4], 0
	je	LBB63_83
# %bb.73:
	cmp	dword ptr [edx + 16], 0
	jne	LBB63_83
# %bb.74:
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	je	LBB63_83
# %bb.75:
	xor	ebx, ebx
	lea	esi, [esp + 12]
	lea	edi, [esp + 10]
	jmp	LBB63_77
	.p2align	4, 0x90
LBB63_76:                               #   in Loop: Header=BB63_77 Depth=1
	inc	ebx
	cmp	dword ptr [esp + 32], ebx       # 4-byte Folded Reload
	je	LBB63_83
LBB63_77:                               # =>This Inner Loop Header: Depth=1
	mov	edx, edi
	mov	ecx, esi
	push	dword ptr [ebp + 24]
	push	ebx
	push	dword ptr [ebp + 12]
	lea	eax, [esp + 26]
	push	eax
	lea	eax, [esp + 24]
	push	eax
	call	"?getPixelColorRGBA8@@YAXPAE000PBEIPBULodePNGColorMode@@@Z"
	mov	edx, dword ptr [ebp + 8]
	add	esp, 20
	cmp	byte ptr [esp + 14], 0
	je	LBB63_76
# %bb.78:                               #   in Loop: Header=BB63_77 Depth=1
	movzx	eax, byte ptr [esp + 12]
	cmp	word ptr [edx + 8], ax
	jne	LBB63_76
# %bb.79:                               #   in Loop: Header=BB63_77 Depth=1
	movzx	eax, byte ptr [esp + 10]
	cmp	word ptr [edx + 10], ax
	jne	LBB63_76
# %bb.80:                               #   in Loop: Header=BB63_77 Depth=1
	movzx	eax, byte ptr [esp + 8]
	cmp	word ptr [edx + 12], ax
	jne	LBB63_76
# %bb.81:                               #   in Loop: Header=BB63_77 Depth=1
	mov	dword ptr [edx + 16], 1
	mov	dword ptr [edx + 4], 0
	cmp	dword ptr [edx + 1048], 7
	ja	LBB63_76
# %bb.82:                               #   in Loop: Header=BB63_77 Depth=1
	mov	dword ptr [edx + 1048], 8
	jmp	LBB63_76
LBB63_83:
	mov	eax, dword ptr [edx + 8]
	mov	ecx, dword ptr [edx + 12]
	mov	esi, edx
	mov	edx, eax
	shl	edx, 8
	add	edx, eax
	mov	word ptr [esi + 8], dx
	movzx	eax, word ptr [esi + 10]
	mov	edx, eax
	shl	edx, 8
	add	edx, eax
	mov	eax, ecx
	shl	eax, 8
	mov	word ptr [esi + 10], dx
	add	eax, ecx
	mov	word ptr [esi + 12], ax
LBB63_84:
	xor	esi, esi
	jmp	LBB63_85
LBB63_19:
	mov	esi, eax
LBB63_85:
	lea	ecx, [esp + 80]
	call	"?color_tree_cleanup@@YAXPAUColorTree@@@Z"
	mov	eax, esi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB63_86:
	mov	eax, dword ptr [ebp + 8]
	mov	esi, dword ptr [esp + 48]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	xor	ecx, ecx
	mov	edx, 1
	mov	dword ptr [eax + 1048], 16
	mov	eax, 1
	test	cl, cl
	jne	LBB63_31
LBB63_87:
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	mov	word ptr [esp + 12], 0
	mov	word ptr [esp + 10], 0
	mov	word ptr [esp + 8], 0
	mov	word ptr [esp + 14], 0
	je	LBB63_126
# %bb.88:
	xor	edi, edi
	test	eax, eax
	jne	LBB63_109
	jmp	LBB63_91
	.p2align	4, 0x90
LBB63_89:                               #   in Loop: Header=BB63_91 Depth=1
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [eax + 16], 1
	mov	dword ptr [eax + 4], 0
	mov	eax, 1
LBB63_90:                               #   in Loop: Header=BB63_91 Depth=1
	inc	edi
	mov	ebx, eax
	cmp	dword ptr [esp + 32], edi       # 4-byte Folded Reload
	je	LBB63_126
LBB63_91:                               # =>This Inner Loop Header: Depth=1
	lea	edx, [esp + 10]
	lea	ecx, [esp + 12]
	push	dword ptr [ebp + 24]
	push	edi
	push	dword ptr [ebp + 12]
	lea	eax, [esp + 26]
	push	eax
	lea	eax, [esp + 24]
	push	eax
	call	"?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z"
	add	esp, 20
	mov	edx, dword ptr [ebp + 8]
	test	esi, esi
	mov	eax, 1
	mov	esi, 1
	jne	LBB63_94
# %bb.92:                               #   in Loop: Header=BB63_91 Depth=1
	movzx	ecx, word ptr [esp + 12]
	cmp	cx, word ptr [esp + 10]
	jne	LBB63_98
# %bb.93:                               #   in Loop: Header=BB63_91 Depth=1
	cmp	cx, word ptr [esp + 8]
	mov	esi, 0
	jne	LBB63_98
	.p2align	4, 0x90
LBB63_94:                               #   in Loop: Header=BB63_91 Depth=1
	test	ebx, ebx
	jne	LBB63_90
LBB63_95:                               #   in Loop: Header=BB63_91 Depth=1
	movzx	ecx, word ptr [esp + 12]
	cmp	cx, word ptr [edx + 8]
	jne	LBB63_99
# %bb.96:                               #   in Loop: Header=BB63_91 Depth=1
	movzx	eax, word ptr [esp + 10]
	cmp	ax, word ptr [edx + 10]
	jne	LBB63_99
# %bb.97:                               #   in Loop: Header=BB63_91 Depth=1
	movzx	eax, word ptr [esp + 8]
	cmp	ax, word ptr [edx + 12]
	sete	dl
	movzx	eax, word ptr [esp + 14]
	cmp	ax, -1
	jne	LBB63_100
LBB63_105:                              #   in Loop: Header=BB63_91 Depth=1
	mov	eax, dword ptr [ebp + 8]
	cmp	dword ptr [eax + 4], 0
	sete	cl
	xor	dl, 1
	xor	eax, eax
	or	dl, cl
	je	LBB63_89
	jmp	LBB63_90
	.p2align	4, 0x90
LBB63_99:                               #   in Loop: Header=BB63_91 Depth=1
	xor	edx, edx
	movzx	eax, word ptr [esp + 14]
	cmp	ax, -1
	je	LBB63_105
LBB63_100:                              #   in Loop: Header=BB63_91 Depth=1
	test	ax, ax
	jne	LBB63_89
# %bb.101:                              #   in Loop: Header=BB63_91 Depth=1
	mov	eax, dword ptr [ebp + 8]
	mov	ebx, dword ptr [eax + 4]
	test	ebx, ebx
	sete	al
	or	dl, al
	je	LBB63_89
# %bb.102:                              #   in Loop: Header=BB63_91 Depth=1
	mov	edx, dword ptr [ebp + 8]
	xor	eax, eax
	or	ebx, dword ptr [edx + 16]
	jne	LBB63_90
# %bb.103:                              #   in Loop: Header=BB63_91 Depth=1
	mov	dword ptr [edx + 4], 1
	mov	word ptr [edx + 8], cx
	movzx	ecx, word ptr [esp + 10]
	mov	word ptr [edx + 10], cx
	movzx	ecx, word ptr [esp + 8]
	mov	word ptr [edx + 12], cx
	jmp	LBB63_90
LBB63_98:                               #   in Loop: Header=BB63_91 Depth=1
	mov	esi, 1
	mov	dword ptr [edx], 1
	test	ebx, ebx
	jne	LBB63_90
	jmp	LBB63_95
	.p2align	4, 0x90
LBB63_106:                              #   in Loop: Header=BB63_109 Depth=1
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [ecx + 16], 1
	mov	dword ptr [ecx + 4], 0
LBB63_107:                              #   in Loop: Header=BB63_109 Depth=1
	cmp	dword ptr [esp + 20], 0         # 4-byte Folded Reload
	mov	ebx, 1
	setne	cl
	test	cl, al
	jne	LBB63_126
LBB63_108:                              #   in Loop: Header=BB63_109 Depth=1
	inc	edi
	cmp	dword ptr [esp + 32], edi       # 4-byte Folded Reload
	je	LBB63_126
LBB63_109:                              # =>This Inner Loop Header: Depth=1
	mov	dword ptr [esp + 16], ebx       # 4-byte Spill
	mov	ebx, esi
	lea	ecx, [esp + 12]
	lea	edx, [esp + 10]
	push	dword ptr [ebp + 24]
	push	edi
	push	dword ptr [ebp + 12]
	lea	eax, [esp + 26]
	push	eax
	lea	eax, [esp + 24]
	push	eax
	call	"?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z"
	add	esp, 20
	mov	esi, 1
	mov	al, 1
	test	ebx, ebx
	je	LBB63_111
# %bb.110:                              #   in Loop: Header=BB63_109 Depth=1
	mov	edx, dword ptr [ebp + 8]
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	test	ebx, ebx
	jne	LBB63_107
	jmp	LBB63_114
	.p2align	4, 0x90
LBB63_111:                              #   in Loop: Header=BB63_109 Depth=1
	movzx	ecx, word ptr [esp + 12]
	mov	edx, dword ptr [ebp + 8]
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	cmp	cx, word ptr [esp + 10]
	jne	LBB63_117
# %bb.112:                              #   in Loop: Header=BB63_109 Depth=1
	xor	eax, eax
	cmp	cx, word ptr [esp + 8]
	mov	esi, 0
	jne	LBB63_117
	.p2align	4, 0x90
# %bb.113:                              #   in Loop: Header=BB63_109 Depth=1
	test	ebx, ebx
	jne	LBB63_107
LBB63_114:                              #   in Loop: Header=BB63_109 Depth=1
	movzx	ecx, word ptr [esp + 12]
	cmp	cx, word ptr [edx + 8]
	jne	LBB63_118
# %bb.115:                              #   in Loop: Header=BB63_109 Depth=1
	mov	ebx, edx
	movzx	edx, word ptr [esp + 10]
	cmp	dx, word ptr [ebx + 10]
	jne	LBB63_118
# %bb.116:                              #   in Loop: Header=BB63_109 Depth=1
	movzx	edx, word ptr [esp + 8]
	cmp	dx, word ptr [ebx + 12]
	sete	dl
	movzx	ebx, word ptr [esp + 14]
	cmp	bx, -1
	jne	LBB63_119
LBB63_124:                              #   in Loop: Header=BB63_109 Depth=1
	mov	ecx, dword ptr [ebp + 8]
	cmp	dword ptr [ecx + 4], 0
	sete	cl
	xor	dl, 1
	xor	ebx, ebx
	or	dl, cl
	je	LBB63_106
	jmp	LBB63_108
	.p2align	4, 0x90
LBB63_118:                              #   in Loop: Header=BB63_109 Depth=1
	xor	edx, edx
	movzx	ebx, word ptr [esp + 14]
	cmp	bx, -1
	je	LBB63_124
LBB63_119:                              #   in Loop: Header=BB63_109 Depth=1
	test	bx, bx
	jne	LBB63_106
# %bb.120:                              #   in Loop: Header=BB63_109 Depth=1
	mov	ebx, dword ptr [ebp + 8]
	not	dl
	mov	ebx, dword ptr [ebx + 4]
	test	ebx, ebx
	setne	byte ptr [esp + 16]             # 1-byte Folded Spill
	test	byte ptr [esp + 16], dl         # 1-byte Folded Reload
	jne	LBB63_106
# %bb.121:                              #   in Loop: Header=BB63_109 Depth=1
	mov	edx, dword ptr [ebp + 8]
	or	ebx, dword ptr [edx + 16]
	je	LBB63_125
# %bb.122:                              #   in Loop: Header=BB63_109 Depth=1
	xor	ebx, ebx
	jmp	LBB63_108
LBB63_117:                              #   in Loop: Header=BB63_109 Depth=1
	mov	al, 1
	mov	esi, 1
	mov	dword ptr [edx], 1
	test	ebx, ebx
	jne	LBB63_107
	jmp	LBB63_114
LBB63_125:                              #   in Loop: Header=BB63_109 Depth=1
	mov	dword ptr [edx + 4], 1
	mov	word ptr [edx + 8], cx
	xor	ebx, ebx
	movzx	eax, word ptr [esp + 10]
	mov	word ptr [edx + 10], ax
	movzx	eax, word ptr [esp + 8]
	mov	word ptr [edx + 12], ax
	jmp	LBB63_108
LBB63_126:
	mov	eax, dword ptr [ebp + 8]
	cmp	dword ptr [eax + 4], 0
	je	LBB63_84
# %bb.127:
	cmp	dword ptr [eax + 16], 0
	jne	LBB63_84
# %bb.128:
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	je	LBB63_84
# %bb.129:
	xor	ebx, ebx
	lea	esi, [esp + 12]
	lea	edi, [esp + 10]
	jmp	LBB63_131
	.p2align	4, 0x90
LBB63_130:                              #   in Loop: Header=BB63_131 Depth=1
	inc	ebx
	cmp	dword ptr [esp + 32], ebx       # 4-byte Folded Reload
	je	LBB63_84
LBB63_131:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, esi
	mov	edx, edi
	push	dword ptr [ebp + 24]
	push	ebx
	push	dword ptr [ebp + 12]
	lea	eax, [esp + 26]
	push	eax
	lea	eax, [esp + 24]
	push	eax
	call	"?getPixelColorRGBA16@@YAXPAG000PBEIPBULodePNGColorMode@@@Z"
	mov	ecx, dword ptr [ebp + 8]
	add	esp, 20
	cmp	word ptr [esp + 14], 0
	je	LBB63_130
# %bb.132:                              #   in Loop: Header=BB63_131 Depth=1
	movzx	eax, word ptr [esp + 12]
	cmp	ax, word ptr [ecx + 8]
	jne	LBB63_130
# %bb.133:                              #   in Loop: Header=BB63_131 Depth=1
	movzx	eax, word ptr [esp + 10]
	cmp	ax, word ptr [ecx + 10]
	jne	LBB63_130
# %bb.134:                              #   in Loop: Header=BB63_131 Depth=1
	movzx	eax, word ptr [esp + 8]
	cmp	ax, word ptr [ecx + 12]
	jne	LBB63_130
# %bb.135:                              #   in Loop: Header=BB63_131 Depth=1
	mov	dword ptr [ecx + 16], 1
	mov	dword ptr [ecx + 4], 0
	jmp	LBB63_130
	.section	.rdata,"dr"
	.p2align	2
LJTI63_0:
	.long	LBB63_13
	.long	LBB63_10
	.long	LBB63_3
	.long	LBB63_13
	.long	LBB63_11
	.long	LBB63_10
	.long	LBB63_12
                                        # -- End function
	.def	 "?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z" # -- Begin function ?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z
	.p2align	4, 0x90
"?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z": # @"?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	edi, dword ptr [esp + 44]
	mov	esi, dword ptr [esp + 40]
	test	edi, edi
	je	LBB64_2
# %bb.1:
	mov	eax, dword ptr [esp + 48]
	test	eax, eax
	je	LBB64_2
# %bb.3:
	cmp	eax, 32
	ja	LBB64_5
# %bb.4:
	mov	dword ptr [esi + 380], 27
	mov	eax, 27
	jmp	LBB64_47
LBB64_2:
	mov	dword ptr [esi + 380], 48
	mov	eax, 48
	jmp	LBB64_47
LBB64_5:
	lea	eax, [esi + 152]
	push	eax
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	movaps	xmm0, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm0 = [0,0,0,6]
	mov	dword ptr [esi + 184], 0
	mov	dword ptr [esi + 180], 0
	mov	dword ptr [esi + 192], 0
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 168], 8
	mov	dword ptr [esi + 172], 0
	mov	dword ptr [esi + 176], 0
	movups	xmmword ptr [esi + 152], xmm0
	mov	dword ptr [esi + 272], 0
	mov	dword ptr [esi + 288], 0
	mov	dword ptr [esi + 296], 0
	mov	dword ptr [esi + 332], 0
	mov	dword ptr [esi + 340], 0
	mov	dword ptr [esi + 344], 0
	mov	dword ptr [esi + 348], 0
	mov	dword ptr [esi + 360], 0
	mov	dword ptr [esi + 356], 0
	mov	dword ptr [esi + 368], 0
	mov	dword ptr [esi + 364], 0
	mov	dword ptr [esi + 376], 0
	mov	dword ptr [esi + 372], 0
	mov	dword ptr [esi + 200], 0
	mov	dword ptr [esi + 196], 0
	mov	dword ptr [esi + 208], 0
	mov	dword ptr [esi + 204], 0
	mov	dword ptr [esi + 216], 0
	mov	dword ptr [esi + 212], 0
	mov	dword ptr [esi + 224], 0
	mov	dword ptr [esi + 220], 0
	mov	dword ptr [esi + 232], 0
	mov	dword ptr [esi + 228], 0
	mov	dword ptr [esi + 240], 0
	mov	dword ptr [esi + 236], 0
	mov	dword ptr [esi + 244], 0
	cmp	byte ptr [edi], -119
	jne	LBB64_13
# %bb.6:
	cmp	byte ptr [edi + 1], 80
	jne	LBB64_13
# %bb.7:
	cmp	byte ptr [edi + 2], 78
	jne	LBB64_13
# %bb.8:
	cmp	byte ptr [edi + 3], 71
	jne	LBB64_13
# %bb.9:
	cmp	byte ptr [edi + 4], 13
	jne	LBB64_13
# %bb.10:
	cmp	byte ptr [edi + 5], 10
	jne	LBB64_13
# %bb.11:
	cmp	byte ptr [edi + 6], 26
	jne	LBB64_13
# %bb.12:
	cmp	byte ptr [edi + 7], 10
	jne	LBB64_13
# %bb.14:
	mov	eax, dword ptr [edi + 8]
	bswap	eax
	cmp	eax, 13
	jne	LBB64_15
# %bb.16:
	cmp	byte ptr [edi + 12], 73
	jne	LBB64_20
# %bb.17:
	cmp	byte ptr [edi + 13], 72
	jne	LBB64_20
# %bb.18:
	cmp	byte ptr [edi + 14], 68
	jne	LBB64_20
# %bb.19:
	cmp	byte ptr [edi + 15], 82
	jne	LBB64_20
# %bb.21:
	mov	ebp, dword ptr [edi + 16]
	mov	edx, dword ptr [esp + 32]
	mov	ecx, dword ptr [esp + 36]
	mov	eax, dword ptr [edi + 20]
	bswap	ebp
	test	edx, edx
	je	LBB64_23
# %bb.22:
	mov	dword ptr [edx], ebp
LBB64_23:
	bswap	eax
	test	ecx, ecx
	je	LBB64_25
# %bb.24:
	mov	dword ptr [ecx], eax
LBB64_25:
	movzx	ecx, byte ptr [edi + 24]
	test	ebp, ebp
	mov	dword ptr [esi + 168], ecx
	movzx	edx, byte ptr [edi + 25]
	mov	dword ptr [esi + 164], edx
	movzx	ebx, byte ptr [edi + 26]
	mov	dword ptr [esi + 152], ebx
	mov	dword ptr [esp + 8], ebx        # 4-byte Spill
	movzx	ebx, byte ptr [edi + 27]
	mov	dword ptr [esi + 156], ebx
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	movzx	ebp, byte ptr [edi + 28]
	mov	dword ptr [esp], ebp            # 4-byte Spill
	mov	dword ptr [esi + 160], ebp
	je	LBB64_27
# %bb.26:
	test	eax, eax
	je	LBB64_27
# %bb.28:
	mov	eax, 31
	cmp	dl, 6
	ja	LBB64_39
# %bb.29:
	movzx	edx, dl
	jmp	dword ptr [4*edx + LJTI64_0]
LBB64_35:
	cmp	cl, 8
	je	LBB64_36
# %bb.38:
	mov	eax, 37
	cmp	cl, 16
	je	LBB64_36
LBB64_39:
	mov	dword ptr [esi + 380], eax
	jmp	LBB64_47
LBB64_13:
	mov	dword ptr [esi + 380], 28
	mov	eax, 28
LBB64_47:
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB64_15:
	mov	dword ptr [esi + 380], 94
	mov	eax, 94
	jmp	LBB64_47
LBB64_20:
	mov	dword ptr [esi + 380], 29
	mov	eax, 29
	jmp	LBB64_47
LBB64_27:
	mov	dword ptr [esi + 380], 93
	mov	eax, 93
	jmp	LBB64_47
LBB64_30:
	mov	eax, 37
	cmp	cl, 16
	ja	LBB64_39
# %bb.31:
	movzx	ecx, cl
	mov	edx, 65814
	jmp	LBB64_32
LBB64_33:
	mov	eax, 37
	cmp	cl, 8
	ja	LBB64_39
# %bb.34:
	movzx	ecx, cl
	mov	edx, 278
LBB64_32:
	bt	edx, ecx
	jae	LBB64_39
LBB64_36:
	cmp	byte ptr [esp + 8], 0           # 1-byte Folded Reload
	mov	dword ptr [esi + 380], 0
	je	LBB64_40
# %bb.37:
	mov	dword ptr [esi + 380], 32
	mov	eax, 32
	jmp	LBB64_47
LBB64_40:
	cmp	byte ptr [esp + 4], 0           # 1-byte Folded Reload
	je	LBB64_42
# %bb.41:
	mov	dword ptr [esi + 380], 33
	mov	eax, 33
	jmp	LBB64_47
LBB64_42:
	cmp	byte ptr [esp], 2               # 1-byte Folded Reload
	jb	LBB64_44
# %bb.43:
	mov	dword ptr [esi + 380], 34
	mov	eax, 34
	jmp	LBB64_47
LBB64_44:
	xor	eax, eax
	cmp	dword ptr [esi + 24], 0
	jne	LBB64_47
# %bb.45:
	movzx	edx, byte ptr [edi + 12]
	mov	ecx, 16777215
	xor	edx, 255
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	movzx	edx, byte ptr [edi + 13]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 14]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 15]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 16]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 17]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 18]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 19]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 20]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 21]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 22]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 23]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 24]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 25]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 26]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 27]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	movzx	edx, byte ptr [edi + 28]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, edx
	mov	edx, dword ptr [edi + 29]
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	bswap	edx
	not	ecx
	cmp	edx, ecx
	je	LBB64_47
# %bb.46:
	mov	eax, 57
	mov	dword ptr [esi + 380], 57
	jmp	LBB64_47
	.section	.rdata,"dr"
	.p2align	2
LJTI64_0:
	.long	LBB64_30
	.long	LBB64_39
	.long	LBB64_35
	.long	LBB64_33
	.long	LBB64_35
	.long	LBB64_39
	.long	LBB64_35
                                        # -- End function
	.def	 "?lodepng_inspect_chunk@@YAIPAULodePNGState@@IPBEI@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?lodepng_inspect_chunk@@YAIPAULodePNGState@@IPBEI@Z" # -- Begin function ?lodepng_inspect_chunk@@YAIPAULodePNGState@@IPBEI@Z
	.p2align	4, 0x90
"?lodepng_inspect_chunk@@YAIPAULodePNGState@@IPBEI@Z": # @"?lodepng_inspect_chunk@@YAIPAULodePNGState@@IPBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	ebx, dword ptr [esp + 36]
	mov	eax, dword ptr [esp + 44]
	mov	ecx, 30
	lea	edx, [ebx + 4]
	cmp	edx, eax
	ja	LBB65_96
# %bb.1:
	mov	edx, dword ptr [esp + 40]
	add	ebx, edx
	mov	ebp, dword ptr [ebx]
	bswap	ebp
	test	ebp, ebp
	js	LBB65_2
# %bb.3:
	lea	esi, [ebx + ebp + 12]
	add	edx, eax
	cmp	esi, edx
	ja	LBB65_96
# %bb.4:
	mov	esi, dword ptr [esp + 32]
	cmp	byte ptr [ebx + 4], 80
	lea	edi, [ebx + 8]
	jne	LBB65_9
# %bb.5:
	cmp	byte ptr [ebx + 5], 76
	jne	LBB65_9
# %bb.6:
	cmp	byte ptr [ebx + 6], 84
	jne	LBB65_9
# %bb.7:
	cmp	byte ptr [ebx + 7], 69
	jne	LBB65_9
# %bb.8:
	lea	ecx, [esi + 164]
	mov	edx, edi
	push	ebp
	call	"?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z"
	add	esp, 4
	jmp	LBB65_88
LBB65_2:
	mov	ecx, 63
	jmp	LBB65_96
LBB65_9:
	cmp	byte ptr [ebx + 4], 116
	jne	LBB65_24
# %bb.10:
	cmp	byte ptr [ebx + 5], 82
	jne	LBB65_24
# %bb.11:
	cmp	byte ptr [ebx + 6], 78
	jne	LBB65_24
# %bb.12:
	cmp	byte ptr [ebx + 7], 83
	jne	LBB65_24
# %bb.13:
	mov	ecx, dword ptr [esi + 164]
	test	ecx, ecx
	je	LBB65_20
# %bb.14:
	cmp	ecx, 2
	je	LBB65_22
# %bb.15:
	mov	eax, 42
	cmp	ecx, 3
	jne	LBB65_95
# %bb.16:
	cmp	dword ptr [esi + 176], ebp
	mov	eax, 39
	jb	LBB65_95
# %bb.17:
	test	ebp, ebp
	je	LBB65_89
# %bb.18:
	xor	eax, eax
LBB65_19:                               # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [edi + eax]
	mov	edx, dword ptr [esi + 172]
	mov	byte ptr [edx + 4*eax + 3], cl
	inc	eax
	cmp	ebp, eax
	jne	LBB65_19
	jmp	LBB65_89
LBB65_24:
	cmp	byte ptr [ebx + 4], 98
	jne	LBB65_38
# %bb.25:
	cmp	byte ptr [ebx + 5], 75
	jne	LBB65_38
# %bb.26:
	cmp	byte ptr [ebx + 6], 71
	jne	LBB65_38
# %bb.27:
	cmp	byte ptr [ebx + 7], 68
	jne	LBB65_38
# %bb.28:
	mov	eax, dword ptr [esi + 164]
	cmp	eax, 6
	ja	LBB65_89
# %bb.29:
	jmp	dword ptr [4*eax + LJTI65_0]
LBB65_34:
	mov	eax, 44
	cmp	ebp, 2
	jne	LBB65_95
# %bb.35:
	mov	dword ptr [esi + 196], 1
	movzx	eax, word ptr [edi]
	shl	eax, 16
	bswap	eax
	jmp	LBB65_33
LBB65_38:
	cmp	byte ptr [ebx + 4], 116
	jne	LBB65_43
# %bb.39:
	cmp	byte ptr [ebx + 5], 69
	jne	LBB65_43
# %bb.40:
	cmp	byte ptr [ebx + 6], 88
	jne	LBB65_43
# %bb.41:
	cmp	byte ptr [ebx + 7], 116
	jne	LBB65_43
# %bb.42:
	lea	ecx, [esi + 152]
	mov	edx, edi
	push	ebp
	call	"?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z"
	add	esp, 4
	jmp	LBB65_88
LBB65_43:
	cmp	byte ptr [ebx + 4], 122
	jne	LBB65_48
# %bb.44:
	cmp	byte ptr [ebx + 5], 84
	jne	LBB65_48
# %bb.45:
	cmp	byte ptr [ebx + 6], 88
	jne	LBB65_48
# %bb.46:
	cmp	byte ptr [ebx + 7], 116
	jne	LBB65_48
# %bb.47:
	lea	ecx, [esi + 152]
	mov	edx, esi
	push	ebp
	push	edi
	call	"?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
	jmp	LBB65_87
LBB65_48:
	cmp	byte ptr [ebx + 4], 105
	jne	LBB65_53
# %bb.49:
	cmp	byte ptr [ebx + 5], 84
	jne	LBB65_53
# %bb.50:
	cmp	byte ptr [ebx + 6], 88
	jne	LBB65_53
# %bb.51:
	cmp	byte ptr [ebx + 7], 116
	jne	LBB65_53
# %bb.52:
	lea	ecx, [esi + 152]
	mov	edx, esi
	push	ebp
	push	edi
	call	"?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
	jmp	LBB65_87
LBB65_53:
	cmp	byte ptr [ebx + 4], 116
	jne	LBB65_59
# %bb.54:
	cmp	byte ptr [ebx + 5], 73
	jne	LBB65_59
# %bb.55:
	cmp	byte ptr [ebx + 6], 77
	jne	LBB65_59
# %bb.56:
	cmp	byte ptr [ebx + 7], 69
	jne	LBB65_59
# %bb.57:
	mov	eax, 73
	cmp	ebp, 7
	jne	LBB65_95
# %bb.58:
	mov	dword ptr [esi + 244], 1
	movzx	eax, word ptr [edi]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 248], eax
	movzx	eax, byte ptr [edi + 2]
	mov	dword ptr [esi + 252], eax
	movzx	eax, byte ptr [edi + 3]
	mov	dword ptr [esi + 256], eax
	movzx	eax, byte ptr [edi + 4]
	mov	dword ptr [esi + 260], eax
	movzx	eax, byte ptr [edi + 5]
	mov	dword ptr [esi + 264], eax
	movzx	eax, byte ptr [edi + 6]
	mov	dword ptr [esi + 268], eax
	jmp	LBB65_89
LBB65_59:
	cmp	byte ptr [ebx + 4], 112
	jne	LBB65_65
# %bb.60:
	cmp	byte ptr [ebx + 5], 72
	jne	LBB65_65
# %bb.61:
	cmp	byte ptr [ebx + 6], 89
	jne	LBB65_65
# %bb.62:
	cmp	byte ptr [ebx + 7], 115
	jne	LBB65_65
# %bb.63:
	mov	eax, 74
	cmp	ebp, 9
	jne	LBB65_95
# %bb.64:
	mov	dword ptr [esi + 272], 1
	mov	eax, dword ptr [edi]
	bswap	eax
	mov	dword ptr [esi + 276], eax
	mov	eax, dword ptr [edi + 4]
	bswap	eax
	mov	dword ptr [esi + 280], eax
	movzx	eax, byte ptr [edi + 8]
	mov	dword ptr [esi + 284], eax
	jmp	LBB65_89
LBB65_65:
	cmp	byte ptr [ebx + 4], 103
	jne	LBB65_71
# %bb.66:
	cmp	byte ptr [ebx + 5], 65
	jne	LBB65_71
# %bb.67:
	cmp	byte ptr [ebx + 6], 77
	jne	LBB65_71
# %bb.68:
	cmp	byte ptr [ebx + 7], 65
	jne	LBB65_71
# %bb.69:
	mov	eax, 96
	cmp	ebp, 4
	jne	LBB65_95
# %bb.70:
	mov	dword ptr [esi + 288], 1
	mov	eax, dword ptr [edi]
	bswap	eax
	mov	dword ptr [esi + 292], eax
	jmp	LBB65_89
LBB65_71:
	cmp	byte ptr [ebx + 4], 99
	jne	LBB65_76
# %bb.72:
	cmp	byte ptr [ebx + 5], 72
	jne	LBB65_76
# %bb.73:
	cmp	byte ptr [ebx + 6], 82
	jne	LBB65_76
# %bb.74:
	cmp	byte ptr [ebx + 7], 77
	jne	LBB65_76
# %bb.75:
	lea	ecx, [esi + 152]
	mov	edx, edi
	push	ebp
	call	"?readChunk_cHRM@@YAIPAULodePNGInfo@@PBEI@Z"
	add	esp, 4
	jmp	LBB65_88
LBB65_76:
	cmp	byte ptr [ebx + 4], 115
	jne	LBB65_82
# %bb.77:
	cmp	byte ptr [ebx + 5], 82
	jne	LBB65_82
# %bb.78:
	cmp	byte ptr [ebx + 6], 71
	jne	LBB65_82
# %bb.79:
	cmp	byte ptr [ebx + 7], 66
	jne	LBB65_82
# %bb.80:
	mov	eax, 98
	cmp	ebp, 1
	jne	LBB65_95
# %bb.81:
	mov	dword ptr [esi + 332], 1
	movzx	eax, byte ptr [edi]
	mov	dword ptr [esi + 336], eax
	jmp	LBB65_89
LBB65_82:
	xor	eax, eax
	cmp	byte ptr [ebx + 4], 105
	jne	LBB65_95
# %bb.83:
	cmp	byte ptr [ebx + 5], 67
	jne	LBB65_95
# %bb.84:
	cmp	byte ptr [ebx + 6], 67
	jne	LBB65_95
# %bb.85:
	cmp	byte ptr [ebx + 7], 80
	jne	LBB65_95
# %bb.86:
	lea	ecx, [esi + 152]
	mov	edx, esi
	push	ebp
	push	edi
	call	"?readChunk_iCCP@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
LBB65_87:
	add	esp, 8
LBB65_88:
	test	eax, eax
	jne	LBB65_95
LBB65_89:
	xor	eax, eax
	cmp	dword ptr [esi + 24], 0
	jne	LBB65_95
# %bb.90:
	mov	esi, dword ptr [ebx]
	mov	edx, 0
	bswap	esi
	movzx	eax, byte ptr [esi + ebx + 9]
	movzx	ecx, byte ptr [esi + ebx + 8]
	movzx	ebp, byte ptr [esi + ebx + 10]
	movzx	edi, byte ptr [esi + ebx + 11]
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	xor	eax, eax
	add	esi, 4
	je	LBB65_94
# %bb.91:
	add	ebx, 4
	mov	edx, -1
	mov	dword ptr [esp], edi            # 4-byte Spill
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	.p2align	4, 0x90
LBB65_92:                               # =>This Inner Loop Header: Depth=1
	movzx	edi, byte ptr [ebx]
	movzx	ecx, dl
	shr	edx, 8
	inc	ebx
	xor	ecx, edi
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	dec	esi
	jne	LBB65_92
# %bb.93:
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edi, dword ptr [esp]            # 4-byte Reload
	not	edx
LBB65_94:
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	shl	ecx, 24
	shl	ebp, 8
	shl	esi, 16
	or	ecx, esi
	or	ebp, ecx
	mov	ecx, 57
	or	ebp, edi
	cmp	ebp, edx
	jne	LBB65_96
LBB65_95:
	mov	ecx, eax
LBB65_96:
	mov	eax, ecx
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB65_36:
	mov	eax, 45
	cmp	ebp, 6
	jne	LBB65_95
# %bb.37:
	mov	dword ptr [esi + 196], 1
	movzx	eax, word ptr [edi]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 200], eax
	movzx	eax, word ptr [edi + 2]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 204], eax
	movzx	eax, word ptr [edi + 4]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 208], eax
	jmp	LBB65_89
LBB65_20:
	mov	eax, 30
	cmp	ebp, 2
	jne	LBB65_95
# %bb.21:
	mov	dword ptr [esi + 180], 1
	movzx	eax, word ptr [edi]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 192], eax
	mov	dword ptr [esi + 188], eax
	mov	dword ptr [esi + 184], eax
	jmp	LBB65_89
LBB65_22:
	mov	eax, 41
	cmp	ebp, 6
	jne	LBB65_95
# %bb.23:
	mov	dword ptr [esi + 180], 1
	movzx	eax, word ptr [edi]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 184], eax
	movzx	eax, word ptr [edi + 2]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 188], eax
	movzx	eax, word ptr [edi + 4]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 192], eax
	jmp	LBB65_89
LBB65_30:
	mov	eax, 43
	cmp	ebp, 1
	jne	LBB65_95
# %bb.31:
	movzx	ecx, byte ptr [edi]
	mov	eax, 103
	cmp	dword ptr [esi + 176], ecx
	jbe	LBB65_95
# %bb.32:
	mov	dword ptr [esi + 196], 1
	movzx	eax, byte ptr [edi]
LBB65_33:
	mov	dword ptr [esi + 208], eax
	mov	dword ptr [esi + 204], eax
	mov	dword ptr [esi + 200], eax
	jmp	LBB65_89
	.section	.rdata,"dr"
	.p2align	2
LJTI65_0:
	.long	LBB65_34
	.long	LBB65_89
	.long	LBB65_36
	.long	LBB65_30
	.long	LBB65_34
	.long	LBB65_89
	.long	LBB65_36
                                        # -- End function
	.def	 "?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function ?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z
"?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z": # @"?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebp, dword ptr [esp + 20]
	mov	esi, ecx
	mov	ecx, -1431655765
	mov	edi, edx
	mov	eax, ebp
	add	ebp, -3
	mul	ecx
	mov	ecx, 38
	mov	ebx, edx
	shr	ebx
	cmp	ebp, 767
	mov	dword ptr [esi + 12], ebx
	ja	LBB66_13
# %bb.1:
	mov	eax, dword ptr [esi + 8]
	test	eax, eax
	jne	LBB66_3
# %bb.2:
	push	1024
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esi + 8], eax
	je	LBB66_6
LBB66_3:
	mov	ecx, -1024
	.p2align	4, 0x90
LBB66_4:                                # =>This Inner Loop Header: Depth=1
	mov	byte ptr [eax + ecx + 1024], 0
	mov	eax, dword ptr [esi + 8]
	mov	byte ptr [eax + ecx + 1025], 0
	mov	eax, dword ptr [esi + 8]
	mov	byte ptr [eax + ecx + 1026], 0
	mov	eax, dword ptr [esi + 8]
	mov	byte ptr [eax + ecx + 1027], -1
	add	ecx, 4
	mov	eax, dword ptr [esi + 8]
	jne	LBB66_4
# %bb.5:
	mov	ebx, dword ptr [esi + 12]
	test	eax, eax
	je	LBB66_6
# %bb.8:
	xor	ecx, ecx
	test	ebx, ebx
	je	LBB66_13
# %bb.9:
	add	edi, 2
	mov	edx, 1
	.p2align	4, 0x90
LBB66_10:                               # =>This Inner Loop Header: Depth=1
	movzx	ebx, byte ptr [edi - 2]
	mov	byte ptr [eax + 4*edx - 4], bl
	movzx	eax, byte ptr [edi - 1]
	mov	ebx, dword ptr [esi + 8]
	mov	byte ptr [ebx + 4*edx - 3], al
	movzx	eax, byte ptr [edi]
	mov	ebx, dword ptr [esi + 8]
	mov	byte ptr [ebx + 4*edx - 2], al
	mov	eax, dword ptr [esi + 8]
	mov	byte ptr [eax + 4*edx - 1], -1
	cmp	edx, dword ptr [esi + 12]
	je	LBB66_13
# %bb.11:                               #   in Loop: Header=BB66_10 Depth=1
	mov	eax, dword ptr [esi + 8]
	inc	edx
	add	edi, 3
	jmp	LBB66_10
LBB66_6:
	test	ebx, ebx
	je	LBB66_7
# %bb.12:
	mov	ecx, 83
	mov	dword ptr [esi + 12], 0
	jmp	LBB66_13
LBB66_7:
	xor	ecx, ecx
LBB66_13:
	mov	eax, ecx
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z
"?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z": # @"?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	edi, dword ptr [esp + 32]
	mov	ebx, 89
	test	edi, edi
	je	LBB67_7
# %bb.1:
	mov	esi, edx
	xor	ebx, ebx
	.p2align	4, 0x90
LBB67_2:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [esi + ebx], 0
	je	LBB67_5
# %bb.3:                                #   in Loop: Header=BB67_2 Depth=1
	inc	ebx
	cmp	edi, ebx
	jne	LBB67_2
# %bb.4:
	mov	ebx, edi
LBB67_5:
	lea	eax, [ebx - 1]
	xor	ebp, ebp
	cmp	eax, 78
	jbe	LBB67_8
# %bb.6:
	xor	esi, esi
	mov	ebx, 89
	jmp	LBB67_18
LBB67_7:
	xor	esi, esi
	xor	ebp, ebp
	jmp	LBB67_18
LBB67_8:
	lea	eax, [ebx + 1]
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	mov	dword ptr [esp], eax            # 4-byte Spill
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB67_15
# %bb.9:
	push	ebx
	push	esi
	push	eax
	mov	ebp, eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + ebx], 0
	mov	ebx, edi
	xor	eax, eax
	mov	dword ptr [esp + 4], ebp        # 4-byte Spill
	sub	ebx, dword ptr [esp]            # 4-byte Folded Reload
	cmovb	ebx, eax
	lea	eax, [ebx + 1]
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB67_16
# %bb.10:
	cmp	dword ptr [esp], edi            # 4-byte Folded Reload
	mov	ebp, eax
	jae	LBB67_12
# %bb.11:
	add	esi, dword ptr [esp]            # 4-byte Folded Reload
	push	ebx
	push	esi
	push	ebp
	call	_memcpy
	add	esp, 12
LBB67_12:
	lea	eax, [ebp - 1]
	mov	byte ptr [ebp + ebx], 0
	.p2align	4, 0x90
LBB67_13:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [eax + 1], 0
	lea	eax, [eax + 1]
	jne	LBB67_13
# %bb.14:
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	sub	eax, ebp
	mov	edx, esi
	push	eax
	push	ebp
	call	"?lodepng_add_text_sized@@YAIPAULodePNGInfo@@PBD1I@Z"
	add	esp, 8
	mov	ebx, eax
	jmp	LBB67_18
LBB67_15:
	xor	esi, esi
	jmp	LBB67_17
LBB67_16:
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	xor	ebp, ebp
LBB67_17:
	mov	ebx, 83
LBB67_18:
	push	esi
	call	_free
	add	esp, 4
	push	ebp
	call	_free
	add	esp, 4
	mov	eax, ebx
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z
"?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z": # @"?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	movsd	xmm0, qword ptr [edx + 16]      # xmm0 = mem[0],zero
	mov	ebp, dword ptr [esp + 80]
	mov	ebx, dword ptr [esp + 76]
	mov	edi, edx
	mov	esi, 0
	movsd	qword ptr [esp + 48], xmm0
	movsd	xmm0, qword ptr [edx]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [edx + 8]       # xmm1 = mem[0],zero
	xor	edx, edx
	test	ebp, ebp
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 4], 0
	movsd	qword ptr [esp + 40], xmm1
	movsd	qword ptr [esp + 32], xmm0
	je	LBB68_5
# %bb.1:
	xor	esi, esi
	.p2align	4, 0x90
LBB68_2:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebx + esi], 0
	je	LBB68_5
# %bb.3:                                #   in Loop: Header=BB68_2 Depth=1
	inc	esi
	cmp	ebp, esi
	jne	LBB68_2
# %bb.4:
	mov	esi, ebp
LBB68_5:
	lea	eax, [esi + 2]
	cmp	eax, ebp
	jae	LBB68_8
# %bb.6:
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	lea	eax, [esi - 1]
	cmp	eax, 78
	jbe	LBB68_10
# %bb.7:
	mov	ebx, 89
	jmp	LBB68_9
LBB68_10:
	lea	eax, [esi + 1]
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB68_13
# %bb.11:
	push	esi
	push	ebx
	push	eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	call	_memcpy
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	add	esp, 12
	mov	byte ptr [edx + esi], 0
	cmp	byte ptr [ebx + esi + 1], 0
	je	LBB68_14
# %bb.12:
	mov	ebx, 72
	jmp	LBB68_9
LBB68_13:
	mov	ebx, 83
	xor	edx, edx
	jmp	LBB68_9
LBB68_14:
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	cmp	eax, ebp
	jbe	LBB68_16
LBB68_8:
	mov	ebx, 75
LBB68_9:
	push	edx
	call	_free
	add	esp, 4
	push	dword ptr [esp + 8]
	call	_free
	add	esp, 4
	mov	eax, ebx
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB68_16:
	mov	ecx, eax
	sub	ebp, eax
	mov	eax, dword ptr [edi + 48]
	add	ebx, ecx
	mov	dword ptr [esp + 40], eax
	mov	eax, dword ptr [esp + 44]
	test	eax, eax
	je	LBB68_19
# %bb.17:
	lea	ecx, [esp + 32]
	lea	edx, [esp + 4]
	lea	esi, [esp + 8]
	push	ecx
	push	ebp
	push	ebx
	push	edx
	push	esi
	call	eax
	add	esp, 20
	test	eax, eax
	je	LBB68_21
# %bb.18:
	mov	eax, dword ptr [esp + 40]
	mov	ecx, dword ptr [esp + 4]
	xor	edx, edx
	mov	edi, 110
	mov	esi, 110
	mov	ebx, 112
	cmp	ecx, eax
	seta	dl
	sub	edi, edx
	mov	edx, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	cmove	edi, esi
	cmp	ecx, eax
	cmovbe	ebx, edi
	jmp	LBB68_9
LBB68_19:
	lea	eax, [esp + 32]
	mov	dword ptr [esp + 20], 0
	mov	dword ptr [esp + 24], 0
	mov	dword ptr [esp + 28], 0
	lea	ecx, [esp + 20]
	mov	edx, ebx
	push	eax
	push	ebp
	call	"?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
	add	esp, 8
	mov	edi, dword ptr [esp + 24]
	mov	esi, dword ptr [esp + 20]
	mov	ebx, 112
	cmp	edi, dword ptr [esp + 40]
	mov	dword ptr [esp + 8], esi
	mov	dword ptr [esp + 4], edi
	cmovbe	ebx, eax
	test	eax, eax
	je	LBB68_22
# %bb.20:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	test	ebx, ebx
	jne	LBB68_9
	jmp	LBB68_22
LBB68_21:
	mov	edi, dword ptr [esp + 4]
	mov	esi, dword ptr [esp + 8]
LBB68_22:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	push	edi
	push	esi
	call	"?lodepng_add_text_sized@@YAIPAULodePNGInfo@@PBD1I@Z"
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	add	esp, 8
	mov	ebx, eax
	jmp	LBB68_9
                                        # -- End function
	.def	 "?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z
"?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z": # @"?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 72
	movsd	xmm0, qword ptr [edx + 16]      # xmm0 = mem[0],zero
	mov	edi, dword ptr [esp + 96]
	movsd	qword ptr [esp + 64], xmm0
	cmp	edi, 5
	movsd	xmm0, qword ptr [edx]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [edx + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [esp + 56], xmm1
	movsd	qword ptr [esp + 48], xmm0
	jae	LBB69_2
# %bb.1:
	xor	ecx, ecx
	mov	ebp, 30
	xor	ebx, ebx
	xor	esi, esi
	jmp	LBB69_42
LBB69_2:
	mov	ebx, dword ptr [esp + 92]
	mov	esi, edx
	xor	ebp, ebp
	.p2align	4, 0x90
LBB69_3:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebx + ebp], 0
	je	LBB69_6
# %bb.4:                                #   in Loop: Header=BB69_3 Depth=1
	inc	ebp
	cmp	edi, ebp
	jne	LBB69_3
# %bb.5:
	mov	ebp, edi
LBB69_6:
	lea	edx, [ebp + 3]
	cmp	edx, edi
	jae	LBB69_7
# %bb.8:
	lea	eax, [ebp - 1]
	cmp	eax, 78
	jbe	LBB69_10
# %bb.9:
	xor	ecx, ecx
	xor	esi, esi
	xor	ebx, ebx
	mov	ebp, 89
	jmp	LBB69_42
LBB69_7:
	xor	ecx, ecx
	xor	esi, esi
	xor	ebx, ebx
	mov	ebp, 75
LBB69_42:
	push	ecx
	call	_free
	add	esp, 4
	push	ebx
	call	_free
	add	esp, 4
	push	esi
	call	_free
	add	esp, 4
	mov	eax, ebp
	add	esp, 72
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB69_10:
	lea	eax, [ebp + 1]
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB69_11
# %bb.12:
	push	ebp
	push	ebx
	push	eax
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	call	_memcpy
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	add	esp, 12
	mov	byte ptr [ecx + ebp], 0
	cmp	byte ptr [ebx + ebp + 2], 0
	je	LBB69_16
# %bb.13:
	mov	ebp, 72
	xor	esi, esi
	xor	ebx, ebx
	jmp	LBB69_42
LBB69_11:
	xor	ecx, ecx
	xor	esi, esi
	xor	ebx, ebx
	mov	ebp, 83
	jmp	LBB69_42
LBB69_16:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	cl, byte ptr [ebx + ebp + 1]
	mov	edx, edi
	sub	edx, ebp
	add	edx, -3
	lea	ebp, [ebx + eax]
	xor	eax, eax
	mov	byte ptr [esp + 11], cl         # 1-byte Spill
	.p2align	4, 0x90
LBB69_17:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebp + eax], 0
	je	LBB69_18
# %bb.14:                               #   in Loop: Header=BB69_17 Depth=1
	inc	eax
	cmp	edx, eax
	jne	LBB69_17
# %bb.15:
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	lea	ecx, [edx + 1]
	jmp	LBB69_19
LBB69_18:
	lea	ecx, [eax + 1]
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
LBB69_19:
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	push	ecx
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp], eax            # 4-byte Spill
	je	LBB69_20
# %bb.21:
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	je	LBB69_23
# %bb.22:
	push	eax
	push	ebp
	push	ecx
	mov	ebp, ecx
	call	_memcpy
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, ebp
	add	esp, 12
LBB69_23:
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	xor	ebp, ebp
	mov	byte ptr [ecx + eax], 0
	add	edx, dword ptr [esp + 4]        # 4-byte Folded Reload
	cmp	edx, edi
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	jae	LBB69_27
# %bb.24:
	lea	eax, [ebx + edx]
	xor	ebp, ebp
LBB69_26:                               # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [eax + ebp], 0
	je	LBB69_27
# %bb.25:                               #   in Loop: Header=BB69_26 Depth=1
	inc	ebp
	lea	ecx, [edx + ebp]
	cmp	ecx, edi
	jb	LBB69_26
LBB69_27:
	lea	eax, [ebp + 1]
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	je	LBB69_28
# %bb.29:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	test	ebp, ebp
	je	LBB69_31
# %bb.30:
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	add	eax, ebx
	push	ebp
	push	eax
	push	edx
	call	_memcpy
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
LBB69_31:
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	byte ptr [edx + ebp], 0
	add	ecx, eax
	xor	eax, eax
	sub	edi, ecx
	cmovb	edi, eax
	cmp	byte ptr [esp + 11], 0          # 1-byte Folded Reload
	je	LBB69_41
# %bb.32:
	mov	dword ptr [esp + 32], 0
	mov	dword ptr [esp + 28], 0
	add	ebx, ecx
	mov	eax, dword ptr [esi + 48]
	mov	dword ptr [esp + 56], eax
	mov	eax, dword ptr [esp + 60]
	test	eax, eax
	je	LBB69_36
# %bb.33:
	lea	ecx, [esp + 48]
	lea	edx, [esp + 28]
	lea	esi, [esp + 32]
	push	ecx
	push	edi
	push	ebx
	push	edx
	push	esi
	call	eax
	add	esp, 20
	test	eax, eax
	je	LBB69_34
# %bb.35:
	mov	eax, dword ptr [esp + 56]
	mov	ecx, dword ptr [esp + 28]
	xor	edx, edx
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	edi, 110
	mov	esi, 110
	mov	ebp, 112
	cmp	ecx, eax
	seta	dl
	sub	edi, edx
	test	eax, eax
	cmove	edi, esi
	cmp	ecx, eax
	cmovbe	ebp, edi
	jmp	LBB69_40
LBB69_20:
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	xor	ebx, ebx
	xor	esi, esi
	mov	ebp, 83
	jmp	LBB69_42
LBB69_28:
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	xor	esi, esi
	mov	ebp, 83
	jmp	LBB69_42
LBB69_41:
	add	ebx, ecx
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	mov	eax, edx
	mov	edx, esi
	push	edi
	push	ebx
	push	eax
	mov	edi, eax
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	push	ebx
	call	"?lodepng_add_itext_sized@@YAIPAULodePNGInfo@@PBD111I@Z"
	mov	ecx, esi
	add	esp, 16
	mov	ebp, eax
	mov	esi, edi
	jmp	LBB69_42
LBB69_36:
	lea	eax, [esp + 48]
	mov	dword ptr [esp + 36], 0
	mov	dword ptr [esp + 40], 0
	mov	dword ptr [esp + 44], 0
	lea	ecx, [esp + 36]
	mov	edx, ebx
	push	eax
	push	edi
	call	"?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
	add	esp, 8
	mov	edi, dword ptr [esp + 40]
	mov	esi, dword ptr [esp + 36]
	mov	ebp, 112
	cmp	edi, dword ptr [esp + 56]
	mov	dword ptr [esp + 32], esi
	mov	dword ptr [esp + 28], edi
	cmovbe	ebp, eax
	test	eax, eax
	je	LBB69_37
# %bb.38:
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	test	ebp, ebp
	jne	LBB69_40
	jmp	LBB69_39
LBB69_34:
	mov	edi, dword ptr [esp + 28]
	mov	esi, dword ptr [esp + 32]
LBB69_37:
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
LBB69_39:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	push	edi
	push	esi
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	ebx
	call	"?lodepng_add_itext_sized@@YAIPAULodePNGInfo@@PBD111I@Z"
	add	esp, 16
	mov	ebp, eax
LBB69_40:
	push	dword ptr [esp + 32]
	call	_free
	add	esp, 4
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	jmp	LBB69_42
                                        # -- End function
	.def	 "?readChunk_cHRM@@YAIPAULodePNGInfo@@PBEI@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?readChunk_cHRM@@YAIPAULodePNGInfo@@PBEI@Z
"?readChunk_cHRM@@YAIPAULodePNGInfo@@PBEI@Z": # @"?readChunk_cHRM@@YAIPAULodePNGInfo@@PBEI@Z"
# %bb.0:
	cmp	dword ptr [esp + 4], 32
	mov	eax, 97
	jne	LBB70_2
# %bb.1:
	mov	dword ptr [ecx + 144], 1
	mov	eax, dword ptr [edx]
	bswap	eax
	mov	dword ptr [ecx + 148], eax
	mov	eax, dword ptr [edx + 4]
	bswap	eax
	mov	dword ptr [ecx + 152], eax
	mov	eax, dword ptr [edx + 8]
	bswap	eax
	mov	dword ptr [ecx + 156], eax
	mov	eax, dword ptr [edx + 12]
	bswap	eax
	mov	dword ptr [ecx + 160], eax
	mov	eax, dword ptr [edx + 16]
	bswap	eax
	mov	dword ptr [ecx + 164], eax
	mov	eax, dword ptr [edx + 20]
	bswap	eax
	mov	dword ptr [ecx + 168], eax
	mov	eax, dword ptr [edx + 24]
	bswap	eax
	mov	dword ptr [ecx + 172], eax
	mov	eax, dword ptr [edx + 28]
	bswap	eax
	mov	dword ptr [ecx + 176], eax
	xor	eax, eax
LBB70_2:
	ret
                                        # -- End function
	.def	 "?readChunk_iCCP@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?readChunk_iCCP@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z
"?readChunk_iCCP@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z": # @"?readChunk_iCCP@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 52
	mov	dword ptr [esp], 0
	mov	edi, dword ptr [esp + 76]
	mov	esi, ecx
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	movsd	xmm0, qword ptr [edx + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 44], xmm0
	movsd	xmm0, qword ptr [edx]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [edx + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [esp + 36], xmm1
	movsd	qword ptr [esp + 28], xmm0
	mov	dword ptr [ecx + 188], 1
	mov	eax, dword ptr [ecx + 192]
	test	eax, eax
	je	LBB71_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
	mov	dword ptr [esi + 192], 0
	push	dword ptr [esi + 196]
	call	_free
	add	esp, 4
	mov	dword ptr [esi + 196], 0
	mov	dword ptr [esi + 200], 0
	mov	dword ptr [esi + 188], 0
LBB71_2:
	mov	ebx, dword ptr [esp + 72]
	xor	ebp, ebp
	test	edi, edi
	je	LBB71_6
	.p2align	4, 0x90
LBB71_3:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebx + ebp], 0
	je	LBB71_6
# %bb.4:                                #   in Loop: Header=BB71_3 Depth=1
	inc	ebp
	cmp	edi, ebp
	jne	LBB71_3
# %bb.5:
	mov	ebp, edi
LBB71_6:
	lea	edx, [ebp + 2]
	mov	eax, 75
	cmp	edx, edi
	jae	LBB71_23
# %bb.7:
	lea	ecx, [ebp - 1]
	mov	eax, 89
	cmp	ecx, 78
	ja	LBB71_23
# %bb.8:
	lea	ecx, [ebp + 1]
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	push	ecx
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esi + 192], eax
	je	LBB71_9
# %bb.10:
	mov	byte ptr [eax + ebp], 0
	cmp	ebp, 1
	mov	cl, byte ptr [ebx]
	mov	byte ptr [eax], cl
	je	LBB71_13
# %bb.11:
	mov	eax, 1
	.p2align	4, 0x90
LBB71_12:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [esi + 192]
	movzx	edx, byte ptr [ebx + eax]
	mov	byte ptr [ecx + eax], dl
	inc	eax
	cmp	ebp, eax
	jne	LBB71_12
LBB71_13:
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, 72
	cmp	byte ptr [ebx + ecx], 0
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	jne	LBB71_23
# %bb.14:
	cmp	ecx, edi
	mov	eax, 75
	ja	LBB71_23
# %bb.15:
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	sub	edi, ecx
	add	ebx, ecx
	lea	ebp, [esi + 196]
	mov	eax, dword ptr [eax + 52]
	mov	dword ptr [esp + 36], eax
	mov	eax, dword ptr [esp + 40]
	test	eax, eax
	je	LBB71_19
# %bb.16:
	lea	ecx, [esp + 28]
	mov	edx, esp
	push	ecx
	push	edi
	push	ebx
	push	edx
	push	ebp
	call	eax
	add	esp, 20
	test	eax, eax
	je	LBB71_17
# %bb.18:
	mov	eax, dword ptr [esp + 36]
	mov	ecx, dword ptr [esp]
	xor	edx, edx
	mov	ebx, 110
	mov	edi, 110
	cmp	ecx, eax
	seta	dl
	sub	ebx, edx
	test	eax, eax
	cmove	ebx, edi
	cmp	ecx, eax
	mov	eax, 113
	cmovbe	eax, ebx
	jmp	LBB71_22
LBB71_9:
	mov	eax, 83
LBB71_23:
	add	esp, 52
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB71_19:
	mov	ecx, dword ptr [ebp]
	mov	eax, dword ptr [esp]
	mov	edx, ebx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp + 20], eax
	mov	dword ptr [esp + 24], eax
	lea	eax, [esp + 28]
	lea	ecx, [esp + 16]
	push	eax
	push	edi
	call	"?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
	add	esp, 8
	mov	ecx, dword ptr [esp + 16]
	test	eax, eax
	mov	dword ptr [ebp], ecx
	mov	ecx, dword ptr [esp + 20]
	mov	dword ptr [esp], ecx
	je	LBB71_20
# %bb.21:
	cmp	ecx, dword ptr [esp + 36]
	mov	edx, 113
	cmova	eax, edx
LBB71_22:
	mov	dword ptr [esi + 200], ecx
	jmp	LBB71_23
LBB71_17:
	mov	ecx, dword ptr [esp]
LBB71_20:
	xor	edx, edx
	test	ecx, ecx
	mov	eax, 100
	mov	dword ptr [esi + 200], ecx
	cmovne	eax, edx
	jmp	LBB71_23
                                        # -- End function
	.def	 "?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z" # -- Begin function ?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z
	.p2align	4, 0x90
"?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z": # @"?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 452
	mov	esi, dword ptr [esp + 484]
	mov	ebp, dword ptr [esp + 480]
	mov	ebx, dword ptr [esp + 476]
	mov	eax, dword ptr [esp + 472]
	mov	dword ptr [esp + 84], 0
	mov	dword ptr [esp + 80], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [ebp], 0
	mov	dword ptr [ebx], 0
	push	dword ptr [esp + 492]
	push	dword ptr [esp + 492]
	push	esi
	push	ebp
	push	ebx
	call	"?lodepng_inspect@@YAIPAI0PAULodePNGState@@PBEI@Z"
	add	esp, 20
	mov	edi, eax
	test	eax, eax
	mov	dword ptr [esi + 380], eax
	jne	LBB72_36
# %bb.1:
	mov	eax, dword ptr [ebp]
	mov	edx, dword ptr [esi + 164]
	mov	ecx, dword ptr [ebx]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 168]
	cmp	edx, 6
	ja	LBB72_4
# %bb.2:
	mov	ebx, 1
	jmp	dword ptr [4*edx + LJTI72_0]
LBB72_3:
	mov	ebx, 3
	jmp	LBB72_8
LBB72_4:
	cmp	edx, 255
LBB72_5:
	xor	ebx, ebx
	jmp	LBB72_8
LBB72_6:
	mov	ebx, 2
	jmp	LBB72_8
LBB72_7:
	mov	ebx, 4
LBB72_8:
	mov	ebp, dword ptr [esi + 120]
	mov	edi, dword ptr [esi + 124]
	imul	ebx, eax
	cmp	ebp, 6
	ja	LBB72_11
# %bb.9:
	mov	esi, 1
	jmp	dword ptr [4*ebp + LJTI72_1]
LBB72_14:
	imul	esi, edi
	cmp	ebx, esi
	jbe	LBB72_19
LBB72_15:
	mov	esi, dword ptr [esp + 484]
	cmp	edx, 6
	ja	LBB72_22
# %bb.16:
	mov	ebp, dword ptr [esp + 480]
	mov	ebx, 1
	jmp	dword ptr [4*edx + LJTI72_3]
LBB72_17:
	mov	ebx, 3
	imul	ebx, eax
	jmp	LBB72_32
LBB72_11:
	cmp	ebp, 255
LBB72_12:
	xor	esi, esi
	imul	esi, edi
	cmp	ebx, esi
	ja	LBB72_15
LBB72_19:
	mov	esi, dword ptr [esp + 484]
	cmp	ebp, 6
	ja	LBB72_24
# %bb.20:
	mov	ebx, 1
	jmp	dword ptr [4*ebp + LJTI72_2]
LBB72_21:
	mov	ebx, 3
	jmp	LBB72_31
LBB72_10:
	mov	esi, 3
	imul	esi, edi
	cmp	ebx, esi
	ja	LBB72_15
	jmp	LBB72_19
LBB72_13:
	mov	esi, 2
	imul	esi, edi
	cmp	ebx, esi
	jbe	LBB72_19
	jmp	LBB72_15
LBB72_18:
	mov	esi, 4
	imul	esi, edi
	cmp	ebx, esi
	ja	LBB72_15
	jmp	LBB72_19
LBB72_22:
	mov	ebp, dword ptr [esp + 480]
	cmp	edx, 255
LBB72_23:
	xor	ebx, ebx
	imul	ebx, eax
	jmp	LBB72_32
LBB72_24:
	cmp	ebp, 255
LBB72_25:
	xor	ebx, ebx
	jmp	LBB72_31
LBB72_26:
	mov	ebx, 2
	imul	ebx, eax
	jmp	LBB72_32
LBB72_27:
	mov	ebx, 4
LBB72_28:
	imul	ebx, eax
	jmp	LBB72_32
LBB72_29:
	mov	ebx, 2
	jmp	LBB72_31
LBB72_30:
	mov	ebx, 4
LBB72_31:
	mov	ebp, dword ptr [esp + 480]
	imul	ebx, edi
LBB72_32:
	lea	eax, [esi + 380]
	mov	edi, 92
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	eax, ecx
	mul	dword ptr [esp + 4]             # 4-byte Folded Reload
	jo	LBB72_35
# %bb.33:
	mov	edx, 8
	mul	edx
	jo	LBB72_35
# %bb.34:
	mov	eax, ecx
	shr	eax, 3
	mul	ebx
	jno	LBB72_37
LBB72_35:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [eax], edi
LBB72_36:
	mov	eax, edi
	add	esp, 452
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB72_37:
	and	ecx, 7
	imul	ebx, ecx
	add	ebx, 7
	shr	ebx, 3
	add	ebx, eax
	cmp	ebx, eax
	jb	LBB72_35
# %bb.38:
	cmp	ebx, -6
	ja	LBB72_35
# %bb.39:
	add	ebx, 5
	mov	eax, ebx
	mul	dword ptr [esp + 4]             # 4-byte Folded Reload
	jo	LBB72_35
# %bb.40:
	mov	edi, dword ptr [esp + 492]
	push	edi
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB72_178
# %bb.41:
	mov	ecx, dword ptr [esp + 488]
	mov	ebx, dword ptr [esp + 476]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	lea	eax, [esi + 152]
	mov	dword ptr [esp + 32], 1         # 4-byte Folded Spill
	mov	dword ptr [esp + 20], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	lea	eax, [esi + 164]
	mov	dword ptr [esp + 72], eax       # 4-byte Spill
	lea	edx, [ecx + 33]
	lea	eax, [ecx + edi]
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	jmp	LBB72_44
LBB72_42:                               #   in Loop: Header=BB72_44 Depth=1
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
LBB72_43:                               #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 488]
	test	al, al
	jne	LBB72_183
LBB72_44:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_108 Depth 2
                                        #     Child Loop BB72_173 Depth 2
	mov	eax, edx
	sub	eax, ecx
	jb	LBB72_180
# %bb.45:                               #   in Loop: Header=BB72_44 Depth=1
	add	eax, 12
	cmp	eax, edi
	ja	LBB72_180
# %bb.46:                               #   in Loop: Header=BB72_44 Depth=1
	mov	esi, dword ptr [edx]
	bswap	esi
	test	esi, esi
	js	LBB72_182
# %bb.47:                               #   in Loop: Header=BB72_44 Depth=1
	add	eax, esi
	cmp	eax, edi
	ja	LBB72_179
# %bb.48:                               #   in Loop: Header=BB72_44 Depth=1
	lea	eax, [edx + esi + 12]
	cmp	eax, ecx
	jb	LBB72_179
# %bb.49:                               #   in Loop: Header=BB72_44 Depth=1
	lea	eax, [edx + 8]
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	lea	eax, [edx + 4]
	mov	dword ptr [esp + 36], eax       # 4-byte Spill
	mov	al, byte ptr [edx + 4]
	mov	ecx, eax
	add	cl, -73
	cmp	cl, 49
	ja	LBB72_118
# %bb.50:                               #   in Loop: Header=BB72_44 Depth=1
	movzx	ecx, cl
	jmp	dword ptr [4*ecx + LJTI72_4]
LBB72_51:                               #   in Loop: Header=BB72_44 Depth=1
	mov	cl, byte ptr [edx + 5]
	cmp	cl, 69
	je	LBB72_115
# %bb.52:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	cl, 68
	jne	LBB72_118
# %bb.53:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 65
	jne	LBB72_118
# %bb.54:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 84
	jne	LBB72_118
# %bb.55:                               #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	ebx, esi
	add	ebx, eax
	jb	LBB72_274
# %bb.56:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	ebx, edi
	ja	LBB72_274
# %bb.57:                               #   in Loop: Header=BB72_44 Depth=1
	mov	cl, 1
	test	esi, esi
	mov	dword ptr [esp + 32], 3         # 4-byte Folded Spill
	je	LBB72_59
# %bb.58:                               #   in Loop: Header=BB72_44 Depth=1
	add	eax, dword ptr [esp + 12]       # 4-byte Folded Reload
	push	esi
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	eax
	call	_memcpy
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	cl, 1
	add	esp, 12
LBB72_59:                               #   in Loop: Header=BB72_44 Depth=1
	mov	dword ptr [esp + 20], ebx       # 4-byte Spill
	mov	esi, dword ptr [esp + 484]
	mov	ebx, dword ptr [esp + 476]
	xor	eax, eax
	jmp	LBB72_170
LBB72_60:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 5], 76
	jne	LBB72_118
# %bb.61:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 84
	jne	LBB72_118
# %bb.62:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 69
	jne	LBB72_118
# %bb.63:                               #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 72]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	push	esi
	call	"?readChunk_PLTE@@YAIPAULodePNGColorMode@@PBEI@Z"
	add	esp, 4
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 484]
	test	eax, eax
	mov	dword ptr [edi], eax
	jne	LBB72_223
# %bb.64:                               #   in Loop: Header=BB72_44 Depth=1
	mov	cl, 1
	mov	dword ptr [esp + 32], 2         # 4-byte Folded Spill
	jmp	LBB72_168
LBB72_65:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 5], 75
	jne	LBB72_120
# %bb.66:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 71
	jne	LBB72_120
# %bb.67:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 68
	jne	LBB72_120
# %bb.68:                               #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 484]
	mov	eax, dword ptr [eax + 164]
	cmp	eax, 6
	ja	LBB72_161
# %bb.69:                               #   in Loop: Header=BB72_44 Depth=1
	jmp	dword ptr [4*eax + LJTI72_5]
LBB72_70:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 2
	jne	LBB72_280
# %bb.71:                               #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 484]
	mov	dword ptr [ecx + 196], 1
	movzx	eax, word ptr [edx + 8]
	shl	eax, 16
	bswap	eax
	jmp	LBB72_160
LBB72_72:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 5], 72
	jne	LBB72_120
# %bb.73:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 82
	jne	LBB72_120
# %bb.74:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 77
	jne	LBB72_120
# %bb.75:                               #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	push	esi
	call	"?readChunk_cHRM@@YAIPAULodePNGInfo@@PBEI@Z"
	add	esp, 4
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 484]
	test	eax, eax
	mov	dword ptr [edi], eax
	je	LBB72_143
	jmp	LBB72_223
LBB72_76:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 5], 65
	jne	LBB72_120
# %bb.77:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 77
	jne	LBB72_120
# %bb.78:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 65
	jne	LBB72_120
# %bb.79:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 4
	jne	LBB72_275
# %bb.80:                               #   in Loop: Header=BB72_44 Depth=1
	mov	esi, dword ptr [esp + 484]
	mov	dword ptr [esi + 288], 1
	mov	eax, dword ptr [edx + 8]
	bswap	eax
	mov	dword ptr [esi + 292], eax
	jmp	LBB72_153
LBB72_81:                               #   in Loop: Header=BB72_44 Depth=1
	mov	al, byte ptr [edx + 5]
	cmp	al, 67
	je	LBB72_140
# %bb.82:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	al, 84
	jne	LBB72_120
# %bb.83:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 88
	jne	LBB72_120
# %bb.84:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 116
	jne	LBB72_120
# %bb.85:                               #   in Loop: Header=BB72_44 Depth=1
	mov	ebx, dword ptr [esp + 484]
	mov	cl, 1
	cmp	dword ptr [ebx + 40], 0
	je	LBB72_154
# %bb.86:                               #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, ebx
	push	esi
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	"?readChunk_iTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
	jmp	LBB72_114
LBB72_87:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 5], 72
	jne	LBB72_120
# %bb.88:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 89
	jne	LBB72_120
# %bb.89:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 115
	jne	LBB72_120
# %bb.90:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 9
	jne	LBB72_276
# %bb.91:                               #   in Loop: Header=BB72_44 Depth=1
	mov	esi, dword ptr [esp + 484]
	mov	dword ptr [esi + 272], 1
	mov	eax, dword ptr [edx + 8]
	bswap	eax
	mov	dword ptr [esi + 276], eax
	mov	eax, dword ptr [edx + 12]
	bswap	eax
	mov	dword ptr [esi + 280], eax
	movzx	eax, byte ptr [edx + 16]
	mov	dword ptr [esi + 284], eax
	jmp	LBB72_153
LBB72_92:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 5], 82
	jne	LBB72_120
# %bb.93:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 71
	jne	LBB72_120
# %bb.94:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 66
	jne	LBB72_120
# %bb.95:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 1
	jne	LBB72_277
# %bb.96:                               #   in Loop: Header=BB72_44 Depth=1
	mov	esi, dword ptr [esp + 484]
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esi + 332], 1
	movzx	eax, byte ptr [eax]
	mov	dword ptr [esi + 336], eax
	jmp	LBB72_153
LBB72_97:                               #   in Loop: Header=BB72_44 Depth=1
	mov	al, byte ptr [edx + 5]
	cmp	al, 69
	je	LBB72_144
# %bb.98:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	al, 73
	je	LBB72_149
# %bb.99:                               #   in Loop: Header=BB72_44 Depth=1
	cmp	al, 82
	jne	LBB72_120
# %bb.100:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 78
	jne	LBB72_120
# %bb.101:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 83
	jne	LBB72_120
# %bb.102:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 72]       # 4-byte Reload
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB72_163
# %bb.103:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	eax, 2
	je	LBB72_165
# %bb.104:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	eax, 3
	jne	LBB72_278
# %bb.105:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 484]
	cmp	dword ptr [eax + 176], esi
	jb	LBB72_286
# %bb.106:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ebx, dword ptr [esp + 484]
	mov	ebp, dword ptr [esp + 480]
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	test	esi, esi
	je	LBB72_167
# %bb.107:                              #   in Loop: Header=BB72_44 Depth=1
	xor	eax, eax
LBB72_108:                              #   Parent Loop BB72_44 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ecx, byte ptr [edi + eax]
	mov	edx, dword ptr [ebx + 172]
	mov	byte ptr [edx + 4*eax + 3], cl
	inc	eax
	cmp	esi, eax
	jne	LBB72_108
	jmp	LBB72_167
LBB72_109:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 5], 84
	jne	LBB72_120
# %bb.110:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 88
	jne	LBB72_120
# %bb.111:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 116
	jne	LBB72_120
# %bb.112:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ebx, dword ptr [esp + 484]
	mov	cl, 1
	cmp	dword ptr [ebx + 40], 0
	je	LBB72_154
# %bb.113:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, ebx
	push	esi
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	"?readChunk_zTXt@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
LBB72_114:                              #   in Loop: Header=BB72_44 Depth=1
	add	esp, 8
	mov	dword ptr [ebx + 380], eax
	mov	esi, ebx
	mov	ebx, dword ptr [esp + 476]
	test	eax, eax
	mov	edi, dword ptr [esp]            # 4-byte Reload
	je	LBB72_148
	jmp	LBB72_223
LBB72_115:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 78
	jne	LBB72_118
# %bb.116:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 68
	jne	LBB72_118
# %bb.117:                              #   in Loop: Header=BB72_44 Depth=1
	mov	esi, dword ptr [esp + 484]
	mov	al, 1
	xor	ecx, ecx
	jmp	LBB72_170
LBB72_118:                              #   in Loop: Header=BB72_44 Depth=1
	test	al, 32
	jne	LBB72_120
# %bb.119:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 484]
	cmp	dword ptr [eax + 28], 0
	je	LBB72_196
LBB72_120:                              #   in Loop: Header=BB72_44 Depth=1
	mov	edi, dword ptr [esp + 484]
	cmp	dword ptr [edi + 44], 0
	je	LBB72_124
# %bb.121:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	add	esi, 12
	mov	ebx, dword ptr [edi + 4*eax + 364]
	mov	ebp, ebx
	add	ebp, esi
	jb	LBB72_189
# %bb.122:                              #   in Loop: Header=BB72_44 Depth=1
	push	ebp
	push	dword ptr [edi + 4*eax + 352]
	mov	edi, eax
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB72_190
# %bb.123:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 484]
	add	ebx, eax
	mov	dword ptr [ecx + 4*edi + 352], eax
	mov	dword ptr [ecx + 4*edi + 364], ebp
	mov	edi, ecx
	push	esi
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	push	esi
	push	ebx
	call	_memcpy
	mov	edx, esi
	add	esp, 12
	mov	ebx, dword ptr [esp + 476]
	mov	ebp, dword ptr [esp + 480]
	xor	eax, eax
	mov	esi, edi
	mov	dword ptr [edi + 380], 0
	jmp	LBB72_125
LBB72_124:                              #   in Loop: Header=BB72_44 Depth=1
	xor	eax, eax
	mov	esi, edi
LBB72_125:                              #   in Loop: Header=BB72_44 Depth=1
	mov	edi, dword ptr [esp + 492]
LBB72_126:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	sub	ecx, edx
	jbe	LBB72_42
# %bb.127:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	ecx, 12
	jl	LBB72_42
# %bb.128:                              #   in Loop: Header=BB72_44 Depth=1
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	movzx	ecx, byte ptr [edx]
	mov	eax, edx
	mov	dh, byte ptr [edx + 1]
	mov	bl, byte ptr [eax + 2]
	mov	dl, byte ptr [eax + 3]
	cmp	ecx, 137
	jne	LBB72_137
# %bb.129:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	dh, 80
	jne	LBB72_137
# %bb.130:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	bl, 78
	jne	LBB72_137
# %bb.131:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	dl, 71
	jne	LBB72_137
# %bb.132:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	mov	dl, 71
	cmp	byte ptr [eax], 13
	jne	LBB72_137
# %bb.133:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [eax + 5], 10
	jne	LBB72_137
# %bb.134:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [eax + 6], 26
	jne	LBB72_137
# %bb.135:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [eax + 7], 10
	jne	LBB72_137
# %bb.136:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ebx, dword ptr [esp + 476]
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	jmp	LBB72_138
LBB72_137:                              #   in Loop: Header=BB72_44 Depth=1
	movzx	esi, dh
	movzx	ebx, bl
	shl	ecx, 24
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	shl	esi, 16
	shl	ebx, 8
	or	esi, ecx
	movzx	ecx, dl
	or	ebx, esi
	mov	esi, dword ptr [esp + 484]
	or	ecx, ebx
	mov	ebx, dword ptr [esp + 476]
	lea	edx, [ecx + 12]
	add	eax, edx
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	cmp	ecx, -12
	cmovs	eax, edx
	cmovae	eax, edx
	mov	edx, eax
LBB72_138:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	jmp	LBB72_43
LBB72_140:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 67
	jne	LBB72_120
# %bb.141:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 80
	jne	LBB72_120
# %bb.142:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, dword ptr [esp + 484]
	push	esi
	mov	esi, edx
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	"?readChunk_iCCP@@YAIPAULodePNGInfo@@PBULodePNGDecoderSettings@@PBEI@Z"
	add	esp, 8
	mov	edi, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	mov	dword ptr [esi + 380], eax
	jne	LBB72_223
LBB72_143:                              #   in Loop: Header=BB72_44 Depth=1
	mov	cl, 1
	jmp	LBB72_168
LBB72_144:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 88
	jne	LBB72_120
# %bb.145:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 116
	jne	LBB72_120
# %bb.146:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp + 484]
	mov	cl, 1
	cmp	dword ptr [eax + 40], 0
	je	LBB72_162
# %bb.147:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	push	esi
	call	"?readChunk_tEXt@@YAIPAULodePNGInfo@@PBEI@Z"
	add	esp, 4
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 484]
	test	eax, eax
	mov	dword ptr [edi], eax
	jne	LBB72_223
LBB72_148:                              #   in Loop: Header=BB72_44 Depth=1
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	xor	eax, eax
	mov	cl, 1
	jmp	LBB72_170
LBB72_149:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 6], 77
	jne	LBB72_120
# %bb.150:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	byte ptr [edx + 7], 69
	jne	LBB72_120
# %bb.151:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 7
	jne	LBB72_279
# %bb.152:                              #   in Loop: Header=BB72_44 Depth=1
	mov	esi, dword ptr [esp + 484]
	mov	dword ptr [esi + 244], 1
	movzx	eax, word ptr [edx + 8]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [esi + 248], eax
	movzx	eax, byte ptr [edx + 10]
	mov	dword ptr [esi + 252], eax
	movzx	eax, byte ptr [edx + 11]
	mov	dword ptr [esi + 256], eax
	movzx	eax, byte ptr [edx + 12]
	mov	dword ptr [esi + 260], eax
	movzx	eax, byte ptr [edx + 13]
	mov	dword ptr [esi + 264], eax
	movzx	eax, byte ptr [edx + 14]
	mov	dword ptr [esi + 268], eax
LBB72_153:                              #   in Loop: Header=BB72_44 Depth=1
	mov	dword ptr [esi + 380], 0
	mov	cl, 1
	xor	eax, eax
	jmp	LBB72_170
LBB72_154:                              #   in Loop: Header=BB72_44 Depth=1
	mov	esi, ebx
	mov	ebx, dword ptr [esp + 476]
	xor	eax, eax
	jmp	LBB72_170
LBB72_155:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 6
	jne	LBB72_281
# %bb.156:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 484]
	mov	dword ptr [ecx + 196], 1
	movzx	eax, word ptr [edx + 8]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [ecx + 200], eax
	movzx	eax, word ptr [edx + 10]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [ecx + 204], eax
	movzx	eax, word ptr [edx + 12]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [ecx + 208], eax
	jmp	LBB72_161
LBB72_157:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 1
	jne	LBB72_285
# %bb.158:                              #   in Loop: Header=BB72_44 Depth=1
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, dword ptr [esp + 484]
	movzx	eax, byte ptr [edx]
	cmp	dword ptr [ecx + 176], eax
	jbe	LBB72_287
# %bb.159:                              #   in Loop: Header=BB72_44 Depth=1
	mov	dword ptr [ecx + 196], 1
	mov	ebx, dword ptr [esp + 476]
	mov	ebp, dword ptr [esp + 480]
	movzx	eax, byte ptr [edx]
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
LBB72_160:                              #   in Loop: Header=BB72_44 Depth=1
	mov	dword ptr [ecx + 208], eax
	mov	dword ptr [ecx + 204], eax
	mov	dword ptr [ecx + 200], eax
LBB72_161:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	cl, 1
	mov	dword ptr [eax], 0
LBB72_162:                              #   in Loop: Header=BB72_44 Depth=1
	mov	esi, dword ptr [esp + 484]
	xor	eax, eax
	jmp	LBB72_170
LBB72_163:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 2
	jne	LBB72_288
# %bb.164:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ebx, dword ptr [esp + 484]
	mov	dword ptr [ebx + 180], 1
	movzx	eax, word ptr [edx + 8]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [ebx + 192], eax
	mov	dword ptr [ebx + 188], eax
	mov	dword ptr [ebx + 184], eax
	jmp	LBB72_167
LBB72_165:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	esi, 6
	jne	LBB72_289
# %bb.166:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ebx, dword ptr [esp + 484]
	mov	dword ptr [ebx + 180], 1
	movzx	eax, word ptr [edx + 8]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [ebx + 184], eax
	movzx	eax, word ptr [edx + 10]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [ebx + 188], eax
	movzx	eax, word ptr [edx + 12]
	shl	eax, 16
	bswap	eax
	mov	dword ptr [ebx + 192], eax
LBB72_167:                              #   in Loop: Header=BB72_44 Depth=1
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	esi, ebx
	mov	ebx, dword ptr [esp + 476]
	mov	cl, 1
	mov	dword ptr [eax], 0
LBB72_168:                              #   in Loop: Header=BB72_44 Depth=1
	xor	eax, eax
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
LBB72_170:                              #   in Loop: Header=BB72_44 Depth=1
	cmp	dword ptr [esi + 24], 0
	jne	LBB72_177
# %bb.171:                              #   in Loop: Header=BB72_44 Depth=1
	mov	esi, dword ptr [edx]
	mov	dword ptr [esp + 56], ecx       # 4-byte Spill
	bswap	esi
	movzx	edi, byte ptr [esi + edx + 8]
	movzx	ebx, byte ptr [esi + edx + 11]
	mov	dword ptr [esp + 24], edi       # 4-byte Spill
	movzx	edi, byte ptr [esi + edx + 9]
	mov	dword ptr [esp + 60], ebx       # 4-byte Spill
	mov	dword ptr [esp + 48], edi       # 4-byte Spill
	movzx	edi, byte ptr [esi + edx + 10]
	add	esi, 4
	je	LBB72_175
# %bb.172:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	mov	ebx, -1
	mov	dword ptr [esp + 52], edi       # 4-byte Spill
LBB72_173:                              #   Parent Loop BB72_44 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [ebp]
	movzx	ecx, bl
	shr	ebx, 8
	inc	ebp
	xor	ecx, edx
	xor	ebx, dword ptr [4*ecx + _lodepng_crc32_table]
	dec	esi
	jne	LBB72_173
# %bb.174:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ebp, dword ptr [esp + 480]
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edi, dword ptr [esp + 52]       # 4-byte Reload
	not	ebx
	jmp	LBB72_176
LBB72_175:                              #   in Loop: Header=BB72_44 Depth=1
	xor	ebx, ebx
LBB72_176:                              #   in Loop: Header=BB72_44 Depth=1
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	shl	edi, 8
	shl	ecx, 16
	shl	esi, 24
	or	esi, ecx
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	or	edi, esi
	mov	esi, dword ptr [esp + 484]
	add	edi, dword ptr [esp + 60]       # 4-byte Folded Reload
	cmp	edi, ebx
	mov	ebx, dword ptr [esp + 476]
	jne	LBB72_269
LBB72_177:                              #   in Loop: Header=BB72_44 Depth=1
	mov	edi, dword ptr [esp + 492]
	test	cl, cl
	je	LBB72_43
	jmp	LBB72_126
LBB72_178:
	mov	edi, 83
	jmp	LBB72_35
LBB72_179:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 64
	jmp	LBB72_222
LBB72_180:
	cmp	dword ptr [esi + 32], 0
	jne	LBB72_183
# %bb.181:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 30
	jmp	LBB72_223
LBB72_182:
	mov	esi, dword ptr [esp + 484]
	cmp	dword ptr [esi + 32], 0
	je	LBB72_193
LBB72_183:
	mov	eax, dword ptr [esp + 72]       # 4-byte Reload
	mov	edx, dword ptr [eax]
	cmp	edx, 3
	jne	LBB72_186
# %bb.184:
	cmp	dword ptr [esi + 172], 0
	je	LBB72_192
# %bb.185:
	cmp	dword ptr [esi + 160], 0
	mov	eax, dword ptr [esi + 168]
	jmp	LBB72_200
LBB72_186:
	mov	ecx, dword ptr [esi + 160]
	cmp	edx, 6
	ja	LBB72_194
# %bb.187:
	mov	eax, dword ptr [esi + 168]
	jmp	dword ptr [4*edx + LJTI72_6]
LBB72_188:
	test	ecx, ecx
	lea	eax, [eax + 2*eax]
	jmp	LBB72_200
LBB72_189:
	mov	eax, 77
	jmp	LBB72_191
LBB72_190:
	mov	eax, 83
LBB72_191:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 484]
	mov	ebx, dword ptr [esp + 476]
	mov	ebp, dword ptr [esp + 480]
	mov	dword ptr [edi], eax
	jmp	LBB72_223
LBB72_192:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 106
	jmp	LBB72_223
LBB72_193:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 63
	jmp	LBB72_223
LBB72_194:
	cmp	edx, 255
LBB72_195:
	xor	eax, eax
	jmp	LBB72_199
LBB72_196:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 69
	jmp	LBB72_222
LBB72_197:
	add	eax, eax
	jmp	LBB72_199
LBB72_198:
	shl	eax, 2
LBB72_199:
	test	ecx, ecx
LBB72_200:
	mov	edi, dword ptr [ebp]
	je	LBB72_205
# %bb.201:
	mov	ecx, ebx
	lea	ebx, [edi + 7]
	mov	dword ptr [esp + 4], edi        # 4-byte Spill
	mov	edx, dword ptr [ecx]
	shr	ebx, 3
	lea	esi, [edx + 7]
	mov	edi, esi
	shr	esi, 6
	shr	edi, 3
	imul	esi, eax
	and	edi, 7
	imul	edi, eax
	add	edi, 7
	shr	edi, 3
	lea	edi, [esi + edi + 1]
	lea	esi, [edx + 3]
	imul	edi, ebx
	cmp	edx, 5
	jb	LBB72_203
# %bb.202:
	mov	ebp, esi
	mov	ecx, esi
	shr	ebp, 3
	shr	ecx, 6
	and	ebp, 7
	imul	ecx, eax
	imul	ebp, eax
	add	ebp, 7
	shr	ebp, 3
	lea	ecx, [ecx + ebp + 1]
	imul	ecx, ebx
	add	edi, ecx
LBB72_203:
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	lea	ebx, [ecx + 3]
	mov	ecx, esi
	shr	esi, 5
	shr	ecx, 2
	mov	ebp, ebx
	imul	esi, eax
	and	ecx, 7
	shr	ebp, 3
	imul	ecx, eax
	add	ecx, 7
	shr	ecx, 3
	lea	esi, [esi + ecx + 1]
	imul	esi, ebp
	add	esi, edi
	cmp	edx, 2
	jbe	LBB72_206
# %bb.204:
	lea	edi, [edx + 1]
	shr	ebx, 2
	mov	ecx, edi
	mov	ebp, edi
	shr	ecx, 2
	shr	ebp, 5
	and	ecx, 7
	imul	ebp, eax
	imul	ecx, eax
	add	ecx, 7
	shr	ecx, 3
	lea	ecx, [ebp + ecx + 1]
	imul	ecx, ebx
	add	esi, ecx
	jmp	LBB72_207
LBB72_205:
	mov	edx, dword ptr [ebx]
	mov	esi, edx
	and	edx, 7
	imul	edx, eax
	shr	esi, 3
	add	edx, 7
	imul	esi, eax
	shr	edx, 3
	lea	esi, [esi + edx + 1]
	imul	esi, edi
	jmp	LBB72_210
LBB72_206:
	lea	edi, [edx + 1]
LBB72_207:
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebp, dword ptr [esp + 480]
	lea	ebx, [ecx + 1]
	mov	ecx, edi
	shr	edi, 4
	shr	ecx
	imul	edi, eax
	and	ecx, 7
	imul	ecx, eax
	add	ecx, 7
	shr	ecx, 3
	lea	edi, [edi + ecx + 1]
	mov	ecx, ebx
	shr	ecx, 2
	imul	edi, ecx
	add	edi, esi
	cmp	edx, 2
	jb	LBB72_209
# %bb.208:
	mov	ecx, edx
	mov	esi, edx
	shr	ebx
	shr	ecx
	shr	esi, 4
	and	ecx, 7
	imul	esi, eax
	imul	ecx, eax
	add	ecx, 7
	shr	ecx, 3
	lea	ecx, [esi + ecx + 1]
	imul	ecx, ebx
	add	edi, ecx
LBB72_209:
	mov	ecx, edx
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	and	edx, 7
	imul	edx, eax
	shr	ecx, 3
	add	edx, 7
	imul	ecx, eax
	shr	edx, 3
	shr	ebx
	lea	esi, [ecx + edx + 1]
	imul	esi, ebx
	mov	ebx, dword ptr [esp + 476]
	add	esi, edi
LBB72_210:
	mov	edi, dword ptr [esp + 484]
	mov	eax, dword ptr [edi + 12]
	test	eax, eax
	je	LBB72_213
# %bb.211:
	lea	ecx, [esp + 80]
	lea	edx, [esp + 84]
	push	edi
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	dword ptr [esp + 20]            # 4-byte Folded Reload
	push	ecx
	push	edx
	call	eax
	add	esp, 20
	test	eax, eax
	je	LBB72_220
# %bb.212:
	mov	eax, dword ptr [edi + 8]
	mov	edx, 110
	mov	ecx, 110
	mov	esi, edi
	cmp	eax, dword ptr [esp + 80]
	sbb	edx, 0
	test	eax, eax
	cmove	edx, ecx
	mov	dword ptr [edi + 380], edx
	mov	edi, dword ptr [esp]            # 4-byte Reload
	jmp	LBB72_223
LBB72_213:
	mov	eax, dword ptr [esp + 84]
	mov	edi, dword ptr [esp + 80]
	test	esi, esi
	mov	dword ptr [esp + 148], eax
	mov	dword ptr [esp + 152], edi
	mov	dword ptr [esp + 156], edi
	je	LBB72_219
# %bb.214:
	lea	ebx, [edi + esi]
	cmp	edi, ebx
	jae	LBB72_217
# %bb.215:
	mov	ebp, edi
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	eax
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB72_218
# %bb.216:
	mov	dword ptr [esp + 156], ebp
	mov	dword ptr [esp + 148], eax
LBB72_217:
	mov	dword ptr [esp + 152], ebx
LBB72_218:
	mov	ebx, dword ptr [esp + 476]
	mov	ebp, dword ptr [esp + 480]
	mov	dword ptr [esp + 152], edi
LBB72_219:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	lea	ecx, [esp + 148]
	push	dword ptr [esp + 484]
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	call	"?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
	add	esp, 8
	mov	ecx, dword ptr [esp + 152]
	mov	edx, dword ptr [esp + 148]
	mov	dword ptr [esp + 84], edx
	mov	dword ptr [esp + 80], ecx
	jmp	LBB72_221
LBB72_220:
	mov	ecx, dword ptr [esp + 80]
	xor	eax, eax
LBB72_221:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	cmp	ecx, esi
	mov	ecx, 91
	cmove	ecx, eax
	test	eax, eax
	cmovne	ecx, eax
	mov	dword ptr [edi], ecx
LBB72_222:
	mov	esi, dword ptr [esp + 484]
LBB72_223:
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	cmp	dword ptr [edi], 0
	jne	LBB72_322
# %bb.224:
	mov	edx, esi
	mov	esi, dword ptr [esi + 164]
	mov	ecx, dword ptr [ebp]
	mov	eax, dword ptr [ebx]
	mov	ebp, dword ptr [edx + 168]
	cmp	esi, 6
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
	ja	LBB72_227
# %bb.225:
	mov	ebx, dword ptr [esp + 472]
	mov	eax, 1
	jmp	dword ptr [4*esi + LJTI72_7]
LBB72_226:
	mov	eax, 3
	jmp	LBB72_231
LBB72_227:
	mov	ebx, dword ptr [esp + 472]
	cmp	esi, 255
LBB72_228:
	xor	eax, eax
	jmp	LBB72_231
LBB72_229:
	mov	eax, 2
	jmp	LBB72_231
LBB72_230:
	mov	eax, 4
LBB72_231:
	mov	edi, dword ptr [esp + 44]       # 4-byte Reload
	imul	eax, ebp
	mov	dword ptr [esp + 40], ecx       # 4-byte Spill
	imul	edi, ecx
	mov	ecx, edi
	and	edi, 7
	imul	edi, eax
	shr	ecx, 3
	add	edi, 7
	imul	ecx, eax
	shr	edi, 3
	add	edi, ecx
	push	edi
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [ebx], eax
	je	LBB72_237
# %bb.232:
	mov	ecx, eax
	test	edi, edi
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	je	LBB72_234
# %bb.233:
	push	edi
	push	0
	push	ecx
	call	_memset
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
LBB72_234:
	mov	edx, dword ptr [esp + 84]
	cmp	esi, 6
	ja	LBB72_238
# %bb.235:
	mov	ebx, 1
	jmp	dword ptr [4*esi + LJTI72_8]
LBB72_236:
	mov	ebx, 3
	jmp	LBB72_242
LBB72_237:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	eax, 83
	jmp	LBB72_321
LBB72_238:
	cmp	esi, 255
LBB72_239:
	xor	ebx, ebx
	jmp	LBB72_242
LBB72_240:
	mov	ebx, 2
	jmp	LBB72_242
LBB72_241:
	mov	ebx, 4
LBB72_242:
	imul	ebx, ebp
	test	ebx, ebx
	je	LBB72_254
# %bb.243:
	mov	eax, dword ptr [esp + 484]
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	cmp	dword ptr [eax + 160], 0
	je	LBB72_255
# %bb.244:
	lea	eax, [esp + 388]
	lea	esi, [esp + 236]
	lea	edi, [esp + 268]
	lea	ecx, [esp + 208]
	lea	edx, [esp + 180]
	push	ebx
	push	dword ptr [esp + 44]            # 4-byte Folded Reload
	push	dword ptr [esp + 52]            # 4-byte Folded Reload
	push	eax
	push	esi
	push	edi
	call	"?Adam7_getpassvalues@@YAXQAI0000III@Z"
	add	esp, 24
	cmp	ebx, 7
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	ja	LBB72_258
# %bb.245:
	xor	esi, esi
                                        # implicit-def: $eax
                                        # kill: killed $eax
	jmp	LBB72_247
LBB72_246:                              #   in Loop: Header=BB72_247 Depth=1
	mov	esi, dword ptr [esp + 68]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	inc	esi
	cmp	esi, 7
	je	LBB72_291
LBB72_247:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_251 Depth 2
                                        #       Child Loop BB72_252 Depth 3
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, dword ptr [esp + 4*esi + 236]
	mov	edx, dword ptr [esp + 4*esi + 268]
	mov	edi, dword ptr [esp + 4*esi + 180]
	mov	ebp, dword ptr [esp + 4*esi + 208]
	add	ecx, eax
	add	edx, eax
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	push	ebx
	push	edi
	mov	ebx, ebp
	push	ebp
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	mov	ecx, dword ptr [esp + 92]       # 4-byte Reload
	test	eax, eax
	cmovne	ecx, eax
	jne	LBB72_284
# %bb.248:                              #   in Loop: Header=BB72_247 Depth=1
	test	edi, edi
	mov	dword ptr [esp + 68], esi       # 4-byte Spill
	mov	dword ptr [esp + 92], ecx       # 4-byte Spill
	je	LBB72_246
# %bb.249:                              #   in Loop: Header=BB72_247 Depth=1
	imul	ebx, dword ptr [esp + 12]       # 4-byte Folded Reload
	test	ebx, ebx
	mov	dword ptr [esp + 48], ebx       # 4-byte Spill
	je	LBB72_246
# %bb.250:                              #   in Loop: Header=BB72_247 Depth=1
	mov	eax, dword ptr [esp + 48]       # 4-byte Reload
	xor	ecx, ecx
	xor	esi, esi
	xor	edx, edx
	mov	dword ptr [esp + 56], edi       # 4-byte Spill
	add	eax, 7
	and	eax, -8
	mov	dword ptr [esp + 52], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 68]       # 4-byte Reload
	mov	eax, dword ptr [esp + 4*eax + 388]
	add	eax, dword ptr [esp + 8]        # 4-byte Folded Reload
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
LBB72_251:                              #   Parent Loop BB72_247 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_252 Depth 3
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	mov	ecx, esi
	mov	esi, dword ptr [esp + 48]       # 4-byte Reload
	mov	dword ptr [esp + 28], edx       # 4-byte Spill
	mov	ebx, ecx
	add	ecx, esi
	mov	dword ptr [esp + 60], ecx       # 4-byte Spill
	.p2align	4, 0x90
LBB72_252:                              #   Parent Loop BB72_247 Depth=1
                                        #     Parent Loop BB72_251 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	ecx, ebx
	mov	edi, ebx
	mov	dword ptr [esp + 16], ebx       # 4-byte Spill
	mov	ebx, 1
	mov	ebp, edx
	not	cl
	shr	ebp, 3
	and	cl, 7
	shl	ebx, cl
	mov	ecx, edi
	lea	edi, [edx + 1]
	not	dl
	shr	ecx, 3
	mov	dword ptr [esp + 36], edi       # 4-byte Spill
	mov	edi, dword ptr [esp + 24]       # 4-byte Reload
	and	dl, 7
	mov	ah, byte ptr [eax + ecx]
	movzx	edx, dl
	movzx	ebp, byte ptr [edi + ebp]
	mov	al, ah
	or	al, bl
	not	bl
	and	bl, ah
	movzx	eax, al
	bt	ebp, edx
	movzx	edx, bl
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	cmovb	edx, eax
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	inc	ebx
	dec	esi
	mov	byte ptr [eax + ecx], dl
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	jne	LBB72_252
# %bb.253:                              #   in Loop: Header=BB72_251 Depth=2
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	add	edx, dword ptr [esp + 52]       # 4-byte Folded Reload
	inc	ecx
	sub	edx, esi
	mov	esi, dword ptr [esp + 60]       # 4-byte Reload
	cmp	ecx, edi
	jne	LBB72_251
	jmp	LBB72_246
LBB72_254:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	eax, 31
	jmp	LBB72_321
LBB72_255:
	cmp	ebx, 7
	ja	LBB72_257
# %bb.256:
	mov	eax, ebx
	imul	eax, dword ptr [esp + 44]       # 4-byte Folded Reload
	lea	esi, [eax + 7]
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	and	esi, -8
	cmp	esi, eax
	mov	dword ptr [esp + 28], esi       # 4-byte Spill
	jne	LBB72_262
LBB72_257:
	push	ebx
	push	dword ptr [esp + 44]            # 4-byte Folded Reload
	push	dword ptr [esp + 52]            # 4-byte Folded Reload
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	mov	edi, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	jne	LBB72_321
	jmp	LBB72_320
LBB72_258:
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 268]
	mov	ecx, dword ptr [esp + 236]
	add	edx, esi
	add	ecx, esi
	push	ebx
	push	dword ptr [esp + 184]
	push	dword ptr [esp + 216]
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	mov	edi, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	jne	LBB72_259
# %bb.260:
	mov	edx, dword ptr [esp + 272]
	mov	ecx, dword ptr [esp + 240]
	add	edx, esi
	add	ecx, esi
	push	ebx
	push	dword ptr [esp + 188]
	push	dword ptr [esp + 220]
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	test	eax, eax
	je	LBB72_270
LBB72_259:
	xor	ecx, ecx
	jmp	LBB72_319
LBB72_262:
	mov	ecx, edx
	push	ebx
	push	dword ptr [esp + 44]            # 4-byte Folded Reload
	push	dword ptr [esp + 52]            # 4-byte Folded Reload
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	mov	edi, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	jne	LBB72_321
# %bb.263:
	cmp	dword ptr [esp + 40], 0         # 4-byte Folded Reload
	je	LBB72_320
# %bb.264:
	cmp	dword ptr [esp + 20], 0         # 4-byte Folded Reload
	je	LBB72_320
# %bb.265:
	xor	edx, edx
	mov	dword ptr [esp + 24], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 32], 0         # 4-byte Folded Spill
LBB72_266:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_267 Depth 2
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	mov	edi, eax
	add	eax, ebp
	mov	dword ptr [esp + 36], ebp       # 4-byte Spill
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
LBB72_267:                              #   Parent Loop BB72_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, edi
	lea	ebp, [edx + 1]
	mov	ebx, 1
	mov	esi, edx
	not	dl
	mov	ecx, eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esp + 16], ebp       # 4-byte Spill
	mov	ebp, dword ptr [esp + 8]        # 4-byte Reload
	shr	esi, 3
	and	dl, 7
	not	cl
	movzx	edx, dl
	and	cl, 7
	shl	ebx, cl
	mov	ecx, edi
	shr	ecx, 3
	movzx	esi, byte ptr [ebp + esi]
	mov	ah, byte ptr [eax + ecx]
	mov	al, ah
	or	al, bl
	not	bl
	and	bl, ah
	bt	esi, edx
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	movzx	eax, al
	movzx	edx, bl
	cmovb	edx, eax
	inc	edi
	dec	dword ptr [esp + 36]            # 4-byte Folded Spill
	mov	byte ptr [esi + ecx], dl
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	jne	LBB72_267
# %bb.268:                              #   in Loop: Header=BB72_266 Depth=1
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	edi, dword ptr [esp]            # 4-byte Reload
	add	edx, dword ptr [esp + 28]       # 4-byte Folded Reload
	inc	eax
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	sub	edx, dword ptr [esp + 36]       # 4-byte Folded Reload
	cmp	eax, dword ptr [esp + 40]       # 4-byte Folded Reload
	jne	LBB72_266
	jmp	LBB72_320
LBB72_269:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 57
	jmp	LBB72_223
LBB72_270:
	mov	edx, dword ptr [esp + 276]
	mov	ecx, dword ptr [esp + 244]
	add	edx, esi
	add	ecx, esi
	push	ebx
	push	dword ptr [esp + 192]
	push	dword ptr [esp + 224]
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	test	eax, eax
	jne	LBB72_273
# %bb.271:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 280]
	mov	ecx, dword ptr [esp + 248]
	add	edx, eax
	add	ecx, eax
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	dword ptr [esp + 196]
	push	dword ptr [esp + 228]
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	test	eax, eax
	jne	LBB72_273
# %bb.272:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 284]
	mov	ecx, dword ptr [esp + 252]
	add	edx, eax
	add	ecx, eax
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	dword ptr [esp + 200]
	push	dword ptr [esp + 232]
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	test	eax, eax
	je	LBB72_282
LBB72_273:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	edx, eax
	xor	ecx, ecx
	jmp	LBB72_319
LBB72_274:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 484]
	mov	ebx, dword ptr [esp + 476]
	mov	dword ptr [edi], 95
	jmp	LBB72_223
LBB72_275:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 96
	jmp	LBB72_222
LBB72_276:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 74
	jmp	LBB72_222
LBB72_277:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 98
	jmp	LBB72_222
LBB72_278:
	mov	eax, 42
	jmp	LBB72_191
LBB72_279:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], 73
	jmp	LBB72_222
LBB72_280:
	mov	eax, 44
	jmp	LBB72_191
LBB72_281:
	mov	eax, 45
	jmp	LBB72_191
LBB72_282:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 288]
	mov	ecx, dword ptr [esp + 256]
	add	edx, eax
	add	ecx, eax
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	dword ptr [esp + 204]
	push	dword ptr [esp + 236]
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	test	eax, eax
	mov	dword ptr [esp + 92], 0         # 4-byte Folded Spill
	jne	LBB72_284
# %bb.283:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 292]
	mov	ecx, dword ptr [esp + 260]
	add	edx, eax
	add	ecx, eax
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	dword ptr [esp + 208]
	push	dword ptr [esp + 240]
	call	"?unfilter@@YAIPAEPBEIII@Z"
	add	esp, 12
	test	eax, eax
	je	LBB72_290
LBB72_284:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	xor	ecx, ecx
	jmp	LBB72_319
LBB72_285:
	mov	eax, 43
	jmp	LBB72_191
LBB72_286:
	mov	eax, 39
	jmp	LBB72_191
LBB72_287:
	mov	eax, 103
	jmp	LBB72_191
LBB72_288:
	mov	eax, 30
	jmp	LBB72_191
LBB72_289:
	mov	eax, 41
	jmp	LBB72_191
LBB72_290:
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
LBB72_291:
	lea	eax, [esp + 356]
	lea	esi, [esp + 420]
	lea	edi, [esp + 148]
	lea	ecx, [esp + 328]
	lea	edx, [esp + 300]
	push	ebx
	push	dword ptr [esp + 44]            # 4-byte Folded Reload
	push	dword ptr [esp + 52]            # 4-byte Folded Reload
	push	eax
	push	esi
	push	edi
	call	"?Adam7_getpassvalues@@YAXQAI0000III@Z"
	add	esp, 24
	cmp	ebx, 7
	jbe	LBB72_308
# %bb.292:
	mov	eax, ebx
	shr	eax, 3
	je	LBB72_318
# %bb.293:
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	imul	ecx, eax
	mov	dword ptr [esp + 112], ecx      # 4-byte Spill
	mov	ecx, eax
	and	ecx, -32
	mov	dword ptr [esp + 40], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	add	ecx, 16
	mov	dword ptr [esp + 108], ecx      # 4-byte Spill
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	add	ecx, 16
	mov	dword ptr [esp + 104], ecx      # 4-byte Spill
	xor	ecx, ecx
	jmp	LBB72_295
LBB72_294:                              #   in Loop: Header=BB72_295 Depth=1
	mov	ecx, dword ptr [esp + 88]       # 4-byte Reload
	inc	ecx
	cmp	ecx, 7
	je	LBB72_318
LBB72_295:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_299 Depth 2
                                        #       Child Loop BB72_301 Depth 3
                                        #         Child Loop BB72_305 Depth 4
                                        #         Child Loop BB72_307 Depth 4
	mov	dword ptr [esp + 88], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 4*ecx + 300]
	test	ecx, ecx
	mov	dword ptr [esp + 132], ecx      # 4-byte Spill
	je	LBB72_294
# %bb.296:                              #   in Loop: Header=BB72_295 Depth=1
	mov	ecx, dword ptr [esp + 88]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 4*ecx + 328]
	test	ecx, ecx
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	je	LBB72_294
# %bb.297:                              #   in Loop: Header=BB72_295 Depth=1
	mov	esi, dword ptr [esp + 88]       # 4-byte Reload
	mov	edx, dword ptr [4*esi + _ADAM7_IY]
	mov	ecx, dword ptr [4*esi + _ADAM7_IX]
	mov	edi, dword ptr [esp + 4*esi + 356]
	imul	edx, dword ptr [esp + 44]       # 4-byte Folded Reload
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	dword ptr [esp + 128], edi      # 4-byte Spill
	lea	ebp, [ecx + edx]
	mov	ecx, dword ptr [4*esi + _ADAM7_DY]
	mov	esi, dword ptr [4*esi + _ADAM7_DX]
	imul	ebp, eax
	mov	dword ptr [esp + 124], ebp      # 4-byte Spill
	imul	ecx, dword ptr [esp + 112]      # 4-byte Folded Reload
	imul	esi, eax
	mov	dword ptr [esp + 32], esi       # 4-byte Spill
	mov	dword ptr [esp + 96], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	lea	ecx, [ecx + edx + 1]
	imul	ecx, eax
	mov	dword ptr [esp + 120], ecx      # 4-byte Spill
	mov	ecx, eax
	imul	ecx, dword ptr [esp + 20]       # 4-byte Folded Reload
	mov	dword ptr [esp + 76], ecx       # 4-byte Spill
	lea	ecx, [eax + edi]
	mov	dword ptr [esp + 116], ecx      # 4-byte Spill
	mov	ecx, dword ptr [esp + 108]      # 4-byte Reload
	lea	esi, [ecx + edi]
	mov	ecx, dword ptr [esp + 104]      # 4-byte Reload
	lea	edx, [ecx + ebp]
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	lea	ecx, [ecx + ebp]
	mov	dword ptr [esp + 100], ecx      # 4-byte Spill
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	lea	ebp, [ecx + edi]
	mov	ecx, dword ptr [esp + 96]       # 4-byte Reload
	xor	edi, edi
	jmp	LBB72_299
LBB72_298:                              #   in Loop: Header=BB72_299 Depth=2
	mov	edi, dword ptr [esp + 136]      # 4-byte Reload
	mov	esi, dword ptr [esp + 64]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 140]      # 4-byte Reload
	mov	ecx, dword ptr [esp + 96]       # 4-byte Reload
	mov	edx, dword ptr [esp + 144]      # 4-byte Reload
	inc	edi
	add	esi, dword ptr [esp + 76]       # 4-byte Folded Reload
	add	edx, ecx
	add	dword ptr [esp + 100], ecx      # 4-byte Folded Spill
	add	ebp, dword ptr [esp + 76]       # 4-byte Folded Reload
	cmp	edi, dword ptr [esp + 132]      # 4-byte Folded Reload
	jae	LBB72_294
LBB72_299:                              #   Parent Loop BB72_295 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_301 Depth 3
                                        #         Child Loop BB72_305 Depth 4
                                        #         Child Loop BB72_307 Depth 4
	mov	dword ptr [esp + 64], esi       # 4-byte Spill
	mov	esi, ecx
	mov	ecx, dword ptr [esp + 124]      # 4-byte Reload
	mov	dword ptr [esp + 144], edx      # 4-byte Spill
	mov	dword ptr [esp + 136], edi      # 4-byte Spill
	mov	dword ptr [esp + 140], ebp      # 4-byte Spill
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	imul	esi, edi
	add	ecx, esi
	add	esi, dword ptr [esp + 120]      # 4-byte Folded Reload
	mov	dword ptr [esp + 48], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 128]      # 4-byte Reload
	mov	dword ptr [esp + 52], esi       # 4-byte Spill
	mov	esi, dword ptr [esp + 76]       # 4-byte Reload
	imul	esi, edi
	add	ecx, esi
	add	esi, dword ptr [esp + 116]      # 4-byte Folded Reload
	mov	dword ptr [esp + 68], ecx       # 4-byte Spill
	mov	ecx, edx
	mov	edx, dword ptr [esp + 64]       # 4-byte Reload
	mov	dword ptr [esp + 56], esi       # 4-byte Spill
	mov	esi, dword ptr [esp + 100]      # 4-byte Reload
	jmp	LBB72_301
	.p2align	4, 0x90
LBB72_300:                              #   in Loop: Header=BB72_301 Depth=3
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, dword ptr [esp + 32]       # 4-byte Reload
	add	edx, eax
	add	ebp, eax
	inc	ebx
	add	ecx, edi
	add	esi, edi
	mov	dword ptr [esp + 16], ebx       # 4-byte Spill
	cmp	ebx, dword ptr [esp + 20]       # 4-byte Folded Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	je	LBB72_298
LBB72_301:                              #   Parent Loop BB72_295 Depth=1
                                        #     Parent Loop BB72_299 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_305 Depth 4
                                        #         Child Loop BB72_307 Depth 4
	xor	edi, edi
	cmp	ebx, 255
	jbe	LBB72_307
# %bb.302:                              #   in Loop: Header=BB72_301 Depth=3
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	dword ptr [esp + 36], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 36]       # 4-byte Reload
	imul	ebx, eax
	mov	dword ptr [esp + 36], ebx       # 4-byte Spill
	mov	ebx, dword ptr [esp + 28]       # 4-byte Reload
	imul	ebx, eax
	mov	eax, ebx
	mov	ebx, dword ptr [esp + 56]       # 4-byte Reload
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	add	eax, ebx
	mov	ebx, dword ptr [esp + 48]       # 4-byte Reload
	add	eax, dword ptr [esp + 8]        # 4-byte Folded Reload
	mov	dword ptr [esp + 60], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	add	ebx, eax
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	add	ebx, dword ptr [esp + 4]        # 4-byte Folded Reload
	cmp	ebx, dword ptr [esp + 60]       # 4-byte Folded Reload
	jae	LBB72_304
# %bb.303:                              #   in Loop: Header=BB72_301 Depth=3
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	add	ebx, dword ptr [esp + 68]       # 4-byte Folded Reload
	add	ebx, dword ptr [esp + 8]        # 4-byte Folded Reload
	mov	dword ptr [esp + 24], ebx       # 4-byte Spill
	mov	ebx, dword ptr [esp + 36]       # 4-byte Reload
	add	ebx, dword ptr [esp + 52]       # 4-byte Folded Reload
	add	ebx, dword ptr [esp + 4]        # 4-byte Folded Reload
	cmp	dword ptr [esp + 24], ebx       # 4-byte Folded Reload
	jb	LBB72_307
LBB72_304:                              #   in Loop: Header=BB72_301 Depth=3
	mov	ebx, dword ptr [esp + 40]       # 4-byte Reload
	xor	edi, edi
	.p2align	4, 0x90
LBB72_305:                              #   Parent Loop BB72_295 Depth=1
                                        #     Parent Loop BB72_299 Depth=2
                                        #       Parent Loop BB72_301 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movups	xmm0, xmmword ptr [edx + edi - 16]
	movups	xmm1, xmmword ptr [edx + edi]
	movups	xmmword ptr [ecx + edi - 16], xmm0
	movups	xmmword ptr [ecx + edi], xmm1
	add	edi, 32
	cmp	ebx, edi
	jne	LBB72_305
# %bb.306:                              #   in Loop: Header=BB72_301 Depth=3
	cmp	eax, ebx
	mov	edi, ebx
	je	LBB72_300
	.p2align	4, 0x90
LBB72_307:                              #   Parent Loop BB72_295 Depth=1
                                        #     Parent Loop BB72_299 Depth=2
                                        #       Parent Loop BB72_301 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movzx	ebx, byte ptr [ebp + edi]
	mov	byte ptr [esi + edi], bl
	inc	edi
	cmp	eax, edi
	jne	LBB72_307
	jmp	LBB72_300
LBB72_308:
	xor	eax, eax
	jmp	LBB72_310
LBB72_309:                              #   in Loop: Header=BB72_310 Depth=1
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	inc	eax
	cmp	eax, 7
	je	LBB72_318
LBB72_310:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_313 Depth 2
                                        #       Child Loop BB72_314 Depth 3
                                        #         Child Loop BB72_315 Depth 4
	mov	dword ptr [esp + 64], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 4*eax + 328]
	test	eax, eax
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	je	LBB72_309
# %bb.311:                              #   in Loop: Header=BB72_310 Depth=1
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	mov	eax, dword ptr [esp + 4*eax + 300]
	test	eax, eax
	mov	dword ptr [esp + 52], eax       # 4-byte Spill
	je	LBB72_309
# %bb.312:                              #   in Loop: Header=BB72_310 Depth=1
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 4*eax + 356]
	mov	edx, dword ptr [4*eax + _ADAM7_IY]
	mov	edi, dword ptr [4*eax + _ADAM7_DY]
	mov	esi, dword ptr [4*eax + _ADAM7_IX]
	mov	eax, dword ptr [4*eax + _ADAM7_DX]
	mov	dword ptr [esp + 48], eax       # 4-byte Spill
	shl	ecx, 3
	xor	eax, eax
	mov	dword ptr [esp + 68], edx       # 4-byte Spill
	mov	dword ptr [esp + 40], edi       # 4-byte Spill
	mov	dword ptr [esp + 76], esi       # 4-byte Spill
	mov	dword ptr [esp + 60], ecx       # 4-byte Spill
LBB72_313:                              #   Parent Loop BB72_310 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_314 Depth 3
                                        #         Child Loop BB72_315 Depth 4
	mov	ecx, eax
	mov	dword ptr [esp + 56], eax       # 4-byte Spill
	imul	eax, dword ptr [esp + 40]       # 4-byte Folded Reload
	xor	esi, esi
	imul	ecx, dword ptr [esp + 32]       # 4-byte Folded Reload
	add	eax, dword ptr [esp + 68]       # 4-byte Folded Reload
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	imul	eax, dword ptr [esp + 44]       # 4-byte Folded Reload
	add	eax, dword ptr [esp + 76]       # 4-byte Folded Reload
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	.p2align	4, 0x90
LBB72_314:                              #   Parent Loop BB72_310 Depth=1
                                        #     Parent Loop BB72_313 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_315 Depth 4
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [esp + 24], esi       # 4-byte Spill
	mov	dword ptr [esp + 36], ebx       # 4-byte Spill
	lea	edx, [esi + eax]
	imul	esi, dword ptr [esp + 48]       # 4-byte Folded Reload
	imul	edx, ebx
	add	edx, dword ptr [esp + 60]       # 4-byte Folded Reload
	add	esi, dword ptr [esp + 28]       # 4-byte Folded Reload
	imul	esi, ebx
	.p2align	4, 0x90
LBB72_315:                              #   Parent Loop BB72_310 Depth=1
                                        #     Parent Loop BB72_313 Depth=2
                                        #       Parent Loop BB72_314 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	mov	eax, esi
	lea	ebp, [edx + 1]
	mov	ebx, 1
	mov	edi, edx
	not	dl
	mov	ecx, eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esp + 16], ebp       # 4-byte Spill
	mov	ebp, dword ptr [esp + 8]        # 4-byte Reload
	shr	edi, 3
	and	dl, 7
	not	cl
	movzx	edx, dl
	and	cl, 7
	shl	ebx, cl
	mov	ecx, esi
	shr	ecx, 3
	movzx	edi, byte ptr [ebp + edi]
	mov	ah, byte ptr [eax + ecx]
	mov	al, ah
	or	al, bl
	not	bl
	and	bl, ah
	bt	edi, edx
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	movzx	eax, al
	movzx	edx, bl
	cmovb	edx, eax
	inc	esi
	dec	dword ptr [esp + 36]            # 4-byte Folded Spill
	mov	byte ptr [edi + ecx], dl
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	jne	LBB72_315
# %bb.316:                              #   in Loop: Header=BB72_314 Depth=3
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	inc	esi
	cmp	esi, dword ptr [esp + 32]       # 4-byte Folded Reload
	jne	LBB72_314
# %bb.317:                              #   in Loop: Header=BB72_313 Depth=2
	mov	eax, dword ptr [esp + 56]       # 4-byte Reload
	inc	eax
	cmp	eax, dword ptr [esp + 52]       # 4-byte Folded Reload
	jb	LBB72_313
	jmp	LBB72_309
LBB72_318:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [esp + 92]       # 4-byte Reload
	mov	cl, 1
LBB72_319:
	test	cl, cl
	je	LBB72_321
LBB72_320:
	xor	eax, eax
LBB72_321:
	mov	dword ptr [edi], eax
LBB72_322:
	push	dword ptr [esp + 84]
	call	_free
	add	esp, 4
	mov	edi, dword ptr [edi]
	test	edi, edi
	jne	LBB72_36
# %bb.323:
	mov	ecx, dword ptr [esp + 484]
	cmp	dword ptr [ecx + 36], 0
	je	LBB72_341
# %bb.324:
	mov	eax, dword ptr [ecx + 120]
	cmp	eax, dword ptr [ecx + 164]
	jne	LBB72_336
# %bb.325:
	mov	edx, dword ptr [esp + 484]
	mov	ecx, dword ptr [edx + 124]
	cmp	ecx, dword ptr [edx + 168]
	jne	LBB72_336
# %bb.326:
	mov	edx, dword ptr [esp + 484]
	mov	ecx, dword ptr [edx + 136]
	cmp	ecx, dword ptr [edx + 180]
	jne	LBB72_336
# %bb.327:
	test	ecx, ecx
	je	LBB72_331
# %bb.328:
	mov	edx, dword ptr [esp + 484]
	mov	ecx, dword ptr [edx + 140]
	cmp	ecx, dword ptr [edx + 184]
	jne	LBB72_336
# %bb.329:
	mov	edx, dword ptr [esp + 484]
	mov	ecx, dword ptr [edx + 144]
	cmp	ecx, dword ptr [edx + 188]
	jne	LBB72_336
# %bb.330:
	mov	edx, dword ptr [esp + 484]
	mov	ecx, dword ptr [edx + 148]
	cmp	ecx, dword ptr [edx + 192]
	jne	LBB72_336
LBB72_331:
	mov	edx, dword ptr [esp + 484]
	mov	ecx, dword ptr [edx + 132]
	cmp	ecx, dword ptr [edx + 176]
	jne	LBB72_336
# %bb.332:
	shl	ecx, 2
	test	ecx, ecx
	je	LBB72_358
# %bb.333:
	mov	edx, dword ptr [esp + 484]
	xor	ebx, ebx
	xor	edi, edi
	mov	ebp, dword ptr [edx + 128]
	mov	esi, dword ptr [edx + 172]
LBB72_334:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [ebp + ebx]
	cmp	dl, byte ptr [esi + ebx]
	jne	LBB72_336
# %bb.335:                              #   in Loop: Header=BB72_334 Depth=1
	inc	ebx
	cmp	ecx, ebx
	jne	LBB72_334
	jmp	LBB72_36
LBB72_336:
	mov	ecx, dword ptr [esp + 472]
	mov	esi, dword ptr [ecx]
	mov	ecx, eax
	or	ecx, 4
	cmp	ecx, 6
	je	LBB72_338
# %bb.337:
	mov	ecx, dword ptr [esp + 484]
	mov	edi, 56
	cmp	dword ptr [ecx + 124], 8
	jne	LBB72_36
LBB72_338:
	mov	ecx, dword ptr [esp + 480]
	cmp	eax, 6
	mov	ebx, dword ptr [ecx]
	mov	ecx, dword ptr [esp + 476]
	mov	edi, dword ptr [ecx]
	mov	ecx, dword ptr [esp + 484]
	mov	ecx, dword ptr [ecx + 124]
	ja	LBB72_347
# %bb.339:
	mov	edx, 1
	jmp	dword ptr [4*eax + LJTI72_9]
LBB72_340:
	mov	edx, 3
	jmp	LBB72_354
LBB72_341:
	mov	eax, dword ptr [ecx + 128]
	lea	esi, [ecx + 120]
	test	eax, eax
	je	LBB72_343
# %bb.342:
	push	eax
	call	_free
	add	esp, 4
LBB72_343:
	mov	eax, dword ptr [esp + 72]       # 4-byte Reload
	mov	edi, dword ptr [esp + 484]
	movsd	xmm0, qword ptr [eax + 24]      # xmm0 = mem[0],zero
	movsd	qword ptr [esi + 24], xmm0
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [esi + 16], xmm0
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [esi + 8], xmm1
	movsd	qword ptr [esi], xmm0
	mov	esi, dword ptr [edi + 172]
	test	esi, esi
	je	LBB72_351
# %bb.344:
	push	1024
	call	_malloc
	add	esp, 4
	mov	dword ptr [edi + 128], eax
	test	eax, eax
	mov	ecx, dword ptr [edi + 176]
	je	LBB72_349
# %bb.345:
	shl	ecx, 2
	test	ecx, ecx
	je	LBB72_351
# %bb.346:
	push	ecx
	push	esi
	push	eax
	call	_memcpy
	add	esp, 12
	jmp	LBB72_351
LBB72_347:
	cmp	eax, 255
LBB72_348:
	xor	edx, edx
	jmp	LBB72_354
LBB72_349:
	test	ecx, ecx
	je	LBB72_351
# %bb.350:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	edi, 83
	mov	dword ptr [eax], 83
	jmp	LBB72_36
LBB72_351:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	xor	edi, edi
	mov	dword ptr [eax], 0
	jmp	LBB72_36
LBB72_352:
	mov	edx, 2
	jmp	LBB72_354
LBB72_353:
	mov	edx, 4
LBB72_354:
	mov	eax, edi
	imul	edx, ecx
	imul	eax, ebx
	mov	ecx, eax
	and	eax, 7
	imul	eax, edx
	shr	ecx, 3
	add	eax, 7
	imul	ecx, edx
	shr	eax, 3
	add	eax, ecx
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, dword ptr [esp + 472]
	test	eax, eax
	mov	dword ptr [ecx], eax
	je	LBB72_356
# %bb.355:
	mov	ecx, dword ptr [esp + 484]
	add	ecx, 120
	push	ebx
	push	edi
	push	dword ptr [esp + 80]            # 4-byte Folded Reload
	push	ecx
	push	esi
	push	eax
	call	"?lodepng_convert@@YAIPAEPBEPBULodePNGColorMode@@2II@Z"
	add	esp, 24
	jmp	LBB72_357
LBB72_356:
	mov	eax, 83
LBB72_357:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi], eax
	push	esi
	call	_free
	add	esp, 4
	mov	edi, dword ptr [edi]
	jmp	LBB72_36
LBB72_358:
	xor	edi, edi
	jmp	LBB72_36
	.section	.rdata,"dr"
	.p2align	2
LJTI72_0:
	.long	LBB72_8
	.long	LBB72_5
	.long	LBB72_3
	.long	LBB72_8
	.long	LBB72_6
	.long	LBB72_5
	.long	LBB72_7
LJTI72_1:
	.long	LBB72_14
	.long	LBB72_12
	.long	LBB72_10
	.long	LBB72_14
	.long	LBB72_13
	.long	LBB72_12
	.long	LBB72_18
LJTI72_2:
	.long	LBB72_31
	.long	LBB72_25
	.long	LBB72_21
	.long	LBB72_31
	.long	LBB72_29
	.long	LBB72_25
	.long	LBB72_30
LJTI72_3:
	.long	LBB72_28
	.long	LBB72_23
	.long	LBB72_17
	.long	LBB72_28
	.long	LBB72_26
	.long	LBB72_23
	.long	LBB72_27
LJTI72_4:
	.long	LBB72_51
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_60
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_65
	.long	LBB72_72
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_76
	.long	LBB72_118
	.long	LBB72_81
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_87
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_92
	.long	LBB72_97
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_118
	.long	LBB72_109
LJTI72_5:
	.long	LBB72_70
	.long	LBB72_161
	.long	LBB72_155
	.long	LBB72_157
	.long	LBB72_70
	.long	LBB72_161
	.long	LBB72_155
LJTI72_6:
	.long	LBB72_199
	.long	LBB72_195
	.long	LBB72_188
	.long	LBB72_195
	.long	LBB72_197
	.long	LBB72_195
	.long	LBB72_198
LJTI72_7:
	.long	LBB72_231
	.long	LBB72_228
	.long	LBB72_226
	.long	LBB72_231
	.long	LBB72_229
	.long	LBB72_228
	.long	LBB72_230
LJTI72_8:
	.long	LBB72_242
	.long	LBB72_239
	.long	LBB72_236
	.long	LBB72_242
	.long	LBB72_240
	.long	LBB72_239
	.long	LBB72_241
LJTI72_9:
	.long	LBB72_354
	.long	LBB72_348
	.long	LBB72_340
	.long	LBB72_354
	.long	LBB72_352
	.long	LBB72_348
	.long	LBB72_353
                                        # -- End function
	.def	 "?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@00000001000000000000000000000000 # -- Begin function ?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z
	.section	.rdata,"dr",discard,__xmm@00000001000000000000000000000000
	.p2align	4
__xmm@00000001000000000000000000000000:
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.globl	__xmm@00000000000000000000000500000001
	.section	.rdata,"dr",discard,__xmm@00000000000000000000000500000001
	.p2align	4
__xmm@00000000000000000000000500000001:
	.long	1                               # 0x1
	.long	5                               # 0x5
	.long	0                               # 0x0
	.long	0                               # 0x0
	.text
	.globl	"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z"
	.p2align	4, 0x90
"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z": # @"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -16
	sub	esp, 400
	movaps	xmm1, xmmword ptr [__xmm@00000003000008000000000100000002] # xmm1 = [2,1,2048,3]
	xorps	xmm0, xmm0
	mov	dword ptr [esp + 36], 1
	mov	dword ptr [esp + 48], 16777216
	mov	dword ptr [esp + 52], 16777216
	mov	dword ptr [esp + 32], 0
	mov	edi, dword ptr [ebp + 28]
	mov	eax, dword ptr [ebp + 8]
	mov	esi, dword ptr [ebp + 20]
	mov	ecx, dword ptr [ebp + 12]
	mov	edx, dword ptr [ebp + 16]
	mov	ebx, esp
	movaps	xmmword ptr [esp], xmm0
	movaps	xmmword ptr [esp + 16], xmm0
	movups	xmmword ptr [esp + 56], xmm1
	movaps	xmm1, xmmword ptr [__xmm@00000001000000000000000000000000] # xmm1 = [0,0,0,1]
	mov	dword ptr [esp + 72], 128
	mov	dword ptr [esp + 76], 1
	movaps	xmmword ptr [esp + 80], xmm1
	movaps	xmm1, xmmword ptr [__xmm@00000000000000000000000500000001] # xmm1 = [1,5,0,0]
	movaps	xmmword ptr [esp + 96], xmm1
	movaps	xmm1, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm1 = [0,0,0,6]
	mov	dword ptr [esp + 112], 0
	mov	dword ptr [esp + 116], 1
	mov	dword ptr [esp + 148], 0
	mov	dword ptr [esp + 144], 0
	movaps	xmmword ptr [esp + 128], xmm0
	mov	dword ptr [esp + 188], 0
	mov	dword ptr [esp + 192], 0
	mov	dword ptr [esp + 180], 0
	mov	dword ptr [esp + 184], 0
	mov	dword ptr [esp + 168], 8
	mov	dword ptr [esp + 172], 0
	mov	dword ptr [esp + 176], 0
	movups	xmmword ptr [esp + 152], xmm1
	mov	dword ptr [esp + 272], 0
	mov	dword ptr [esp + 288], 0
	mov	dword ptr [esp + 296], 0
	mov	dword ptr [esp + 332], 0
	mov	dword ptr [esp + 340], 0
	mov	dword ptr [esp + 344], 0
	mov	dword ptr [esp + 348], 0
	mov	dword ptr [esp + 372], 0
	mov	dword ptr [esp + 376], 0
	mov	dword ptr [esp + 364], 0
	mov	dword ptr [esp + 368], 0
	mov	dword ptr [esp + 356], 0
	mov	dword ptr [esp + 360], 0
	mov	dword ptr [esp + 244], 0
	mov	dword ptr [esp + 236], 0
	mov	dword ptr [esp + 240], 0
	mov	dword ptr [esp + 228], 0
	mov	dword ptr [esp + 232], 0
	mov	dword ptr [esp + 220], 0
	mov	dword ptr [esp + 224], 0
	mov	dword ptr [esp + 212], 0
	mov	dword ptr [esp + 216], 0
	mov	dword ptr [esp + 204], 0
	mov	dword ptr [esp + 208], 0
	mov	dword ptr [esp + 196], 0
	mov	dword ptr [esp + 200], 0
	mov	dword ptr [esp + 380], 1
	mov	dword ptr [esp + 120], edi
	mov	edi, dword ptr [ebp + 32]
	mov	dword ptr [esp + 124], edi
	mov	edi, dword ptr [ebp + 24]
	mov	dword ptr [esp + 40], 0
	mov	dword ptr [esp + 44], 0
	push	edi
	push	esi
	push	ebx
	push	edx
	push	ecx
	push	eax
	call	"?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z"
	add	esp, 24
	mov	esi, eax
	mov	eax, dword ptr [esp + 128]
	test	eax, eax
	je	LBB73_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB73_2:
	lea	eax, [esp + 152]
	mov	dword ptr [esp + 128], 0
	mov	dword ptr [esp + 132], 0
	push	eax
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	mov	eax, esi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_state_init@@YAXPAULodePNGState@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@01000000000000000000000100000001 # -- Begin function ?lodepng_state_init@@YAXPAULodePNGState@@@Z
	.section	.rdata,"dr",discard,__xmm@01000000000000000000000100000001
	.p2align	4
__xmm@01000000000000000000000100000001:
	.long	1                               # 0x1
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	16777216                        # 0x1000000
	.text
	.globl	"?lodepng_state_init@@YAXPAULodePNGState@@@Z"
	.p2align	4, 0x90
"?lodepng_state_init@@YAXPAULodePNGState@@@Z": # @"?lodepng_state_init@@YAXPAULodePNGState@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	movaps	xmm0, xmmword ptr [__xmm@01000000000000000000000100000001] # xmm0 = [1,1,0,16777216]
	movaps	xmm2, xmmword ptr [__xmm@00000003000008000000000100000002] # xmm2 = [2,1,2048,3]
	movaps	xmm1, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm1 = [0,0,0,6]
	movups	xmmword ptr [eax + 36], xmm0
	mov	dword ptr [eax + 52], 16777216
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 32], 0
	movups	xmmword ptr [eax + 56], xmm2
	mov	dword ptr [eax + 72], 128
	mov	dword ptr [eax + 76], 1
	mov	dword ptr [eax + 80], 0
	mov	dword ptr [eax + 84], 0
	mov	dword ptr [eax + 88], 0
	mov	dword ptr [eax + 96], 1
	mov	dword ptr [eax + 100], 5
	mov	dword ptr [eax + 92], 1
	mov	dword ptr [eax + 108], 0
	mov	dword ptr [eax + 104], 0
	mov	dword ptr [eax + 112], 0
	mov	dword ptr [eax + 116], 1
	mov	dword ptr [eax + 140], 0
	mov	dword ptr [eax + 136], 0
	mov	dword ptr [eax + 148], 0
	mov	dword ptr [eax + 144], 0
	mov	dword ptr [eax + 120], 6
	mov	dword ptr [eax + 124], 8
	mov	dword ptr [eax + 128], 0
	mov	dword ptr [eax + 132], 0
	mov	dword ptr [eax + 188], 0
	mov	dword ptr [eax + 192], 0
	mov	dword ptr [eax + 180], 0
	mov	dword ptr [eax + 184], 0
	mov	dword ptr [eax + 168], 8
	mov	dword ptr [eax + 172], 0
	mov	dword ptr [eax + 176], 0
	movups	xmmword ptr [eax + 152], xmm1
	mov	dword ptr [eax + 272], 0
	mov	dword ptr [eax + 288], 0
	mov	dword ptr [eax + 296], 0
	mov	dword ptr [eax + 332], 0
	mov	dword ptr [eax + 340], 0
	mov	dword ptr [eax + 344], 0
	mov	dword ptr [eax + 348], 0
	mov	dword ptr [eax + 360], 0
	mov	dword ptr [eax + 356], 0
	mov	dword ptr [eax + 368], 0
	mov	dword ptr [eax + 364], 0
	mov	dword ptr [eax + 376], 0
	mov	dword ptr [eax + 372], 0
	mov	dword ptr [eax + 200], 0
	mov	dword ptr [eax + 196], 0
	mov	dword ptr [eax + 208], 0
	mov	dword ptr [eax + 204], 0
	mov	dword ptr [eax + 216], 0
	mov	dword ptr [eax + 212], 0
	mov	dword ptr [eax + 224], 0
	mov	dword ptr [eax + 220], 0
	mov	dword ptr [eax + 232], 0
	mov	dword ptr [eax + 228], 0
	mov	dword ptr [eax + 240], 0
	mov	dword ptr [eax + 236], 0
	mov	dword ptr [eax + 244], 0
	mov	dword ptr [eax + 380], 1
	ret
                                        # -- End function
	.def	 "?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z" # -- Begin function ?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z
	.p2align	4, 0x90
"?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z": # @"?lodepng_state_cleanup@@YAXPAULodePNGState@@@Z"
# %bb.0:
	push	esi
	mov	esi, dword ptr [esp + 8]
	mov	eax, dword ptr [esi + 128]
	test	eax, eax
	je	LBB75_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB75_2:
	mov	dword ptr [esi + 128], 0
	mov	dword ptr [esi + 132], 0
	add	esi, 152
	push	esi
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	pop	esi
	ret
                                        # -- End function
	.def	 "?lodepng_decode32@@YAIPAPAEPAI1PBEI@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_decode32@@YAIPAPAEPAI1PBEI@Z" # -- Begin function ?lodepng_decode32@@YAIPAPAEPAI1PBEI@Z
	.p2align	4, 0x90
"?lodepng_decode32@@YAIPAPAEPAI1PBEI@Z": # @"?lodepng_decode32@@YAIPAPAEPAI1PBEI@Z"
# %bb.0:
	push	8
	push	6
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	call	"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z"
	add	esp, 28
	ret
                                        # -- End function
	.def	 "?lodepng_decode24@@YAIPAPAEPAI1PBEI@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_decode24@@YAIPAPAEPAI1PBEI@Z" # -- Begin function ?lodepng_decode24@@YAIPAPAEPAI1PBEI@Z
	.p2align	4, 0x90
"?lodepng_decode24@@YAIPAPAEPAI1PBEI@Z": # @"?lodepng_decode24@@YAIPAPAEPAI1PBEI@Z"
# %bb.0:
	push	8
	push	2
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	call	"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z"
	add	esp, 28
	ret
                                        # -- End function
	.def	 "?lodepng_decode_file@@YAIPAPAEPAI1PBDW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_decode_file@@YAIPAPAEPAI1PBDW4LodePNGColorType@@I@Z" # -- Begin function ?lodepng_decode_file@@YAIPAPAEPAI1PBDW4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?lodepng_decode_file@@YAIPAPAEPAI1PBDW4LodePNGColorType@@I@Z": # @"?lodepng_decode_file@@YAIPAPAEPAI1PBDW4LodePNGColorType@@I@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	ebp, dword ptr [esp + 36]
	mov	ebx, dword ptr [esp + 32]
	mov	edi, dword ptr [esp + 28]
	mov	eax, dword ptr [esp + 40]
	mov	dword ptr [esp], 0
	lea	ecx, [esp + 4]
	mov	edx, esp
	mov	dword ptr [edi], 0
	mov	dword ptr [ebp], 0
	mov	dword ptr [ebx], 0
	push	eax
	push	ecx
	push	edx
	call	"?lodepng_load_file@@YAIPAPAEPAIPBD@Z"
	add	esp, 12
	test	eax, eax
	je	LBB78_2
# %bb.1:
	mov	edi, dword ptr [esp]
	jmp	LBB78_3
LBB78_2:
	mov	eax, edi
	mov	edi, dword ptr [esp]
	push	dword ptr [esp + 48]
	push	dword ptr [esp + 48]
	push	dword ptr [esp + 12]
	push	edi
	push	ebp
	push	ebx
	push	eax
	call	"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z"
	add	esp, 28
LBB78_3:
	mov	esi, eax
	push	edi
	call	_free
	add	esp, 4
	mov	eax, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_decode32_file@@YAIPAPAEPAI1PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_decode32_file@@YAIPAPAEPAI1PBD@Z" # -- Begin function ?lodepng_decode32_file@@YAIPAPAEPAI1PBD@Z
	.p2align	4, 0x90
"?lodepng_decode32_file@@YAIPAPAEPAI1PBD@Z": # @"?lodepng_decode32_file@@YAIPAPAEPAI1PBD@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	ebp, dword ptr [esp + 36]
	mov	ebx, dword ptr [esp + 32]
	mov	edi, dword ptr [esp + 28]
	mov	eax, dword ptr [esp + 40]
	mov	dword ptr [esp], 0
	lea	ecx, [esp + 4]
	mov	edx, esp
	mov	dword ptr [edi], 0
	mov	dword ptr [ebp], 0
	mov	dword ptr [ebx], 0
	push	eax
	push	ecx
	push	edx
	call	"?lodepng_load_file@@YAIPAPAEPAIPBD@Z"
	add	esp, 12
	test	eax, eax
	je	LBB79_2
# %bb.1:
	mov	edi, dword ptr [esp]
	jmp	LBB79_3
LBB79_2:
	mov	eax, edi
	mov	edi, dword ptr [esp]
	push	8
	push	6
	push	dword ptr [esp + 12]
	push	edi
	push	ebp
	push	ebx
	push	eax
	call	"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z"
	add	esp, 28
LBB79_3:
	mov	esi, eax
	push	edi
	call	_free
	add	esp, 4
	mov	eax, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_decode24_file@@YAIPAPAEPAI1PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_decode24_file@@YAIPAPAEPAI1PBD@Z" # -- Begin function ?lodepng_decode24_file@@YAIPAPAEPAI1PBD@Z
	.p2align	4, 0x90
"?lodepng_decode24_file@@YAIPAPAEPAI1PBD@Z": # @"?lodepng_decode24_file@@YAIPAPAEPAI1PBD@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	ebp, dword ptr [esp + 36]
	mov	ebx, dword ptr [esp + 32]
	mov	edi, dword ptr [esp + 28]
	mov	eax, dword ptr [esp + 40]
	mov	dword ptr [esp], 0
	lea	ecx, [esp + 4]
	mov	edx, esp
	mov	dword ptr [edi], 0
	mov	dword ptr [ebp], 0
	mov	dword ptr [ebx], 0
	push	eax
	push	ecx
	push	edx
	call	"?lodepng_load_file@@YAIPAPAEPAIPBD@Z"
	add	esp, 12
	test	eax, eax
	je	LBB80_2
# %bb.1:
	mov	edi, dword ptr [esp]
	jmp	LBB80_3
LBB80_2:
	mov	eax, edi
	mov	edi, dword ptr [esp]
	push	8
	push	2
	push	dword ptr [esp + 12]
	push	edi
	push	ebp
	push	ebx
	push	eax
	call	"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z"
	add	esp, 28
LBB80_3:
	mov	esi, eax
	push	edi
	call	_free
	add	esp, 4
	mov	eax, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z" # -- Begin function ?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z
	.p2align	4, 0x90
"?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z": # @"?lodepng_decoder_settings_init@@YAXPAULodePNGDecoderSettings@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	movaps	xmm0, xmmword ptr [__xmm@01000000000000000000000100000001] # xmm0 = [1,1,0,16777216]
	movups	xmmword ptr [eax + 36], xmm0
	mov	dword ptr [eax + 52], 16777216
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 32], 0
	ret
                                        # -- End function
	.def	 "?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z" # -- Begin function ?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z
	.p2align	4, 0x90
"?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z": # @"?lodepng_encoder_settings_init@@YAXPAULodePNGEncoderSettings@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	movaps	xmm0, xmmword ptr [__xmm@00000003000008000000000100000002] # xmm0 = [2,1,2048,3]
	movups	xmmword ptr [eax], xmm0
	mov	dword ptr [eax + 16], 128
	mov	dword ptr [eax + 20], 1
	mov	dword ptr [eax + 24], 0
	mov	dword ptr [eax + 28], 0
	mov	dword ptr [eax + 32], 0
	mov	dword ptr [eax + 40], 1
	mov	dword ptr [eax + 44], 5
	mov	dword ptr [eax + 36], 1
	mov	dword ptr [eax + 52], 0
	mov	dword ptr [eax + 48], 0
	mov	dword ptr [eax + 56], 0
	mov	dword ptr [eax + 60], 1
	ret
                                        # -- End function
	.def	 "?lodepng_state_copy@@YAXPAULodePNGState@@PBU1@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_state_copy@@YAXPAULodePNGState@@PBU1@@Z" # -- Begin function ?lodepng_state_copy@@YAXPAULodePNGState@@PBU1@@Z
	.p2align	4, 0x90
"?lodepng_state_copy@@YAXPAULodePNGState@@PBU1@@Z": # @"?lodepng_state_copy@@YAXPAULodePNGState@@PBU1@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 16]
	mov	edi, dword ptr [esp + 20]
	mov	eax, dword ptr [esi + 128]
	test	eax, eax
	je	LBB83_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB83_2:
	lea	ebx, [esi + 152]
	mov	dword ptr [esi + 128], 0
	mov	dword ptr [esi + 132], 0
	push	ebx
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	push	384
	push	edi
	push	esi
	call	_memcpy
	add	esp, 12
	movaps	xmm0, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm0 = [0,0,0,6]
	mov	dword ptr [esi + 140], 0
	mov	dword ptr [esi + 136], 0
	mov	dword ptr [esi + 148], 0
	mov	dword ptr [esi + 144], 0
	mov	dword ptr [esi + 120], 6
	mov	dword ptr [esi + 124], 8
	mov	dword ptr [esi + 184], 0
	mov	dword ptr [esi + 180], 0
	mov	dword ptr [esi + 192], 0
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 168], 8
	mov	dword ptr [esi + 172], 0
	mov	dword ptr [esi + 176], 0
	movups	xmmword ptr [esi + 152], xmm0
	mov	dword ptr [esi + 272], 0
	mov	dword ptr [esi + 288], 0
	mov	dword ptr [esi + 296], 0
	mov	dword ptr [esi + 332], 0
	mov	dword ptr [esi + 340], 0
	mov	dword ptr [esi + 344], 0
	mov	dword ptr [esi + 348], 0
	mov	dword ptr [esi + 360], 0
	mov	dword ptr [esi + 356], 0
	mov	dword ptr [esi + 368], 0
	mov	dword ptr [esi + 364], 0
	mov	dword ptr [esi + 376], 0
	mov	dword ptr [esi + 372], 0
	mov	dword ptr [esi + 244], 0
	mov	dword ptr [esi + 236], 0
	mov	dword ptr [esi + 240], 0
	mov	dword ptr [esi + 228], 0
	mov	dword ptr [esi + 232], 0
	mov	dword ptr [esi + 220], 0
	mov	dword ptr [esi + 224], 0
	mov	dword ptr [esi + 212], 0
	mov	dword ptr [esi + 216], 0
	mov	dword ptr [esi + 204], 0
	mov	dword ptr [esi + 208], 0
	mov	dword ptr [esi + 196], 0
	mov	dword ptr [esi + 200], 0
	mov	dword ptr [esi + 128], 0
	mov	dword ptr [esi + 132], 0
	movsd	xmm0, qword ptr [edi + 144]     # xmm0 = mem[0],zero
	movsd	qword ptr [esi + 144], xmm0
	movsd	xmm0, qword ptr [edi + 136]     # xmm0 = mem[0],zero
	movsd	qword ptr [esi + 136], xmm0
	movsd	xmm0, qword ptr [edi + 120]     # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [edi + 128]     # xmm1 = mem[0],zero
	movsd	qword ptr [esi + 120], xmm0
	movsd	qword ptr [esi + 128], xmm1
	cmp	dword ptr [edi + 128], 0
	je	LBB83_8
# %bb.3:
	push	1024
	call	_malloc
	add	esp, 4
	mov	dword ptr [esi + 128], eax
	test	eax, eax
	mov	ecx, dword ptr [edi + 132]
	je	LBB83_4
# %bb.6:
	shl	ecx, 2
	test	ecx, ecx
	je	LBB83_8
# %bb.7:
	push	ecx
	push	dword ptr [edi + 128]
	push	eax
	call	_memcpy
	add	esp, 12
	jmp	LBB83_8
LBB83_4:
	test	ecx, ecx
	je	LBB83_8
# %bb.5:
	mov	dword ptr [esi + 380], 83
	pop	esi
	pop	edi
	pop	ebx
	ret
LBB83_8:
	add	edi, 152
	mov	dword ptr [esi + 380], 0
	push	edi
	push	ebx
	call	"?lodepng_info_copy@@YAIPAULodePNGInfo@@PBU1@@Z"
	add	esp, 8
	mov	dword ptr [esi + 380], eax
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_encode@@YAIPAPAEPAIPBEIIPAULodePNGState@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_encode@@YAIPAPAEPAIPBEIIPAULodePNGState@@@Z" # -- Begin function ?lodepng_encode@@YAIPAPAEPAIPBEIIPAULodePNGState@@@Z
	.p2align	4, 0x90
"?lodepng_encode@@YAIPAPAEPAIPBEIIPAULodePNGState@@@Z": # @"?lodepng_encode@@YAIPAPAEPAIPBEIIPAULodePNGState@@@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 1464
	mov	ecx, dword ptr [ebp + 28]
	mov	ebx, dword ptr [ebp + 12]
	mov	esi, dword ptr [ebp + 8]
	movaps	xmm0, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm0 = [0,0,0,6]
	mov	dword ptr [esp + 12], 0
	mov	dword ptr [esp + 16], 0
	mov	dword ptr [esp + 64], 0
	mov	dword ptr [esp + 72], 0
	mov	dword ptr [esp + 20], 0
	mov	dword ptr [esp + 148], 0
	mov	dword ptr [esp + 144], 0
	mov	dword ptr [esp + 156], 0
	mov	dword ptr [esp + 152], 0
	mov	dword ptr [esp + 132], 8
	mov	dword ptr [esp + 136], 0
	mov	dword ptr [esp + 140], 0
	movups	xmmword ptr [esp + 116], xmm0
	mov	dword ptr [esp + 236], 0
	mov	dword ptr [esp + 252], 0
	mov	dword ptr [esp + 260], 0
	mov	dword ptr [esp + 296], 0
	mov	dword ptr [esp + 304], 0
	mov	dword ptr [esp + 308], 0
	mov	dword ptr [esp + 312], 0
	mov	dword ptr [esp + 324], 0
	mov	dword ptr [esp + 320], 0
	mov	dword ptr [esp + 332], 0
	mov	dword ptr [esp + 328], 0
	mov	dword ptr [esp + 340], 0
	mov	dword ptr [esp + 336], 0
	mov	dword ptr [esp + 164], 0
	mov	dword ptr [esp + 160], 0
	mov	dword ptr [esp + 172], 0
	mov	dword ptr [esp + 168], 0
	mov	dword ptr [esp + 180], 0
	mov	dword ptr [esp + 176], 0
	mov	dword ptr [esp + 188], 0
	mov	dword ptr [esp + 184], 0
	mov	dword ptr [esp + 196], 0
	mov	dword ptr [esp + 192], 0
	mov	dword ptr [esp + 204], 0
	mov	dword ptr [esp + 200], 0
	mov	dword ptr [esp + 208], 0
	mov	dword ptr [esi], 0
	mov	dword ptr [ebx], 0
	mov	dword ptr [ecx + 380], 0
	lea	edi, [ecx + 380]
	mov	edx, dword ptr [ecx + 164]
	cmp	edx, 3
	je	LBB84_2
# %bb.1:
	cmp	dword ptr [ecx + 108], 0
	je	LBB84_4
LBB84_2:
	mov	eax, dword ptr [ecx + 176]
	dec	eax
	cmp	eax, 256
	jb	LBB84_4
# %bb.3:
	mov	dword ptr [edi], 68
	jmp	LBB84_137
LBB84_4:
	cmp	dword ptr [ecx + 56], 3
	jb	LBB84_6
# %bb.5:
	mov	dword ptr [edi], 61
	jmp	LBB84_137
LBB84_6:
	cmp	dword ptr [ecx + 160], 2
	jb	LBB84_8
# %bb.7:
	mov	dword ptr [edi], 71
	jmp	LBB84_137
LBB84_8:
	mov	eax, 31
	cmp	edx, 6
	mov	dword ptr [esp + 8], edi        # 4-byte Spill
	ja	LBB84_21
# %bb.9:
	mov	ecx, dword ptr [ecx + 168]
	jmp	dword ptr [4*edx + LJTI84_0]
LBB84_10:
	cmp	ecx, 8
	je	LBB84_17
# %bb.11:
	mov	eax, 37
	cmp	ecx, 16
	je	LBB84_17
	jmp	LBB84_21
LBB84_12:
	mov	eax, 37
	cmp	ecx, 16
	ja	LBB84_21
# %bb.13:
	mov	edx, 65814
	jmp	LBB84_16
LBB84_14:
	mov	eax, 37
	cmp	ecx, 8
	ja	LBB84_21
# %bb.15:
	mov	edx, 278
LBB84_16:
	bt	edx, ecx
	jae	LBB84_21
LBB84_17:
	mov	ecx, dword ptr [ebp + 28]
	mov	eax, 31
	mov	dword ptr [ecx + 380], 0
	mov	edx, dword ptr [ecx + 120]
	cmp	edx, 6
	ja	LBB84_21
# %bb.18:
	mov	ecx, dword ptr [ecx + 124]
	jmp	dword ptr [4*edx + LJTI84_1]
LBB84_19:
	cmp	ecx, 8
	je	LBB84_27
# %bb.20:
	mov	eax, 37
	cmp	ecx, 16
	je	LBB84_27
LBB84_21:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], eax
	jmp	LBB84_137
LBB84_22:
	mov	eax, 37
	cmp	ecx, 16
	ja	LBB84_21
# %bb.23:
	mov	edx, 65814
	jmp	LBB84_26
LBB84_24:
	mov	eax, 37
	cmp	ecx, 8
	ja	LBB84_21
# %bb.25:
	mov	edx, 278
LBB84_26:
	bt	edx, ecx
	jae	LBB84_21
LBB84_27:
	mov	edi, dword ptr [ebp + 28]
	lea	ecx, [edi + 120]
	lea	eax, [edi + 152]
	mov	dword ptr [edi + 380], 0
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	lea	ecx, [esp + 116]
	push	eax
	push	ecx
	call	"?lodepng_info_copy@@YAIPAULodePNGInfo@@PBU1@@Z"
	mov	ecx, edi
	add	esp, 8
	cmp	dword ptr [edi + 92], 0
	je	LBB84_91
# %bb.28:
	movaps	xmm0, xmmword ptr [__xmm@00000001000000010000000000000001] # xmm0 = [1,0,1,1]
	mov	dword ptr [esp + 408], 0
	mov	dword ptr [esp + 412], 0
	mov	dword ptr [esp + 396], 0
	mov	dword ptr [esp + 392], 0
	mov	dword ptr [esp + 402], 0
	mov	dword ptr [esp + 398], 0
	movups	xmmword ptr [esp + 1440], xmm0
	cmp	dword ptr [ecx + 340], 0
	je	LBB84_40
# %bb.29:
	cmp	dword ptr [ecx + 352], 20
	jb	LBB84_40
# %bb.30:
	mov	eax, dword ptr [ecx + 348]
	cmp	byte ptr [eax + 16], 71
	jne	LBB84_35
# %bb.31:
	cmp	byte ptr [eax + 17], 82
	jne	LBB84_35
# %bb.32:
	cmp	byte ptr [eax + 18], 65
	jne	LBB84_35
# %bb.33:
	cmp	byte ptr [eax + 19], 89
	jne	LBB84_35
# %bb.34:
	mov	dword ptr [esp + 1448], 0
LBB84_35:
	cmp	byte ptr [eax + 16], 82
	jne	LBB84_40
# %bb.36:
	cmp	byte ptr [eax + 17], 71
	jne	LBB84_40
# %bb.37:
	cmp	byte ptr [eax + 18], 66
	jne	LBB84_40
# %bb.38:
	cmp	byte ptr [eax + 19], 32
	jne	LBB84_40
# %bb.39:
	mov	dword ptr [esp + 1452], 0
LBB84_40:
	lea	esi, [esp + 392]
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	push	dword ptr [ebp + 24]
	push	dword ptr [ebp + 20]
	push	dword ptr [ebp + 16]
	push	esi
	call	"?lodepng_compute_color_stats@@YAIPAULodePNGColorStats@@PBEIIPBULodePNGColorMode@@@Z"
	add	esp, 20
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	test	eax, eax
	mov	dword ptr [edi], eax
	je	LBB84_42
LBB84_41:
	mov	esi, dword ptr [ebp + 8]
	jmp	LBB84_137
LBB84_42:
	mov	eax, dword ptr [ebp + 28]
	cmp	dword ptr [eax + 196], 0
	lea	edi, [eax + 164]
	je	LBB84_47
# %bb.43:
	lea	eax, [esp + 360]
	mov	dword ptr [esp + 356], 0
	mov	dword ptr [esp + 352], 0
	mov	dword ptr [esp + 348], 0
	mov	dword ptr [esp + 372], 0
	mov	dword ptr [esp + 368], 0
	mov	dword ptr [esp + 380], 0
	mov	dword ptr [esp + 376], 0
	mov	dword ptr [esp + 388], 0
	mov	dword ptr [esp + 384], 0
	mov	dword ptr [esp + 360], 2
	mov	dword ptr [esp + 364], 16
	lea	ecx, [esp + 348]
	lea	edx, [esp + 352]
	lea	ebx, [esp + 356]
	push	edi
	push	eax
	mov	eax, dword ptr [ebp + 28]
	push	dword ptr [eax + 208]
	push	dword ptr [eax + 204]
	push	dword ptr [eax + 200]
	push	ecx
	push	edx
	push	ebx
	call	"?lodepng_convert_rgb@@YAIPAI00IIIPBULodePNGColorMode@@1@Z"
	add	esp, 32
	mov	edx, dword ptr [esp + 356]
	mov	eax, dword ptr [esp + 348]
	mov	ecx, dword ptr [esp + 352]
	mov	dword ptr [esp + 96], 0
	mov	dword ptr [esp + 92], 0
	mov	dword ptr [esp + 104], 0
	mov	dword ptr [esp + 100], 0
	mov	dword ptr [esp + 112], 0
	mov	dword ptr [esp + 108], 0
	mov	dword ptr [esp + 88], 16
	mov	dword ptr [esp + 84], 6
	mov	byte ptr [esp + 76], dh
	mov	byte ptr [esp + 77], dl
	mov	byte ptr [esp + 78], ch
	mov	byte ptr [esp + 79], cl
	mov	byte ptr [esp + 80], ah
	mov	byte ptr [esp + 81], al
	lea	eax, [esp + 84]
	mov	word ptr [esp + 82], -1
	lea	ecx, [esp + 76]
	push	eax
	push	1
	push	1
	push	ecx
	push	esi
	call	"?lodepng_compute_color_stats@@YAIPAULodePNGColorStats@@PBEIIPBULodePNGColorMode@@@Z"
	add	esp, 20
	mov	esi, eax
	mov	eax, dword ptr [esp + 92]
	test	eax, eax
	je	LBB84_45
# %bb.44:
	push	eax
	call	_free
	add	esp, 4
LBB84_45:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebx, dword ptr [ebp + 12]
	test	esi, esi
	mov	dword ptr [eax], esi
	je	LBB84_47
# %bb.46:
	mov	esi, dword ptr [ebp + 8]
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	jmp	LBB84_137
LBB84_47:
	mov	ecx, dword ptr [esp + 396]
	mov	edx, dword ptr [esp + 1444]
	mov	eax, dword ptr [esp + 1440]
	mov	esi, 8
	mov	dword ptr [esp + 48], edi       # 4-byte Spill
	mov	dword ptr [esp + 144], 0
	test	ecx, ecx
	mov	dword ptr [esp + 40], ecx       # 4-byte Spill
	mov	edi, edx
	setne	cl
	cmp	edx, 17
	mov	edx, 1
	setb	bh
	and	bh, cl
	cmp	eax, 8
	mov	ecx, 8
	cmova	esi, eax
	test	bh, bh
	cmove	esi, eax
	cmp	dword ptr [esp + 392], 0
	sete	al
	cmp	dword ptr [esp + 1452], 0
	setne	bl
	and	bl, al
	mov	eax, dword ptr [esp + 408]
	cmovne	ecx, esi
	cmp	esi, 8
	cmovae	ecx, esi
	mov	esi, dword ptr [esp + 412]
	cmp	esi, 3
	jb	LBB84_50
# %bb.48:
	mov	edx, 2
	cmp	esi, 5
	jb	LBB84_50
# %bb.49:
	xor	edx, edx
	cmp	esi, 16
	seta	dl
	lea	edx, [4*edx + 4]
LBB84_50:
	xor	bl, 1
	test	eax, eax
	mov	dword ptr [esp + 44], edx       # 4-byte Spill
	setne	al
	or	al, bh
	cmp	ecx, edx
	seta	ah
	cmp	dword ptr [esp + 1448], 0
	je	LBB84_59
# %bb.51:
	lea	edx, [esi + esi]
	cmp	edi, edx
	jb	LBB84_59
# %bb.52:
	dec	esi
	cmp	esi, 255
	ja	LBB84_59
# %bb.53:
	cmp	ecx, 8
	ja	LBB84_59
# %bb.54:
	mov	edx, eax
	or	dl, bl
	or	dl, ah
	je	LBB84_59
# %bb.55:
	mov	eax, dword ptr [esp + 136]
	test	eax, eax
	je	LBB84_63
# %bb.56:
	push	eax
	call	_free
	add	esp, 4
	cmp	dword ptr [esp + 412], 0
	mov	dword ptr [esp + 136], 0
	mov	dword ptr [esp + 140], 0
	jne	LBB84_64
# %bb.57:
	xor	esi, esi
LBB84_58:
	mov	dl, 1
	jmp	LBB84_77
LBB84_59:
	movzx	edx, bl
	mov	dword ptr [esp + 132], ecx
	lea	esi, [edx + edx + 4]
	add	edx, edx
	test	al, al
	cmovne	edx, esi
	cmp	edi, 17
	mov	dword ptr [esp + 128], edx
	jb	LBB84_62
# %bb.60:
	cmp	dword ptr [esp + 40], 0         # 4-byte Folded Reload
	je	LBB84_62
# %bb.61:
	movzx	edx, word ptr [esp + 400]
	mov	eax, -1
                                        # kill: def $cl killed $cl killed $ecx
	movzx	esi, word ptr [esp + 402]
	shl	eax, cl
	not	eax
	and	edx, eax
	and	esi, eax
	mov	dword ptr [esp + 148], edx
	movzx	edx, word ptr [esp + 404]
	mov	dword ptr [esp + 152], esi
	and	edx, eax
	mov	dword ptr [esp + 156], edx
	mov	dword ptr [esp + 144], 1
LBB84_62:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebx, dword ptr [ebp + 12]
	mov	dword ptr [eax], 0
	jmp	LBB84_87
LBB84_63:
	mov	dword ptr [esp + 136], 0
	mov	dword ptr [esp + 140], 0
LBB84_64:
	xor	ecx, ecx
	xor	eax, eax
	xor	ebx, ebx
LBB84_65:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_68 Depth 2
	mov	dl, byte ptr [esp + 4*ebx + 419]
	mov	dh, byte ptr [esp + 4*ebx + 418]
	test	eax, eax
	mov	byte ptr [esp + 40], dl         # 1-byte Spill
	mov	dl, byte ptr [esp + 4*ebx + 416]
	mov	byte ptr [esp + 28], dl         # 1-byte Spill
	mov	dl, byte ptr [esp + 4*ebx + 417]
	mov	byte ptr [esp + 24], dl         # 1-byte Spill
	jne	LBB84_71
# %bb.66:                               #   in Loop: Header=BB84_65 Depth=1
	mov	byte ptr [esp + 32], dh         # 1-byte Spill
	push	1024
	call	_malloc
	add	esp, 4
	mov	esi, 83
	test	eax, eax
	mov	dword ptr [esp + 136], eax
	je	LBB84_76
# %bb.67:                               #   in Loop: Header=BB84_65 Depth=1
	mov	ecx, -1024
	.p2align	4, 0x90
LBB84_68:                               #   Parent Loop BB84_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	byte ptr [eax + ecx + 1024], 0
	mov	eax, dword ptr [esp + 136]
	mov	byte ptr [eax + ecx + 1025], 0
	mov	eax, dword ptr [esp + 136]
	mov	byte ptr [eax + ecx + 1026], 0
	mov	eax, dword ptr [esp + 136]
	mov	byte ptr [eax + ecx + 1027], -1
	add	ecx, 4
	mov	eax, dword ptr [esp + 136]
	jne	LBB84_68
# %bb.69:                               #   in Loop: Header=BB84_65 Depth=1
	mov	dh, byte ptr [esp + 32]         # 1-byte Reload
	test	eax, eax
	je	LBB84_76
# %bb.70:                               #   in Loop: Header=BB84_65 Depth=1
	mov	ecx, dword ptr [esp + 140]
LBB84_71:                               #   in Loop: Header=BB84_65 Depth=1
	xor	esi, esi
	cmp	ecx, 255
	ja	LBB84_74
# %bb.72:                               #   in Loop: Header=BB84_65 Depth=1
	mov	dl, byte ptr [esp + 28]         # 1-byte Reload
	inc	ebx
	mov	byte ptr [eax + 4*ecx], dl
	mov	dl, byte ptr [esp + 24]         # 1-byte Reload
	mov	eax, dword ptr [esp + 136]
	mov	ecx, dword ptr [esp + 140]
	mov	byte ptr [eax + 4*ecx + 1], dl
	mov	dl, byte ptr [esp + 40]         # 1-byte Reload
	mov	eax, dword ptr [esp + 136]
	mov	ecx, dword ptr [esp + 140]
	mov	byte ptr [eax + 4*ecx + 2], dh
	mov	eax, dword ptr [esp + 136]
	mov	ecx, dword ptr [esp + 140]
	mov	byte ptr [eax + 4*ecx + 3], dl
	mov	ecx, dword ptr [esp + 140]
	inc	ecx
	cmp	ebx, dword ptr [esp + 412]
	mov	dword ptr [esp + 140], ecx
	je	LBB84_58
# %bb.73:                               #   in Loop: Header=BB84_65 Depth=1
	mov	eax, dword ptr [esp + 136]
	jmp	LBB84_65
LBB84_74:
	mov	esi, 108
LBB84_76:
	xor	edx, edx
LBB84_77:
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esp + 128], 3
	mov	dword ptr [esp + 132], ecx
	cmp	dword ptr [eax], 3
	jne	LBB84_86
# %bb.78:
	mov	eax, dword ptr [ebp + 28]
	mov	eax, dword ptr [eax + 132]
	cmp	eax, dword ptr [esp + 140]
	jb	LBB84_86
# %bb.79:
	mov	eax, dword ptr [ebp + 28]
	cmp	dword ptr [eax + 124], ecx
	jne	LBB84_86
# %bb.80:
	mov	eax, dword ptr [esp + 136]
	test	eax, eax
	je	LBB84_82
# %bb.81:
	push	eax
	mov	edi, edx
	call	_free
	mov	edx, edi
	add	esp, 4
LBB84_82:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	ecx, [esp + 128]
	movsd	xmm0, qword ptr [eax + 24]      # xmm0 = mem[0],zero
	movsd	qword ptr [ecx + 24], xmm0
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ecx + 16], xmm0
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	mov	eax, dword ptr [ebp + 28]
	movsd	qword ptr [ecx + 8], xmm1
	movsd	qword ptr [ecx], xmm0
	mov	ebx, dword ptr [eax + 128]
	test	ebx, ebx
	je	LBB84_86
# %bb.83:
	push	1024
	mov	edi, edx
	call	_malloc
	mov	edx, edi
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 136], eax
	je	LBB84_86
# %bb.84:
	mov	ecx, dword ptr [ebp + 28]
	mov	ecx, dword ptr [ecx + 132]
	shl	ecx, 2
	test	ecx, ecx
	je	LBB84_86
# %bb.85:
	push	ecx
	push	ebx
	push	eax
	call	_memcpy
	mov	edx, edi
	add	esp, 12
LBB84_86:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebx, dword ptr [ebp + 12]
	test	dl, dl
	mov	dword ptr [edi], esi
	je	LBB84_41
LBB84_87:
	mov	ecx, dword ptr [ebp + 28]
	cmp	dword ptr [ecx + 196], 0
	je	LBB84_90
# %bb.88:
	lea	ecx, [esp + 168]
	lea	eax, [esp + 172]
	lea	edx, [esp + 164]
	push	dword ptr [esp + 48]            # 4-byte Folded Reload
	lea	esi, [esp + 132]
	push	esi
	mov	esi, dword ptr [ebp + 28]
	push	dword ptr [esi + 208]
	mov	esi, dword ptr [ebp + 28]
	push	dword ptr [esi + 204]
	mov	esi, dword ptr [ebp + 28]
	push	dword ptr [esi + 200]
	push	eax
	push	ecx
	push	edx
	call	"?lodepng_convert_rgb@@YAIPAI00IIIPBULodePNGColorMode@@1@Z"
	mov	ecx, dword ptr [ebp + 28]
	add	esp, 32
	test	eax, eax
	je	LBB84_90
# %bb.89:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], 104
	jmp	LBB84_41
LBB84_90:
	mov	esi, dword ptr [ebp + 8]
LBB84_91:
	cmp	dword ptr [ecx + 340], 0
	je	LBB84_98
# %bb.92:
	xor	eax, eax
	cmp	dword ptr [ecx + 352], 20
	jb	LBB84_102
# %bb.93:
	mov	edx, dword ptr [ecx + 348]
	mov	cl, byte ptr [edx + 16]
	cmp	cl, 82
	je	LBB84_99
# %bb.94:
	cmp	cl, 71
	jne	LBB84_102
# %bb.95:
	cmp	byte ptr [edx + 17], 82
	jne	LBB84_102
# %bb.96:
	cmp	byte ptr [edx + 18], 65
	jne	LBB84_102
# %bb.97:
	xor	ecx, ecx
	cmp	byte ptr [edx + 19], 89
	sete	cl
	jmp	LBB84_103
LBB84_98:
	mov	eax, dword ptr [esp + 128]
	jmp	LBB84_105
LBB84_99:
	cmp	byte ptr [edx + 17], 71
	jne	LBB84_102
# %bb.100:
	cmp	byte ptr [edx + 18], 66
	jne	LBB84_102
# %bb.101:
	xor	eax, eax
	cmp	byte ptr [edx + 19], 32
	sete	al
LBB84_102:
	xor	ecx, ecx
LBB84_103:
	or	eax, ecx
	je	LBB84_119
# %bb.104:
	mov	eax, dword ptr [esp + 128]
	xor	edx, edx
	test	eax, -5
	sete	dl
	cmp	ecx, edx
	mov	ecx, dword ptr [ebp + 28]
	jne	LBB84_120
LBB84_105:
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	lea	edx, [ecx + 56]
	mov	dword ptr [esp + 40], edx       # 4-byte Spill
	cmp	dword ptr [esi], eax
	jne	LBB84_118
# %bb.106:
	mov	ecx, dword ptr [ecx + 124]
	mov	edx, dword ptr [esp + 132]
	cmp	ecx, edx
	jne	LBB84_122
# %bb.107:
	mov	edx, dword ptr [ebp + 28]
	mov	edx, dword ptr [edx + 136]
	cmp	edx, dword ptr [esp + 144]
	jne	LBB84_121
# %bb.108:
	test	edx, edx
	je	LBB84_112
# %bb.109:
	mov	esi, dword ptr [ebp + 28]
	mov	edx, dword ptr [esi + 140]
	cmp	edx, dword ptr [esp + 148]
	jne	LBB84_121
# %bb.110:
	mov	edx, dword ptr [esi + 144]
	cmp	edx, dword ptr [esp + 152]
	jne	LBB84_121
# %bb.111:
	mov	edx, dword ptr [esi + 148]
	cmp	edx, dword ptr [esp + 156]
	jne	LBB84_121
LBB84_112:
	mov	edx, dword ptr [ebp + 28]
	mov	esi, dword ptr [edx + 132]
	cmp	esi, dword ptr [esp + 140]
	jne	LBB84_121
# %bb.113:
	shl	esi, 2
	test	esi, esi
	je	LBB84_117
# %bb.114:
	mov	edx, dword ptr [ebp + 28]
	mov	edi, dword ptr [esp + 136]
	xor	ebx, ebx
	mov	dword ptr [esp + 24], edi       # 4-byte Spill
	mov	edx, dword ptr [edx + 128]
	mov	edi, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esp + 28], edx       # 4-byte Spill
LBB84_115:                              # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	movzx	edx, byte ptr [edx + ebx]
	cmp	dl, byte ptr [edi + ebx]
	jne	LBB84_121
# %bb.116:                              #   in Loop: Header=BB84_115 Depth=1
	inc	ebx
	cmp	esi, ebx
	jne	LBB84_115
LBB84_117:
	lea	ecx, [esp + 64]
	lea	edx, [esp + 72]
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	lea	eax, [esp + 120]
	push	eax
	push	dword ptr [ebp + 24]
	push	dword ptr [ebp + 20]
	push	dword ptr [ebp + 16]
	call	"?preProcessScanlines@@YAIPAPAEPAIPBEIIPBULodePNGInfo@@PBULodePNGEncoderSettings@@@Z"
	add	esp, 20
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	test	eax, eax
	mov	dword ptr [edi], eax
	jmp	LBB84_136
LBB84_118:
	mov	edx, dword ptr [esp + 132]
	jmp	LBB84_122
LBB84_119:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], 100
	jmp	LBB84_137
LBB84_120:
	cmp	dword ptr [ecx + 92], 1
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	eax, 102
	sbb	eax, 0
	mov	dword ptr [ecx + 380], eax
	jmp	LBB84_137
LBB84_121:
	mov	edx, ecx
LBB84_122:
	cmp	eax, 6
	ja	LBB84_125
# %bb.123:
	mov	ecx, 1
	jmp	dword ptr [4*eax + LJTI84_2]
LBB84_124:
	mov	ecx, 3
	jmp	LBB84_129
LBB84_125:
	cmp	eax, 255
LBB84_126:
	xor	ecx, ecx
	jmp	LBB84_129
LBB84_127:
	mov	ecx, 2
	jmp	LBB84_129
LBB84_128:
	mov	ecx, 4
LBB84_129:
	mov	ebx, dword ptr [ebp + 24]
	imul	ebx, dword ptr [ebp + 20]
	imul	ebx, edx
	imul	ebx, ecx
	add	ebx, 7
	shr	ebx, 3
	push	ebx
	call	_malloc
	add	esp, 4
	mov	esi, eax
	test	eax, eax
	jne	LBB84_132
# %bb.130:
	test	ebx, ebx
	je	LBB84_132
# %bb.131:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], 83
	jmp	LBB84_135
LBB84_132:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [edi], 0
	jne	LBB84_135
# %bb.133:
	lea	eax, [esp + 128]
	push	dword ptr [ebp + 24]
	push	dword ptr [ebp + 20]
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	eax
	push	dword ptr [ebp + 16]
	push	esi
	call	"?lodepng_convert@@YAIPAEPBEPBULodePNGColorMode@@2II@Z"
	add	esp, 24
	test	eax, eax
	mov	dword ptr [edi], eax
	jne	LBB84_135
# %bb.134:
	lea	ecx, [esp + 64]
	lea	edx, [esp + 72]
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	lea	eax, [esp + 120]
	push	eax
	push	dword ptr [ebp + 24]
	push	dword ptr [ebp + 20]
	push	esi
	call	"?preProcessScanlines@@YAIPAPAEPAIPBEIIPBULodePNGInfo@@PBULodePNGEncoderSettings@@@Z"
	add	esp, 20
	mov	dword ptr [edi], eax
LBB84_135:
	push	esi
	call	_free
	add	esp, 4
	cmp	dword ptr [edi], 0
LBB84_136:
	mov	ebx, dword ptr [ebp + 12]
	mov	esi, dword ptr [ebp + 8]
	je	LBB84_138
LBB84_137:
	lea	eax, [esp + 116]
	push	eax
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	push	dword ptr [esp + 64]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 12]
	mov	dword ptr [esi], eax
	mov	eax, dword ptr [esp + 16]
	mov	dword ptr [ebx], eax
	mov	eax, dword ptr [edi]
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB84_138:
	mov	esi, dword ptr [esp + 16]
	mov	ebx, dword ptr [esp + 20]
	lea	ecx, [esi + 8]
	cmp	ebx, ecx
	jae	LBB84_141
# %bb.139:
	shr	ebx
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	add	ebx, ecx
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_148
# %bb.140:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_142
LBB84_141:
	mov	eax, dword ptr [esp + 12]
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
LBB84_142:
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [eax + esi + 4], 169478669
	mov	dword ptr [eax + esi], 1196314761
	mov	dword ptr [edi], 0
	mov	eax, 77
	mov	esi, dword ptr [esp + 16]
	cmp	esi, -14
	jbe	LBB84_144
# %bb.143:
	mov	ebx, dword ptr [ebp + 12]
	mov	dword ptr [edi], eax
	jmp	LBB84_41
LBB84_144:
	mov	ebx, dword ptr [ebp + 12]
	sub	esi, -25
	jae	LBB84_204
# %bb.145:
	mov	ebx, dword ptr [esp + 20]
	mov	eax, dword ptr [esp + 124]
	mov	edx, dword ptr [esp + 128]
	mov	ecx, dword ptr [esp + 132]
	cmp	ebx, esi
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	dword ptr [esp + 24], edx       # 4-byte Spill
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	jae	LBB84_149
# %bb.146:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_203
# %bb.147:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_150
LBB84_148:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], 83
	jmp	LBB84_516
LBB84_149:
	mov	eax, dword ptr [esp + 12]
LBB84_150:
	mov	ebx, dword ptr [ebp + 20]
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [eax + esi - 25], 218103808
	mov	dword ptr [eax + esi - 21], 1380206665
	mov	ecx, 5725777
	mov	edx, ebx
	shr	edx, 24
	mov	byte ptr [eax + esi - 17], dl
	shl	edx, 2
	xor	edx, 980
	xor	ecx, dword ptr [edx + _lodepng_crc32_table]
	mov	edx, ebx
	shr	edx, 16
	mov	byte ptr [eax + esi - 16], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, ebx
	shr	edx, 8
	mov	byte ptr [eax + esi - 15], dl
	mov	byte ptr [eax + esi - 14], bl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	xor	ebx, ecx
	shr	ecx, 8
	movzx	edx, bl
	mov	ebx, dword ptr [ebp + 24]
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, ebx
	shr	edx, 24
	movzx	edi, cl
	shr	ecx, 8
	xor	edi, edx
	mov	byte ptr [eax + esi - 13], dl
	mov	edx, ebx
	xor	ecx, dword ptr [4*edi + _lodepng_crc32_table]
	shr	edx, 16
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	byte ptr [eax + esi - 12], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, ebx
	shr	edx, 8
	mov	byte ptr [eax + esi - 11], dl
	mov	byte ptr [eax + esi - 10], bl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	xor	ebx, ecx
	shr	ecx, 8
	movzx	edx, bl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	byte ptr [eax + esi - 9], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	mov	byte ptr [eax + esi - 8], dl
	xor	edx, ecx
	shr	ecx, 8
	mov	word ptr [eax + esi - 7], 0
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	movzx	edx, cl
	shr	ecx, 8
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	movzx	edx, cl
	shr	ecx, 8
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	byte ptr [eax + esi - 5], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	not	ecx
	mov	edx, ecx
	shr	edx, 24
	mov	byte ptr [eax + esi - 4], dl
	mov	edx, ecx
	shr	edx, 16
	mov	byte ptr [eax + esi - 3], dl
	mov	byte ptr [eax + esi - 2], ch
	mov	byte ptr [eax + esi - 1], cl
	mov	dword ptr [edi], 0
	mov	eax, dword ptr [esp + 320]
	test	eax, eax
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	je	LBB84_173
# %bb.151:
	mov	ecx, dword ptr [esp + 332]
	test	ecx, ecx
	mov	eax, ecx
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	je	LBB84_172
# %bb.152:
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	add	ecx, eax
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	jmp	LBB84_156
LBB84_153:                              #   in Loop: Header=BB84_156 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
LBB84_154:                              #   in Loop: Header=BB84_156 Depth=1
	movzx	edx, dl
	shl	eax, 24
	movzx	edi, byte ptr [esi + 3]
	shl	edx, 16
	or	edx, eax
	movzx	eax, cl
	shl	eax, 8
	or	eax, edx
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	or	edi, eax
	lea	eax, [edi + 12]
	add	eax, esi
	cmp	edi, -12
	cmovs	eax, edx
	cmovae	eax, edx
LBB84_155:                              #   in Loop: Header=BB84_156 Depth=1
	mov	ecx, eax
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	sub	ecx, dword ptr [esp + 32]       # 4-byte Folded Reload
	cmp	ecx, dword ptr [esp + 44]       # 4-byte Folded Reload
	jae	LBB84_172
LBB84_156:                              # =>This Inner Loop Header: Depth=1
	mov	ebx, dword ptr [eax]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	eax, 77
	bswap	ebx
	sub	ebx, -12
	jae	LBB84_515
# %bb.157:                              #   in Loop: Header=BB84_156 Depth=1
	mov	esi, dword ptr [esp + 16]
	mov	dword ptr [esp + 28], esi       # 4-byte Spill
	add	esi, ebx
	jb	LBB84_515
# %bb.158:                              #   in Loop: Header=BB84_156 Depth=1
	push	esi
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.159:                              #   in Loop: Header=BB84_156 Depth=1
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	test	ebx, ebx
	mov	dword ptr [esp + 12], eax
	mov	dword ptr [esp + 16], esi
	je	LBB84_161
# %bb.160:                              #   in Loop: Header=BB84_156 Depth=1
	add	eax, dword ptr [esp + 28]       # 4-byte Folded Reload
	push	ebx
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
LBB84_161:                              #   in Loop: Header=BB84_156 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esp + 20], esi
	cmp	edi, eax
	jae	LBB84_155
# %bb.162:                              #   in Loop: Header=BB84_156 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	esi, edi
	mov	eax, ecx
	sub	eax, edi
	cmp	eax, 12
	mov	eax, ecx
	jl	LBB84_155
# %bb.163:                              #   in Loop: Header=BB84_156 Depth=1
	movzx	eax, byte ptr [esi]
	movzx	edx, byte ptr [esi + 1]
	movzx	ecx, byte ptr [esi + 2]
	cmp	eax, 137
	jne	LBB84_154
# %bb.164:                              #   in Loop: Header=BB84_156 Depth=1
	cmp	dl, 80
	jne	LBB84_154
# %bb.165:                              #   in Loop: Header=BB84_156 Depth=1
	cmp	cl, 78
	jne	LBB84_154
# %bb.166:                              #   in Loop: Header=BB84_156 Depth=1
	cmp	byte ptr [esi + 3], 71
	mov	cl, 78
	jne	LBB84_154
# %bb.167:                              #   in Loop: Header=BB84_156 Depth=1
	cmp	byte ptr [esi + 4], 13
	jne	LBB84_154
# %bb.168:                              #   in Loop: Header=BB84_156 Depth=1
	cmp	byte ptr [esi + 5], 10
	jne	LBB84_154
# %bb.169:                              #   in Loop: Header=BB84_156 Depth=1
	cmp	byte ptr [esi + 6], 26
	jne	LBB84_153
# %bb.170:                              #   in Loop: Header=BB84_156 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 7], 10
	jne	LBB84_154
# %bb.171:                              #   in Loop: Header=BB84_156 Depth=1
	add	esi, 8
	mov	eax, esi
	jmp	LBB84_155
LBB84_172:
	mov	dword ptr [edi], 0
LBB84_173:
	cmp	dword ptr [esp + 304], 0
	mov	ebx, dword ptr [ebp + 12]
	je	LBB84_197
# %bb.174:
	mov	eax, dword ptr [esp + 308]
	mov	dword ptr [esp + 392], 0
	mov	dword ptr [esp + 84], 0
	lea	esi, [eax - 1]
LBB84_175:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [esi + 1], 0
	lea	esi, [esi + 1]
	jne	LBB84_175
# %bb.176:
	sub	esi, eax
	lea	eax, [esi - 1]
	cmp	eax, 79
	jb	LBB84_178
# %bb.177:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], 89
	jmp	LBB84_41
LBB84_178:
	mov	edx, dword ptr [ebp + 28]
	mov	eax, dword ptr [esp + 312]
	mov	ecx, dword ptr [esp + 316]
	mov	edx, dword ptr [edx + 80]
	test	edx, edx
	je	LBB84_180
# %bb.179:
	lea	ebx, [esp + 84]
	lea	edi, [esp + 392]
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	push	ecx
	push	eax
	push	ebx
	push	edi
	call	edx
	add	esp, 20
	mov	ebx, 111
	jmp	LBB84_181
LBB84_180:
	lea	ebx, [esp + 392]
	lea	edx, [esp + 84]
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	push	ecx
	push	eax
	push	edx
	push	ebx
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
	add	esp, 20
	mov	ebx, eax
LBB84_181:
	test	eax, eax
	jne	LBB84_196
# %bb.182:
	mov	eax, dword ptr [esp + 84]
	mov	ecx, dword ptr [esp + 16]
	lea	eax, [esi + eax + 2]
	add	ecx, eax
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	jae	LBB84_184
# %bb.183:
	mov	ebx, 77
	jmp	LBB84_196
LBB84_184:
	sub	dword ptr [esp + 4], -12        # 4-byte Folded Spill
	mov	ebx, 77
	jae	LBB84_196
# %bb.185:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, dword ptr [esp + 4]        # 4-byte Folded Reload
	jae	LBB84_188
# %bb.186:
	shr	ebx
	add	ebx, dword ptr [esp + 4]        # 4-byte Folded Reload
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_229
# %bb.187:
	mov	edi, eax
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_189
LBB84_188:
	mov	edi, dword ptr [esp + 12]
LBB84_189:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	add	edi, eax
	mov	dword ptr [esp + 16], eax
	mov	eax, ecx
	sub	edi, ecx
	shr	eax, 24
	mov	byte ptr [edi - 12], al
	mov	eax, ecx
	lea	ebx, [edi - 12]
	shr	eax, 16
	mov	byte ptr [edi - 11], al
	lea	eax, [edi - 4]
	mov	byte ptr [edi - 10], ch
	mov	byte ptr [edi - 9], cl
	mov	dword ptr [edi - 8], 1346585449
	push	esi
	push	dword ptr [esp + 312]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	push	eax
	call	_memcpy
	add	esp, 12
	mov	word ptr [esi + edi - 4], 0
	mov	eax, dword ptr [esp + 84]
	test	eax, eax
	je	LBB84_191
# %bb.190:
	lea	ecx, [ebx + esi + 10]
	push	eax
	push	dword ptr [esp + 396]
	push	ecx
	call	_memcpy
	add	esp, 12
LBB84_191:
	mov	eax, dword ptr [ebx]
	mov	ecx, 0
	bswap	eax
	mov	edx, eax
	add	edx, 4
	je	LBB84_195
# %bb.192:
	add	edi, -8
	mov	ecx, -1
LBB84_193:                              # =>This Inner Loop Header: Depth=1
	movzx	esi, byte ptr [edi]
	movzx	ebx, cl
	shr	ecx, 8
	inc	edi
	xor	ebx, esi
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	dec	edx
	jne	LBB84_193
# %bb.194:
	not	ecx
LBB84_195:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	bswap	ecx
	xor	ebx, ebx
	mov	dword ptr [edx + eax], ecx
LBB84_196:
	push	dword ptr [esp + 392]
	call	_free
	add	esp, 4
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	test	ebx, ebx
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [edi], ebx
	mov	ebx, dword ptr [ebp + 12]
	jne	LBB84_137
LBB84_197:
	cmp	dword ptr [esp + 296], 0
	je	LBB84_207
# %bb.198:
	mov	esi, dword ptr [esp + 16]
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	eax, 77
	cmp	esi, -1
	je	LBB84_204
# %bb.199:
	sub	esi, -13
	jae	LBB84_204
# %bb.200:
	mov	ebx, dword ptr [esp + 20]
	mov	edi, dword ptr [esp + 300]
	cmp	ebx, esi
	jae	LBB84_205
# %bb.201:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_203
# %bb.202:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_206
LBB84_203:
	mov	ebx, dword ptr [ebp + 12]
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	eax, 83
LBB84_204:
	mov	dword ptr [edi], eax
	jmp	LBB84_41
LBB84_205:
	mov	eax, dword ptr [esp + 12]
LBB84_206:
	mov	ecx, edi
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [eax + esi - 13], 16777216
	mov	dword ptr [eax + esi - 9], 1111970419
	movzx	edx, cl
	mov	byte ptr [eax + esi - 5], cl
	mov	ecx, -15721261
	xor	edx, 49
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, ecx
	shr	edx, 24
	mov	byte ptr [eax + esi - 4], dl
	mov	edx, ecx
	shr	edx, 16
	mov	byte ptr [eax + esi - 3], dl
	mov	byte ptr [eax + esi - 2], ch
	mov	byte ptr [eax + esi - 1], cl
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [ecx], 0
LBB84_207:
	cmp	dword ptr [esp + 252], 0
	je	LBB84_215
# %bb.208:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -5
	ja	LBB84_514
# %bb.209:
	sub	esi, -16
	jae	LBB84_514
# %bb.210:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_213
# %bb.211:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.212:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_214
LBB84_213:
	mov	eax, dword ptr [esp + 12]
LBB84_214:
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [eax + esi - 16], 67108864
	mov	dword ptr [eax + esi - 12], 1095582055
	mov	edx, 5054024
	mov	ecx, dword ptr [esp + 256]
	mov	ebx, ecx
	shr	ebx, 24
	mov	byte ptr [eax + esi - 8], bl
	shl	ebx, 2
	xor	ebx, 896
	xor	edx, dword ptr [ebx + _lodepng_crc32_table]
	mov	ebx, ecx
	shr	ebx, 16
	mov	byte ptr [eax + esi - 7], bl
	xor	ebx, edx
	shr	edx, 8
	movzx	ebx, bl
	xor	edx, dword ptr [4*ebx + _lodepng_crc32_table]
	mov	ebx, ecx
	shr	ebx, 8
	mov	byte ptr [eax + esi - 6], bl
	mov	byte ptr [eax + esi - 5], cl
	xor	ebx, edx
	shr	edx, 8
	movzx	ebx, bl
	xor	edx, dword ptr [4*ebx + _lodepng_crc32_table]
	xor	ecx, edx
	shr	edx, 8
	movzx	ecx, cl
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	not	edx
	mov	ecx, edx
	shr	ecx, 24
	mov	byte ptr [eax + esi - 4], cl
	mov	ecx, edx
	shr	ecx, 16
	mov	byte ptr [eax + esi - 3], cl
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	byte ptr [eax + esi - 2], dh
	mov	byte ptr [eax + esi - 1], dl
	mov	dword ptr [ecx], 0
LBB84_215:
	cmp	dword ptr [esp + 260], 0
	je	LBB84_223
# %bb.216:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -33
	ja	LBB84_514
# %bb.217:
	sub	esi, -44
	jae	LBB84_514
# %bb.218:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_221
# %bb.219:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.220:
	mov	edi, eax
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_222
LBB84_221:
	mov	edi, dword ptr [esp + 12]
LBB84_222:
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [edi + esi - 44], 536870912
	mov	dword ptr [edi + esi - 40], 1297238115
	mov	eax, dword ptr [esp + 264]
	bswap	eax
	mov	dword ptr [edi + esi - 36], eax
	mov	edx, dword ptr [esp + 268]
	mov	dword ptr [esp + 36], edx       # 4-byte Spill
	bswap	edx
	mov	dword ptr [edi + esi - 32], edx
	mov	edx, dword ptr [esp + 272]
	mov	dword ptr [esp + 52], edx       # 4-byte Spill
	bswap	edx
	mov	dword ptr [edi + esi - 28], edx
	mov	ecx, dword ptr [esp + 276]
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	bswap	ecx
	mov	dword ptr [edi + esi - 24], ecx
	mov	dword ptr [esp + 48], ecx       # 4-byte Spill
	mov	edx, dword ptr [esp + 280]
	mov	dword ptr [esp + 32], edx       # 4-byte Spill
	bswap	edx
	mov	dword ptr [edi + esi - 20], edx
	mov	edx, dword ptr [esp + 284]
	mov	dword ptr [esp + 28], edx       # 4-byte Spill
	bswap	edx
	mov	dword ptr [edi + esi - 16], edx
	mov	edx, dword ptr [esp + 288]
	mov	dword ptr [esp + 24], edx       # 4-byte Spill
	bswap	edx
	mov	dword ptr [edi + esi - 12], edx
	mov	edx, dword ptr [esp + 292]
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	bswap	edx
	mov	dword ptr [edi + esi - 8], edx
	mov	edx, 16777215
	xor	edx, dword ptr [_lodepng_crc32_table+624]
	movzx	ebx, byte ptr [edi + esi - 39]
	movzx	ecx, dl
	shr	edx, 8
	xor	ecx, ebx
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	movzx	ecx, byte ptr [edi + esi - 38]
	movzx	ebx, dl
	shr	edx, 8
	xor	ebx, ecx
	movzx	ecx, byte ptr [edi + esi - 37]
	xor	edx, dword ptr [4*ebx + _lodepng_crc32_table]
	movzx	ebx, dl
	shr	edx, 8
	xor	ebx, ecx
	xor	edx, dword ptr [4*ebx + _lodepng_crc32_table]
	mov	ebx, dword ptr [esp + 36]       # 4-byte Reload
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	movzx	eax, byte ptr [edi + esi - 35]
	movzx	ecx, dl
	shr	edx, 8
	xor	ecx, eax
	movzx	eax, byte ptr [edi + esi - 34]
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	movzx	ecx, dl
	shr	edx, 8
	xor	ecx, eax
	movzx	eax, byte ptr [edi + esi - 33]
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	movzx	ecx, dl
	shr	edx, 8
	xor	ecx, eax
	mov	eax, ebx
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	shr	eax, 24
	movzx	ecx, dl
	shr	edx, 8
	xor	ecx, eax
	mov	eax, ebx
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	shr	eax, 16
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	shr	eax, 8
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	xor	ebx, edx
	shr	edx, 8
	movzx	eax, bl
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	movzx	ecx, dl
	shr	eax, 24
	shr	edx, 8
	xor	ecx, eax
	mov	eax, ebx
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	shr	eax, 16
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	shr	eax, 8
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	xor	ebx, edx
	shr	edx, 8
	movzx	eax, bl
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, dword ptr [esp + 48]       # 4-byte Reload
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	movzx	eax, byte ptr [edi + esi - 23]
	movzx	ecx, dl
	shr	edx, 8
	xor	ecx, eax
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	mov	eax, ecx
	shr	eax, 8
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	xor	ecx, edx
	shr	edx, 8
	movzx	eax, cl
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	shr	eax, 24
	movzx	ecx, dl
	shr	edx, 8
	xor	ecx, eax
	mov	eax, ebx
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	shr	eax, 16
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	shr	eax, 8
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	xor	ebx, edx
	shr	edx, 8
	movzx	eax, bl
	mov	ebx, dword ptr [esp + 28]       # 4-byte Reload
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	movzx	ecx, dl
	shr	eax, 24
	shr	edx, 8
	xor	ecx, eax
	mov	eax, ebx
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	shr	eax, 16
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	shr	eax, 8
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	xor	ebx, edx
	shr	edx, 8
	movzx	eax, bl
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	movzx	ecx, dl
	shr	eax, 24
	shr	edx, 8
	xor	ecx, eax
	mov	eax, ebx
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	shr	eax, 16
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	shr	eax, 8
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	xor	ebx, edx
	shr	edx, 8
	movzx	eax, bl
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	movzx	ecx, dl
	shr	eax, 24
	shr	edx, 8
	xor	ecx, eax
	mov	eax, ebx
	xor	edx, dword ptr [4*ecx + _lodepng_crc32_table]
	shr	eax, 16
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, ebx
	shr	eax, 8
	xor	eax, edx
	shr	edx, 8
	movzx	eax, al
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	xor	ebx, edx
	shr	edx, 8
	movzx	eax, bl
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	not	edx
	bswap	edx
	mov	dword ptr [edi + esi - 4], edx
	mov	dword ptr [eax], 0
LBB84_223:
	cmp	dword ptr [esp + 128], 3
	jne	LBB84_241
# %bb.224:
	mov	eax, dword ptr [esp + 140]
	mov	esi, dword ptr [esp + 16]
	lea	eax, [eax + 2*eax]
	mov	dword ptr [esp + 4], esi        # 4-byte Spill
	mov	edi, eax
	add	esi, eax
	mov	eax, 77
	jb	LBB84_514
# %bb.225:
	sub	esi, -12
	jae	LBB84_514
# %bb.226:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_230
# %bb.227:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.228:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_231
LBB84_229:
	mov	ebx, 83
	jmp	LBB84_196
LBB84_230:
	mov	eax, dword ptr [esp + 12]
LBB84_231:
	mov	dword ptr [esp + 16], esi
	add	esi, eax
	mov	edx, edi
	mov	ebx, edi
	sub	esi, edi
	shr	edx, 24
	lea	ecx, [esi - 12]
	mov	byte ptr [esi - 12], dl
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	mov	ecx, edi
	shr	ecx, 16
	mov	byte ptr [esi - 11], cl
	mov	byte ptr [esi - 10], bh
	mov	byte ptr [esi - 9], bl
	mov	dword ptr [esi - 8], 1163152464
	cmp	dword ptr [esp + 140], 0
	je	LBB84_235
# %bb.232:
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	lea	eax, [ecx + eax + 10]
	xor	ecx, ecx
LBB84_233:                              # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [esp + 136]
	movzx	edx, byte ptr [edx + 4*ecx]
	mov	byte ptr [eax - 2], dl
	mov	edx, dword ptr [esp + 136]
	movzx	edx, byte ptr [edx + 4*ecx + 1]
	mov	byte ptr [eax - 1], dl
	mov	edx, dword ptr [esp + 136]
	movzx	edx, byte ptr [edx + 4*ecx + 2]
	inc	ecx
	mov	byte ptr [eax], dl
	add	eax, 3
	cmp	ecx, dword ptr [esp + 140]
	jne	LBB84_233
# %bb.234:
	mov	edi, dword ptr [esp + 24]       # 4-byte Reload
	mov	ah, byte ptr [edi + 2]
	mov	al, byte ptr [edi + 3]
	mov	dl, byte ptr [edi]
	mov	cl, byte ptr [edi + 1]
	mov	edi, eax
LBB84_235:
	movzx	eax, dl
	movzx	ecx, cl
	shl	eax, 24
	shl	ecx, 16
	or	ecx, eax
	mov	eax, edi
	movzx	edx, ah
	movzx	edi, al
	shl	edx, 8
	or	edx, ecx
	or	edi, edx
	mov	ecx, edi
	add	ecx, 4
	je	LBB84_239
# %bb.236:
	add	esi, -8
	mov	edx, -1
LBB84_237:                              # =>This Inner Loop Header: Depth=1
	movzx	ebx, byte ptr [esi]
	movzx	eax, dl
	shr	edx, 8
	inc	esi
	xor	eax, ebx
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	dec	ecx
	jne	LBB84_237
# %bb.238:
	not	edx
	jmp	LBB84_240
LBB84_239:
	xor	edx, edx
LBB84_240:
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	bswap	edx
	mov	dword ptr [eax + edi + 8], edx
	mov	dword ptr [ecx], 0
LBB84_241:
	mov	eax, dword ptr [ebp + 28]
	cmp	dword ptr [eax + 108], 0
	je	LBB84_259
# %bb.242:
	mov	eax, dword ptr [esp + 128]
	mov	ecx, eax
	or	ecx, 4
	cmp	ecx, 6
	jne	LBB84_260
# %bb.243:
	mov	eax, dword ptr [esp + 140]
	mov	esi, dword ptr [esp + 16]
	lea	eax, [eax + 2*eax]
	mov	dword ptr [esp + 4], esi        # 4-byte Spill
	mov	edi, eax
	add	esi, eax
	mov	eax, 77
	jb	LBB84_514
# %bb.244:
	sub	esi, -12
	jae	LBB84_514
# %bb.245:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_248
# %bb.246:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.247:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_249
LBB84_248:
	mov	eax, dword ptr [esp + 12]
LBB84_249:
	mov	dword ptr [esp + 16], esi
	add	esi, eax
	mov	edx, edi
	mov	ebx, edi
	sub	esi, edi
	shr	edx, 24
	lea	ecx, [esi - 12]
	mov	byte ptr [esi - 12], dl
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	mov	ecx, edi
	shr	ecx, 16
	mov	byte ptr [esi - 11], cl
	mov	byte ptr [esi - 10], bh
	mov	byte ptr [esi - 9], bl
	mov	dword ptr [esi - 8], 1163152464
	cmp	dword ptr [esp + 140], 0
	je	LBB84_253
# %bb.250:
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	lea	eax, [ecx + eax + 10]
	xor	ecx, ecx
LBB84_251:                              # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [esp + 136]
	movzx	edx, byte ptr [edx + 4*ecx]
	mov	byte ptr [eax - 2], dl
	mov	edx, dword ptr [esp + 136]
	movzx	edx, byte ptr [edx + 4*ecx + 1]
	mov	byte ptr [eax - 1], dl
	mov	edx, dword ptr [esp + 136]
	movzx	edx, byte ptr [edx + 4*ecx + 2]
	inc	ecx
	mov	byte ptr [eax], dl
	add	eax, 3
	cmp	ecx, dword ptr [esp + 140]
	jne	LBB84_251
# %bb.252:
	mov	edi, dword ptr [esp + 24]       # 4-byte Reload
	mov	ah, byte ptr [edi + 2]
	mov	al, byte ptr [edi + 3]
	mov	dl, byte ptr [edi]
	mov	cl, byte ptr [edi + 1]
	mov	edi, eax
LBB84_253:
	movzx	eax, dl
	movzx	ecx, cl
	shl	eax, 24
	shl	ecx, 16
	or	ecx, eax
	mov	eax, edi
	movzx	edx, ah
	movzx	edi, al
	shl	edx, 8
	or	edx, ecx
	or	edi, edx
	mov	ecx, edi
	add	ecx, 4
	je	LBB84_257
# %bb.254:
	add	esi, -8
	mov	edx, -1
LBB84_255:                              # =>This Inner Loop Header: Depth=1
	movzx	ebx, byte ptr [esi]
	movzx	eax, dl
	shr	edx, 8
	inc	esi
	xor	eax, ebx
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	dec	ecx
	jne	LBB84_255
# %bb.256:
	not	edx
	jmp	LBB84_258
LBB84_257:
	xor	edx, edx
LBB84_258:
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	bswap	edx
	mov	dword ptr [eax + edi + 8], edx
	mov	dword ptr [ecx], 0
LBB84_259:
	mov	eax, dword ptr [esp + 128]
LBB84_260:
	test	eax, eax
	je	LBB84_267
# %bb.261:
	cmp	eax, 2
	je	LBB84_273
# %bb.262:
	cmp	eax, 3
	jne	LBB84_299
# %bb.263:
	mov	eax, dword ptr [esp + 140]
	test	eax, eax
	je	LBB84_299
# %bb.264:
	mov	ebx, eax
	mov	eax, dword ptr [esp + 136]
LBB84_265:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [eax + 4*ebx - 1], -1
	mov	ecx, ebx
	jne	LBB84_279
# %bb.266:                              #   in Loop: Header=BB84_265 Depth=1
	dec	ebx
	jne	LBB84_265
	jmp	LBB84_299
LBB84_267:
	cmp	dword ptr [esp + 144], 0
	je	LBB84_299
# %bb.268:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -3
	ja	LBB84_514
# %bb.269:
	sub	esi, -14
	jae	LBB84_514
# %bb.270:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_284
# %bb.271:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.272:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_285
LBB84_273:
	cmp	dword ptr [esp + 144], 0
	je	LBB84_299
# %bb.274:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -7
	ja	LBB84_514
# %bb.275:
	sub	esi, -18
	jae	LBB84_514
# %bb.276:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_286
# %bb.277:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.278:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_287
LBB84_279:
	mov	esi, dword ptr [esp + 16]
	mov	eax, ebx
	mov	eax, 77
	mov	ecx, esi
	add	ecx, ebx
	jb	LBB84_514
# %bb.280:
	cmp	ecx, -13
	ja	LBB84_514
# %bb.281:
	mov	eax, ebx
	mov	eax, dword ptr [esp + 20]
	lea	edi, [esi + ebx + 12]
	cmp	eax, edi
	jae	LBB84_289
# %bb.282:
	shr	eax
	add	eax, esi
	lea	eax, [ebx + eax + 12]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	push	eax
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.283:
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esp + 20], ecx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_290
LBB84_284:
	mov	eax, dword ptr [esp + 12]
LBB84_285:
	mov	dword ptr [esp + 16], esi
	lea	ecx, [eax + esi - 14]
	mov	dword ptr [eax + esi - 14], 33554432
	mov	dword ptr [eax + esi - 10], 1397641844
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	cl, byte ptr [esp + 149]
	mov	byte ptr [eax + esi - 6], cl
	mov	cl, byte ptr [esp + 148]
	mov	byte ptr [eax + esi - 5], cl
	mov	al, 2
	jmp	LBB84_288
LBB84_286:
	mov	eax, dword ptr [esp + 12]
LBB84_287:
	mov	dword ptr [esp + 16], esi
	lea	ecx, [eax + esi - 18]
	mov	dword ptr [eax + esi - 18], 100663296
	mov	dword ptr [eax + esi - 14], 1397641844
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	cl, byte ptr [esp + 149]
	mov	byte ptr [eax + esi - 10], cl
	mov	cl, byte ptr [esp + 148]
	mov	byte ptr [eax + esi - 9], cl
	mov	cl, byte ptr [esp + 153]
	mov	byte ptr [eax + esi - 8], cl
	mov	cl, byte ptr [esp + 152]
	mov	byte ptr [eax + esi - 7], cl
	mov	cl, byte ptr [esp + 157]
	mov	byte ptr [eax + esi - 6], cl
	mov	cl, byte ptr [esp + 156]
	mov	byte ptr [eax + esi - 5], cl
	mov	al, 6
LBB84_288:
	xor	edx, edx
	xor	ebx, ebx
	xor	ecx, ecx
	jmp	LBB84_293
LBB84_289:
	mov	eax, dword ptr [esp + 12]
LBB84_290:
	lea	ecx, [eax + esi]
	mov	dword ptr [esp + 16], edi
	mov	edx, ebx
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	ecx, ebx
	shr	ecx, 24
	mov	byte ptr [eax + esi], cl
	mov	ecx, ebx
	shr	ecx, 16
	mov	byte ptr [eax + esi + 1], cl
	mov	byte ptr [eax + esi + 2], dh
	mov	byte ptr [eax + esi + 3], dl
	mov	dword ptr [eax + esi + 4], 1397641844
	lea	eax, [eax + esi + 8]
	xor	ecx, ecx
LBB84_291:                              # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [esp + 136]
	movzx	edx, byte ptr [edx + 4*ecx + 3]
	mov	byte ptr [eax + ecx], dl
	inc	ecx
	mov	edx, ebx
	cmp	ebx, ecx
	jne	LBB84_291
# %bb.292:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	cl, byte ptr [eax]
	mov	bl, byte ptr [eax + 1]
	mov	dl, byte ptr [eax + 2]
	mov	al, byte ptr [eax + 3]
LBB84_293:
	movzx	ecx, cl
	movzx	esi, bl
	movzx	edi, dl
	shl	ecx, 24
	shl	esi, 16
	shl	edi, 8
	or	esi, ecx
	or	edi, esi
	movzx	esi, al
	or	esi, edi
	mov	edi, esi
	add	esi, 4
	je	LBB84_297
# %bb.294:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, -1
	lea	ebx, [eax + 4]
LBB84_295:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [ebx]
	movzx	eax, dl
	shr	edx, 8
	inc	ebx
	xor	eax, ecx
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	dec	esi
	jne	LBB84_295
# %bb.296:
	not	edx
	jmp	LBB84_298
LBB84_297:
	xor	edx, edx
LBB84_298:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	bswap	edx
	mov	dword ptr [eax + edi + 8], edx
LBB84_299:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [eax], 0
	cmp	dword ptr [esp + 160], 0
	je	LBB84_328
# %bb.300:
	mov	eax, dword ptr [esp + 128]
	cmp	eax, 6
	ja	LBB84_327
# %bb.301:
	jmp	dword ptr [4*eax + LJTI84_3]
LBB84_302:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -3
	ja	LBB84_514
# %bb.303:
	sub	esi, -14
	jae	LBB84_514
# %bb.304:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_317
# %bb.305:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.306:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_318
LBB84_307:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -7
	ja	LBB84_514
# %bb.308:
	sub	esi, -18
	jae	LBB84_514
# %bb.309:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_319
# %bb.310:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.311:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_320
LBB84_312:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -1
	je	LBB84_514
# %bb.313:
	sub	esi, -13
	jae	LBB84_514
# %bb.314:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_321
# %bb.315:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.316:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_322
LBB84_317:
	mov	eax, dword ptr [esp + 12]
LBB84_318:
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [eax + esi - 14], 33554432
	mov	dword ptr [eax + esi - 10], 1145523042
	lea	edi, [eax + esi - 14]
	mov	dword ptr [esp + 4], 2          # 4-byte Folded Spill
	mov	dl, byte ptr [esp + 165]
	mov	byte ptr [eax + esi - 6], dl
	lea	esi, [eax + esi - 5]
	jmp	LBB84_323
LBB84_319:
	mov	eax, dword ptr [esp + 12]
LBB84_320:
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [eax + esi - 18], 100663296
	mov	dword ptr [eax + esi - 14], 1145523042
	lea	edi, [eax + esi - 18]
	mov	dword ptr [esp + 4], 6          # 4-byte Folded Spill
	mov	dl, byte ptr [esp + 165]
	mov	byte ptr [eax + esi - 10], dl
	mov	dl, byte ptr [esp + 164]
	mov	byte ptr [eax + esi - 9], dl
	mov	dl, byte ptr [esp + 169]
	mov	byte ptr [eax + esi - 8], dl
	mov	dl, byte ptr [esp + 168]
	mov	byte ptr [eax + esi - 7], dl
	mov	dl, byte ptr [esp + 173]
	mov	byte ptr [eax + esi - 6], dl
	lea	esi, [eax + esi - 5]
	mov	edx, dword ptr [esp + 172]
	jmp	LBB84_324
LBB84_321:
	mov	eax, dword ptr [esp + 12]
LBB84_322:
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [eax + esi - 13], 16777216
	mov	dword ptr [eax + esi - 9], 1145523042
	lea	edi, [eax + esi - 13]
	lea	esi, [eax + esi - 5]
	mov	dword ptr [esp + 4], 1          # 4-byte Folded Spill
LBB84_323:
	mov	edx, dword ptr [esp + 164]
LBB84_324:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	byte ptr [esi], dl
	lea	ebx, [edi + 5]
	mov	edx, -1908338682
	lea	esi, [eax + 3]
LBB84_325:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [ebx]
	movzx	eax, dl
	shr	edx, 8
	inc	ebx
	xor	eax, ecx
	xor	edx, dword ptr [4*eax + _lodepng_crc32_table]
	dec	esi
	jne	LBB84_325
# %bb.326:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	not	edx
	bswap	edx
	mov	dword ptr [edi + eax + 8], edx
LBB84_327:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [eax], 0
LBB84_328:
	cmp	dword ptr [esp + 236], 0
	je	LBB84_336
# %bb.329:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -10
	ja	LBB84_514
# %bb.330:
	sub	esi, -21
	jae	LBB84_514
# %bb.331:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_334
# %bb.332:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.333:
	mov	edi, eax
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_335
LBB84_334:
	mov	edi, dword ptr [esp + 12]
LBB84_335:
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [edi + esi - 21], 150994944
	mov	dword ptr [edi + esi - 17], 1935231088
	mov	eax, dword ptr [esp + 240]
	mov	ecx, eax
	mov	ebx, eax
	bswap	ecx
	shr	ebx, 22
	mov	dword ptr [edi + esi - 13], ecx
	and	ebx, -4
	mov	edx, dword ptr [esp + 244]
	xor	ebx, 624
	mov	ecx, edx
	bswap	ecx
	mov	dword ptr [edi + esi - 9], ecx
	mov	ecx, 6912154
	xor	ecx, dword ptr [ebx + _lodepng_crc32_table]
	mov	ebx, eax
	shr	ebx, 16
	xor	ebx, ecx
	shr	ecx, 8
	movzx	ebx, bl
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	mov	ebx, eax
	shr	ebx, 8
	xor	ebx, ecx
	shr	ecx, 8
	movzx	ebx, bl
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	xor	eax, ecx
	shr	ecx, 8
	movzx	eax, al
	xor	ecx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, edx
	shr	eax, 24
	movzx	ebx, cl
	shr	ecx, 8
	xor	ebx, eax
	mov	eax, edx
	xor	ecx, dword ptr [4*ebx + _lodepng_crc32_table]
	shr	eax, 16
	xor	eax, ecx
	shr	ecx, 8
	movzx	eax, al
	xor	ecx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, edx
	shr	eax, 8
	xor	eax, ecx
	shr	ecx, 8
	movzx	eax, al
	xor	ecx, dword ptr [4*eax + _lodepng_crc32_table]
	xor	edx, ecx
	shr	ecx, 8
	movzx	eax, dl
	xor	ecx, dword ptr [4*eax + _lodepng_crc32_table]
	mov	eax, dword ptr [esp + 248]
	mov	byte ptr [edi + esi - 5], al
	xor	eax, ecx
	shr	ecx, 8
	movzx	eax, al
	xor	ecx, dword ptr [4*eax + _lodepng_crc32_table]
	not	ecx
	mov	eax, ecx
	shr	eax, 24
	mov	byte ptr [edi + esi - 4], al
	mov	eax, ecx
	shr	eax, 16
	mov	byte ptr [edi + esi - 3], al
	mov	byte ptr [edi + esi - 2], ch
	mov	byte ptr [edi + esi - 1], cl
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [ecx], 0
LBB84_336:
	mov	eax, dword ptr [esp + 324]
	test	eax, eax
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	je	LBB84_358
# %bb.337:
	mov	ecx, dword ptr [esp + 336]
	test	ecx, ecx
	mov	eax, ecx
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	je	LBB84_357
# %bb.338:
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	add	eax, ecx
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	jmp	LBB84_341
LBB84_339:                              #   in Loop: Header=BB84_341 Depth=1
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	movzx	edx, dl
	shl	eax, 24
	shl	edx, 16
	or	edx, eax
	movzx	eax, cl
	shl	eax, 8
	movzx	ecx, byte ptr [edi + 3]
	or	eax, edx
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	or	ecx, eax
	lea	eax, [ecx + 12]
	add	eax, edi
	cmp	ecx, -12
	cmovs	eax, edx
	cmovae	eax, edx
LBB84_340:                              #   in Loop: Header=BB84_341 Depth=1
	mov	ecx, eax
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	sub	ecx, dword ptr [esp + 28]       # 4-byte Folded Reload
	cmp	ecx, dword ptr [esp + 32]       # 4-byte Folded Reload
	jae	LBB84_357
LBB84_341:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebx, dword ptr [eax]
	mov	eax, 77
	bswap	ebx
	sub	ebx, -12
	jae	LBB84_514
# %bb.342:                              #   in Loop: Header=BB84_341 Depth=1
	mov	esi, dword ptr [esp + 16]
	mov	edi, esi
	add	esi, ebx
	jb	LBB84_514
# %bb.343:                              #   in Loop: Header=BB84_341 Depth=1
	push	esi
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.344:                              #   in Loop: Header=BB84_341 Depth=1
	test	ebx, ebx
	mov	dword ptr [esp + 12], eax
	mov	dword ptr [esp + 16], esi
	je	LBB84_346
# %bb.345:                              #   in Loop: Header=BB84_341 Depth=1
	add	eax, edi
	push	ebx
	push	dword ptr [esp + 8]             # 4-byte Folded Reload
	push	eax
	call	_memcpy
	add	esp, 12
LBB84_346:                              #   in Loop: Header=BB84_341 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esp + 20], esi
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	jae	LBB84_340
# %bb.347:                              #   in Loop: Header=BB84_341 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	eax, ecx
	sub	eax, dword ptr [esp + 4]        # 4-byte Folded Reload
	cmp	eax, 12
	mov	eax, ecx
	jl	LBB84_340
# %bb.348:                              #   in Loop: Header=BB84_341 Depth=1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	movzx	eax, byte ptr [ecx]
	movzx	edx, byte ptr [ecx + 1]
	movzx	ecx, byte ptr [ecx + 2]
	cmp	eax, 137
	jne	LBB84_339
# %bb.349:                              #   in Loop: Header=BB84_341 Depth=1
	cmp	dl, 80
	jne	LBB84_339
# %bb.350:                              #   in Loop: Header=BB84_341 Depth=1
	cmp	cl, 78
	jne	LBB84_339
# %bb.351:                              #   in Loop: Header=BB84_341 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	cl, 78
	cmp	byte ptr [esi + 3], 71
	jne	LBB84_339
# %bb.352:                              #   in Loop: Header=BB84_341 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 4], 13
	jne	LBB84_339
# %bb.353:                              #   in Loop: Header=BB84_341 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 5], 10
	jne	LBB84_339
# %bb.354:                              #   in Loop: Header=BB84_341 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 6], 26
	jne	LBB84_339
# %bb.355:                              #   in Loop: Header=BB84_341 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 7], 10
	jne	LBB84_339
# %bb.356:                              #   in Loop: Header=BB84_341 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	add	eax, 8
	jmp	LBB84_340
LBB84_357:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [eax], 0
LBB84_358:
	mov	edx, dword ptr [ebp + 28]
	mov	dword ptr [esp + 392], 0
	mov	dword ptr [esp + 84], 0
	mov	ecx, dword ptr [esp + 72]
	mov	eax, dword ptr [esp + 64]
	mov	edx, dword ptr [edx + 80]
	test	edx, edx
	je	LBB84_360
# %bb.359:
	lea	esi, [esp + 84]
	lea	ebx, [esp + 392]
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	push	ecx
	push	eax
	push	esi
	push	ebx
	call	edx
	add	esp, 20
	mov	esi, 111
	jmp	LBB84_361
LBB84_360:
	lea	esi, [esp + 392]
	lea	edx, [esp + 84]
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	push	ecx
	push	eax
	push	edx
	push	esi
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
	add	esp, 20
	mov	esi, eax
LBB84_361:
	test	eax, eax
	jne	LBB84_379
# %bb.362:
	mov	ebx, dword ptr [esp + 16]
	mov	eax, dword ptr [esp + 84]
	mov	esi, 77
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	add	ebx, eax
	jb	LBB84_379
# %bb.363:
	sub	ebx, -12
	jae	LBB84_379
# %bb.364:
	mov	esi, dword ptr [esp + 20]
	mov	ecx, dword ptr [esp + 392]
	mov	edi, eax
	cmp	esi, ebx
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	jae	LBB84_367
# %bb.365:
	shr	esi
	add	esi, ebx
	push	esi
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	mov	ecx, eax
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	je	LBB84_376
# %bb.366:
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esp + 20], esi
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_368
LBB84_367:
	mov	eax, dword ptr [esp + 12]
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
LBB84_368:
	mov	dword ptr [esp + 16], ebx
	add	ebx, dword ptr [esp + 24]       # 4-byte Folded Reload
	mov	ecx, edi
	sub	ebx, edi
	lea	eax, [ebx - 12]
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	eax, edi
	shr	eax, 24
	mov	byte ptr [ebx - 12], al
	mov	eax, edi
	shr	eax, 16
	test	edi, edi
	mov	byte ptr [ebx - 11], al
	mov	byte ptr [ebx - 10], ch
	mov	byte ptr [ebx - 9], cl
	mov	dword ptr [ebx - 8], 1413563465
	je	LBB84_372
# %bb.369:
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	esi, edi
	add	eax, 8
	push	edi
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	push	eax
	call	_memcpy
	add	esp, 12
	cmp	edi, -4
	je	LBB84_377
# %bb.370:
	mov	eax, 587065670
	cmp	edi, -3
	mov	ecx, edi
	je	LBB84_375
# %bb.371:
	lea	ecx, [edi + 4]
	mov	eax, edi
	jmp	LBB84_373
LBB84_372:
	mov	ecx, 4
LBB84_373:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	dec	ecx
	lea	edx, [eax + edx + 5]
	mov	eax, 587065670
LBB84_374:                              # =>This Inner Loop Header: Depth=1
	movzx	esi, byte ptr [edx]
	movzx	ebx, al
	shr	eax, 8
	inc	edx
	xor	ebx, esi
	xor	eax, dword ptr [4*ebx + _lodepng_crc32_table]
	dec	ecx
	jne	LBB84_374
LBB84_375:
	not	eax
	jmp	LBB84_378
LBB84_376:
	mov	esi, 83
	jmp	LBB84_379
LBB84_377:
	xor	eax, eax
LBB84_378:
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	bswap	eax
	xor	esi, esi
	mov	dword ptr [ecx + edi + 8], eax
LBB84_379:
	push	dword ptr [esp + 392]
	call	_free
	add	esp, 4
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	test	esi, esi
	mov	ebx, dword ptr [ebp + 12]
	mov	dword ptr [edi], esi
	mov	esi, dword ptr [ebp + 8]
	jne	LBB84_137
# %bb.380:
	cmp	dword ptr [esp + 208], 0
	je	LBB84_388
# %bb.381:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	cmp	esi, -8
	ja	LBB84_514
# %bb.382:
	sub	esi, -19
	jae	LBB84_514
# %bb.383:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, esi
	jae	LBB84_386
# %bb.384:
	shr	ebx
	add	ebx, esi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.385:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_387
LBB84_386:
	mov	eax, dword ptr [esp + 12]
LBB84_387:
	mov	dword ptr [esp + 16], esi
	mov	dword ptr [eax + esi - 19], 117440512
	mov	dword ptr [eax + esi - 15], 1162692980
	mov	ecx, dword ptr [esp + 212]
	shr	ecx, 8
	movzx	edx, cl
	mov	byte ptr [eax + esi - 11], cl
	mov	ecx, 445477
	xor	edx, 48
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 212]
	mov	byte ptr [eax + esi - 10], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 216]
	mov	byte ptr [eax + esi - 9], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 220]
	mov	byte ptr [eax + esi - 8], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 224]
	mov	byte ptr [eax + esi - 7], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 228]
	mov	byte ptr [eax + esi - 6], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	mov	edx, dword ptr [esp + 232]
	mov	byte ptr [eax + esi - 5], dl
	xor	edx, ecx
	shr	ecx, 8
	movzx	edx, dl
	xor	ecx, dword ptr [4*edx + _lodepng_crc32_table]
	not	ecx
	mov	edx, ecx
	shr	edx, 24
	mov	byte ptr [eax + esi - 4], dl
	mov	edx, ecx
	shr	edx, 16
	mov	byte ptr [eax + esi - 3], dl
	mov	byte ptr [eax + esi - 2], ch
	mov	byte ptr [eax + esi - 1], cl
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [ecx], 0
LBB84_388:
	cmp	dword ptr [esp + 176], 0
	je	LBB84_423
# %bb.389:
	xor	eax, eax
LBB84_390:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_391 Depth 2
                                        #     Child Loop BB84_394 Depth 2
                                        #     Child Loop BB84_398 Depth 2
                                        #     Child Loop BB84_399 Depth 2
                                        #     Child Loop BB84_416 Depth 2
	mov	ecx, eax
	mov	eax, dword ptr [esp + 180]
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	edi, dword ptr [eax + 4*ecx]
	lea	esi, [edi - 1]
	mov	eax, esi
LBB84_391:                              #   Parent Loop BB84_390 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [eax + 1], 0
	lea	eax, [eax + 1]
	jne	LBB84_391
# %bb.392:                              #   in Loop: Header=BB84_390 Depth=1
	sub	eax, edi
	cmp	eax, 79
	ja	LBB84_484
# %bb.393:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, -1
LBB84_394:                              #   Parent Loop BB84_390 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [edi + eax + 1], 0
	lea	eax, [eax + 1]
	jne	LBB84_394
# %bb.395:                              #   in Loop: Header=BB84_390 Depth=1
	test	eax, eax
	je	LBB84_485
# %bb.396:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, dword ptr [ebp + 28]
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	cmp	dword ptr [eax + 116], 0
	mov	eax, dword ptr [esp + 184]
	mov	eax, dword ptr [eax + 4*ecx]
	je	LBB84_403
# %bb.397:                              #   in Loop: Header=BB84_390 Depth=1
	lea	ecx, [eax - 1]
	mov	dword ptr [esp + 392], 0
	mov	dword ptr [esp + 84], 0
LBB84_398:                              #   Parent Loop BB84_390 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [ecx + 1], 0
	lea	ecx, [ecx + 1]
	jne	LBB84_398
LBB84_399:                              #   Parent Loop BB84_390 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [esi + 1], 0
	lea	esi, [esi + 1]
	jne	LBB84_399
# %bb.400:                              #   in Loop: Header=BB84_390 Depth=1
	sub	esi, edi
	lea	edx, [esi - 1]
	cmp	edx, 79
	jae	LBB84_489
# %bb.401:                              #   in Loop: Header=BB84_390 Depth=1
	mov	edx, dword ptr [ebp + 28]
	sub	ecx, eax
	mov	edx, dword ptr [edx + 80]
	test	edx, edx
	je	LBB84_404
# %bb.402:                              #   in Loop: Header=BB84_390 Depth=1
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	push	ecx
	push	eax
	lea	eax, [esp + 96]
	push	eax
	lea	eax, [esp + 408]
	push	eax
	call	edx
	add	esp, 20
	mov	dword ptr [esp + 24], 111       # 4-byte Folded Spill
	jmp	LBB84_405
LBB84_403:                              #   in Loop: Header=BB84_390 Depth=1
	lea	ecx, [esp + 12]
	mov	edx, edi
	push	eax
	call	"?addChunk_tEXt@@YAIPAUucvector@@PBD1@Z"
	add	esp, 4
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	jmp	LBB84_420
LBB84_404:                              #   in Loop: Header=BB84_390 Depth=1
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	push	ecx
	push	eax
	lea	eax, [esp + 96]
	push	eax
	lea	eax, [esp + 408]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
	add	esp, 20
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
LBB84_405:                              #   in Loop: Header=BB84_390 Depth=1
	test	eax, eax
	jne	LBB84_419
# %bb.406:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, dword ptr [esp + 84]
	mov	ebx, dword ptr [esp + 16]
	mov	dword ptr [esp + 24], 77        # 4-byte Folded Spill
	lea	ecx, [esi + eax + 2]
	mov	eax, ebx
	mov	dword ptr [esp + 28], ebx       # 4-byte Spill
	add	ebx, ecx
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	jb	LBB84_419
# %bb.407:                              #   in Loop: Header=BB84_390 Depth=1
	sub	ebx, -12
	jae	LBB84_419
# %bb.408:                              #   in Loop: Header=BB84_390 Depth=1
	mov	ecx, dword ptr [esp + 20]
	cmp	ecx, ebx
	jae	LBB84_411
# %bb.409:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, ecx
	shr	eax
	add	eax, ebx
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	push	eax
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
	je	LBB84_422
# %bb.410:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	mov	dword ptr [esp + 20], eax
	mov	dword ptr [esp + 12], ecx
	jmp	LBB84_412
LBB84_411:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, dword ptr [esp + 12]
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
LBB84_412:                              #   in Loop: Header=BB84_390 Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, dword ptr [esp + 44]       # 4-byte Reload
	mov	dword ptr [esp + 16], ebx
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	lea	eax, [edx + ecx]
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	eax, ebx
	shr	eax, 24
	mov	byte ptr [edx + ecx], al
	mov	eax, ebx
	shr	eax, 16
	mov	byte ptr [edx + ecx + 1], al
	lea	eax, [edx + ecx + 8]
	mov	byte ptr [edx + ecx + 2], bh
	mov	byte ptr [edx + ecx + 3], bl
	mov	dword ptr [edx + ecx + 4], 1951945850
	push	esi
	push	edi
	mov	dword ptr [esp + 40], eax       # 4-byte Spill
	push	eax
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	word ptr [esi + eax + 8], 0
	mov	edi, eax
	mov	eax, dword ptr [esp + 84]
	test	eax, eax
	je	LBB84_414
# %bb.413:                              #   in Loop: Header=BB84_390 Depth=1
	lea	ecx, [edi + esi + 10]
	push	eax
	push	dword ptr [esp + 396]
	push	ecx
	call	_memcpy
	add	esp, 12
LBB84_414:                              #   in Loop: Header=BB84_390 Depth=1
	mov	edx, dword ptr [edi]
	mov	ecx, 0
	mov	dword ptr [esp + 24], 0         # 4-byte Folded Spill
	bswap	edx
	mov	edi, edx
	add	edx, 4
	je	LBB84_418
# %bb.415:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	lea	esi, [ecx + eax + 4]
	mov	ecx, -1
LBB84_416:                              #   Parent Loop BB84_390 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebx, byte ptr [esi]
	movzx	eax, cl
	shr	ecx, 8
	inc	esi
	xor	eax, ebx
	xor	ecx, dword ptr [4*eax + _lodepng_crc32_table]
	dec	edx
	jne	LBB84_416
# %bb.417:                              #   in Loop: Header=BB84_390 Depth=1
	not	ecx
LBB84_418:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	bswap	ecx
	mov	dword ptr [eax + edi], ecx
LBB84_419:                              #   in Loop: Header=BB84_390 Depth=1
	push	dword ptr [esp + 392]
	call	_free
	add	esp, 4
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
LBB84_420:                              #   in Loop: Header=BB84_390 Depth=1
	mov	ebx, dword ptr [ebp + 12]
	mov	esi, dword ptr [ebp + 8]
	test	eax, eax
	mov	dword ptr [edi], eax
	jne	LBB84_137
# %bb.421:                              #   in Loop: Header=BB84_390 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	inc	eax
	cmp	eax, dword ptr [esp + 176]
	jne	LBB84_390
	jmp	LBB84_425
LBB84_422:                              #   in Loop: Header=BB84_390 Depth=1
	mov	dword ptr [esp + 24], 83        # 4-byte Folded Spill
	jmp	LBB84_419
LBB84_423:
	mov	eax, dword ptr [ebp + 28]
	mov	ebx, dword ptr [ebp + 12]
	mov	esi, dword ptr [ebp + 8]
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [eax + 112], 0
	je	LBB84_437
LBB84_424:
	lea	ecx, [esp + 12]
	mov	edx, offset "??_C@_07FFJHAIOD@LodePNG?$AA@"
	push	dword ptr ["?LODEPNG_VERSION_STRING@@3PBDB"]
	call	"?addChunk_tEXt@@YAIPAUucvector@@PBD1@Z"
	add	esp, 4
	test	eax, eax
	mov	dword ptr [edi], eax
	jne	LBB84_137
	jmp	LBB84_437
LBB84_425:
	mov	ecx, dword ptr [ebp + 28]
	mov	ebx, dword ptr [ebp + 12]
	mov	esi, dword ptr [ebp + 8]
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [ecx + 112], 0
	je	LBB84_437
# %bb.426:
	test	eax, eax
	je	LBB84_424
# %bb.427:
	mov	ecx, dword ptr [esp + 180]
	mov	eax, -1
	jmp	LBB84_429
LBB84_428:                              #   in Loop: Header=BB84_429 Depth=1
	inc	eax
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	je	LBB84_424
LBB84_429:                              # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [ecx + 4*eax + 4]
	cmp	byte ptr [edx], 76
	jne	LBB84_428
# %bb.430:                              #   in Loop: Header=BB84_429 Depth=1
	cmp	byte ptr [edx + 1], 111
	jne	LBB84_428
# %bb.431:                              #   in Loop: Header=BB84_429 Depth=1
	cmp	byte ptr [edx + 2], 100
	jne	LBB84_428
# %bb.432:                              #   in Loop: Header=BB84_429 Depth=1
	cmp	byte ptr [edx + 3], 101
	jne	LBB84_428
# %bb.433:                              #   in Loop: Header=BB84_429 Depth=1
	cmp	byte ptr [edx + 4], 80
	jne	LBB84_428
# %bb.434:                              #   in Loop: Header=BB84_429 Depth=1
	cmp	byte ptr [edx + 5], 78
	jne	LBB84_428
# %bb.435:                              #   in Loop: Header=BB84_429 Depth=1
	cmp	byte ptr [edx + 6], 71
	jne	LBB84_428
# %bb.436:                              #   in Loop: Header=BB84_429 Depth=1
	cmp	byte ptr [edx + 7], 0
	jne	LBB84_428
LBB84_437:
	cmp	dword ptr [esp + 188], 0
	je	LBB84_486
# %bb.438:
	mov	dword ptr [esp + 28], 0         # 4-byte Folded Spill
LBB84_439:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_440 Depth 2
                                        #     Child Loop BB84_443 Depth 2
                                        #     Child Loop BB84_446 Depth 2
                                        #     Child Loop BB84_447 Depth 2
                                        #     Child Loop BB84_449 Depth 2
                                        #     Child Loop BB84_451 Depth 2
                                        #     Child Loop BB84_478 Depth 2
	mov	eax, dword ptr [esp + 192]
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4*ecx]
	lea	edi, [eax - 1]
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	eax, edi
LBB84_440:                              #   Parent Loop BB84_439 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [eax + 1], 0
	lea	eax, [eax + 1]
	jne	LBB84_440
# %bb.441:                              #   in Loop: Header=BB84_439 Depth=1
	sub	eax, dword ptr [esp + 24]       # 4-byte Folded Reload
	cmp	eax, 79
	ja	LBB84_484
# %bb.442:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, -1
LBB84_443:                              #   Parent Loop BB84_439 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	cmp	byte ptr [ecx + eax + 1], 0
	lea	eax, [eax + 1]
	jne	LBB84_443
# %bb.444:                              #   in Loop: Header=BB84_439 Depth=1
	test	eax, eax
	je	LBB84_485
# %bb.445:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 204]
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 200]
	mov	esi, dword ptr [eax + 4*edx]
	mov	eax, dword ptr [esp + 196]
	mov	ecx, dword ptr [ecx + 4*edx]
	mov	eax, dword ptr [eax + 4*edx]
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	lea	ecx, [esi - 1]
	mov	dword ptr [esp + 52], esi       # 4-byte Spill
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	dword ptr [esp + 48], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp + 28]
	mov	eax, dword ptr [eax + 116]
	mov	dword ptr [esp + 392], 0
	mov	dword ptr [esp + 84], 0
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
LBB84_446:                              #   Parent Loop BB84_439 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [eax + 1], 0
	lea	eax, [eax + 1]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	jne	LBB84_446
LBB84_447:                              #   Parent Loop BB84_439 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [edi + 1], 0
	lea	edi, [edi + 1]
	jne	LBB84_447
# %bb.448:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 48]       # 4-byte Reload
	lea	esi, [eax - 1]
LBB84_449:                              #   Parent Loop BB84_439 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [esi + 1], 0
	lea	esi, [esi + 1]
	jne	LBB84_449
# %bb.450:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	sub	edi, dword ptr [esp + 24]       # 4-byte Folded Reload
	lea	ebx, [eax - 1]
LBB84_451:                              #   Parent Loop BB84_439 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [ebx + 1], 0
	lea	ebx, [ebx + 1]
	jne	LBB84_451
# %bb.452:                              #   in Loop: Header=BB84_439 Depth=1
	lea	eax, [edi - 1]
	cmp	eax, 79
	jae	LBB84_489
# %bb.453:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	sub	eax, dword ptr [esp + 52]       # 4-byte Folded Reload
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	je	LBB84_458
# %bb.454:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [ebp + 28]
	mov	eax, dword ptr [eax + 80]
	test	eax, eax
	je	LBB84_456
# %bb.455:                              #   in Loop: Header=BB84_439 Depth=1
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	push	dword ptr [esp + 8]             # 4-byte Folded Reload
	push	dword ptr [esp + 60]            # 4-byte Folded Reload
	lea	ecx, [esp + 96]
	push	ecx
	lea	ecx, [esp + 408]
	push	ecx
	call	eax
	add	esp, 20
	mov	dword ptr [esp + 36], 111       # 4-byte Folded Spill
	jmp	LBB84_457
LBB84_456:                              #   in Loop: Header=BB84_439 Depth=1
	push	dword ptr [esp + 40]            # 4-byte Folded Reload
	push	dword ptr [esp + 8]             # 4-byte Folded Reload
	push	dword ptr [esp + 60]            # 4-byte Folded Reload
	lea	eax, [esp + 96]
	push	eax
	lea	eax, [esp + 408]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
	add	esp, 20
	mov	dword ptr [esp + 36], eax       # 4-byte Spill
LBB84_457:                              #   in Loop: Header=BB84_439 Depth=1
	test	eax, eax
	jne	LBB84_481
LBB84_458:                              #   in Loop: Header=BB84_439 Depth=1
	sub	esi, dword ptr [esp + 48]       # 4-byte Folded Reload
	sub	ebx, dword ptr [esp + 44]       # 4-byte Folded Reload
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	je	LBB84_460
# %bb.459:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 84]
LBB84_460:                              #   in Loop: Header=BB84_439 Depth=1
	lea	ecx, [edi + esi]
	mov	dword ptr [esp + 36], 77        # 4-byte Folded Spill
	add	ecx, ebx
	lea	eax, [eax + ecx + 5]
	mov	ecx, dword ptr [esp + 16]
	mov	edx, eax
	mov	dword ptr [esp + 68], eax       # 4-byte Spill
	add	edx, ecx
	mov	eax, ecx
	mov	dword ptr [esp + 344], ecx      # 4-byte Spill
	mov	dword ptr [esp + 60], edx       # 4-byte Spill
	jb	LBB84_481
# %bb.461:                              #   in Loop: Header=BB84_439 Depth=1
	sub	dword ptr [esp + 60], -12       # 4-byte Folded Spill
	jae	LBB84_481
# %bb.462:                              #   in Loop: Header=BB84_439 Depth=1
	mov	ecx, dword ptr [esp + 20]
	cmp	ecx, dword ptr [esp + 60]       # 4-byte Folded Reload
	jae	LBB84_465
# %bb.463:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, ecx
	shr	eax
	add	eax, dword ptr [esp + 60]       # 4-byte Folded Reload
	mov	dword ptr [esp + 36], eax       # 4-byte Spill
	push	eax
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	mov	dword ptr [esp + 56], eax       # 4-byte Spill
	je	LBB84_483
# %bb.464:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	mov	dword ptr [esp + 20], eax
	mov	dword ptr [esp + 12], ecx
	jmp	LBB84_466
LBB84_465:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 12]
	mov	dword ptr [esp + 56], eax       # 4-byte Spill
LBB84_466:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 60]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 344]      # 4-byte Reload
	mov	edx, dword ptr [esp + 56]       # 4-byte Reload
	mov	dword ptr [esp + 16], eax
	lea	eax, [edx + ecx]
	mov	dword ptr [esp + 36], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 68]       # 4-byte Reload
	shr	eax, 24
	mov	byte ptr [edx + ecx], al
	mov	eax, dword ptr [esp + 68]       # 4-byte Reload
	shr	eax, 16
	mov	byte ptr [edx + ecx + 1], al
	mov	eax, dword ptr [esp + 68]       # 4-byte Reload
	mov	byte ptr [edx + ecx + 2], ah
	mov	byte ptr [edx + ecx + 3], al
	mov	dword ptr [edx + ecx + 4], 1951945833
	lea	eax, [edx + ecx + 8]
	push	edi
	push	dword ptr [esp + 28]            # 4-byte Folded Reload
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	push	eax
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	mov	byte ptr [edi + eax + 8], 0
	setne	byte ptr [edi + eax + 9]
	mov	byte ptr [edi + eax + 10], 0
	add	edi, 11
	test	esi, esi
	je	LBB84_468
# %bb.467:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	add	eax, edi
	push	esi
	push	dword ptr [esp + 52]            # 4-byte Folded Reload
	push	eax
	call	_memcpy
	add	esp, 12
LBB84_468:                              #   in Loop: Header=BB84_439 Depth=1
	mov	ecx, dword ptr [esp + 36]       # 4-byte Reload
	lea	eax, [esi + edi]
	lea	esi, [esi + edi + 1]
	test	ebx, ebx
	mov	byte ptr [ecx + eax], 0
	je	LBB84_470
# %bb.469:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	add	eax, esi
	push	ebx
	push	dword ptr [esp + 48]            # 4-byte Folded Reload
	push	eax
	call	_memcpy
	add	esp, 12
LBB84_470:                              #   in Loop: Header=BB84_439 Depth=1
	cmp	dword ptr [esp + 32], 0         # 4-byte Folded Reload
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	lea	ecx, [ebx + esi]
	lea	eax, [ebx + esi + 1]
	mov	byte ptr [edx + ecx], 0
	je	LBB84_473
# %bb.471:                              #   in Loop: Header=BB84_439 Depth=1
	mov	ecx, dword ptr [esp + 84]
	test	ecx, ecx
	je	LBB84_476
# %bb.472:                              #   in Loop: Header=BB84_439 Depth=1
	add	eax, dword ptr [esp + 36]       # 4-byte Folded Reload
	push	ecx
	push	dword ptr [esp + 396]
	jmp	LBB84_475
LBB84_473:                              #   in Loop: Header=BB84_439 Depth=1
	cmp	dword ptr [esp + 4], 0          # 4-byte Folded Reload
	je	LBB84_476
# %bb.474:                              #   in Loop: Header=BB84_439 Depth=1
	add	eax, dword ptr [esp + 36]       # 4-byte Folded Reload
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	push	dword ptr [esp + 56]            # 4-byte Folded Reload
LBB84_475:                              #   in Loop: Header=BB84_439 Depth=1
	push	eax
	call	_memcpy
	add	esp, 12
LBB84_476:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, 0
	mov	dword ptr [esp + 36], 0         # 4-byte Folded Spill
	mov	edi, dword ptr [eax]
	bswap	edi
	mov	edx, edi
	add	edx, 4
	je	LBB84_480
# %bb.477:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 344]      # 4-byte Reload
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	lea	esi, [ecx + eax + 4]
	mov	ecx, -1
LBB84_478:                              #   Parent Loop BB84_439 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebx, byte ptr [esi]
	movzx	eax, cl
	shr	ecx, 8
	inc	esi
	xor	eax, ebx
	xor	ecx, dword ptr [4*eax + _lodepng_crc32_table]
	dec	edx
	jne	LBB84_478
# %bb.479:                              #   in Loop: Header=BB84_439 Depth=1
	not	ecx
LBB84_480:                              #   in Loop: Header=BB84_439 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	bswap	ecx
	mov	dword ptr [eax + edi], ecx
LBB84_481:                              #   in Loop: Header=BB84_439 Depth=1
	push	dword ptr [esp + 392]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebx, dword ptr [ebp + 12]
	mov	esi, dword ptr [ebp + 8]
	test	eax, eax
	mov	dword ptr [edi], eax
	jne	LBB84_137
# %bb.482:                              #   in Loop: Header=BB84_439 Depth=1
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	inc	ecx
	cmp	ecx, dword ptr [esp + 188]
	mov	eax, ecx
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	jne	LBB84_439
	jmp	LBB84_486
LBB84_483:                              #   in Loop: Header=BB84_439 Depth=1
	mov	dword ptr [esp + 36], 83        # 4-byte Folded Spill
	jmp	LBB84_481
LBB84_484:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], 66
	jmp	LBB84_516
LBB84_485:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], 67
	jmp	LBB84_516
LBB84_486:
	mov	eax, dword ptr [esp + 328]
	test	eax, eax
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	je	LBB84_509
# %bb.487:
	mov	ecx, dword ptr [esp + 340]
	test	ecx, ecx
	mov	eax, ecx
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	je	LBB84_508
# %bb.488:
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	add	ecx, eax
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	dword ptr [esp + 40], ecx       # 4-byte Spill
	jmp	LBB84_492
LBB84_489:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edi], 89
	jmp	LBB84_516
LBB84_490:                              #   in Loop: Header=BB84_492 Depth=1
	movzx	edx, dl
	shl	eax, 24
	shl	edx, 16
	or	edx, eax
	movzx	eax, cl
	shl	eax, 8
	or	eax, edx
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	movzx	ecx, byte ptr [edx + 3]
	or	ecx, eax
	lea	eax, [ecx + 12]
	add	eax, edx
	mov	edx, dword ptr [esp + 40]       # 4-byte Reload
	cmp	ecx, -12
	cmovs	eax, edx
	cmovae	eax, edx
LBB84_491:                              #   in Loop: Header=BB84_492 Depth=1
	mov	ecx, eax
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	sub	ecx, dword ptr [esp + 24]       # 4-byte Folded Reload
	cmp	ecx, dword ptr [esp + 28]       # 4-byte Folded Reload
	jae	LBB84_508
LBB84_492:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebx, dword ptr [eax]
	mov	eax, 77
	bswap	ebx
	sub	ebx, -12
	jae	LBB84_514
# %bb.493:                              #   in Loop: Header=BB84_492 Depth=1
	mov	esi, dword ptr [esp + 16]
	mov	edi, esi
	add	edi, ebx
	jb	LBB84_514
# %bb.494:                              #   in Loop: Header=BB84_492 Depth=1
	push	edi
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.495:                              #   in Loop: Header=BB84_492 Depth=1
	test	ebx, ebx
	mov	dword ptr [esp + 12], eax
	mov	dword ptr [esp + 16], edi
	je	LBB84_497
# %bb.496:                              #   in Loop: Header=BB84_492 Depth=1
	add	eax, esi
	push	ebx
	push	dword ptr [esp + 8]             # 4-byte Folded Reload
	push	eax
	call	_memcpy
	add	esp, 12
LBB84_497:                              #   in Loop: Header=BB84_492 Depth=1
	mov	eax, dword ptr [esp + 40]       # 4-byte Reload
	mov	dword ptr [esp + 20], edi
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	jae	LBB84_491
# %bb.498:                              #   in Loop: Header=BB84_492 Depth=1
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	mov	eax, ecx
	sub	eax, dword ptr [esp + 4]        # 4-byte Folded Reload
	cmp	eax, 12
	mov	eax, ecx
	jl	LBB84_491
# %bb.499:                              #   in Loop: Header=BB84_492 Depth=1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	movzx	eax, byte ptr [ecx]
	movzx	edx, byte ptr [ecx + 1]
	movzx	ecx, byte ptr [ecx + 2]
	cmp	eax, 137
	jne	LBB84_490
# %bb.500:                              #   in Loop: Header=BB84_492 Depth=1
	cmp	dl, 80
	jne	LBB84_490
# %bb.501:                              #   in Loop: Header=BB84_492 Depth=1
	cmp	cl, 78
	jne	LBB84_490
# %bb.502:                              #   in Loop: Header=BB84_492 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	cl, 78
	cmp	byte ptr [esi + 3], 71
	jne	LBB84_490
# %bb.503:                              #   in Loop: Header=BB84_492 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 4], 13
	jne	LBB84_490
# %bb.504:                              #   in Loop: Header=BB84_492 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 5], 10
	jne	LBB84_490
# %bb.505:                              #   in Loop: Header=BB84_492 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 6], 26
	jne	LBB84_490
# %bb.506:                              #   in Loop: Header=BB84_492 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmp	byte ptr [esi + 7], 10
	jne	LBB84_490
# %bb.507:                              #   in Loop: Header=BB84_492 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	add	eax, 8
	jmp	LBB84_491
LBB84_508:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [eax], 0
LBB84_509:
	mov	esi, dword ptr [esp + 16]
	mov	eax, 77
	mov	edi, esi
	sub	edi, -12
	jae	LBB84_514
# %bb.510:
	mov	ebx, dword ptr [esp + 20]
	cmp	ebx, edi
	jae	LBB84_517
# %bb.511:
	shr	ebx
	add	ebx, edi
	push	ebx
	push	dword ptr [esp + 16]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB84_513
# %bb.512:
	mov	dword ptr [esp + 20], ebx
	mov	dword ptr [esp + 12], eax
	jmp	LBB84_518
LBB84_513:
	mov	eax, 83
LBB84_514:
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
LBB84_515:
	mov	dword ptr [edi], eax
LBB84_516:
	mov	ebx, dword ptr [ebp + 12]
	jmp	LBB84_41
LBB84_517:
	mov	eax, dword ptr [esp + 12]
LBB84_518:
	mov	dword ptr [esp + 16], edi
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [eax + esi], 0
	mov	dword ptr [eax + esi + 4], 1145980233
	mov	dword ptr [eax + esi + 8], -2107620690
	mov	dword ptr [edi], 0
	jmp	LBB84_516
	.section	.rdata,"dr"
	.p2align	2
LJTI84_0:
	.long	LBB84_12
	.long	LBB84_21
	.long	LBB84_10
	.long	LBB84_14
	.long	LBB84_10
	.long	LBB84_21
	.long	LBB84_10
LJTI84_1:
	.long	LBB84_22
	.long	LBB84_21
	.long	LBB84_19
	.long	LBB84_24
	.long	LBB84_19
	.long	LBB84_21
	.long	LBB84_19
LJTI84_2:
	.long	LBB84_129
	.long	LBB84_126
	.long	LBB84_124
	.long	LBB84_129
	.long	LBB84_127
	.long	LBB84_126
	.long	LBB84_128
LJTI84_3:
	.long	LBB84_302
	.long	LBB84_327
	.long	LBB84_307
	.long	LBB84_312
	.long	LBB84_302
	.long	LBB84_327
	.long	LBB84_307
                                        # -- End function
	.def	 "?preProcessScanlines@@YAIPAPAEPAIPBEIIPBULodePNGInfo@@PBULodePNGEncoderSettings@@@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function ?preProcessScanlines@@YAIPAPAEPAIPBEIIPBULodePNGInfo@@PBULodePNGEncoderSettings@@@Z
"?preProcessScanlines@@YAIPAPAEPAIPBEIIPBULodePNGInfo@@PBULodePNGEncoderSettings@@@Z": # @"?preProcessScanlines@@YAIPAPAEPAIPBEIIPBULodePNGInfo@@PBULodePNGEncoderSettings@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 376
	mov	ebx, dword ptr [esp + 408]
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	mov	ebp, edx
	mov	ecx, dword ptr [ebx + 12]
	mov	eax, dword ptr [ebx + 16]
	cmp	ecx, 6
	ja	LBB85_1
# %bb.3:
	mov	edi, 1
	jmp	dword ptr [4*ecx + LJTI85_0]
LBB85_4:
	mov	edi, 3
	jmp	LBB85_7
LBB85_1:
	cmp	ecx, 255
LBB85_2:
	xor	edi, edi
	jmp	LBB85_7
LBB85_5:
	mov	edi, 2
	jmp	LBB85_7
LBB85_6:
	mov	edi, 4
LBB85_7:
	imul	edi, eax
	mov	esi, dword ptr [esp + 396]
	mov	edx, dword ptr [esp + 400]
	cmp	dword ptr [ebx + 8], 0
	mov	dword ptr [esp + 40], edi       # 4-byte Spill
	mov	dword ptr [esp + 48], esi       # 4-byte Spill
	je	LBB85_8
# %bb.35:
	mov	eax, edx
	lea	esi, [esp + 280]
	lea	ebx, [esp + 160]
	lea	ecx, [esp + 252]
	lea	edx, [esp + 224]
	push	edi
	push	dword ptr [esp + 408]
	push	eax
	push	esi
	push	ebx
	lea	eax, [esp + 212]
	push	eax
	call	"?Adam7_getpassvalues@@YAXQAI0000III@Z"
	add	esp, 24
	mov	eax, dword ptr [esp + 220]
	mov	dword ptr [ebp], eax
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	xor	esi, esi
	test	eax, eax
	mov	ebp, 83
	cmove	esi, ebp
	mov	dword ptr [ecx], eax
	mov	ebx, dword ptr [esp + 308]
	push	ebx
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	cmovne	ebp, esi
	test	ebx, ebx
	cmove	ebp, esi
	test	ebp, ebp
	je	LBB85_36
LBB85_118:
	push	dword ptr [esp + 28]            # 4-byte Folded Reload
LBB85_119:
	call	_free
	add	esp, 4
	jmp	LBB85_120
LBB85_8:
	imul	edi, edx
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	lea	esi, [edi + 7]
	mov	dword ptr [esp + 8], edi        # 4-byte Spill
	mov	edi, dword ptr [esp + 404]
	mov	dword ptr [esp], esi            # 4-byte Spill
	shr	esi, 3
	imul	esi, edi
	lea	eax, [esi + edi]
	mov	dword ptr [ebp], eax
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, eax
	mov	eax, esi
	add	eax, edi
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	mov	dword ptr [eax], ecx
	je	LBB85_10
# %bb.9:
	mov	ebp, 83
	test	ecx, ecx
	jne	LBB85_10
LBB85_120:
	mov	eax, ebp
	add	esp, 376
LBB85_121:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB85_36:
	lea	eax, [esp + 128]
	lea	esi, [esp + 312]
	lea	ebx, [esp + 344]
	lea	ecx, [esp + 100]
	lea	edx, [esp + 72]
	push	edi
	push	dword ptr [esp + 408]
	push	dword ptr [esp + 408]
	push	eax
	push	esi
	push	ebx
	call	"?Adam7_getpassvalues@@YAXQAI0000III@Z"
	add	esp, 24
	cmp	edi, 7
	jbe	LBB85_37
# %bb.48:
	mov	ecx, dword ptr [esp + 400]
	mov	eax, edi
	shr	eax, 3
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	je	LBB85_91
# %bb.49:
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 72]
	imul	eax, dword ptr [esp]            # 4-byte Folded Reload
	test	ecx, ecx
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	je	LBB85_55
# %bb.50:
	mov	eax, dword ptr [esp + 100]
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB85_55
# %bb.51:
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 128]
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	xor	edx, edx
	lea	eax, [8*eax]
	add	ecx, dword ptr [esp + 28]       # 4-byte Folded Reload
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	imul	eax, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [esp + 36], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 396]
	.p2align	4, 0x90
LBB85_52:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_53 Depth 2
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	xor	ebp, ebp
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	.p2align	4, 0x90
LBB85_53:                               #   Parent Loop BB85_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lea	eax, [ecx + ebp]
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	lea	ecx, [ecx + 8*ebp]
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	add	esp, 12
	add	ebp, ebx
	dec	esi
	jne	LBB85_53
# %bb.54:                               #   in Loop: Header=BB85_52 Depth=1
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	add	ecx, dword ptr [esp + 36]       # 4-byte Folded Reload
	inc	edx
	add	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	cmp	edx, dword ptr [esp + 24]       # 4-byte Folded Reload
	jb	LBB85_52
LBB85_55:
	mov	eax, dword ptr [esp + 76]
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB85_61
# %bb.56:
	mov	eax, dword ptr [esp + 104]
	test	eax, eax
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	je	LBB85_61
# %bb.57:
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	lea	eax, [8*eax]
	imul	esi, edx
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 396]
	mov	dword ptr [esp + 32], esi       # 4-byte Spill
	lea	ebx, [eax + 4*edx]
	mov	eax, dword ptr [esp + 132]
	xor	edx, edx
	add	eax, dword ptr [esp + 28]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB85_58:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_59 Depth 2
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	xor	ebp, ebp
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	.p2align	4, 0x90
LBB85_59:                               #   Parent Loop BB85_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	ecx, [ebx + 8*ebp]
	add	eax, ebp
	push	dword ptr [esp]                 # 4-byte Folded Reload
	push	ecx
	push	eax
	call	_memcpy
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	ebp, dword ptr [esp]            # 4-byte Folded Reload
	dec	esi
	jne	LBB85_59
# %bb.60:                               #   in Loop: Header=BB85_58 Depth=1
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	add	ebx, dword ptr [esp + 24]       # 4-byte Folded Reload
	add	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	inc	edx
	cmp	edx, dword ptr [esp + 12]       # 4-byte Folded Reload
	jb	LBB85_58
LBB85_61:
	mov	eax, dword ptr [esp + 80]
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB85_67
# %bb.62:
	mov	eax, dword ptr [esp + 108]
	test	eax, eax
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	je	LBB85_67
# %bb.63:
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	lea	eax, [8*ecx]
	imul	edx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 396]
	mov	dword ptr [esp + 32], edx       # 4-byte Spill
	xor	edx, edx
	lea	ebx, [eax + 4*ecx]
	mov	eax, dword ptr [esp + 136]
	add	eax, dword ptr [esp + 28]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB85_64:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_65 Depth 2
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	xor	ebp, ebp
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	.p2align	4, 0x90
LBB85_65:                               #   Parent Loop BB85_64 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	ecx, [ebx + 4*ebp]
	add	eax, ebp
	push	dword ptr [esp]                 # 4-byte Folded Reload
	push	ecx
	push	eax
	call	_memcpy
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	ebp, dword ptr [esp]            # 4-byte Folded Reload
	dec	esi
	jne	LBB85_65
# %bb.66:                               #   in Loop: Header=BB85_64 Depth=1
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	add	ebx, dword ptr [esp + 24]       # 4-byte Folded Reload
	add	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	inc	edx
	cmp	edx, dword ptr [esp + 12]       # 4-byte Folded Reload
	jb	LBB85_64
LBB85_67:
	mov	eax, dword ptr [esp + 84]
	test	eax, eax
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	je	LBB85_73
# %bb.68:
	mov	eax, dword ptr [esp + 112]
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB85_73
# %bb.69:
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	lea	eax, [4*eax]
	imul	esi, ecx
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 396]
	mov	dword ptr [esp + 36], esi       # 4-byte Spill
	lea	edx, [eax + 2*ecx]
	mov	eax, dword ptr [esp + 140]
	xor	ecx, ecx
	add	eax, dword ptr [esp + 28]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB85_70:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_71 Depth 2
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	xor	ebp, ebp
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	.p2align	4, 0x90
LBB85_71:                               #   Parent Loop BB85_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	ecx, [edx + 4*ebp]
	add	eax, ebp
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	add	esp, 12
	add	ebp, ebx
	dec	esi
	jne	LBB85_71
# %bb.72:                               #   in Loop: Header=BB85_70 Depth=1
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	add	edx, dword ptr [esp + 32]       # 4-byte Folded Reload
	inc	ecx
	add	eax, dword ptr [esp + 36]       # 4-byte Folded Reload
	cmp	ecx, dword ptr [esp + 24]       # 4-byte Folded Reload
	jb	LBB85_70
LBB85_73:
	mov	eax, dword ptr [esp + 88]
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB85_79
# %bb.74:
	mov	eax, dword ptr [esp + 116]
	test	eax, eax
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	je	LBB85_79
# %bb.75:
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	lea	eax, [4*ecx]
	imul	edx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 396]
	mov	dword ptr [esp + 32], edx       # 4-byte Spill
	xor	edx, edx
	lea	ebx, [eax + 2*ecx]
	mov	eax, dword ptr [esp + 144]
	add	eax, dword ptr [esp + 28]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB85_76:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_77 Depth 2
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	xor	ebp, ebp
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	.p2align	4, 0x90
LBB85_77:                               #   Parent Loop BB85_76 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	ecx, [ebx + 2*ebp]
	add	eax, ebp
	push	dword ptr [esp]                 # 4-byte Folded Reload
	push	ecx
	push	eax
	call	_memcpy
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	ebp, dword ptr [esp]            # 4-byte Folded Reload
	dec	esi
	jne	LBB85_77
# %bb.78:                               #   in Loop: Header=BB85_76 Depth=1
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	add	ebx, dword ptr [esp + 24]       # 4-byte Folded Reload
	add	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	inc	edx
	cmp	edx, dword ptr [esp + 12]       # 4-byte Folded Reload
	jb	LBB85_76
LBB85_79:
	mov	eax, dword ptr [esp + 92]
	test	eax, eax
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	je	LBB85_85
# %bb.80:
	mov	eax, dword ptr [esp + 120]
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB85_85
# %bb.81:
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	add	eax, eax
	imul	esi, ecx
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 396]
	mov	dword ptr [esp + 36], esi       # 4-byte Spill
	lea	edx, [eax + ecx]
	mov	eax, dword ptr [esp + 148]
	xor	ecx, ecx
	add	eax, dword ptr [esp + 28]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB85_82:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_83 Depth 2
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	xor	ebp, ebp
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	.p2align	4, 0x90
LBB85_83:                               #   Parent Loop BB85_82 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	ecx, [edx + 2*ebp]
	add	eax, ebp
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	add	esp, 12
	add	ebp, ebx
	dec	esi
	jne	LBB85_83
# %bb.84:                               #   in Loop: Header=BB85_82 Depth=1
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	add	edx, dword ptr [esp + 32]       # 4-byte Folded Reload
	inc	ecx
	add	eax, dword ptr [esp + 36]       # 4-byte Folded Reload
	cmp	ecx, dword ptr [esp + 24]       # 4-byte Folded Reload
	jb	LBB85_82
LBB85_85:
	mov	eax, dword ptr [esp + 96]
	test	eax, eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	je	LBB85_91
# %bb.86:
	mov	eax, dword ptr [esp + 124]
	test	eax, eax
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	je	LBB85_91
# %bb.87:
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	add	dword ptr [esp + 48], eax       # 4-byte Folded Spill
	add	eax, eax
	imul	ecx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 152]
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	xor	ecx, ecx
	add	eax, dword ptr [esp + 28]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB85_88:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_89 Depth 2
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	xor	ebp, ebp
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	.p2align	4, 0x90
LBB85_89:                               #   Parent Loop BB85_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	add	eax, ebp
	lea	ecx, [ecx + ebp]
	push	ebx
	push	ecx
	push	eax
	call	_memcpy
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	ebp, ebx
	dec	esi
	jne	LBB85_89
# %bb.90:                               #   in Loop: Header=BB85_88 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 48]       # 4-byte Reload
	add	eax, dword ptr [esp + 24]       # 4-byte Folded Reload
	inc	ecx
	add	edx, dword ptr [esp + 20]       # 4-byte Folded Reload
	cmp	ecx, dword ptr [esp + 12]       # 4-byte Folded Reload
	mov	dword ptr [esp + 48], edx       # 4-byte Spill
	jb	LBB85_88
LBB85_91:
	mov	esi, dword ptr [esp + 408]
	xor	ebx, ebx
	.p2align	4, 0x90
LBB85_92:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_101 Depth 2
                                        #       Child Loop BB85_102 Depth 3
                                        #       Child Loop BB85_104 Depth 3
                                        #     Child Loop BB85_107 Depth 2
                                        #       Child Loop BB85_108 Depth 3
                                        #     Child Loop BB85_112 Depth 2
                                        #       Child Loop BB85_113 Depth 3
	cmp	edi, 7
	ja	LBB85_116
# %bb.93:                               #   in Loop: Header=BB85_92 Depth=1
	mov	eax, dword ptr [esp + 4*ebx + 164]
	sub	eax, dword ptr [esp + 4*ebx + 160]
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB85_94
# %bb.97:                               #   in Loop: Header=BB85_92 Depth=1
	mov	ecx, dword ptr [esp + 4*ebx + 224]
	mov	edx, dword ptr [esp + 4*ebx + 252]
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	dword ptr [esp + 52], ebx       # 4-byte Spill
	test	ecx, ecx
	mov	dword ptr [esp + 56], edx       # 4-byte Spill
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	je	LBB85_115
# %bb.98:                               #   in Loop: Header=BB85_92 Depth=1
	mov	edx, dword ptr [esp + 56]       # 4-byte Reload
	imul	edx, dword ptr [esp + 40]       # 4-byte Folded Reload
	lea	eax, [edx + 7]
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	and	eax, -8
	mov	ecx, eax
	sub	ecx, edx
	test	edx, edx
	je	LBB85_110
# %bb.99:                               #   in Loop: Header=BB85_92 Depth=1
	mov	edx, dword ptr [esp + 52]       # 4-byte Reload
	mov	edx, dword ptr [esp + 4*edx + 280]
	add	edx, dword ptr [esp + 28]       # 4-byte Folded Reload
	test	ecx, ecx
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	je	LBB85_106
# %bb.100:                              #   in Loop: Header=BB85_92 Depth=1
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	xor	edx, edx
	sub	ecx, eax
	xor	eax, eax
	mov	dword ptr [esp + 36], ecx       # 4-byte Spill
	xor	ecx, ecx
	.p2align	4, 0x90
LBB85_101:                              #   Parent Loop BB85_92 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_102 Depth 3
                                        #       Child Loop BB85_104 Depth 3
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	eax, ecx
	add	ecx, esi
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	mov	ecx, esi
	.p2align	4, 0x90
LBB85_102:                              #   Parent Loop BB85_92 Depth=1
                                        #     Parent Loop BB85_101 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	ebp, ecx
	mov	ecx, edx
	mov	esi, edx
	mov	ebx, 1
	not	cl
	shr	esi, 3
	and	cl, 7
	shl	ebx, cl
	movzx	ecx, byte ptr [edi + esi]
	mov	edi, eax
	shr	edi, 3
	mov	byte ptr [esp + 8], cl          # 1-byte Spill
	movzx	ecx, byte ptr [esp + 8]         # 1-byte Folded Reload
	mov	byte ptr [esp + 4], cl          # 1-byte Spill
	mov	ecx, ebp
	or	byte ptr [esp + 4], bl          # 1-byte Folded Spill
	not	bl
	lea	ebp, [eax + 1]
	not	al
	and	bl, byte ptr [esp + 8]          # 1-byte Folded Reload
	mov	dword ptr [esp + 8], ebp        # 4-byte Spill
	mov	ebp, dword ptr [esp + 16]       # 4-byte Reload
	and	al, 7
	movzx	eax, al
	movzx	edi, byte ptr [ebp + edi]
	movzx	ebx, bl
	bt	edi, eax
	movzx	eax, byte ptr [esp + 4]         # 1-byte Folded Reload
	cmovb	ebx, eax
	mov	eax, dword ptr [esp]            # 4-byte Reload
	inc	edx
	dec	ecx
	mov	byte ptr [eax + esi], bl
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	jne	LBB85_102
# %bb.103:                              #   in Loop: Header=BB85_101 Depth=2
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	mov	esi, dword ptr [esp]            # 4-byte Reload
	.p2align	4, 0x90
LBB85_104:                              #   Parent Loop BB85_92 Depth=1
                                        #     Parent Loop BB85_101 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	ecx, edx
	mov	ebx, 1
	not	cl
	and	cl, 7
	shl	ebx, cl
	mov	ecx, edx
	inc	edx
	shr	ecx, 3
	not	bl
	and	byte ptr [esi + ecx], bl
	inc	eax
	jne	LBB85_104
# %bb.105:                              #   in Loop: Header=BB85_101 Depth=2
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	inc	eax
	cmp	eax, dword ptr [esp + 20]       # 4-byte Folded Reload
	jne	LBB85_101
	jmp	LBB85_115
	.p2align	4, 0x90
LBB85_116:                              #   in Loop: Header=BB85_92 Depth=1
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	mov	edx, dword ptr [esp + 4*ebx + 160]
	mov	ecx, dword ptr [eax]
	add	edx, dword ptr [esp + 28]       # 4-byte Folded Reload
	add	ecx, dword ptr [esp + 4*ebx + 192]
	push	dword ptr [esp + 412]
	push	dword ptr [esi + 16]
	push	dword ptr [esi + 12]
	push	dword ptr [esp + 4*ebx + 236]
	push	dword ptr [esp + 4*ebx + 268]
	call	"?filter@@YAIPAEPBEIIPBULodePNGColorMode@@PBULodePNGEncoderSettings@@@Z"
	add	esp, 20
	mov	ebp, eax
	inc	ebx
	test	ebp, ebp
	je	LBB85_95
	jmp	LBB85_118
LBB85_110:                              #   in Loop: Header=BB85_92 Depth=1
	test	ecx, ecx
	je	LBB85_115
# %bb.111:                              #   in Loop: Header=BB85_92 Depth=1
	sub	dword ptr [esp + 12], eax       # 4-byte Folded Spill
	xor	eax, eax
	xor	edx, edx
	.p2align	4, 0x90
LBB85_112:                              #   Parent Loop BB85_92 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_113 Depth 3
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	mov	edi, dword ptr [esp]            # 4-byte Reload
	.p2align	4, 0x90
LBB85_113:                              #   Parent Loop BB85_92 Depth=1
                                        #     Parent Loop BB85_112 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	ecx, edx
	mov	ebx, 1
	not	cl
	and	cl, 7
	shl	ebx, cl
	mov	ecx, edx
	inc	edx
	shr	ecx, 3
	not	bl
	and	byte ptr [edi + ecx], bl
	inc	esi
	jne	LBB85_113
# %bb.114:                              #   in Loop: Header=BB85_112 Depth=2
	inc	eax
	cmp	eax, dword ptr [esp + 20]       # 4-byte Folded Reload
	jne	LBB85_112
	jmp	LBB85_115
LBB85_106:                              #   in Loop: Header=BB85_92 Depth=1
	xor	eax, eax
	xor	edx, edx
	xor	ecx, ecx
	.p2align	4, 0x90
LBB85_107:                              #   Parent Loop BB85_92 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_108 Depth 3
	mov	ebp, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	eax, edx
	add	edx, ebp
	mov	dword ptr [esp + 32], edx       # 4-byte Spill
	.p2align	4, 0x90
LBB85_108:                              #   Parent Loop BB85_92 Depth=1
                                        #     Parent Loop BB85_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	ebx, 1
	mov	edx, dword ptr [esp]            # 4-byte Reload
	lea	esi, [eax + 1]
	mov	edi, eax
	not	al
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
                                        # kill: def $cl killed $cl killed $ecx
	not	cl
	mov	dword ptr [esp + 8], esi        # 4-byte Spill
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	shr	edi, 3
	and	al, 7
	and	cl, 7
	movzx	eax, al
	shl	ebx, cl
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	movzx	edi, byte ptr [esi + edi]
	shr	ecx, 3
	movzx	edx, byte ptr [edx + ecx]
	mov	dh, dl
	or	dh, bl
	not	bl
	and	bl, dl
	bt	edi, eax
	movzx	eax, dh
	movzx	edx, bl
	cmovb	edx, eax
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	byte ptr [eax + ecx], dl
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	inc	ecx
	dec	ebp
	jne	LBB85_108
# %bb.109:                              #   in Loop: Header=BB85_107 Depth=2
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 32]       # 4-byte Reload
	inc	eax
	cmp	eax, dword ptr [esp + 20]       # 4-byte Folded Reload
	jne	LBB85_107
	.p2align	4, 0x90
LBB85_115:                              #   in Loop: Header=BB85_92 Depth=1
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [eax]
	mov	edx, edi
	add	ecx, dword ptr [esp + 4*ebx + 192]
	inc	ebx
	push	dword ptr [esp + 412]
	mov	esi, dword ptr [esp + 412]
	push	dword ptr [esi + 16]
	push	dword ptr [esi + 12]
	push	dword ptr [esp + 32]            # 4-byte Folded Reload
	push	dword ptr [esp + 72]            # 4-byte Folded Reload
	call	"?filter@@YAIPAEPBEIIPBULodePNGColorMode@@PBULodePNGEncoderSettings@@@Z"
	add	esp, 20
	mov	ebp, eax
	push	edi
	call	_free
	add	esp, 4
	mov	edi, dword ptr [esp + 40]       # 4-byte Reload
	test	ebp, ebp
	jne	LBB85_118
LBB85_95:                               #   in Loop: Header=BB85_92 Depth=1
	cmp	ebx, 7
	jne	LBB85_92
# %bb.96:
	xor	ebp, ebp
	jmp	LBB85_118
LBB85_10:
	cmp	dword ptr [esp + 40], 7         # 4-byte Folded Reload
	ja	LBB85_34
# %bb.11:
	mov	edi, dword ptr [esp]            # 4-byte Reload
	and	edi, -8
	mov	dword ptr [esp], edi            # 4-byte Spill
	sub	edi, dword ptr [esp + 8]        # 4-byte Folded Reload
	jne	LBB85_12
LBB85_34:
	mov	edx, dword ptr [esp + 396]
	push	dword ptr [esp + 412]
	push	dword ptr [ebx + 16]
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	dword ptr [esp + 416]
	push	dword ptr [esp + 416]
	call	"?filter@@YAIPAEPBEIIPBULodePNGColorMode@@PBULodePNGEncoderSettings@@@Z"
	add	esp, 396
	jmp	LBB85_121
LBB85_37:
	mov	eax, dword ptr [esp + 400]
	xor	ecx, ecx
	jmp	LBB85_38
	.p2align	4, 0x90
LBB85_47:                               #   in Loop: Header=BB85_38 Depth=1
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	inc	ecx
	cmp	ecx, 7
	je	LBB85_91
LBB85_38:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_42 Depth 2
                                        #       Child Loop BB85_43 Depth 3
                                        #         Child Loop BB85_44 Depth 4
	mov	dword ptr [esp + 60], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 4*ecx + 100]
	test	ecx, ecx
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	je	LBB85_47
# %bb.39:                               #   in Loop: Header=BB85_38 Depth=1
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 4*ecx + 72]
	test	ecx, ecx
	mov	dword ptr [esp + 56], ecx       # 4-byte Spill
	je	LBB85_47
# %bb.40:                               #   in Loop: Header=BB85_38 Depth=1
	test	edi, edi
	je	LBB85_47
# %bb.41:                               #   in Loop: Header=BB85_38 Depth=1
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	mov	esi, dword ptr [4*ecx + _ADAM7_IY]
	mov	edx, dword ptr [esp + 4*ecx + 128]
	mov	ebx, dword ptr [4*ecx + _ADAM7_DY]
	mov	dword ptr [esp + 52], esi       # 4-byte Spill
	mov	esi, dword ptr [4*ecx + _ADAM7_IX]
	mov	ecx, dword ptr [4*ecx + _ADAM7_DX]
	shl	edx, 3
	mov	dword ptr [esp + 68], ebx       # 4-byte Spill
	mov	dword ptr [esp + 24], edx       # 4-byte Spill
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	xor	ecx, ecx
	mov	dword ptr [esp + 64], esi       # 4-byte Spill
	.p2align	4, 0x90
LBB85_42:                               #   Parent Loop BB85_38 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_43 Depth 3
                                        #         Child Loop BB85_44 Depth 4
	mov	edx, ecx
	mov	dword ptr [esp + 36], ecx       # 4-byte Spill
	imul	ecx, dword ptr [esp + 16]       # 4-byte Folded Reload
	imul	edx, dword ptr [esp + 68]       # 4-byte Folded Reload
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	add	edx, dword ptr [esp + 52]       # 4-byte Folded Reload
	imul	edx, eax
	add	edx, dword ptr [esp + 64]       # 4-byte Folded Reload
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	xor	edx, edx
	.p2align	4, 0x90
LBB85_43:                               #   Parent Loop BB85_38 Depth=1
                                        #     Parent Loop BB85_42 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_44 Depth 4
	mov	eax, edx
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	dword ptr [esp + 4], edi        # 4-byte Spill
	imul	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	add	edx, ecx
	add	eax, dword ptr [esp + 20]       # 4-byte Folded Reload
	imul	edx, edi
	add	edx, dword ptr [esp + 24]       # 4-byte Folded Reload
	imul	eax, edi
	.p2align	4, 0x90
LBB85_44:                               #   Parent Loop BB85_38 Depth=1
                                        #     Parent Loop BB85_42 Depth=2
                                        #       Parent Loop BB85_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	mov	ecx, edx
	mov	ebx, 1
	mov	ebp, edx
	lea	esi, [eax + 1]
	mov	edi, eax
	not	al
	not	cl
	mov	dword ptr [esp], esi            # 4-byte Spill
	mov	esi, dword ptr [esp + 396]
	shr	edi, 3
	and	al, 7
	and	cl, 7
	movzx	eax, al
	shl	ebx, cl
	mov	ecx, edx
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	shr	ecx, 3
	movzx	edi, byte ptr [esi + edi]
	mov	dh, byte ptr [edx + ecx]
	mov	dl, dh
	or	dl, bl
	not	bl
	and	bl, dh
	bt	edi, eax
	movzx	eax, dl
	movzx	edx, bl
	cmovb	edx, eax
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	inc	ebp
	dec	dword ptr [esp + 4]             # 4-byte Folded Spill
	mov	byte ptr [eax + ecx], dl
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	edx, ebp
	jne	LBB85_44
# %bb.45:                               #   in Loop: Header=BB85_43 Depth=3
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	edi, dword ptr [esp + 40]       # 4-byte Reload
	inc	edx
	cmp	edx, dword ptr [esp + 16]       # 4-byte Folded Reload
	jne	LBB85_43
# %bb.46:                               #   in Loop: Header=BB85_42 Depth=2
	mov	ecx, dword ptr [esp + 36]       # 4-byte Reload
	mov	eax, dword ptr [esp + 400]
	inc	ecx
	cmp	ecx, dword ptr [esp + 56]       # 4-byte Folded Reload
	jb	LBB85_42
	jmp	LBB85_47
LBB85_94:
	mov	ebp, 83
	jmp	LBB85_118
LBB85_12:
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	push	esi
	call	_malloc
	add	esp, 4
	mov	ebp, eax
	test	eax, eax
	je	LBB85_13
# %bb.14:
	mov	esi, dword ptr [esp + 404]
	test	esi, esi
	je	LBB85_32
# %bb.15:
	cmp	dword ptr [esp + 8], 0          # 4-byte Folded Reload
	je	LBB85_27
# %bb.16:
	test	edi, edi
	mov	dword ptr [esp + 28], ebp       # 4-byte Spill
	je	LBB85_23
# %bb.17:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	xor	ecx, ecx
	xor	edx, edx
	sub	eax, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [esp + 40], eax       # 4-byte Spill
	xor	eax, eax
	.p2align	4, 0x90
LBB85_18:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_19 Depth 2
                                        #     Child Loop BB85_21 Depth 2
	mov	ebp, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	lea	ecx, [edx + ebp]
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	mov	ecx, ebp
	.p2align	4, 0x90
LBB85_19:                               #   Parent Loop BB85_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	esi, dword ptr [esp + 28]       # 4-byte Reload
	mov	edi, ecx
	mov	ecx, eax
	mov	ebp, eax
	mov	ebx, 1
	not	cl
	shr	ebp, 3
	and	cl, 7
	shl	ebx, cl
	movzx	ecx, byte ptr [esi + ebp]
	mov	esi, edx
	shr	esi, 3
	mov	byte ptr [esp + 4], cl          # 1-byte Spill
	movzx	ecx, byte ptr [esp + 4]         # 1-byte Folded Reload
	mov	byte ptr [esp], cl              # 1-byte Spill
	mov	ecx, edi
	or	byte ptr [esp], bl              # 1-byte Folded Spill
	not	bl
	lea	edi, [edx + 1]
	not	dl
	and	bl, byte ptr [esp + 4]          # 1-byte Folded Reload
	mov	dword ptr [esp + 4], edi        # 4-byte Spill
	mov	edi, dword ptr [esp + 396]
	and	dl, 7
	movzx	edx, dl
	movzx	esi, byte ptr [edi + esi]
	movzx	ebx, bl
	bt	esi, edx
	movzx	edx, byte ptr [esp]             # 1-byte Folded Reload
	cmovb	ebx, edx
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	inc	eax
	dec	ecx
	mov	byte ptr [edx + ebp], bl
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	jne	LBB85_19
# %bb.20:                               #   in Loop: Header=BB85_18 Depth=1
	mov	edx, dword ptr [esp + 40]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 28]       # 4-byte Reload
	.p2align	4, 0x90
LBB85_21:                               #   Parent Loop BB85_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, eax
	mov	ebx, 1
	not	cl
	and	cl, 7
	shl	ebx, cl
	mov	ecx, eax
	inc	eax
	shr	ecx, 3
	not	bl
	and	byte ptr [ebp + ecx], bl
	inc	edx
	jne	LBB85_21
# %bb.22:                               #   in Loop: Header=BB85_18 Depth=1
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	esi, dword ptr [esp + 404]
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	inc	ecx
	cmp	ecx, esi
	jne	LBB85_18
	jmp	LBB85_32
LBB85_13:
	mov	ecx, ebp
	mov	ebp, 83
	push	ecx
	jmp	LBB85_119
LBB85_27:
	test	edi, edi
	je	LBB85_32
# %bb.28:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	xor	edx, edx
	sub	dword ptr [esp + 8], eax        # 4-byte Folded Spill
	xor	eax, eax
LBB85_29:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_30 Depth 2
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	.p2align	4, 0x90
LBB85_30:                               #   Parent Loop BB85_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, edx
	mov	ebx, 1
	not	cl
	and	cl, 7
	shl	ebx, cl
	mov	ecx, edx
	inc	edx
	shr	ecx, 3
	not	bl
	and	byte ptr [ebp + ecx], bl
	inc	edi
	jne	LBB85_30
# %bb.31:                               #   in Loop: Header=BB85_29 Depth=1
	inc	eax
	cmp	eax, esi
	jne	LBB85_29
	jmp	LBB85_32
LBB85_23:
	xor	eax, eax
	xor	ecx, ecx
	xor	edx, edx
LBB85_24:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_25 Depth 2
	mov	ebp, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	mov	eax, ecx
	add	ecx, ebp
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	.p2align	4, 0x90
LBB85_25:                               #   Parent Loop BB85_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, edx
	mov	ebx, 1
	mov	dword ptr [esp], edx            # 4-byte Spill
	lea	esi, [eax + 1]
	mov	edi, eax
	not	al
	not	cl
	mov	dword ptr [esp + 4], esi        # 4-byte Spill
	mov	esi, dword ptr [esp + 396]
	shr	edi, 3
	and	al, 7
	and	cl, 7
	movzx	eax, al
	shl	ebx, cl
	mov	ecx, edx
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	shr	ecx, 3
	movzx	edi, byte ptr [esi + edi]
	movzx	edx, byte ptr [edx + ecx]
	mov	dh, dl
	or	dh, bl
	not	bl
	and	bl, dl
	bt	edi, eax
	movzx	eax, dh
	movzx	edx, bl
	cmovb	edx, eax
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	byte ptr [eax + ecx], dl
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	inc	edx
	dec	ebp
	jne	LBB85_25
# %bb.26:                               #   in Loop: Header=BB85_24 Depth=1
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	esi, dword ptr [esp + 404]
	mov	ebp, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	inc	eax
	cmp	eax, esi
	jne	LBB85_24
LBB85_32:
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, ebp
	push	dword ptr [esp + 412]
	mov	eax, dword ptr [esp + 412]
	push	dword ptr [eax + 16]
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	esi
	push	dword ptr [esp + 416]
	call	"?filter@@YAIPAEPBEIIPBULodePNGColorMode@@PBULodePNGEncoderSettings@@@Z"
	add	esp, 20
	mov	ecx, ebp
	mov	ebp, eax
	push	ecx
	jmp	LBB85_119
	.section	.rdata,"dr"
	.p2align	2
LJTI85_0:
	.long	LBB85_7
	.long	LBB85_2
	.long	LBB85_4
	.long	LBB85_7
	.long	LBB85_5
	.long	LBB85_2
	.long	LBB85_6
                                        # -- End function
	.def	 "?addChunk_tEXt@@YAIPAUucvector@@PBD1@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function ?addChunk_tEXt@@YAIPAUucvector@@PBD1@Z
"?addChunk_tEXt@@YAIPAUucvector@@PBD1@Z": # @"?addChunk_tEXt@@YAIPAUucvector@@PBD1@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	esi, dword ptr [esp + 32]
	mov	edi, ecx
	lea	ebp, [edx - 1]
	.p2align	4, 0x90
LBB86_1:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebp + 1], 0
	lea	ebp, [ebp + 1]
	jne	LBB86_1
# %bb.2:
	lea	ebx, [esi - 1]
	.p2align	4, 0x90
LBB86_3:                                # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [ebx + 1], 0
	lea	ebx, [ebx + 1]
	jne	LBB86_3
# %bb.4:
	sub	ebp, edx
	mov	eax, 89
	lea	ecx, [ebp - 1]
	cmp	ecx, 78
	ja	LBB86_19
# %bb.5:
	sub	ebx, esi
	mov	esi, dword ptr [edi + 4]
	mov	eax, 77
	lea	ecx, [ebp + ebx + 1]
	add	esi, ecx
	jb	LBB86_19
# %bb.6:
	sub	esi, -12
	jae	LBB86_19
# %bb.7:
	mov	eax, dword ptr [edi + 8]
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	mov	dword ptr [esp], edx            # 4-byte Spill
	cmp	eax, esi
	jae	LBB86_8
# %bb.9:
	shr	eax
	add	eax, esi
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	push	eax
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB86_10
# %bb.11:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, edi
	mov	edi, eax
	mov	dword ptr [ecx + 8], edx
	mov	dword ptr [ecx], edi
	jmp	LBB86_12
LBB86_8:
	mov	ecx, edi
	mov	edi, dword ptr [edi]
LBB86_12:
	mov	dword ptr [ecx + 4], esi
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	add	edi, esi
	mov	eax, ecx
	sub	edi, ecx
	shr	eax, 24
	lea	esi, [edi - 12]
	mov	byte ptr [edi - 12], al
	mov	eax, ecx
	shr	eax, 16
	mov	byte ptr [edi - 11], al
	mov	byte ptr [edi - 10], ch
	mov	byte ptr [edi - 9], cl
	mov	dword ptr [edi - 8], 1951942004
	lea	eax, [edi - 4]
	push	ebp
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	push	eax
	call	_memcpy
	add	esp, 12
	test	ebx, ebx
	mov	byte ptr [ebp + edi - 4], 0
	je	LBB86_14
# %bb.13:
	lea	eax, [esi + ebp + 9]
	push	ebx
	push	dword ptr [esp + 36]
	push	eax
	call	_memcpy
	add	esp, 12
LBB86_14:
	mov	ecx, dword ptr [esi]
	xor	eax, eax
	mov	edx, 0
	bswap	ecx
	mov	esi, ecx
	add	esi, 4
	je	LBB86_18
# %bb.15:
	add	edi, -8
	mov	edx, -1
	.p2align	4, 0x90
LBB86_16:                               # =>This Inner Loop Header: Depth=1
	movzx	ebx, byte ptr [edi]
	movzx	ebp, dl
	shr	edx, 8
	inc	edi
	xor	ebp, ebx
	xor	edx, dword ptr [4*ebp + _lodepng_crc32_table]
	dec	esi
	jne	LBB86_16
# %bb.17:
	not	edx
LBB86_18:
	mov	esi, dword ptr [esp]            # 4-byte Reload
	bswap	edx
	mov	dword ptr [esi + ecx], edx
	jmp	LBB86_19
LBB86_10:
	mov	eax, 83
LBB86_19:
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z" # -- Begin function ?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z": # @"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -16
	sub	esp, 400
	movaps	xmm0, xmmword ptr [__xmm@01000000000000000000000100000001] # xmm0 = [1,1,0,16777216]
	mov	esi, dword ptr [ebp + 32]
	mov	edi, dword ptr [ebp + 28]
	movaps	xmm1, xmmword ptr [__xmm@00000003000008000000000100000002] # xmm1 = [2,1,2048,3]
	movaps	xmm3, xmmword ptr [__xmm@00000001000000000000000000000000] # xmm3 = [0,0,0,1]
	movaps	xmm2, xmmword ptr [__xmm@00000000000000000000000500000001] # xmm2 = [1,5,0,0]
	mov	eax, dword ptr [ebp + 8]
	mov	ecx, dword ptr [ebp + 12]
	mov	edx, dword ptr [ebp + 16]
	mov	ebx, esp
	movups	xmmword ptr [esp + 36], xmm0
	xorps	xmm0, xmm0
	mov	dword ptr [esp + 52], 16777216
	mov	dword ptr [esp + 32], 0
	movaps	xmmword ptr [esp], xmm0
	movaps	xmmword ptr [esp + 16], xmm0
	movups	xmmword ptr [esp + 56], xmm1
	mov	dword ptr [esp + 72], 128
	mov	dword ptr [esp + 76], 1
	movaps	xmmword ptr [esp + 80], xmm3
	movaps	xmmword ptr [esp + 96], xmm2
	mov	dword ptr [esp + 112], 0
	mov	dword ptr [esp + 116], 1
	mov	dword ptr [esp + 148], 0
	mov	dword ptr [esp + 144], 0
	movaps	xmmword ptr [esp + 128], xmm0
	mov	dword ptr [esp + 188], 0
	mov	dword ptr [esp + 192], 0
	mov	dword ptr [esp + 180], 0
	mov	dword ptr [esp + 184], 0
	mov	dword ptr [esp + 172], 0
	mov	dword ptr [esp + 176], 0
	mov	dword ptr [esp + 160], 0
	mov	dword ptr [esp + 152], 0
	mov	dword ptr [esp + 156], 0
	mov	dword ptr [esp + 272], 0
	mov	dword ptr [esp + 288], 0
	mov	dword ptr [esp + 296], 0
	mov	dword ptr [esp + 332], 0
	mov	dword ptr [esp + 340], 0
	mov	dword ptr [esp + 344], 0
	mov	dword ptr [esp + 348], 0
	mov	dword ptr [esp + 372], 0
	mov	dword ptr [esp + 376], 0
	mov	dword ptr [esp + 364], 0
	mov	dword ptr [esp + 368], 0
	mov	dword ptr [esp + 356], 0
	mov	dword ptr [esp + 360], 0
	mov	dword ptr [esp + 200], 0
	mov	dword ptr [esp + 196], 0
	mov	dword ptr [esp + 208], 0
	mov	dword ptr [esp + 204], 0
	mov	dword ptr [esp + 216], 0
	mov	dword ptr [esp + 212], 0
	mov	dword ptr [esp + 224], 0
	mov	dword ptr [esp + 220], 0
	mov	dword ptr [esp + 232], 0
	mov	dword ptr [esp + 228], 0
	mov	dword ptr [esp + 240], 0
	mov	dword ptr [esp + 236], 0
	mov	dword ptr [esp + 244], 0
	mov	dword ptr [esp + 380], 1
	mov	dword ptr [esp + 120], edi
	mov	dword ptr [esp + 124], esi
	mov	dword ptr [esp + 164], edi
	mov	dword ptr [esp + 168], esi
	mov	esi, dword ptr [ebp + 24]
	mov	edi, dword ptr [ebp + 20]
	push	ebx
	push	esi
	push	edi
	push	edx
	push	ecx
	push	eax
	call	"?lodepng_encode@@YAIPAPAEPAIPBEIIPAULodePNGState@@@Z"
	add	esp, 24
	mov	eax, dword ptr [esp + 128]
	mov	esi, dword ptr [esp + 380]
	test	eax, eax
	je	LBB87_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB87_2:
	lea	eax, [esp + 152]
	mov	dword ptr [esp + 128], 0
	mov	dword ptr [esp + 132], 0
	push	eax
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	mov	eax, esi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?lodepng_encode32@@YAIPAPAEPAIPBEII@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_encode32@@YAIPAPAEPAIPBEII@Z" # -- Begin function ?lodepng_encode32@@YAIPAPAEPAIPBEII@Z
	.p2align	4, 0x90
"?lodepng_encode32@@YAIPAPAEPAIPBEII@Z": # @"?lodepng_encode32@@YAIPAPAEPAIPBEII@Z"
# %bb.0:
	push	8
	push	6
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	call	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
	add	esp, 28
	ret
                                        # -- End function
	.def	 "?lodepng_encode24@@YAIPAPAEPAIPBEII@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_encode24@@YAIPAPAEPAIPBEII@Z" # -- Begin function ?lodepng_encode24@@YAIPAPAEPAIPBEII@Z
	.p2align	4, 0x90
"?lodepng_encode24@@YAIPAPAEPAIPBEII@Z": # @"?lodepng_encode24@@YAIPAPAEPAIPBEII@Z"
# %bb.0:
	push	8
	push	2
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	call	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
	add	esp, 28
	ret
                                        # -- End function
	.def	 "?lodepng_encode_file@@YAIPBDPBEIIW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_encode_file@@YAIPBDPBEIIW4LodePNGColorType@@I@Z" # -- Begin function ?lodepng_encode_file@@YAIPBDPBEIIW4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?lodepng_encode_file@@YAIPBDPBEIIW4LodePNGColorType@@I@Z": # @"?lodepng_encode_file@@YAIPBDPBEIIW4LodePNGColorType@@I@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	lea	eax, [esp + 4]
	mov	ecx, esp
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	eax
	push	ecx
	call	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
	add	esp, 28
	test	eax, eax
	je	LBB90_2
# %bb.1:
	mov	edi, dword ptr [esp]
	mov	esi, eax
	jmp	LBB90_5
LBB90_2:
	mov	ebx, dword ptr [esp + 4]
	mov	edi, dword ptr [esp]
	push	offset "??_C@_02GMLFBBN@wb?$AA@"
	push	dword ptr [esp + 28]
	call	_fopen
	add	esp, 8
	test	eax, eax
	je	LBB90_3
# %bb.4:
	mov	esi, eax
	push	eax
	push	ebx
	push	1
	push	edi
	call	_fwrite
	add	esp, 16
	push	esi
	call	_fclose
	add	esp, 4
	xor	esi, esi
	jmp	LBB90_5
LBB90_3:
	mov	esi, 79
LBB90_5:
	push	edi
	call	_free
	add	esp, 4
	mov	eax, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_encode32_file@@YAIPBDPBEII@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_encode32_file@@YAIPBDPBEII@Z" # -- Begin function ?lodepng_encode32_file@@YAIPBDPBEII@Z
	.p2align	4, 0x90
"?lodepng_encode32_file@@YAIPBDPBEII@Z": # @"?lodepng_encode32_file@@YAIPBDPBEII@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	lea	eax, [esp + 4]
	mov	ecx, esp
	push	8
	push	6
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	eax
	push	ecx
	call	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
	add	esp, 28
	test	eax, eax
	je	LBB91_2
# %bb.1:
	mov	edi, dword ptr [esp]
	mov	esi, eax
	jmp	LBB91_5
LBB91_2:
	mov	ebx, dword ptr [esp + 4]
	mov	edi, dword ptr [esp]
	push	offset "??_C@_02GMLFBBN@wb?$AA@"
	push	dword ptr [esp + 28]
	call	_fopen
	add	esp, 8
	test	eax, eax
	je	LBB91_3
# %bb.4:
	mov	esi, eax
	push	eax
	push	ebx
	push	1
	push	edi
	call	_fwrite
	add	esp, 16
	push	esi
	call	_fclose
	add	esp, 4
	xor	esi, esi
	jmp	LBB91_5
LBB91_3:
	mov	esi, 79
LBB91_5:
	push	edi
	call	_free
	add	esp, 4
	mov	eax, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_encode24_file@@YAIPBDPBEII@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_encode24_file@@YAIPBDPBEII@Z" # -- Begin function ?lodepng_encode24_file@@YAIPBDPBEII@Z
	.p2align	4, 0x90
"?lodepng_encode24_file@@YAIPBDPBEII@Z": # @"?lodepng_encode24_file@@YAIPBDPBEII@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	lea	eax, [esp + 4]
	mov	ecx, esp
	push	8
	push	2
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	eax
	push	ecx
	call	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
	add	esp, 28
	test	eax, eax
	je	LBB92_2
# %bb.1:
	mov	edi, dword ptr [esp]
	mov	esi, eax
	jmp	LBB92_5
LBB92_2:
	mov	ebx, dword ptr [esp + 4]
	mov	edi, dword ptr [esp]
	push	offset "??_C@_02GMLFBBN@wb?$AA@"
	push	dword ptr [esp + 28]
	call	_fopen
	add	esp, 8
	test	eax, eax
	je	LBB92_3
# %bb.4:
	mov	esi, eax
	push	eax
	push	ebx
	push	1
	push	edi
	call	_fwrite
	add	esp, 16
	push	esi
	call	_fclose
	add	esp, 4
	xor	esi, esi
	jmp	LBB92_5
LBB92_3:
	mov	esi, 79
LBB92_5:
	push	edi
	call	_free
	add	esp, 4
	mov	eax, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?lodepng_error_text@@YAPBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?lodepng_error_text@@YAPBDI@Z" # -- Begin function ?lodepng_error_text@@YAPBDI@Z
	.p2align	4, 0x90
"?lodepng_error_text@@YAPBDI@Z":        # @"?lodepng_error_text@@YAPBDI@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	cmp	eax, 113
	ja	LBB93_2
# %bb.1:
	mov	eax, dword ptr [4*eax + "L_switch.table.?lodepng_error_text@@YAPBDI@Z"]
	ret
LBB93_2:
	mov	eax, offset "??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	ret
                                        # -- End function
	.def	 "?load_file@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?load_file@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z" # -- Begin function ?load_file@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
	.p2align	4, 0x90
"?load_file@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z": # @"?load_file@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	ebp, dword ptr [esp + 32]
	cmp	dword ptr [ebp + 20], 15
	mov	eax, ebp
	jbe	LBB94_2
# %bb.1:
	mov	eax, dword ptr [ebp]
LBB94_2:
	push	offset "??_C@_02JDPG@rb?$AA@"
	push	eax
	call	_fopen
	add	esp, 8
	mov	esi, 78
	test	eax, eax
	je	LBB94_19
# %bb.3:
	mov	ebx, eax
	push	2
	push	0
	push	eax
	call	_fseek
	add	esp, 12
	test	eax, eax
	je	LBB94_5
# %bb.4:
	push	ebx
	call	_fclose
	add	esp, 4
	jmp	LBB94_19
LBB94_5:
	push	ebx
	call	_ftell
	add	esp, 4
	mov	edi, eax
	push	ebx
	call	_fclose
	add	esp, 4
	cmp	edi, 2147483646
	ja	LBB94_19
# %bb.6:
	mov	eax, dword ptr [esp + 28]
	mov	ecx, edi
	mov	ebx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	mov	edx, eax
	sub	edx, ebx
	sub	ecx, edx
	jae	LBB94_10
# %bb.7:
	mov	ecx, dword ptr [esp + 28]
	lea	eax, [ebx + edi]
	mov	dword ptr [ecx + 4], eax
	jmp	LBB94_8
LBB94_10:
	jbe	LBB94_8
# %bb.11:
	mov	edx, dword ptr [esp + 28]
	mov	edx, dword ptr [edx + 8]
	sub	edx, ebx
	mov	ebx, dword ptr [esp + 28]
	cmp	edx, edi
	jae	LBB94_13
# %bb.12:
	lea	eax, [esp + 4]
	mov	ecx, ebx
	push	eax
	push	edi
	call	"??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
	jmp	LBB94_14
LBB94_8:
	test	edi, edi
	jne	LBB94_15
# %bb.9:
	xor	esi, esi
	jmp	LBB94_19
LBB94_13:
	lea	edx, [eax + ecx]
	mov	dword ptr [esp], edx            # 4-byte Spill
	push	ecx
	push	0
	push	eax
	call	_memset
	add	esp, 12
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [ebx + 4], eax
LBB94_14:
	mov	ebx, dword ptr [ebx]
LBB94_15:
	cmp	dword ptr [ebp + 20], 15
	mov	dword ptr [esp], ebx            # 4-byte Spill
	jbe	LBB94_17
# %bb.16:
	mov	ebp, dword ptr [ebp]
LBB94_17:
	push	offset "??_C@_02JDPG@rb?$AA@"
	push	ebp
	call	_fopen
	add	esp, 8
	test	eax, eax
	je	LBB94_19
# %bb.18:
	mov	ebx, eax
	push	eax
	push	edi
	push	1
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	_fread
	add	esp, 16
	mov	esi, eax
	push	ebx
	call	_fclose
	add	esp, 4
	xor	eax, eax
	cmp	esi, edi
	mov	esi, 78
	cmove	esi, eax
LBB94_19:
	mov	eax, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?save_file@lodepng@@YAIABV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?save_file@lodepng@@YAIABV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z" # -- Begin function ?save_file@lodepng@@YAIABV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z
	.p2align	4, 0x90
"?save_file@lodepng@@YAIABV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z": # @"?save_file@lodepng@@YAIABV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	eax, dword ptr [esp + 24]
	mov	ecx, dword ptr [esp + 20]
	cmp	dword ptr [eax + 20], 15
	jbe	LBB95_2
# %bb.1:
	mov	eax, dword ptr [eax]
LBB95_2:
	mov	ebx, dword ptr [ecx]
	mov	ebp, dword ptr [ecx + 4]
	push	offset "??_C@_02GMLFBBN@wb?$AA@"
	push	eax
	call	_fopen
	add	esp, 8
	test	eax, eax
	je	LBB95_3
# %bb.4:
	xor	esi, esi
	sub	ebp, ebx
	mov	edi, eax
	cmove	ebx, esi
	push	eax
	push	ebp
	push	1
	push	ebx
	call	_fwrite
	add	esp, 16
	push	edi
	call	_fclose
	add	esp, 4
	jmp	LBB95_5
LBB95_3:
	mov	esi, 79
LBB95_5:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGDecompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGDecompressSettings@@@Z" # -- Begin function ?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGDecompressSettings@@@Z
	.p2align	4, 0x90
"?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGDecompressSettings@@@Z": # @"?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGDecompressSettings@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	esi, dword ptr [esp + 48]
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp], 0
	mov	eax, dword ptr [esp + 44]
	mov	edx, dword ptr [esp + 40]
	mov	ecx, dword ptr [esi + 12]
	test	ecx, ecx
	je	LBB96_5
# %bb.1:
	mov	edi, esp
	lea	ebx, [esp + 4]
	push	esi
	push	eax
	push	edx
	push	edi
	push	ebx
	call	ecx
	add	esp, 20
	test	eax, eax
	je	LBB96_2
# %bb.3:
	mov	eax, dword ptr [esi + 8]
	test	eax, eax
	je	LBB96_4
# %bb.6:
	cmp	eax, dword ptr [esp]
	mov	esi, 110
	sbb	esi, 0
	mov	eax, dword ptr [esp + 4]
	test	eax, eax
	jne	LBB96_9
	jmp	LBB96_10
LBB96_5:
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 12], 0
	mov	dword ptr [esp + 16], 0
	lea	ecx, [esp + 8]
	push	esi
	push	eax
	call	"?lodepng_zlib_decompressv@@YAIPAUucvector@@PBEIPBULodePNGDecompressSettings@@@Z"
	add	esp, 8
	mov	esi, eax
	mov	eax, dword ptr [esp + 8]
	mov	ecx, dword ptr [esp + 12]
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], ecx
	test	eax, eax
	jne	LBB96_9
	jmp	LBB96_10
LBB96_2:
	xor	esi, esi
	mov	eax, dword ptr [esp + 4]
	test	eax, eax
	je	LBB96_10
LBB96_9:
	mov	ecx, dword ptr [esp + 36]
	mov	edx, dword ptr [esp]
	mov	edi, dword ptr [ecx + 4]
	add	edx, eax
	sub	esp, 16
	mov	bl, byte ptr [esp + 24]
	mov	byte ptr [esp + 12], bl
	mov	dword ptr [esp + 8], edx
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], edi
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	push	dword ptr [esp + 4]
	call	_free
	add	esp, 4
LBB96_10:
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	ret
LBB96_4:
	mov	esi, 110
	mov	eax, dword ptr [esp + 4]
	test	eax, eax
	jne	LBB96_9
	jmp	LBB96_10
                                        # -- End function
	.def	 "?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGDecompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGDecompressSettings@@@Z" # -- Begin function ?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGDecompressSettings@@@Z
	.p2align	4, 0x90
"?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGDecompressSettings@@@Z": # @"?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGDecompressSettings@@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 8]
	xor	edx, edx
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	sub	eax, ecx
	cmovne	edx, ecx
	push	dword ptr [esp + 12]
	push	eax
	push	edx
	push	dword ptr [esp + 16]
	call	"?decompress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGDecompressSettings@@@Z"
	add	esp, 16
	ret
                                        # -- End function
	.def	 "?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGCompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGCompressSettings@@@Z" # -- Begin function ?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGCompressSettings@@@Z
	.p2align	4, 0x90
"?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGCompressSettings@@@Z": # @"?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIABULodePNGCompressSettings@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	esi, dword ptr [esp + 40]
	mov	dword ptr [esp], 0
	mov	dword ptr [esp + 4], 0
	mov	ecx, dword ptr [esp + 36]
	mov	eax, dword ptr [esp + 32]
	mov	edx, dword ptr [esi + 24]
	test	edx, edx
	je	LBB98_2
# %bb.1:
	lea	edi, [esp + 4]
	mov	ebx, esp
	push	esi
	push	ecx
	push	eax
	push	edi
	push	ebx
	call	edx
	add	esp, 20
	test	eax, eax
	mov	esi, 111
	cmove	esi, eax
	mov	eax, dword ptr [esp]
	test	eax, eax
	je	LBB98_5
LBB98_4:
	mov	ecx, dword ptr [esp + 28]
	mov	edx, dword ptr [esp + 4]
	mov	edi, dword ptr [ecx + 4]
	add	edx, eax
	sub	esp, 16
	mov	bl, byte ptr [esp + 24]
	mov	byte ptr [esp + 12], bl
	mov	dword ptr [esp + 8], edx
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], edi
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	push	dword ptr [esp]
	call	_free
	add	esp, 4
LBB98_5:
	mov	eax, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	ret
LBB98_2:
	lea	edx, [esp + 4]
	mov	edi, esp
	push	esi
	push	ecx
	push	eax
	push	edx
	push	edi
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
	add	esp, 20
	mov	esi, eax
	mov	eax, dword ptr [esp]
	test	eax, eax
	jne	LBB98_4
	jmp	LBB98_5
                                        # -- End function
	.def	 "?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGCompressSettings@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGCompressSettings@@@Z" # -- Begin function ?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGCompressSettings@@@Z
	.p2align	4, 0x90
"?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGCompressSettings@@@Z": # @"?compress@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@ABULodePNGCompressSettings@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	eax, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 36]
	mov	esi, dword ptr [eax]
	mov	ecx, dword ptr [eax + 4]
	xor	eax, eax
	mov	dword ptr [esp], 0
	mov	dword ptr [esp + 4], 0
	sub	ecx, esi
	cmovne	eax, esi
	mov	esi, dword ptr [edx + 24]
	test	esi, esi
	je	LBB99_2
# %bb.1:
	lea	edi, [esp + 4]
	mov	ebx, esp
	push	edx
	push	ecx
	push	eax
	push	edi
	push	ebx
	call	esi
	add	esp, 20
	test	eax, eax
	mov	esi, 111
	cmove	esi, eax
	mov	eax, dword ptr [esp]
	test	eax, eax
	je	LBB99_5
LBB99_4:
	mov	ecx, dword ptr [esp + 28]
	mov	edx, dword ptr [esp + 4]
	mov	edi, dword ptr [ecx + 4]
	add	edx, eax
	sub	esp, 16
	mov	bl, byte ptr [esp + 24]
	mov	byte ptr [esp + 12], bl
	mov	dword ptr [esp + 8], edx
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], edi
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	push	dword ptr [esp]
	call	_free
	add	esp, 4
LBB99_5:
	mov	eax, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	ret
LBB99_2:
	lea	esi, [esp + 4]
	mov	edi, esp
	push	edx
	push	ecx
	push	eax
	push	esi
	push	edi
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
	add	esp, 20
	mov	esi, eax
	mov	eax, dword ptr [esp]
	test	eax, eax
	jne	LBB99_4
	jmp	LBB99_5
                                        # -- End function
	.def	 "??0State@lodepng@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"??0State@lodepng@@QAE@XZ"      # -- Begin function ??0State@lodepng@@QAE@XZ
	.p2align	4, 0x90
"??0State@lodepng@@QAE@XZ":             # @"??0State@lodepng@@QAE@XZ"
# %bb.0:
	movaps	xmm0, xmmword ptr [__xmm@01000000000000000000000100000001] # xmm0 = [1,1,0,16777216]
	movaps	xmm2, xmmword ptr [__xmm@00000003000008000000000100000002] # xmm2 = [2,1,2048,3]
	movaps	xmm1, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm1 = [0,0,0,6]
	mov	eax, ecx
	movups	xmmword ptr [ecx + 36], xmm0
	mov	dword ptr [ecx + 52], 16777216
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ecx], 0
	mov	dword ptr [ecx + 12], 0
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 20], 0
	mov	dword ptr [ecx + 16], 0
	mov	dword ptr [ecx + 28], 0
	mov	dword ptr [ecx + 24], 0
	mov	dword ptr [ecx + 32], 0
	movups	xmmword ptr [ecx + 56], xmm2
	mov	dword ptr [ecx + 72], 128
	mov	dword ptr [ecx + 76], 1
	mov	dword ptr [ecx + 80], 0
	mov	dword ptr [ecx + 84], 0
	mov	dword ptr [ecx + 88], 0
	mov	dword ptr [ecx + 96], 1
	mov	dword ptr [ecx + 100], 5
	mov	dword ptr [ecx + 92], 1
	mov	dword ptr [ecx + 108], 0
	mov	dword ptr [ecx + 104], 0
	mov	dword ptr [ecx + 112], 0
	mov	dword ptr [ecx + 116], 1
	mov	dword ptr [ecx + 140], 0
	mov	dword ptr [ecx + 136], 0
	mov	dword ptr [ecx + 148], 0
	mov	dword ptr [ecx + 144], 0
	mov	dword ptr [ecx + 120], 6
	mov	dword ptr [ecx + 124], 8
	mov	dword ptr [ecx + 128], 0
	mov	dword ptr [ecx + 132], 0
	mov	dword ptr [ecx + 188], 0
	mov	dword ptr [ecx + 192], 0
	mov	dword ptr [ecx + 180], 0
	mov	dword ptr [ecx + 184], 0
	mov	dword ptr [ecx + 168], 8
	mov	dword ptr [ecx + 172], 0
	mov	dword ptr [ecx + 176], 0
	movups	xmmword ptr [ecx + 152], xmm1
	mov	dword ptr [ecx + 272], 0
	mov	dword ptr [ecx + 288], 0
	mov	dword ptr [ecx + 296], 0
	mov	dword ptr [ecx + 332], 0
	mov	dword ptr [ecx + 340], 0
	mov	dword ptr [ecx + 344], 0
	mov	dword ptr [ecx + 348], 0
	mov	dword ptr [ecx + 360], 0
	mov	dword ptr [ecx + 356], 0
	mov	dword ptr [ecx + 368], 0
	mov	dword ptr [ecx + 364], 0
	mov	dword ptr [ecx + 376], 0
	mov	dword ptr [ecx + 372], 0
	mov	dword ptr [ecx + 200], 0
	mov	dword ptr [ecx + 196], 0
	mov	dword ptr [ecx + 208], 0
	mov	dword ptr [ecx + 204], 0
	mov	dword ptr [ecx + 216], 0
	mov	dword ptr [ecx + 212], 0
	mov	dword ptr [ecx + 224], 0
	mov	dword ptr [ecx + 220], 0
	mov	dword ptr [ecx + 232], 0
	mov	dword ptr [ecx + 228], 0
	mov	dword ptr [ecx + 240], 0
	mov	dword ptr [ecx + 236], 0
	mov	dword ptr [ecx + 244], 0
	mov	dword ptr [ecx + 380], 1
	ret
                                        # -- End function
	.def	 "??0State@lodepng@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"??0State@lodepng@@QAE@ABV01@@Z" # -- Begin function ??0State@lodepng@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0State@lodepng@@QAE@ABV01@@Z":       # @"??0State@lodepng@@QAE@ABV01@@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 8]
	movaps	xmm0, xmmword ptr [__xmm@01000000000000000000000100000001] # xmm0 = [1,1,0,16777216]
	movaps	xmm2, xmmword ptr [__xmm@00000003000008000000000100000002] # xmm2 = [2,1,2048,3]
	movaps	xmm1, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm1 = [0,0,0,6]
	mov	esi, ecx
	movups	xmmword ptr [ecx + 36], xmm0
	mov	dword ptr [ecx + 52], 16777216
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ecx], 0
	mov	dword ptr [ecx + 12], 0
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 20], 0
	mov	dword ptr [ecx + 16], 0
	mov	dword ptr [ecx + 28], 0
	mov	dword ptr [ecx + 24], 0
	mov	dword ptr [ecx + 32], 0
	movups	xmmword ptr [ecx + 56], xmm2
	mov	dword ptr [ecx + 72], 128
	mov	dword ptr [ecx + 76], 1
	mov	dword ptr [ecx + 80], 0
	mov	dword ptr [ecx + 84], 0
	mov	dword ptr [ecx + 88], 0
	mov	dword ptr [ecx + 96], 1
	mov	dword ptr [ecx + 100], 5
	mov	dword ptr [ecx + 92], 1
	mov	dword ptr [ecx + 108], 0
	mov	dword ptr [ecx + 104], 0
	mov	dword ptr [ecx + 112], 0
	mov	dword ptr [ecx + 116], 1
	mov	dword ptr [ecx + 140], 0
	mov	dword ptr [ecx + 136], 0
	mov	dword ptr [ecx + 148], 0
	mov	dword ptr [ecx + 144], 0
	mov	dword ptr [ecx + 120], 6
	mov	dword ptr [ecx + 124], 8
	mov	dword ptr [ecx + 128], 0
	mov	dword ptr [ecx + 132], 0
	mov	dword ptr [ecx + 188], 0
	mov	dword ptr [ecx + 192], 0
	mov	dword ptr [ecx + 180], 0
	mov	dword ptr [ecx + 184], 0
	mov	dword ptr [ecx + 168], 8
	mov	dword ptr [ecx + 172], 0
	mov	dword ptr [ecx + 176], 0
	movups	xmmword ptr [ecx + 152], xmm1
	mov	dword ptr [ecx + 272], 0
	mov	dword ptr [ecx + 288], 0
	mov	dword ptr [ecx + 296], 0
	mov	dword ptr [ecx + 332], 0
	mov	dword ptr [ecx + 340], 0
	mov	dword ptr [ecx + 344], 0
	mov	dword ptr [ecx + 348], 0
	mov	dword ptr [ecx + 360], 0
	mov	dword ptr [ecx + 356], 0
	mov	dword ptr [ecx + 368], 0
	mov	dword ptr [ecx + 364], 0
	mov	dword ptr [ecx + 376], 0
	mov	dword ptr [ecx + 372], 0
	mov	dword ptr [ecx + 200], 0
	mov	dword ptr [ecx + 196], 0
	mov	dword ptr [ecx + 208], 0
	mov	dword ptr [ecx + 204], 0
	mov	dword ptr [ecx + 216], 0
	mov	dword ptr [ecx + 212], 0
	mov	dword ptr [ecx + 224], 0
	mov	dword ptr [ecx + 220], 0
	mov	dword ptr [ecx + 232], 0
	mov	dword ptr [ecx + 228], 0
	mov	dword ptr [ecx + 240], 0
	mov	dword ptr [ecx + 236], 0
	mov	dword ptr [ecx + 244], 0
	mov	dword ptr [ecx + 380], 1
	push	eax
	push	ecx
	call	"?lodepng_state_copy@@YAXPAULodePNGState@@PBU1@@Z"
	add	esp, 8
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "??1State@lodepng@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"??1State@lodepng@@QAE@XZ"      # -- Begin function ??1State@lodepng@@QAE@XZ
	.p2align	4, 0x90
"??1State@lodepng@@QAE@XZ":             # @"??1State@lodepng@@QAE@XZ"
# %bb.0:
	push	esi
	mov	eax, dword ptr [ecx + 128]
	mov	esi, ecx
	test	eax, eax
	je	LBB102_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB102_2:
	mov	dword ptr [esi + 128], 0
	mov	dword ptr [esi + 132], 0
	add	esi, 152
	push	esi
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	pop	esi
	ret
                                        # -- End function
	.def	 "??4State@lodepng@@QAEAAV01@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"??4State@lodepng@@QAEAAV01@ABV01@@Z" # -- Begin function ??4State@lodepng@@QAEAAV01@ABV01@@Z
	.p2align	4, 0x90
"??4State@lodepng@@QAEAAV01@ABV01@@Z":  # @"??4State@lodepng@@QAEAAV01@ABV01@@Z"
# %bb.0:
	push	esi
	mov	esi, ecx
	push	dword ptr [esp + 8]
	push	ecx
	call	"?lodepng_state_copy@@YAXPAULodePNGState@@PBU1@@Z"
	add	esp, 8
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z" # -- Begin function ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z": # @"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z"
Lfunc_begin0:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -16
	sub	esp, 432
	mov	esi, esp
	mov	dword ptr [esi + 408], ebp
	mov	dword ptr [esi + 412], esp
	mov	dword ptr [esi + 424], -1
	mov	dword ptr [esi + 420], offset "___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z"
	mov	ebx, dword ptr [ebp + 32]
	mov	ecx, dword ptr [ebp + 24]
	lea	edx, [esi + 4]
	mov	eax, dword ptr fs:[0]
	mov	dword ptr [esi + 416], eax
	lea	eax, [esi + 416]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 20]
	mov	dword ptr [esi + 4], 0
	push	ebx
	push	dword ptr [ebp + 28]
	push	ecx
	push	eax
	push	dword ptr [ebp + 16]
	push	dword ptr [ebp + 12]
	push	edx
	call	"?lodepng_decode_memory@@YAIPAPAEPAI1PBEIW4LodePNGColorType@@I@Z"
	add	esp, 28
	mov	edi, eax
	mov	eax, dword ptr [esi + 4]
	test	edi, edi
	jne	LBB104_13
# %bb.1:
	test	eax, eax
	je	LBB104_13
# %bb.2:
	movaps	xmm0, xmmword ptr [__xmm@01000000000000000000000100000001] # xmm0 = [1,1,0,16777216]
	movaps	xmm1, xmmword ptr [__xmm@00000003000008000000000100000002] # xmm1 = [2,1,2048,3]
	mov	edx, dword ptr [ebp + 28]
	mov	ecx, dword ptr [ebp + 16]
	mov	dword ptr [esi + 12], edi       # 4-byte Spill
	movups	xmmword ptr [esi + 52], xmm0
	xorps	xmm0, xmm0
	mov	dword ptr [esi + 68], 16777216
	mov	dword ptr [esi + 48], 0
	movaps	xmmword ptr [esi + 16], xmm0
	movaps	xmmword ptr [esi + 32], xmm0
	movups	xmmword ptr [esi + 72], xmm1
	movaps	xmm1, xmmword ptr [__xmm@00000001000000000000000000000000] # xmm1 = [0,0,0,1]
	mov	dword ptr [esi + 88], 128
	mov	dword ptr [esi + 92], 1
	movaps	xmmword ptr [esi + 96], xmm1
	movaps	xmm1, xmmword ptr [__xmm@00000000000000000000000500000001] # xmm1 = [1,5,0,0]
	movaps	xmmword ptr [esi + 112], xmm1
	movaps	xmm1, xmmword ptr [__xmm@00000006000000000000000000000000] # xmm1 = [0,0,0,6]
	mov	dword ptr [esi + 128], 0
	mov	dword ptr [esi + 132], 1
	mov	dword ptr [esi + 164], 0
	mov	dword ptr [esi + 160], 0
	movaps	xmmword ptr [esi + 144], xmm0
	mov	dword ptr [esi + 204], 0
	mov	dword ptr [esi + 208], 0
	mov	dword ptr [esi + 196], 0
	mov	dword ptr [esi + 200], 0
	mov	dword ptr [esi + 184], 8
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 192], 0
	movups	xmmword ptr [esi + 168], xmm1
	mov	dword ptr [esi + 288], 0
	mov	dword ptr [esi + 304], 0
	mov	dword ptr [esi + 312], 0
	mov	dword ptr [esi + 348], 0
	mov	dword ptr [esi + 356], 0
	mov	dword ptr [esi + 360], 0
	mov	dword ptr [esi + 364], 0
	mov	dword ptr [esi + 388], 0
	mov	dword ptr [esi + 392], 0
	mov	dword ptr [esi + 380], 0
	mov	dword ptr [esi + 384], 0
	mov	dword ptr [esi + 372], 0
	mov	dword ptr [esi + 376], 0
	mov	dword ptr [esi + 260], 0
	mov	dword ptr [esi + 252], 0
	mov	dword ptr [esi + 256], 0
	mov	dword ptr [esi + 244], 0
	mov	dword ptr [esi + 248], 0
	mov	dword ptr [esi + 236], 0
	mov	dword ptr [esi + 240], 0
	mov	dword ptr [esi + 228], 0
	mov	dword ptr [esi + 232], 0
	mov	dword ptr [esi + 220], 0
	mov	dword ptr [esi + 224], 0
	mov	dword ptr [esi + 212], 0
	mov	dword ptr [esi + 216], 0
	mov	dword ptr [esi + 396], 1
	mov	dword ptr [esi + 136], edx
	mov	dword ptr [esi + 140], ebx
	mov	ebx, edx
	mov	edx, dword ptr [ebp + 12]
	mov	edi, dword ptr [ecx]
	cmp	ebx, 6
	mov	edx, dword ptr [edx]
	ja	LBB104_3
# %bb.5:
	mov	ecx, ebx
	mov	ebx, 1
	jmp	dword ptr [4*ecx + LJTI104_0]
LBB104_6:
	mov	ebx, 3
	jmp	LBB104_9
LBB104_3:
	cmp	ebx, 255
LBB104_4:
	xor	ebx, ebx
	jmp	LBB104_9
LBB104_7:
	mov	ebx, 2
	jmp	LBB104_9
LBB104_8:
	mov	ebx, 4
LBB104_9:
	imul	ebx, dword ptr [ebp + 32]
	imul	edx, edi
	mov	ecx, dword ptr [ebp + 8]
	mov	edi, edx
	and	edx, 7
	shr	edi, 3
	imul	edx, ebx
	imul	edi, ebx
	add	edx, 7
	shr	edx, 3
	add	edx, edi
	mov	edi, dword ptr [ecx + 4]
	mov	dword ptr [esi + 424], 0
	add	edx, eax
	sub	esp, 16
	mov	bl, byte ptr [esi + 8]
	mov	byte ptr [esp + 12], bl
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], edi
	mov	dword ptr [esp + 8], edx
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
# %bb.10:
	mov	eax, dword ptr [esi + 144]
	mov	edi, dword ptr [esi + 12]       # 4-byte Reload
	test	eax, eax
	je	LBB104_12
# %bb.11:
	push	eax
	call	_free
	add	esp, 4
LBB104_12:
	lea	eax, [esi + 168]
	mov	dword ptr [esi + 144], 0
	mov	dword ptr [esi + 148], 0
	push	eax
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 4
	mov	eax, dword ptr [esi + 4]
LBB104_13:
	push	eax
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esi + 416]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$14@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z@4HA":
LBB104_14:
	push	ebp
	sub	esp, 28
	lea	esi, [ebp - 428]
	mov	ebp, dword ptr [esi + 408]
	mov	eax, dword ptr [esi + 144]
	test	eax, eax
	je	LBB104_16
# %bb.15:
	push	eax
	call	_free
	add	esp, 4
LBB104_16:
	lea	eax, [esi + 168]
	mov	dword ptr [esi + 144], 0
	mov	dword ptr [esi + 148], 0
	push	eax
	call	"?lodepng_info_cleanup@@YAXPAULodePNGInfo@@@Z"
	add	esp, 32
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end0:
	.section	.rdata,"dr"
	.p2align	2
LJTI104_0:
	.long	LBB104_9
	.long	LBB104_4
	.long	LBB104_6
	.long	LBB104_9
	.long	LBB104_7
	.long	LBB104_4
	.long	LBB104_8
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z@4HA" # Action
	.section	.rdata,"dr"
                                        # -- End function
	.def	 "?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z" # -- Begin function ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z": # @"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV23@W4LodePNGColorType@@I@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 16]
	xor	edx, edx
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	sub	eax, ecx
	cmovne	edx, ecx
	push	dword ptr [esp + 24]
	push	dword ptr [esp + 24]
	push	eax
	push	edx
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	push	dword ptr [esp + 28]
	call	"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z"
	add	esp, 28
	ret
                                        # -- End function
	.def	 "?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@PBEI@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@PBEI@Z" # -- Begin function ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@PBEI@Z
	.p2align	4, 0x90
"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@PBEI@Z": # @"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@PBEI@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	ebx, dword ptr [esp + 40]
	mov	ebp, dword ptr [esp + 32]
	mov	ecx, dword ptr [esp + 48]
	mov	eax, dword ptr [esp + 44]
	mov	dword ptr [esp + 4], 0
	lea	edx, [esp + 4]
	push	ecx
	push	eax
	push	ebx
	push	dword ptr [esp + 48]
	push	ebp
	push	edx
	call	"?lodepng_decode@@YAIPAPAEPAI1PAULodePNGState@@PBEI@Z"
	add	esp, 24
	mov	edi, dword ptr [esp + 4]
	mov	esi, eax
	test	eax, eax
	jne	LBB106_10
# %bb.1:
	test	edi, edi
	je	LBB106_10
# %bb.2:
	mov	eax, dword ptr [esp + 36]
	mov	edx, dword ptr [ebx + 120]
	mov	ebx, dword ptr [ebx + 124]
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [ebp]
	cmp	edx, 6
	ja	LBB106_3
# %bb.5:
	mov	ebp, 1
	jmp	dword ptr [4*edx + LJTI106_0]
LBB106_6:
	mov	ebp, 3
	jmp	LBB106_9
LBB106_3:
	cmp	edx, 255
LBB106_4:
	xor	ebp, ebp
	jmp	LBB106_9
LBB106_7:
	mov	ebp, 2
	jmp	LBB106_9
LBB106_8:
	mov	ebp, 4
LBB106_9:
	imul	eax, ecx
	imul	ebp, ebx
	mov	ecx, eax
	and	eax, 7
	imul	eax, ebp
	shr	ecx, 3
	add	eax, 7
	imul	ecx, ebp
	shr	eax, 3
	add	eax, ecx
	mov	ecx, dword ptr [esp + 28]
	add	eax, edi
	mov	ebx, dword ptr [ecx + 4]
	sub	esp, 16
	mov	dl, byte ptr [esp + 16]
	mov	byte ptr [esp + 12], dl
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], ebx
	mov	dword ptr [esp + 8], eax
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
LBB106_10:
	push	edi
	call	_free
	add	esp, 4
	mov	eax, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI106_0:
	.long	LBB106_9
	.long	LBB106_4
	.long	LBB106_6
	.long	LBB106_9
	.long	LBB106_7
	.long	LBB106_4
	.long	LBB106_8
                                        # -- End function
	.def	 "?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@ABV23@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@ABV23@@Z" # -- Begin function ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@ABV23@@Z
	.p2align	4, 0x90
"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@ABV23@@Z": # @"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@ABV23@@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 20]
	xor	edx, edx
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	sub	eax, ecx
	cmovne	edx, ecx
	push	eax
	push	edx
	push	dword ptr [esp + 24]
	push	dword ptr [esp + 24]
	push	dword ptr [esp + 24]
	push	dword ptr [esp + 24]
	call	"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1AAVState@1@PBEI@Z"
	add	esp, 24
	ret
                                        # -- End function
	.def	 "?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z" # -- Begin function ?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z": # @"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z"
Lfunc_begin1:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 28
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z"
	mov	eax, dword ptr [ebp + 20]
	mov	edi, dword ptr [ebp + 16]
	mov	esi, dword ptr [ebp + 12]
	lea	ecx, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], ecx
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
	mov	dword ptr [edi], 0
	mov	dword ptr [esi], 0
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 40]
	push	eax
	push	ecx
	call	"?load_file@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z"
	add	esp, 8
# %bb.1:
	mov	esi, eax
	test	eax, eax
	je	LBB108_2
# %bb.4:
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	jne	LBB108_5
	jmp	LBB108_12
LBB108_2:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [ebp - 36]
	xor	edx, edx
	sub	ecx, eax
	cmovne	edx, eax
	push	dword ptr [ebp + 28]
	push	dword ptr [ebp + 24]
	push	ecx
	push	edx
	push	dword ptr [ebp + 16]
	push	dword ptr [ebp + 12]
	push	dword ptr [ebp + 8]
	call	"?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z"
	add	esp, 28
# %bb.3:
	mov	esi, eax
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	je	LBB108_12
LBB108_5:
	mov	eax, dword ptr [ebp - 32]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB108_11
# %bb.6:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB108_7
# %bb.10:
	add	eax, 35
	mov	ecx, edx
LBB108_11:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
LBB108_12:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 28
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB108_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$9@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z@4HA":
LBB108_9:
	push	ebp
	sub	esp, 28
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$13@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z@4HA":
LBB108_13:
	push	ebp
	sub	esp, 28
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	je	LBB108_18
# %bb.14:
	mov	eax, dword ptr [ebp - 32]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB108_17
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB108_19
# %bb.16:
	add	eax, 35
	mov	ecx, edx
LBB108_17:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
LBB108_18:
	add	esp, 28
	pop	ebp
	ret                                     # CLEANUPRET
LBB108_19:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end1:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z":
	.long	-1                              # ToState
	.long	"?dtor$9@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$13@?0??decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIW4LodePNGColorType@@I@Z" # -- Begin function ?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIW4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIW4LodePNGColorType@@I@Z": # @"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIW4LodePNGColorType@@I@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	lea	eax, [esp + 4]
	lea	ecx, [esp + 8]
	push	dword ptr [esp + 48]
	push	dword ptr [esp + 48]
	push	dword ptr [esp + 48]
	push	dword ptr [esp + 48]
	push	dword ptr [esp + 48]
	push	eax
	push	ecx
	call	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
	add	esp, 28
	mov	edi, dword ptr [esp + 8]
	mov	esi, eax
	test	edi, edi
	je	LBB109_2
# %bb.1:
	mov	ecx, dword ptr [esp + 28]
	mov	eax, dword ptr [esp + 4]
	mov	edx, dword ptr [ecx + 4]
	add	eax, edi
	sub	esp, 16
	mov	bl, byte ptr [esp + 16]
	mov	byte ptr [esp + 12], bl
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], edx
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	push	edi
	call	_free
	add	esp, 4
LBB109_2:
	mov	eax, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIW4LodePNGColorType@@I@Z" # -- Begin function ?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIW4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIW4LodePNGColorType@@I@Z": # @"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIW4LodePNGColorType@@I@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	edx, dword ptr [esp + 48]
	mov	edi, dword ptr [esp + 52]
	mov	eax, dword ptr [esp + 44]
	mov	esi, dword ptr [esp + 36]
	cmp	edx, 6
	ja	LBB110_1
# %bb.3:
	mov	ebx, 1
	jmp	dword ptr [4*edx + LJTI110_0]
LBB110_4:
	mov	ebx, 3
	jmp	LBB110_7
LBB110_1:
	cmp	edx, 255
LBB110_2:
	xor	ebx, ebx
	jmp	LBB110_7
LBB110_5:
	mov	ebx, 2
	jmp	LBB110_7
LBB110_6:
	mov	ebx, 4
LBB110_7:
	mov	ecx, eax
	imul	ebx, edi
	imul	ecx, dword ptr [esp + 40]
	mov	ebp, ecx
	and	ecx, 7
	imul	ecx, ebx
	shr	ebp, 3
	add	ecx, 7
	imul	ebp, ebx
	mov	ebx, dword ptr [esi]
	shr	ecx, 3
	add	ecx, ebp
	mov	ebp, dword ptr [esi + 4]
	mov	esi, ebp
	sub	esi, ebx
	cmp	ecx, esi
	mov	esi, 84
	ja	LBB110_10
# %bb.8:
	xor	ecx, ecx
	cmp	ebx, ebp
	lea	esi, [esp + 4]
	cmovne	ecx, ebx
	lea	ebx, [esp + 8]
	push	edi
	push	edx
	push	eax
	push	dword ptr [esp + 52]
	push	ecx
	push	esi
	push	ebx
	call	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
	add	esp, 28
	mov	edi, dword ptr [esp + 8]
	mov	esi, eax
	test	edi, edi
	je	LBB110_10
# %bb.9:
	mov	ecx, dword ptr [esp + 32]
	mov	eax, dword ptr [esp + 4]
	mov	edx, dword ptr [ecx + 4]
	add	eax, edi
	sub	esp, 16
	mov	bl, byte ptr [esp + 16]
	mov	byte ptr [esp + 12], bl
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], edx
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	push	edi
	call	_free
	add	esp, 4
LBB110_10:
	mov	eax, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI110_0:
	.long	LBB110_7
	.long	LBB110_2
	.long	LBB110_4
	.long	LBB110_7
	.long	LBB110_5
	.long	LBB110_2
	.long	LBB110_6
                                        # -- End function
	.def	 "?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIAAVState@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIAAVState@1@@Z" # -- Begin function ?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIAAVState@1@@Z
	.p2align	4, 0x90
"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIAAVState@1@@Z": # @"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@PBEIIAAVState@1@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	lea	eax, [esp + 4]
	lea	ecx, [esp + 8]
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	dword ptr [esp + 44]
	push	eax
	push	ecx
	call	"?lodepng_encode@@YAIPAPAEPAIPBEIIPAULodePNGState@@@Z"
	add	esp, 24
	mov	edi, dword ptr [esp + 8]
	mov	esi, eax
	test	edi, edi
	je	LBB111_2
# %bb.1:
	mov	ecx, dword ptr [esp + 28]
	mov	eax, dword ptr [esp + 4]
	mov	edx, dword ptr [ecx + 4]
	add	eax, edi
	sub	esp, 16
	mov	bl, byte ptr [esp + 16]
	mov	byte ptr [esp + 12], bl
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], edx
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	push	edi
	call	_free
	add	esp, 4
LBB111_2:
	mov	eax, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIAAVState@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIAAVState@1@@Z" # -- Begin function ?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIAAVState@1@@Z
	.p2align	4, 0x90
"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIAAVState@1@@Z": # @"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIAAVState@1@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	edx, dword ptr [esp + 48]
	mov	ecx, dword ptr [esp + 44]
	mov	esi, dword ptr [esp + 36]
	mov	ebp, dword ptr [edx + 120]
	mov	edi, dword ptr [edx + 124]
	cmp	ebp, 6
	ja	LBB112_1
# %bb.3:
	mov	ebx, 1
	jmp	dword ptr [4*ebp + LJTI112_0]
LBB112_4:
	mov	ebx, 3
	jmp	LBB112_7
LBB112_1:
	cmp	ebp, 255
LBB112_2:
	xor	ebx, ebx
	jmp	LBB112_7
LBB112_5:
	mov	ebx, 2
	jmp	LBB112_7
LBB112_6:
	mov	ebx, 4
LBB112_7:
	mov	ebp, ecx
	imul	ebx, edi
	mov	eax, dword ptr [esi + 4]
	imul	ebp, dword ptr [esp + 40]
	mov	edi, ebp
	and	ebp, 7
	imul	ebp, ebx
	shr	edi, 3
	add	ebp, 7
	imul	edi, ebx
	mov	ebx, eax
	shr	ebp, 3
	add	ebp, edi
	mov	edi, dword ptr [esi]
	mov	esi, 84
	sub	ebx, edi
	cmp	ebp, ebx
	ja	LBB112_10
# %bb.8:
	xor	esi, esi
	cmp	edi, eax
	lea	eax, [esp + 4]
	cmovne	esi, edi
	lea	edi, [esp + 8]
	push	edx
	push	ecx
	push	dword ptr [esp + 48]
	push	esi
	push	eax
	push	edi
	call	"?lodepng_encode@@YAIPAPAEPAIPBEIIPAULodePNGState@@@Z"
	add	esp, 24
	mov	edi, dword ptr [esp + 8]
	mov	esi, eax
	test	edi, edi
	je	LBB112_10
# %bb.9:
	mov	ecx, dword ptr [esp + 32]
	mov	eax, dword ptr [esp + 4]
	mov	edx, dword ptr [ecx + 4]
	add	eax, edi
	sub	esp, 16
	mov	bl, byte ptr [esp + 16]
	mov	byte ptr [esp + 12], bl
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], edx
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	push	edi
	call	_free
	add	esp, 4
LBB112_10:
	mov	eax, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI112_0:
	.long	LBB112_7
	.long	LBB112_2
	.long	LBB112_4
	.long	LBB112_7
	.long	LBB112_5
	.long	LBB112_2
	.long	LBB112_6
                                        # -- End function
	.def	 "?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z" # -- Begin function ?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z": # @"?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z"
Lfunc_begin2:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 48
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z"
	mov	ecx, dword ptr [ebp + 16]
	mov	edx, dword ptr [ebp + 20]
	mov	esi, dword ptr [ebp + 24]
	lea	eax, [ebp - 60]
	lea	ebx, [ebp - 56]
	mov	edi, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edi
	lea	edi, [ebp - 24]
	mov	dword ptr fs:[0], edi
	mov	edi, dword ptr [ebp + 28]
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
	mov	dword ptr [ebp - 16], 1
	push	edi
	push	esi
	push	edx
	push	ecx
	push	dword ptr [ebp + 12]
	push	ebx
	push	eax
	call	"?lodepng_encode_memory@@YAIPAPAEPAIPBEIIW4LodePNGColorType@@I@Z"
	add	esp, 28
# %bb.1:
	mov	edx, dword ptr [ebp - 60]
	mov	esi, eax
	test	edx, edx
	je	LBB113_4
# %bb.2:
	mov	eax, dword ptr [ebp - 56]
	add	eax, edx
	sub	esp, 16
	mov	cl, byte ptr [ebp - 44]
	mov	byte ptr [esp + 12], cl
	lea	ecx, [ebp - 40]
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], 0
	mov	dword ptr [ebp - 52], esi       # 4-byte Spill
	call	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	mov	esi, dword ptr [ebp - 52]       # 4-byte Reload
# %bb.3:
	push	dword ptr [ebp - 48]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
LBB113_4:
	test	esi, esi
	jne	LBB113_10
# %bb.5:
	mov	eax, dword ptr [ebp + 8]
	cmp	dword ptr [eax + 20], 15
	jbe	LBB113_7
# %bb.6:
	mov	eax, dword ptr [eax]
LBB113_7:
	mov	edi, dword ptr [ebp - 40]
	mov	ebx, dword ptr [ebp - 36]
	push	offset "??_C@_02GMLFBBN@wb?$AA@"
	push	eax
	call	_fopen
	add	esp, 8
	test	eax, eax
	je	LBB113_8
# %bb.9:
	mov	esi, eax
	xor	eax, eax
	sub	ebx, edi
	cmove	edi, eax
	push	esi
	push	ebx
	push	1
	push	edi
	call	_fwrite
	add	esp, 16
	push	esi
	xor	esi, esi
	call	_fclose
	add	esp, 4
LBB113_10:
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	je	LBB113_18
LBB113_11:
	mov	eax, dword ptr [ebp - 32]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB113_17
# %bb.12:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB113_13
# %bb.16:
	add	eax, 35
	mov	ecx, edx
LBB113_17:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
LBB113_18:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 48
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB113_8:
	mov	esi, 79
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	jne	LBB113_11
	jmp	LBB113_18
LBB113_13:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.14:
	.def	 "?dtor$15@?0??encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0??encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z@4HA":
LBB113_15:
	push	ebp
	sub	esp, 28
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$19@?0??encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0??encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z@4HA":
LBB113_19:
	push	ebp
	sub	esp, 28
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	je	LBB113_24
# %bb.20:
	mov	eax, dword ptr [ebp - 32]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB113_23
# %bb.21:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB113_25
# %bb.22:
	add	eax, 35
	mov	ecx, edx
LBB113_23:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
LBB113_24:
	add	esp, 28
	pop	ebp
	ret                                     # CLEANUPRET
LBB113_25:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end2:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z":
	.long	-1                              # ToState
	.long	"?dtor$15@?0??encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$19@?0??encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@EV?$allocator@E@std@@@3@IIW4LodePNGColorType@@I@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@EV?$allocator@E@std@@@3@IIW4LodePNGColorType@@I@Z" # -- Begin function ?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@EV?$allocator@E@std@@@3@IIW4LodePNGColorType@@I@Z
	.p2align	4, 0x90
"?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@EV?$allocator@E@std@@@3@IIW4LodePNGColorType@@I@Z": # @"?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV?$vector@EV?$allocator@E@std@@@3@IIW4LodePNGColorType@@I@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	edx, dword ptr [esp + 36]
	mov	esi, dword ptr [esp + 40]
	mov	ecx, dword ptr [esp + 32]
	mov	edi, dword ptr [esp + 24]
	cmp	edx, 6
	ja	LBB114_1
# %bb.3:
	mov	ebx, 1
	jmp	dword ptr [4*edx + LJTI114_0]
LBB114_4:
	mov	ebx, 3
	jmp	LBB114_7
LBB114_1:
	cmp	edx, 255
LBB114_2:
	xor	ebx, ebx
	jmp	LBB114_7
LBB114_5:
	mov	ebx, 2
	jmp	LBB114_7
LBB114_6:
	mov	ebx, 4
LBB114_7:
	mov	ebp, ecx
	imul	ebx, esi
	imul	ebp, dword ptr [esp + 28]
	mov	eax, ebp
	and	ebp, 7
	shr	eax, 3
	imul	ebp, ebx
	imul	eax, ebx
	mov	ebx, dword ptr [edi]
	mov	edi, dword ptr [edi + 4]
	add	ebp, 7
	shr	ebp, 3
	add	ebp, eax
	mov	eax, edi
	sub	eax, ebx
	cmp	ebp, eax
	jbe	LBB114_8
# %bb.9:
	mov	eax, 84
	jmp	LBB114_10
LBB114_8:
	xor	eax, eax
	cmp	ebx, edi
	cmovne	eax, ebx
	push	esi
	push	edx
	push	ecx
	push	dword ptr [esp + 40]
	push	eax
	push	dword ptr [esp + 40]
	call	"?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z"
	add	esp, 24
LBB114_10:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI114_0:
	.long	LBB114_7
	.long	LBB114_2
	.long	LBB114_4
	.long	LBB114_7
	.long	LBB114_5
	.long	LBB114_2
	.long	LBB114_6
                                        # -- End function
	.def	 "?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z";
	.scl	3;
	.type	32;
	.endef
	.globl	__xmm@00000008000000080000000800000008 # -- Begin function ?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z
	.section	.rdata,"dr",discard,__xmm@00000008000000080000000800000008
	.p2align	4
__xmm@00000008000000080000000800000008:
	.long	8                               # 0x8
	.long	8                               # 0x8
	.long	8                               # 0x8
	.long	8                               # 0x8
	.globl	__xmm@00000009000000090000000900000009
	.section	.rdata,"dr",discard,__xmm@00000009000000090000000900000009
	.p2align	4
__xmm@00000009000000090000000900000009:
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	9                               # 0x9
	.globl	__xmm@00000007000000070000000700000007
	.section	.rdata,"dr",discard,__xmm@00000007000000070000000700000007
	.p2align	4
__xmm@00000007000000070000000700000007:
	.long	7                               # 0x7
	.long	7                               # 0x7
	.long	7                               # 0x7
	.long	7                               # 0x7
	.text
	.p2align	4, 0x90
"?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z": # @"?generateFixedLitLenTree@@YAIPAUHuffmanTree@@@Z"
# %bb.0:
	push	edi
	push	esi
	mov	edi, ecx
	push	1152
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB115_1
# %bb.2:
	movaps	xmm0, xmmword ptr [__xmm@00000008000000080000000800000008] # xmm0 = [8,8,8,8]
	movaps	xmm1, xmmword ptr [__xmm@00000009000000090000000900000009] # xmm1 = [9,9,9,9]
	movaps	xmm2, xmmword ptr [__xmm@00000007000000070000000700000007] # xmm2 = [7,7,7,7]
	mov	esi, eax
	movups	xmmword ptr [eax], xmm0
	movups	xmmword ptr [eax + 16], xmm0
	movups	xmmword ptr [eax + 32], xmm0
	movups	xmmword ptr [eax + 48], xmm0
	movups	xmmword ptr [eax + 64], xmm0
	movups	xmmword ptr [eax + 80], xmm0
	movups	xmmword ptr [eax + 96], xmm0
	movups	xmmword ptr [eax + 112], xmm0
	movups	xmmword ptr [eax + 128], xmm0
	movups	xmmword ptr [eax + 144], xmm0
	movups	xmmword ptr [eax + 160], xmm0
	movups	xmmword ptr [eax + 176], xmm0
	movups	xmmword ptr [eax + 192], xmm0
	movups	xmmword ptr [eax + 208], xmm0
	movups	xmmword ptr [eax + 224], xmm0
	movups	xmmword ptr [eax + 240], xmm0
	movups	xmmword ptr [eax + 256], xmm0
	movups	xmmword ptr [eax + 272], xmm0
	movups	xmmword ptr [eax + 288], xmm0
	movups	xmmword ptr [eax + 304], xmm0
	movups	xmmword ptr [eax + 320], xmm0
	movups	xmmword ptr [eax + 336], xmm0
	movups	xmmword ptr [eax + 352], xmm0
	movups	xmmword ptr [eax + 368], xmm0
	movups	xmmword ptr [eax + 384], xmm0
	movups	xmmword ptr [eax + 400], xmm0
	movups	xmmword ptr [eax + 416], xmm0
	movups	xmmword ptr [eax + 432], xmm0
	movups	xmmword ptr [eax + 448], xmm0
	movups	xmmword ptr [eax + 464], xmm0
	movups	xmmword ptr [eax + 480], xmm0
	movups	xmmword ptr [eax + 496], xmm0
	movups	xmmword ptr [eax + 512], xmm0
	movups	xmmword ptr [eax + 528], xmm0
	movups	xmmword ptr [eax + 544], xmm0
	movups	xmmword ptr [eax + 560], xmm0
	movups	xmmword ptr [eax + 576], xmm1
	movups	xmmword ptr [eax + 592], xmm1
	movups	xmmword ptr [eax + 608], xmm1
	movups	xmmword ptr [eax + 624], xmm1
	movups	xmmword ptr [eax + 640], xmm1
	movups	xmmword ptr [eax + 656], xmm1
	movups	xmmword ptr [eax + 672], xmm1
	movups	xmmword ptr [eax + 688], xmm1
	movups	xmmword ptr [eax + 704], xmm1
	movups	xmmword ptr [eax + 720], xmm1
	movups	xmmword ptr [eax + 736], xmm1
	movups	xmmword ptr [eax + 752], xmm1
	movups	xmmword ptr [eax + 768], xmm1
	movups	xmmword ptr [eax + 784], xmm1
	movups	xmmword ptr [eax + 800], xmm1
	movups	xmmword ptr [eax + 816], xmm1
	movups	xmmword ptr [eax + 832], xmm1
	movups	xmmword ptr [eax + 848], xmm1
	movups	xmmword ptr [eax + 864], xmm1
	movups	xmmword ptr [eax + 880], xmm1
	movups	xmmword ptr [eax + 896], xmm1
	movups	xmmword ptr [eax + 912], xmm1
	movups	xmmword ptr [eax + 928], xmm1
	movups	xmmword ptr [eax + 944], xmm1
	movups	xmmword ptr [eax + 960], xmm1
	movups	xmmword ptr [eax + 976], xmm1
	movups	xmmword ptr [eax + 992], xmm1
	movups	xmmword ptr [eax + 1008], xmm1
	movups	xmmword ptr [eax + 1024], xmm2
	movups	xmmword ptr [eax + 1040], xmm2
	movups	xmmword ptr [eax + 1056], xmm2
	movups	xmmword ptr [eax + 1072], xmm2
	movups	xmmword ptr [eax + 1088], xmm2
	movups	xmmword ptr [eax + 1104], xmm2
	movups	xmmword ptr [eax + 1120], xmm0
	movups	xmmword ptr [eax + 1136], xmm0
	push	1152
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [edi + 4], eax
	je	LBB115_3
# %bb.4:
	push	1152
	push	esi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	ecx, edi
	mov	dword ptr [edi + 12], 288
	mov	dword ptr [edi + 8], 15
	call	"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
	mov	edi, eax
	jmp	LBB115_5
LBB115_1:
	mov	edi, 83
	mov	eax, edi
	pop	esi
	pop	edi
	ret
LBB115_3:
	mov	edi, 83
LBB115_5:
	push	esi
	call	_free
	add	esp, 4
	mov	eax, edi
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z";
	.scl	3;
	.type	32;
	.endef
	.globl	__xmm@00000005000000050000000500000005 # -- Begin function ?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z
	.section	.rdata,"dr",discard,__xmm@00000005000000050000000500000005
	.p2align	4
__xmm@00000005000000050000000500000005:
	.long	5                               # 0x5
	.long	5                               # 0x5
	.long	5                               # 0x5
	.long	5                               # 0x5
	.text
	.p2align	4, 0x90
"?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z": # @"?generateFixedDistanceTree@@YAIPAUHuffmanTree@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebp, ecx
	push	128
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB116_1
# %bb.2:
	movaps	xmm0, xmmword ptr [__xmm@00000005000000050000000500000005] # xmm0 = [5,5,5,5]
	mov	ebx, eax
	movups	xmmword ptr [eax], xmm0
	movups	xmmword ptr [eax + 16], xmm0
	movups	xmmword ptr [eax + 32], xmm0
	movups	xmmword ptr [eax + 48], xmm0
	movups	xmmword ptr [eax + 64], xmm0
	movups	xmmword ptr [eax + 80], xmm0
	movups	xmmword ptr [eax + 96], xmm0
	movups	xmmword ptr [eax + 112], xmm0
	push	128
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [ebp + 4], eax
	je	LBB116_3
# %bb.4:
	mov	ecx, 32
	mov	edi, eax
	mov	esi, ebx
	rep movsd es:[edi], [esi]
	mov	ecx, ebp
	mov	dword ptr [ebp + 12], 32
	mov	dword ptr [ebp + 8], 15
	call	"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
	mov	esi, eax
	jmp	LBB116_5
LBB116_1:
	mov	esi, 83
	jmp	LBB116_6
LBB116_3:
	mov	esi, 83
LBB116_5:
	push	ebx
	call	_free
	add	esp, 4
LBB116_6:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z";
	.scl	3;
	.type	32;
	.endef
	.globl	__xmm@00000000000000000000000000000200 # -- Begin function ?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z
	.section	.rdata,"dr",discard,__xmm@00000000000000000000000000000200
	.p2align	4
__xmm@00000000000000000000000000000200:
	.long	512                             # 0x200
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.globl	__xmm@80000000800000008000000080000000
	.section	.rdata,"dr",discard,__xmm@80000000800000008000000080000000
	.p2align	4
__xmm@80000000800000008000000080000000:
	.long	2147483648                      # 0x80000000
	.long	2147483648                      # 0x80000000
	.long	2147483648                      # 0x80000000
	.long	2147483648                      # 0x80000000
	.globl	__xmm@80000009800000098000000980000009
	.section	.rdata,"dr",discard,__xmm@80000009800000098000000980000009
	.p2align	4
__xmm@80000009800000098000000980000009:
	.long	2147483657                      # 0x80000009
	.long	2147483657                      # 0x80000009
	.long	2147483657                      # 0x80000009
	.long	2147483657                      # 0x80000009
	.globl	__xmm@fffffff7fffffff7fffffff7fffffff7
	.section	.rdata,"dr",discard,__xmm@fffffff7fffffff7fffffff7fffffff7
	.p2align	4
__xmm@fffffff7fffffff7fffffff7fffffff7:
	.long	4294967287                      # 0xfffffff7
	.long	4294967287                      # 0xfffffff7
	.long	4294967287                      # 0xfffffff7
	.long	4294967287                      # 0xfffffff7
	.globl	__xmm@3f8000003f8000003f8000003f800000
	.section	.rdata,"dr",discard,__xmm@3f8000003f8000003f8000003f800000
	.p2align	4
__xmm@3f8000003f8000003f8000003f800000:
	.long	1065353216                      # 0x3f800000
	.long	1065353216                      # 0x3f800000
	.long	1065353216                      # 0x3f800000
	.long	1065353216                      # 0x3f800000
	.globl	__xmm@00000001000000010000000100000001
	.section	.rdata,"dr",discard,__xmm@00000001000000010000000100000001
	.p2align	4
__xmm@00000001000000010000000100000001:
	.long	1                               # 0x1
	.long	1                               # 0x1
	.long	1                               # 0x1
	.long	1                               # 0x1
	.text
	.p2align	4, 0x90
"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z": # @"?HuffmanTree_makeFromLengths2@@YAIPAUHuffmanTree@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 28
	mov	eax, dword ptr [ecx + 12]
	mov	esi, ecx
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [4*eax]
	push	eax
	call	_malloc
	add	esp, 4
	mov	dword ptr [esi], eax
	mov	dword ptr [esp + 8], esi        # 4-byte Spill
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	mov	esi, dword ptr [esi + 8]
	lea	ebx, [4*esi + 4]
	push	ebx
	call	_malloc
	add	esp, 4
	mov	edi, eax
	push	ebx
	call	_malloc
	add	esp, 4
	test	eax, eax
	je	LBB117_16
# %bb.1:
	test	edi, edi
	je	LBB117_16
# %bb.2:
	cmp	dword ptr [esp + 16], 0         # 4-byte Folded Reload
	je	LBB117_16
# %bb.3:
	cmp	esi, -1
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	je	LBB117_5
# %bb.4:
	push	ebx
	push	0
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	_memset
	add	esp, 12
	push	ebx
	push	0
	push	edi
	call	_memset
	add	esp, 12
LBB117_5:
	cmp	dword ptr [esp], 0              # 4-byte Folded Reload
	je	LBB117_8
# %bb.6:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	.p2align	4, 0x90
LBB117_7:                               # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [eax]
	add	eax, 4
	inc	dword ptr [edi + 4*edx]
	dec	ecx
	jne	LBB117_7
LBB117_8:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	test	esi, esi
	je	LBB117_11
# %bb.9:
	mov	eax, dword ptr [edx]
	mov	ecx, 1
	.p2align	4, 0x90
LBB117_10:                              # =>This Inner Loop Header: Depth=1
	add	eax, dword ptr [edi + 4*ecx - 4]
	add	eax, eax
	mov	dword ptr [edx + 4*ecx], eax
	inc	ecx
	cmp	ecx, esi
	jbe	LBB117_10
LBB117_11:
	cmp	dword ptr [esp], 0              # 4-byte Folded Reload
	je	LBB117_18
# %bb.12:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	xor	edx, edx
	mov	eax, dword ptr [eax + 4]
	jmp	LBB117_14
	.p2align	4, 0x90
LBB117_13:                              #   in Loop: Header=BB117_14 Depth=1
	inc	edx
	cmp	dword ptr [esp], edx            # 4-byte Folded Reload
	je	LBB117_18
LBB117_14:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [eax + 4*edx]
	test	ecx, ecx
	je	LBB117_13
# %bb.15:                               #   in Loop: Header=BB117_14 Depth=1
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebx, edi
	mov	esi, dword ptr [ebp + 4*ecx]
	lea	edi, [esi + 1]
	mov	dword ptr [ebp + 4*ecx], edi
	mov	ebp, dword ptr [esp + 16]       # 4-byte Reload
	mov	edi, -1
	mov	dword ptr [ebp + 4*edx], esi
	movzx	ecx, byte ptr [eax + 4*edx]
	shl	edi, cl
	not	edi
	and	edi, esi
	mov	dword ptr [ebp + 4*edx], edi
	mov	edi, ebx
	jmp	LBB117_13
LBB117_16:
	push	edi
	mov	esi, eax
	call	_free
	add	esp, 4
LBB117_17:
	push	esi
	call	_free
	add	esp, 4
	mov	ecx, 83
	jmp	LBB117_62
LBB117_18:
	push	edi
	call	_free
	add	esp, 4
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	2048
	call	_malloc
	add	esp, 4
	mov	ecx, 83
	test	eax, eax
	je	LBB117_62
# %bb.19:
	push	2048
	push	0
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	push	eax
	call	_memset
	add	esp, 12
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, dword ptr [eax + 12]
	test	ecx, ecx
	je	LBB117_24
# %bb.20:
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	xor	esi, esi
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	jmp	LBB117_22
	.p2align	4, 0x90
LBB117_21:                              #   in Loop: Header=BB117_22 Depth=1
	inc	esi
	cmp	ecx, esi
	je	LBB117_24
LBB117_22:                              # =>This Inner Loop Header: Depth=1
	mov	ebx, dword ptr [eax + 4*esi]
	cmp	ebx, 10
	jb	LBB117_21
# %bb.23:                               #   in Loop: Header=BB117_22 Depth=1
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, dword ptr [eax]
	mov	edx, dword ptr [ecx + 4*esi]
	mov	ecx, ebx
	add	cl, -9
	shr	edx, cl
	mov	ecx, edx
	mov	edi, edx
	mov	ebp, edx
	mov	eax, edx
	shr	ecx, 8
	shr	edi, 6
	and	ebp, 16
	shr	eax, 4
	and	ecx, 1
	and	edi, 2
	and	eax, 4
	or	ebp, ecx
	mov	ecx, edx
	or	ebp, edi
	shr	ecx, 2
	mov	edi, edx
	or	ebp, eax
	and	ecx, 8
	mov	eax, edx
	and	edi, 2
	or	ebp, ecx
	mov	ecx, edx
	and	edx, 1
	shl	edi, 6
	and	eax, 8
	shl	edx, 8
	shl	ecx, 4
	lea	eax, [ebp + 4*eax]
	or	edx, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	and	ecx, 64
	or	eax, ecx
	or	eax, edx
	mov	ecx, dword ptr [edi + 4*eax]
	cmp	ecx, ebx
	cmova	ebx, ecx
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [edi + 4*eax], ebx
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	jmp	LBB117_21
LBB117_24:
	movdqa	xmm1, xmmword ptr [__xmm@00000000000000000000000000000200] # xmm1 = [512,0,0,0]
	mov	esi, dword ptr [esp]            # 4-byte Reload
	movdqa	xmm3, xmmword ptr [__xmm@00000001000000010000000100000001] # xmm3 = [1,1,1,1]
	movdqa	xmm5, xmmword ptr [__xmm@80000009800000098000000980000009] # xmm5 = [2147483657,2147483657,2147483657,2147483657]
	pxor	xmm0, xmm0
	mov	eax, -2048
	.p2align	4, 0x90
LBB117_25:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm7, xmmword ptr [esi + eax + 2048]
	movdqa	xmm4, xmmword ptr [__xmm@fffffff7fffffff7fffffff7fffffff7] # xmm4 = [4294967287,4294967287,4294967287,4294967287]
	movdqa	xmm6, xmm3
	movdqa	xmm2, xmm7
	paddd	xmm7, xmm4
	movdqa	xmm4, xmmword ptr [__xmm@3f8000003f8000003f8000003f800000] # xmm4 = [1065353216,1065353216,1065353216,1065353216]
	pslld	xmm7, 23
	paddd	xmm7, xmm4
	movdqa	xmm4, xmmword ptr [__xmm@80000000800000008000000080000000] # xmm4 = [2147483648,2147483648,2147483648,2147483648]
	cvttps2dq	xmm7, xmm7
	pmuludq	xmm6, xmm7
	pshufd	xmm7, xmm7, 245                 # xmm7 = xmm7[1,1,3,3]
	pmuludq	xmm7, xmm3
	pshufd	xmm6, xmm6, 232                 # xmm6 = xmm6[0,2,2,3]
	pshufd	xmm7, xmm7, 232                 # xmm7 = xmm7[0,2,2,3]
	pxor	xmm2, xmm4
	punpckldq	xmm6, xmm7              # xmm6 = xmm6[0],xmm7[0],xmm6[1],xmm7[1]
	movdqu	xmm7, xmmword ptr [esi + eax + 2064]
	pcmpgtd	xmm2, xmm5
	add	eax, 32
	pand	xmm6, xmm2
	paddd	xmm1, xmm6
	movdqa	xmm2, xmm7
	paddd	xmm7, xmmword ptr [__xmm@fffffff7fffffff7fffffff7fffffff7]
	pxor	xmm2, xmm4
	pcmpgtd	xmm2, xmm5
	pslld	xmm7, 23
	paddd	xmm7, xmmword ptr [__xmm@3f8000003f8000003f8000003f800000]
	cvttps2dq	xmm6, xmm7
	movdqa	xmm7, xmm3
	pmuludq	xmm7, xmm6
	pshufd	xmm6, xmm6, 245                 # xmm6 = xmm6[1,1,3,3]
	pmuludq	xmm6, xmm3
	pshufd	xmm7, xmm7, 232                 # xmm7 = xmm7[0,2,2,3]
	pshufd	xmm6, xmm6, 232                 # xmm6 = xmm6[0,2,2,3]
	punpckldq	xmm7, xmm6              # xmm7 = xmm7[0],xmm6[0],xmm7[1],xmm6[1]
	pand	xmm7, xmm2
	paddd	xmm0, xmm7
	jne	LBB117_25
# %bb.26:
	paddd	xmm0, xmm1
	pshufd	xmm1, xmm0, 78                  # xmm1 = xmm0[2,3,0,1]
	paddd	xmm1, xmm0
	pshufd	xmm0, xmm1, 229                 # xmm0 = xmm1[1,1,2,3]
	paddd	xmm0, xmm1
	movd	edi, xmm0
	sub	esp, 4
	movd	dword ptr [esp], xmm0
	call	_malloc
	add	esp, 4
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebp, eax
	mov	dword ptr [ebx + 16], eax
	lea	eax, [edi + edi]
	push	eax
	call	_malloc
	add	esp, 4
	test	ebp, ebp
	mov	dword ptr [ebx + 20], eax
	je	LBB117_17
# %bb.27:
	test	eax, eax
	je	LBB117_17
# %bb.28:
	test	edi, edi
	je	LBB117_33
# %bb.29:
	cmp	edi, 1
	mov	byte ptr [ebp], 16
	je	LBB117_33
# %bb.30:
	cmp	edi, 2
	mov	byte ptr [ebp + 1], 16
	je	LBB117_33
# %bb.31:
	mov	eax, 2
	.p2align	4, 0x90
LBB117_32:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [ebx + 16]
	mov	byte ptr [ecx + eax], 16
	inc	eax
	cmp	edi, eax
	jne	LBB117_32
LBB117_33:
	mov	eax, 512
	mov	edx, -512
	jmp	LBB117_35
	.p2align	4, 0x90
LBB117_34:                              #   in Loop: Header=BB117_35 Depth=1
	inc	edx
	je	LBB117_37
LBB117_35:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [esi + 4*edx + 2048]
	cmp	ecx, 10
	jb	LBB117_34
# %bb.36:                               #   in Loop: Header=BB117_35 Depth=1
	mov	esi, dword ptr [ebx + 16]
	mov	byte ptr [esi + edx + 512], cl
	add	cl, -9
                                        # kill: def $cl killed $cl killed $ecx
	mov	esi, dword ptr [ebx + 20]
	mov	word ptr [esi + 2*edx + 1024], ax
	mov	esi, 1
	shl	esi, cl
	add	eax, esi
	mov	esi, dword ptr [esp]            # 4-byte Reload
	jmp	LBB117_34
LBB117_37:
	push	esi
	call	_free
	add	esp, 4
	cmp	dword ptr [ebx + 12], 0
	je	LBB117_55
# %bb.38:
	xor	edx, edx
	mov	dword ptr [esp + 24], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 20], edi       # 4-byte Spill
	jmp	LBB117_41
LBB117_39:                              #   in Loop: Header=BB117_41 Depth=1
	mov	ebx, edx
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	edx, dword ptr [esp]            # 4-byte Reload
LBB117_40:                              #   in Loop: Header=BB117_41 Depth=1
	inc	edx
	cmp	edx, dword ptr [ebx + 12]
	jae	LBB117_54
LBB117_41:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_43 Depth 2
                                        #     Child Loop BB117_51 Depth 2
                                        #     Child Loop BB117_46 Depth 2
	mov	eax, dword ptr [ebx + 4]
	mov	eax, dword ptr [eax + 4*edx]
	test	eax, eax
	je	LBB117_40
# %bb.42:                               #   in Loop: Header=BB117_41 Depth=1
	mov	ecx, dword ptr [ebx]
	mov	dword ptr [esp], edx            # 4-byte Spill
	xor	esi, esi
	xor	ebx, ebx
	mov	edi, dword ptr [ecx + 4*edx]
	lea	edx, [eax - 1]
	.p2align	4, 0x90
LBB117_43:                              #   Parent Loop BB117_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ebp, edi
	mov	ecx, edx
	shr	ebp, cl
	mov	ecx, ebx
	inc	ebx
	and	ebp, 1
	shl	ebp, cl
	or	esi, ebp
	add	edx, -1
	jb	LBB117_43
# %bb.44:                               #   in Loop: Header=BB117_41 Depth=1
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	inc	edx
	cmp	eax, 9
	mov	dword ptr [esp + 24], edx       # 4-byte Spill
	ja	LBB117_48
# %bb.45:                               #   in Loop: Header=BB117_41 Depth=1
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, 9
	mov	ebx, 1
	sub	ecx, eax
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	.p2align	4, 0x90
LBB117_46:                              #   Parent Loop BB117_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lea	ebp, [ebx - 1]
	mov	ecx, eax
	shl	ebp, cl
	mov	ecx, dword ptr [edx + 16]
	or	ebp, esi
	cmp	byte ptr [ecx + ebp], 16
	jne	LBB117_53
# %bb.47:                               #   in Loop: Header=BB117_46 Depth=2
	mov	byte ptr [ecx + ebp], al
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [edx + 20]
	mov	word ptr [ecx + 2*ebp], di
	mov	edi, ebx
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
                                        # kill: def $cl killed $cl killed $ecx
	inc	ebx
	shr	edi, cl
	test	edi, edi
	je	LBB117_46
	jmp	LBB117_39
LBB117_48:                              #   in Loop: Header=BB117_41 Depth=1
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, esi
	and	ecx, 511
	mov	ebp, dword ptr [ebx + 16]
	movzx	edi, byte ptr [ebp + ecx]
	sub	edi, eax
	jb	LBB117_53
# %bb.49:                               #   in Loop: Header=BB117_41 Depth=1
	mov	dword ptr [esp + 4], edi        # 4-byte Spill
	mov	edi, dword ptr [ebx + 20]
	shr	esi, 9
	movzx	edx, word ptr [edi + 2*ecx]
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	lea	edi, [esi + edx]
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	edx, dword ptr [esp]            # 4-byte Reload
	test	ecx, ecx
	mov	byte ptr [ebp + edi], al
	mov	ebp, dword ptr [ebx + 20]
	mov	word ptr [ebp + 2*edi], dx
	je	LBB117_52
# %bb.50:                               #   in Loop: Header=BB117_41 Depth=1
	mov	ecx, eax
	mov	edx, ebx
	add	eax, -9
	mov	ebx, 1
	mov	byte ptr [esp + 15], cl         # 1-byte Spill
	.p2align	4, 0x90
LBB117_51:                              #   Parent Loop BB117_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ebp, ebx
	mov	ecx, eax
	mov	edi, dword ptr [edx + 16]
	inc	ebx
	shl	ebp, cl
	movzx	ecx, byte ptr [esp + 15]        # 1-byte Folded Reload
	or	ebp, esi
	add	ebp, dword ptr [esp + 16]       # 4-byte Folded Reload
	mov	byte ptr [edi + ebp], cl
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	edi, dword ptr [edx + 20]
	mov	word ptr [edi + 2*ebp], cx
	mov	edi, ebx
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
                                        # kill: def $cl killed $cl killed $ecx
	shr	edi, cl
	test	edi, edi
	je	LBB117_51
	jmp	LBB117_39
LBB117_52:                              #   in Loop: Header=BB117_41 Depth=1
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	jmp	LBB117_40
LBB117_54:
	cmp	dword ptr [esp + 24], 2         # 4-byte Folded Reload
	jae	LBB117_63
LBB117_55:
	test	edi, edi
	je	LBB117_61
# %bb.56:
	xor	eax, eax
	jmp	LBB117_58
	.p2align	4, 0x90
LBB117_57:                              #   in Loop: Header=BB117_58 Depth=1
	inc	eax
	cmp	edi, eax
	je	LBB117_61
LBB117_58:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [ebx + 16]
	cmp	byte ptr [ecx + eax], 16
	jne	LBB117_57
# %bb.59:                               #   in Loop: Header=BB117_58 Depth=1
	xor	edx, edx
	cmp	eax, 512
	setae	dl
	lea	edx, [edx + 8*edx + 1]
	mov	byte ptr [ecx + eax], dl
	mov	ecx, dword ptr [ebx + 20]
	mov	word ptr [ecx + 2*eax], -1
	jmp	LBB117_57
LBB117_61:
	xor	ecx, ecx
	jmp	LBB117_62
LBB117_63:
	xor	ecx, ecx
	test	edi, edi
	je	LBB117_62
# %bb.64:
	mov	eax, dword ptr [ebx + 16]
LBB117_65:                              # =>This Inner Loop Header: Depth=1
	cmp	byte ptr [eax], 16
	je	LBB117_53
# %bb.66:                               #   in Loop: Header=BB117_65 Depth=1
	inc	eax
	dec	edi
	jne	LBB117_65
	jmp	LBB117_62
LBB117_53:
	mov	ecx, 55
LBB117_62:
	mov	eax, ecx
	add	esp, 28
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?writeBits@@YAXPAULodePNGBitWriter@@II@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?writeBits@@YAXPAULodePNGBitWriter@@II@Z
"?writeBits@@YAXPAULodePNGBitWriter@@II@Z": # @"?writeBits@@YAXPAULodePNGBitWriter@@II@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	cmp	dword ptr [esp + 28], 0
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	mov	dword ptr [esp], ecx            # 4-byte Spill
	je	LBB118_15
# %bb.1:
	cmp	dword ptr [esp + 28], 1
	jne	LBB118_2
# %bb.9:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	cl, byte ptr [edx + 4]
	and	cl, 7
	jne	LBB118_14
# %bb.10:
	mov	edi, dword ptr [edx]
	mov	ebx, dword ptr [edi + 4]
	mov	ebp, dword ptr [edi + 8]
	mov	eax, edi
	inc	ebx
	cmp	ebp, ebx
	jae	LBB118_13
# %bb.11:
	shr	ebp
	add	ebp, ebx
	push	ebp
	push	dword ptr [edi]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB118_15
# %bb.12:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [edi + 8], ebp
	mov	dword ptr [edi], eax
	mov	eax, dword ptr [edx]
LBB118_13:
	mov	dword ptr [edi + 4], ebx
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	mov	byte ptr [eax + ecx - 1], 0
	mov	cl, byte ptr [edx + 4]
	and	cl, 7
LBB118_14:
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, dword ptr [edx]
	shl	ebx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], bl
	inc	byte ptr [edx + 4]
LBB118_15:
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB118_2:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	xor	ebx, ebx
	mov	al, byte ptr [eax + 4]
	jmp	LBB118_3
	.p2align	4, 0x90
LBB118_7:                               #   in Loop: Header=BB118_3 Depth=1
	mov	dword ptr [ebp + 4], edi
	mov	esi, edx
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	mov	byte ptr [eax + ecx - 1], 0
	movzx	eax, byte ptr [edx + 4]
	and	al, 7
LBB118_8:                               #   in Loop: Header=BB118_3 Depth=1
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, ebx
	inc	ebx
	shr	edx, cl
	mov	ecx, eax
	mov	eax, dword ptr [esi]
	and	edx, 1
	shl	edx, cl
	mov	ecx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	or	byte ptr [eax + ecx - 1], dl
	movzx	eax, byte ptr [esi + 4]
	inc	al
	cmp	dword ptr [esp + 28], ebx
	mov	byte ptr [esi + 4], al
	je	LBB118_15
LBB118_3:                               # =>This Inner Loop Header: Depth=1
	mov	esi, dword ptr [esp]            # 4-byte Reload
	and	al, 7
	jne	LBB118_8
# %bb.4:                                #   in Loop: Header=BB118_3 Depth=1
	mov	ebp, dword ptr [esi]
	mov	edx, esi
	mov	edi, dword ptr [ebp + 4]
	mov	esi, dword ptr [ebp + 8]
	mov	eax, ebp
	inc	edi
	cmp	esi, edi
	jae	LBB118_7
# %bb.5:                                #   in Loop: Header=BB118_3 Depth=1
	shr	esi
	add	esi, edi
	push	esi
	push	dword ptr [ebp]
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB118_15
# %bb.6:                                #   in Loop: Header=BB118_3 Depth=1
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [ebp + 8], esi
	mov	dword ptr [ebp], eax
	mov	eax, dword ptr [edx]
	jmp	LBB118_7
                                        # -- End function
	.def	 "?encodeLZ77@@YAIPAUuivector@@PAUHash@@PBEIIIIII@Z";
	.scl	3;
	.type	32;
	.endef
	.globl	__xmm@00000003000000020000000100000000 # -- Begin function ?encodeLZ77@@YAIPAUuivector@@PAUHash@@PBEIIIIII@Z
	.section	.rdata,"dr",discard,__xmm@00000003000000020000000100000000
	.p2align	4
__xmm@00000003000000020000000100000000:
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	3                               # 0x3
	.globl	__xmm@00000004000000040000000400000004
	.section	.rdata,"dr",discard,__xmm@00000004000000040000000400000004
	.p2align	4
__xmm@00000004000000040000000400000004:
	.long	4                               # 0x4
	.long	4                               # 0x4
	.long	4                               # 0x4
	.long	4                               # 0x4
	.text
	.p2align	4, 0x90
"?encodeLZ77@@YAIPAUuivector@@PAUHash@@PBEIIIIII@Z": # @"?encodeLZ77@@YAIPAUuivector@@PAUHash@@PBEIIIIII@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 108
	mov	ebp, dword ptr [esp + 140]
	mov	dword ptr [esp + 72], ecx       # 4-byte Spill
	mov	ecx, 64
	mov	eax, ebp
	shr	eax, 3
	cmp	ebp, 8191
	cmova	eax, ebp
	mov	dword ptr [esp + 80], eax       # 4-byte Spill
	mov	eax, 258
	cmova	ecx, eax
	mov	eax, 60
	mov	dword ptr [esp + 104], ecx      # 4-byte Spill
	lea	ecx, [ebp - 1]
	cmp	ecx, 32767
	ja	LBB119_150
# %bb.1:
	mov	eax, 90
	test	ebp, ecx
	jne	LBB119_150
# %bb.2:
	mov	eax, dword ptr [esp + 148]
	mov	edi, dword ptr [esp + 136]
	mov	ebx, dword ptr [esp + 132]
	mov	esi, 258
	cmp	eax, 258
	cmovb	esi, eax
	xor	eax, eax
	cmp	ebx, edi
	jae	LBB119_150
# %bb.3:
	mov	eax, dword ptr [esp + 128]
	movdqa	xmm6, xmmword ptr [__xmm@3f8000003f8000003f8000003f800000] # xmm6 = [1065353216,1065353216,1065353216,1065353216]
	movdqa	xmm7, xmmword ptr [__xmm@00000004000000040000000400000004] # xmm7 = [4,4,4,4]
	mov	dword ptr [esp + 36], edx       # 4-byte Spill
	mov	dword ptr [esp + 92], esi       # 4-byte Spill
	pxor	xmm5, xmm5
	xor	esi, esi
	mov	dword ptr [esp + 84], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 88], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 24], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 40], ecx       # 4-byte Spill
	lea	edx, [eax + edi]
	mov	dword ptr [esp + 76], edx       # 4-byte Spill
	lea	edx, [eax + 1]
	add	eax, 259
	mov	dword ptr [esp + 100], edx      # 4-byte Spill
	mov	edx, ebx
	mov	dword ptr [esp + 96], eax       # 4-byte Spill
	.p2align	4, 0x90
LBB119_5:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_10 Depth 2
                                        #     Child Loop BB119_13 Depth 2
                                        #     Child Loop BB119_22 Depth 2
                                        #     Child Loop BB119_62 Depth 2
                                        #       Child Loop BB119_66 Depth 3
                                        #     Child Loop BB119_33 Depth 2
                                        #       Child Loop BB119_37 Depth 3
                                        #     Child Loop BB119_96 Depth 2
                                        #     Child Loop BB119_106 Depth 2
                                        #     Child Loop BB119_119 Depth 2
                                        #       Child Loop BB119_131 Depth 3
                                        #       Child Loop BB119_134 Depth 3
                                        #       Child Loop BB119_137 Depth 3
	mov	ebx, edx
	lea	eax, [edx + 2]
	mov	dword ptr [esp], edx            # 4-byte Spill
	and	ebx, ecx
	cmp	eax, edi
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	jae	LBB119_7
# %bb.6:                                #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [esp + 128]
	mov	edi, edx
	movzx	ecx, byte ptr [eax + edx]
	movzx	edx, byte ptr [eax + edx + 1]
	movzx	eax, byte ptr [eax + edi + 2]
	shl	eax, 8
	shl	edx, 4
	xor	eax, ecx
	xor	eax, edx
	jmp	LBB119_14
	.p2align	4, 0x90
LBB119_7:                               #   in Loop: Header=BB119_5 Depth=1
	mov	eax, edx
	mov	edx, edi
	sub	edx, eax
	je	LBB119_15
# %bb.8:                                #   in Loop: Header=BB119_5 Depth=1
	xor	ecx, ecx
	cmp	edx, 4
	mov	eax, 0
	jb	LBB119_12
# %bb.9:                                #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [esp + 128]
	mov	edi, dword ptr [esp]            # 4-byte Reload
	movdqa	xmm1, xmmword ptr [__xmm@00000003000000020000000100000000] # xmm1 = [0,1,2,3]
	mov	ecx, edx
	pxor	xmm0, xmm0
	and	ecx, -4
	add	eax, edi
	mov	edi, ecx
	.p2align	4, 0x90
LBB119_10:                              #   Parent Loop BB119_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	xmm2, dword ptr [eax]           # xmm2 = mem[0],zero,zero,zero
	movdqa	xmm3, xmm1
	add	eax, 4
	paddd	xmm1, xmm7
	add	edi, -4
	pslld	xmm3, 26
	paddd	xmm3, xmm6
	cvttps2dq	xmm3, xmm3
	punpcklbw	xmm2, xmm5              # xmm2 = xmm2[0],xmm5[0],xmm2[1],xmm5[1],xmm2[2],xmm5[2],xmm2[3],xmm5[3],xmm2[4],xmm5[4],xmm2[5],xmm5[5],xmm2[6],xmm5[6],xmm2[7],xmm5[7]
	punpcklwd	xmm2, xmm5              # xmm2 = xmm2[0],xmm5[0],xmm2[1],xmm5[1],xmm2[2],xmm5[2],xmm2[3],xmm5[3]
	pshufd	xmm4, xmm2, 245                 # xmm4 = xmm2[1,1,3,3]
	pmuludq	xmm2, xmm3
	pshufd	xmm3, xmm3, 245                 # xmm3 = xmm3[1,1,3,3]
	pmuludq	xmm3, xmm4
	pshufd	xmm2, xmm2, 232                 # xmm2 = xmm2[0,2,2,3]
	pshufd	xmm3, xmm3, 232                 # xmm3 = xmm3[0,2,2,3]
	punpckldq	xmm2, xmm3              # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	pxor	xmm0, xmm2
	jne	LBB119_10
# %bb.11:                               #   in Loop: Header=BB119_5 Depth=1
	pshufd	xmm1, xmm0, 78                  # xmm1 = xmm0[2,3,0,1]
	cmp	edx, ecx
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm1, 229                 # xmm0 = xmm1[1,1,2,3]
	pxor	xmm0, xmm1
	movd	eax, xmm0
	je	LBB119_14
LBB119_12:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	edi, dword ptr [esp + 136]
	lea	edx, [ebx + ecx]
	sub	edi, ecx
	shl	ecx, 3
	add	edx, dword ptr [esp + 128]
	sub	edi, ebx
	.p2align	4, 0x90
LBB119_13:                              #   Parent Loop BB119_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebx, byte ptr [edx]
	inc	edx
	shl	ebx, cl
	add	ecx, 8
	xor	eax, ebx
	dec	edi
	jne	LBB119_13
LBB119_14:                              #   in Loop: Header=BB119_5 Depth=1
	mov	edi, dword ptr [esp + 136]
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	and	eax, 65535
	mov	dword ptr [esp + 4], 0          # 4-byte Folded Spill
	jne	LBB119_26
LBB119_15:                              #   in Loop: Header=BB119_5 Depth=1
	test	esi, esi
	je	LBB119_20
# %bb.16:                               #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [esp]            # 4-byte Reload
	add	eax, esi
	cmp	eax, edi
	ja	LBB119_18
# %bb.17:                               #   in Loop: Header=BB119_5 Depth=1
	mov	ecx, dword ptr [esp + 128]
	cmp	byte ptr [eax + ecx - 1], 0
	je	LBB119_19
LBB119_18:                              #   in Loop: Header=BB119_5 Depth=1
	dec	esi
LBB119_19:                              #   in Loop: Header=BB119_5 Depth=1
	xor	eax, eax
	mov	dword ptr [esp + 4], esi        # 4-byte Spill
	jmp	LBB119_26
LBB119_20:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ecx, dword ptr [esp + 128]
	mov	edx, dword ptr [esp]            # 4-byte Reload
	lea	eax, [ecx + edx]
	lea	ecx, [ecx + edx + 258]
	mov	edx, dword ptr [esp + 76]       # 4-byte Reload
	cmp	ecx, edx
	cmova	ecx, edx
	mov	edx, eax
	cmp	eax, ecx
	je	LBB119_25
# %bb.21:                               #   in Loop: Header=BB119_5 Depth=1
	mov	edx, eax
	.p2align	4, 0x90
LBB119_22:                              #   Parent Loop BB119_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	byte ptr [edx], 0
	jne	LBB119_25
# %bb.23:                               #   in Loop: Header=BB119_22 Depth=2
	inc	edx
	cmp	ecx, edx
	jne	LBB119_22
# %bb.24:                               #   in Loop: Header=BB119_5 Depth=1
	mov	edx, ecx
LBB119_25:                              #   in Loop: Header=BB119_5 Depth=1
	sub	edx, eax
	xor	eax, eax
	mov	dword ptr [esp + 4], edx        # 4-byte Spill
	.p2align	4, 0x90
LBB119_26:                              #   in Loop: Header=BB119_5 Depth=1
	mov	esi, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 8]
	mov	dword ptr [ecx + 4*ebx], eax
	mov	dword ptr [esp + 60], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esi]
	mov	dword ptr [esp + 68], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ecx + 4*eax]
	cmp	ecx, -1
	je	LBB119_28
# %bb.27:                               #   in Loop: Header=BB119_5 Depth=1
	mov	edx, dword ptr [esi + 4]
	mov	word ptr [edx + 2*ebx], cx
LBB119_28:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ecx, dword ptr [esp + 68]       # 4-byte Reload
	mov	dword ptr [ecx + 4*eax], ebx
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esi + 20]
	mov	word ptr [edx + 2*ebx], cx
	mov	dword ptr [esp + 28], edx       # 4-byte Spill
	movzx	ecx, cx
	mov	edx, dword ptr [esi + 12]
	mov	dword ptr [esp + 64], edx       # 4-byte Spill
	mov	edx, dword ptr [edx + 4*ecx]
	cmp	edx, -1
	je	LBB119_30
# %bb.29:                               #   in Loop: Header=BB119_5 Depth=1
	mov	esi, dword ptr [esp + 36]       # 4-byte Reload
	mov	esi, dword ptr [esi + 16]
	mov	word ptr [esi + 2*ebx], dx
	mov	esi, dword ptr [esp + 36]       # 4-byte Reload
LBB119_30:                              #   in Loop: Header=BB119_5 Depth=1
	mov	edx, dword ptr [esp]            # 4-byte Reload
	lea	ebp, [edx + 258]
	cmp	ebp, edi
	cmova	ebp, edi
	cmp	dword ptr [esp + 80], 0         # 4-byte Folded Reload
	mov	edi, dword ptr [esp + 64]       # 4-byte Reload
	mov	dword ptr [edi + 4*ecx], ebx
	je	LBB119_48
# %bb.31:                               #   in Loop: Header=BB119_5 Depth=1
	mov	esi, dword ptr [esi + 4]
	mov	ecx, dword ptr [esp + 128]
	cmp	dword ptr [esp + 4], 3          # 4-byte Folded Reload
	mov	dword ptr [esp + 56], ebp       # 4-byte Spill
	mov	dword ptr [esp + 32], esi       # 4-byte Spill
	movzx	esi, word ptr [esi + 2*ebx]
	lea	edi, [ecx + ebp]
	lea	ecx, [ecx + edx]
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	mov	ecx, ebx
	mov	dword ptr [esp + 52], edi       # 4-byte Spill
	jb	LBB119_61
# %bb.32:                               #   in Loop: Header=BB119_5 Depth=1
	mov	ebp, dword ptr [esp + 140]
	neg	ecx
	xor	edx, edx
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 48], ecx       # 4-byte Spill
	mov	ecx, 1
	jmp	LBB119_33
	.p2align	4, 0x90
LBB119_46:                              #   in Loop: Header=BB119_33 Depth=2
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	cmp	dword ptr [ecx + 4*edi], eax
	mov	ebp, dword ptr [esp + 140]
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	jne	LBB119_49
LBB119_47:                              #   in Loop: Header=BB119_33 Depth=2
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	mov	esi, edi
	cmp	ecx, dword ptr [esp + 80]       # 4-byte Folded Reload
	lea	ecx, [ecx + 1]
	je	LBB119_49
LBB119_33:                              #   Parent Loop BB119_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_37 Depth 3
	mov	edi, edx
	mov	edx, ebx
	mov	ebx, 0
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	sub	edx, esi
	cmovb	ebx, ebp
	add	edx, ebx
	cmp	edx, edi
	jb	LBB119_49
# %bb.34:                               #   in Loop: Header=BB119_33 Depth=2
	test	edx, edx
	je	LBB119_43
# %bb.35:                               #   in Loop: Header=BB119_33 Depth=2
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebp, dword ptr [esp + 52]       # 4-byte Reload
	movzx	ecx, word ptr [ecx + 2*esi]
	cmp	edi, ecx
	cmovb	ecx, edi
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	add	edi, ecx
	cmp	edi, ebp
	je	LBB119_40
# %bb.36:                               #   in Loop: Header=BB119_33 Depth=2
	mov	ebp, dword ptr [esp + 48]       # 4-byte Reload
	add	ecx, dword ptr [esp]            # 4-byte Folded Reload
	add	ebp, esi
	sub	ebp, ebx
	mov	ebx, dword ptr [esp + 56]       # 4-byte Reload
	sub	ebx, ecx
	.p2align	4, 0x90
LBB119_37:                              #   Parent Loop BB119_5 Depth=1
                                        #     Parent Loop BB119_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzx	ecx, byte ptr [edi + ebp]
	cmp	cl, byte ptr [edi]
	jne	LBB119_41
# %bb.38:                               #   in Loop: Header=BB119_37 Depth=3
	inc	edi
	dec	ebx
	jne	LBB119_37
# %bb.39:                               #   in Loop: Header=BB119_33 Depth=2
	mov	ebp, dword ptr [esp + 52]       # 4-byte Reload
LBB119_40:                              #   in Loop: Header=BB119_33 Depth=2
	sub	ebp, dword ptr [esp + 20]       # 4-byte Folded Reload
	cmp	ebp, dword ptr [esp + 8]        # 4-byte Folded Reload
	ja	LBB119_42
	jmp	LBB119_43
LBB119_41:                              #   in Loop: Header=BB119_33 Depth=2
	mov	ebp, edi
	sub	ebp, dword ptr [esp + 20]       # 4-byte Folded Reload
	cmp	ebp, dword ptr [esp + 8]        # 4-byte Folded Reload
	jbe	LBB119_43
LBB119_42:                              #   in Loop: Header=BB119_33 Depth=2
	cmp	ebp, dword ptr [esp + 92]       # 4-byte Folded Reload
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	dword ptr [esp + 8], ebp        # 4-byte Spill
	jae	LBB119_146
LBB119_43:                              #   in Loop: Header=BB119_33 Depth=2
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	movzx	edi, word ptr [ecx + 2*esi]
	cmp	esi, edi
	je	LBB119_104
# %bb.44:                               #   in Loop: Header=BB119_33 Depth=2
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	cmp	dword ptr [esp + 8], ebx        # 4-byte Folded Reload
	jbe	LBB119_46
# %bb.45:                               #   in Loop: Header=BB119_33 Depth=2
	mov	ecx, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, dword ptr [ecx + 16]
	movzx	edi, word ptr [ecx + 2*esi]
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	movzx	ecx, word ptr [ecx + 2*edi]
	cmp	ebx, ecx
	mov	ebp, dword ptr [esp + 140]
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	je	LBB119_47
	jmp	LBB119_49
	.p2align	4, 0x90
LBB119_48:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ebp, dword ptr [esp + 140]
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	cmp	dword ptr [esp + 152], 0
	jne	LBB119_50
	jmp	LBB119_60
	.p2align	4, 0x90
LBB119_61:                              #   in Loop: Header=BB119_5 Depth=1
	sub	ebp, edx
	neg	ecx
	xor	edi, edi
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 48], ebp       # 4-byte Spill
	mov	ebp, dword ptr [esp + 140]
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	mov	ecx, 1
	.p2align	4, 0x90
LBB119_62:                              #   Parent Loop BB119_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_66 Depth 3
	mov	edx, ebx
	mov	ebx, edi
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	mov	edi, edx
	mov	edx, 0
	sub	edi, esi
	cmovb	edx, ebp
	add	edi, edx
	cmp	edi, ebx
	jb	LBB119_49
# %bb.63:                               #   in Loop: Header=BB119_62 Depth=2
	test	edi, edi
	je	LBB119_73
# %bb.64:                               #   in Loop: Header=BB119_62 Depth=2
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	cmp	dword ptr [esp], ecx            # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
	mov	ebp, ecx
	je	LBB119_70
# %bb.65:                               #   in Loop: Header=BB119_62 Depth=2
	mov	ebx, dword ptr [esp + 28]       # 4-byte Reload
	mov	ebp, ecx
	add	ebx, esi
	sub	ebx, edx
	mov	edx, dword ptr [esp + 48]       # 4-byte Reload
	.p2align	4, 0x90
LBB119_66:                              #   Parent Loop BB119_5 Depth=1
                                        #     Parent Loop BB119_62 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzx	ecx, byte ptr [ebp + ebx]
	cmp	cl, byte ptr [ebp]
	jne	LBB119_69
# %bb.67:                               #   in Loop: Header=BB119_66 Depth=3
	inc	ebp
	dec	edx
	jne	LBB119_66
# %bb.68:                               #   in Loop: Header=BB119_62 Depth=2
	mov	ebp, dword ptr [esp + 52]       # 4-byte Reload
LBB119_69:                              #   in Loop: Header=BB119_62 Depth=2
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 20]       # 4-byte Reload
LBB119_70:                              #   in Loop: Header=BB119_62 Depth=2
	sub	ebp, ecx
	cmp	ebp, dword ptr [esp + 8]        # 4-byte Folded Reload
	jbe	LBB119_74
# %bb.71:                               #   in Loop: Header=BB119_62 Depth=2
	cmp	ebp, dword ptr [esp + 92]       # 4-byte Folded Reload
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	mov	dword ptr [esp + 8], ebp        # 4-byte Spill
	jb	LBB119_74
	jmp	LBB119_72
	.p2align	4, 0x90
LBB119_73:                              #   in Loop: Header=BB119_62 Depth=2
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
LBB119_74:                              #   in Loop: Header=BB119_62 Depth=2
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	movzx	edx, word ptr [ecx + 2*esi]
	cmp	esi, edx
	je	LBB119_104
# %bb.75:                               #   in Loop: Header=BB119_62 Depth=2
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	cmp	dword ptr [ecx + 4*edx], eax
	jne	LBB119_104
# %bb.76:                               #   in Loop: Header=BB119_62 Depth=2
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 140]
	mov	esi, edx
	cmp	ecx, dword ptr [esp + 80]       # 4-byte Folded Reload
	lea	ecx, [ecx + 1]
	jne	LBB119_62
	jmp	LBB119_49
	.p2align	4, 0x90
LBB119_104:                             #   in Loop: Header=BB119_5 Depth=1
	mov	ebp, dword ptr [esp + 140]
LBB119_49:                              #   in Loop: Header=BB119_5 Depth=1
	cmp	dword ptr [esp + 152], 0
	je	LBB119_60
LBB119_50:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 72]       # 4-byte Reload
	mov	esi, dword ptr [esp + 88]       # 4-byte Reload
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	test	ecx, ecx
	jne	LBB119_54
# %bb.51:                               #   in Loop: Header=BB119_5 Depth=1
	cmp	edi, 3
	jb	LBB119_54
# %bb.52:                               #   in Loop: Header=BB119_5 Depth=1
	cmp	edi, dword ptr [esp + 104]      # 4-byte Folded Reload
	ja	LBB119_54
# %bb.53:                               #   in Loop: Header=BB119_5 Depth=1
	mov	ebx, 1
	cmp	edi, 258
	jae	LBB119_54
# %bb.4:                                #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [esp + 88], edi       # 4-byte Spill
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	mov	edi, dword ptr [esp + 136]
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esp + 84], eax       # 4-byte Spill
	inc	edx
	mov	dword ptr [esp + 24], ebx       # 4-byte Spill
	cmp	edx, edi
	jb	LBB119_5
	jmp	LBB119_93
	.p2align	4, 0x90
LBB119_54:                              #   in Loop: Header=BB119_5 Depth=1
	xor	ebx, ebx
	test	ecx, ecx
	je	LBB119_78
# %bb.55:                               #   in Loop: Header=BB119_5 Depth=1
	cmp	dword ptr [esp], 0              # 4-byte Folded Reload
	je	LBB119_149
# %bb.56:                               #   in Loop: Header=BB119_5 Depth=1
	lea	ecx, [esi + 1]
	cmp	edi, ecx
	jbe	LBB119_77
# %bb.57:                               #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [esp + 128]
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	edi, dword ptr [edx + 4]
	mov	ebx, dword ptr [edx + 8]
	movzx	esi, byte ptr [ecx + eax - 1]
	lea	eax, [4*edi + 4]
	cmp	eax, ebx
	jbe	LBB119_102
# %bb.58:                               #   in Loop: Header=BB119_5 Depth=1
	shr	ebx
	add	ebx, eax
	push	ebx
	push	dword ptr [edx]
	mov	ebp, edx
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB119_83
# %bb.59:                               #   in Loop: Header=BB119_5 Depth=1
	mov	dword ptr [ebp + 8], ebx
	mov	dword ptr [ebp], eax
	mov	edx, ebp
	mov	ebp, dword ptr [esp + 140]
	movdqa	xmm6, xmmword ptr [__xmm@3f8000003f8000003f8000003f800000] # xmm6 = [1065353216,1065353216,1065353216,1065353216]
	movdqa	xmm7, xmmword ptr [__xmm@00000004000000040000000400000004] # xmm7 = [4,4,4,4]
	pxor	xmm5, xmm5
	jmp	LBB119_103
LBB119_77:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ecx, dword ptr [esp + 68]       # 4-byte Reload
	dec	dword ptr [esp]                 # 4-byte Folded Spill
	mov	edi, esi
	mov	dword ptr [ecx + 4*eax], -1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, dword ptr [esp + 64]       # 4-byte Reload
	mov	dword ptr [ecx + 4*eax], -1
	mov	ecx, dword ptr [esp + 84]       # 4-byte Reload
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	.p2align	4, 0x90
LBB119_78:                              #   in Loop: Header=BB119_5 Depth=1
	cmp	dword ptr [esp + 16], ebp       # 4-byte Folded Reload
	ja	LBB119_79
	jmp	LBB119_80
LBB119_102:                             #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [edx]
LBB119_103:                             #   in Loop: Header=BB119_5 Depth=1
	lea	ecx, [edi + 1]
	xor	ebx, ebx
	mov	dword ptr [edx + 4], ecx
	mov	dword ptr [eax + 4*edi], esi
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [esp + 16], ebp       # 4-byte Folded Reload
	ja	LBB119_79
	jmp	LBB119_80
LBB119_146:                             #   in Loop: Header=BB119_5 Depth=1
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	jmp	LBB119_147
LBB119_72:                              #   in Loop: Header=BB119_5 Depth=1
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
LBB119_147:                             #   in Loop: Header=BB119_5 Depth=1
	mov	dword ptr [esp + 8], ebp        # 4-byte Spill
	mov	ebp, dword ptr [esp + 140]
	cmp	dword ptr [esp + 152], 0
	jne	LBB119_50
	.p2align	4, 0x90
LBB119_60:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 72]       # 4-byte Reload
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [esp + 16], ebp       # 4-byte Folded Reload
	jbe	LBB119_80
LBB119_79:                              #   in Loop: Header=BB119_5 Depth=1
	cmp	edi, 2
	ja	LBB119_148
LBB119_80:                              #   in Loop: Header=BB119_5 Depth=1
	cmp	edi, 2
	mov	dword ptr [esp + 24], ebx       # 4-byte Spill
	jbe	LBB119_81
# %bb.84:                               #   in Loop: Header=BB119_5 Depth=1
	cmp	edi, dword ptr [esp + 144]
	jb	LBB119_81
# %bb.85:                               #   in Loop: Header=BB119_5 Depth=1
	cmp	dword ptr [esp + 16], 4097      # 4-byte Folded Reload
	jb	LBB119_94
# %bb.86:                               #   in Loop: Header=BB119_5 Depth=1
	cmp	edi, 3
	jne	LBB119_94
	.p2align	4, 0x90
LBB119_81:                              #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [esp + 128]
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	mov	edi, dword ptr [edx + 4]
	mov	ebx, dword ptr [edx + 8]
	movzx	esi, byte ptr [eax + ecx]
	lea	eax, [4*edi + 4]
	cmp	eax, ebx
	jbe	LBB119_82
# %bb.88:                               #   in Loop: Header=BB119_5 Depth=1
	shr	ebx
	add	ebx, eax
	push	ebx
	push	dword ptr [edx]
	mov	ebp, edx
	call	_realloc
	add	esp, 8
	test	eax, eax
	je	LBB119_83
# %bb.89:                               #   in Loop: Header=BB119_5 Depth=1
	movdqa	xmm6, xmmword ptr [__xmm@3f8000003f8000003f8000003f800000] # xmm6 = [1065353216,1065353216,1065353216,1065353216]
	movdqa	xmm7, xmmword ptr [__xmm@00000004000000040000000400000004] # xmm7 = [4,4,4,4]
	mov	edx, ebp
	pxor	xmm5, xmm5
	mov	dword ptr [ebp + 8], ebx
	mov	dword ptr [ebp], eax
	jmp	LBB119_90
	.p2align	4, 0x90
LBB119_82:                              #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [edx]
LBB119_90:                              #   in Loop: Header=BB119_5 Depth=1
	lea	ecx, [edi + 1]
	mov	dword ptr [edx + 4], ecx
	mov	dword ptr [eax + 4*edi], esi
LBB119_91:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	mov	edi, dword ptr [esp + 136]
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
LBB119_92:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	inc	edx
	mov	dword ptr [esp + 24], ebx       # 4-byte Spill
	cmp	edx, edi
	jb	LBB119_5
	jmp	LBB119_93
LBB119_94:                              #   in Loop: Header=BB119_5 Depth=1
	mov	ebp, dword ptr [esp + 16]       # 4-byte Reload
	mov	eax, 28
	mov	esi, 1
	jmp	LBB119_96
	.p2align	4, 0x90
LBB119_95:                              #   in Loop: Header=BB119_96 Depth=2
	dec	ecx
	mov	eax, ecx
	cmp	esi, eax
	ja	LBB119_98
LBB119_96:                              #   Parent Loop BB119_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lea	ecx, [eax + esi]
	shr	ecx
	cmp	dword ptr [4*ecx + _LENGTHBASE], edi
	jae	LBB119_95
# %bb.97:                               #   in Loop: Header=BB119_96 Depth=2
	inc	ecx
	mov	esi, ecx
	cmp	esi, eax
	jbe	LBB119_96
LBB119_98:                              #   in Loop: Header=BB119_5 Depth=1
	cmp	esi, 28
	ja	LBB119_100
# %bb.99:                               #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [4*esi + _LENGTHBASE]
	cmp	eax, edi
	jbe	LBB119_101
LBB119_100:                             #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [4*esi + _LENGTHBASE-4]
	dec	esi
LBB119_101:                             #   in Loop: Header=BB119_5 Depth=1
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	mov	eax, 29
	mov	ebx, 1
	jmp	LBB119_106
	.p2align	4, 0x90
LBB119_105:                             #   in Loop: Header=BB119_106 Depth=2
	dec	ecx
	mov	eax, ecx
	cmp	ebx, eax
	ja	LBB119_108
LBB119_106:                             #   Parent Loop BB119_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lea	ecx, [eax + ebx]
	shr	ecx
	cmp	dword ptr [4*ecx + _DISTANCEBASE], ebp
	jae	LBB119_105
# %bb.107:                              #   in Loop: Header=BB119_106 Depth=2
	inc	ecx
	mov	ebx, ecx
	cmp	ebx, eax
	jbe	LBB119_106
LBB119_108:                             #   in Loop: Header=BB119_5 Depth=1
	cmp	ebx, 29
	mov	dword ptr [esp + 8], edi        # 4-byte Spill
	ja	LBB119_110
# %bb.109:                              #   in Loop: Header=BB119_5 Depth=1
	mov	edi, dword ptr [4*ebx + _DISTANCEBASE]
	cmp	edi, ebp
	jbe	LBB119_111
LBB119_110:                             #   in Loop: Header=BB119_5 Depth=1
	mov	edi, dword ptr [4*ebx + _DISTANCEBASE-4]
	dec	ebx
LBB119_111:                             #   in Loop: Header=BB119_5 Depth=1
	mov	ecx, dword ptr [edx + 4]
	mov	ebp, dword ptr [edx + 8]
	lea	eax, [4*ecx + 16]
	cmp	eax, ebp
	jbe	LBB119_114
# %bb.112:                              #   in Loop: Header=BB119_5 Depth=1
	shr	ebp
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	mov	dword ptr [esp + 20], edi       # 4-byte Spill
	add	ebp, eax
	push	ebp
	push	dword ptr [edx]
	call	_realloc
	movdqa	xmm7, xmmword ptr [__xmm@00000004000000040000000400000004] # xmm7 = [4,4,4,4]
	movdqa	xmm6, xmmword ptr [__xmm@3f8000003f8000003f8000003f800000] # xmm6 = [1065353216,1065353216,1065353216,1065353216]
	mov	edx, dword ptr [esp + 80]       # 4-byte Reload
	pxor	xmm5, xmm5
	add	esp, 8
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	test	eax, eax
	je	LBB119_116
# %bb.113:                              #   in Loop: Header=BB119_5 Depth=1
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	mov	dword ptr [edx + 8], ebp
	mov	dword ptr [edx], eax
	jmp	LBB119_115
LBB119_114:                             #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [edx]
LBB119_115:                             #   in Loop: Header=BB119_5 Depth=1
	mov	ebp, ecx
	add	ecx, 4
	add	esi, 257
	mov	dword ptr [edx + 4], ecx
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [eax + 4*ebp], esi
	sub	edx, edi
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, edi
	sub	ecx, dword ptr [esp + 12]       # 4-byte Folded Reload
	mov	dword ptr [eax + 4*ebp + 4], ecx
	mov	dword ptr [eax + 4*ebp + 8], ebx
	mov	dword ptr [eax + 4*ebp + 12], edx
LBB119_116:                             #   in Loop: Header=BB119_5 Depth=1
	cmp	edi, 2
	jb	LBB119_91
# %bb.117:                              #   in Loop: Header=BB119_5 Depth=1
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	mov	esi, dword ptr [esp]            # 4-byte Reload
	mov	edi, dword ptr [esp + 136]
	mov	dword ptr [esp + 60], 1         # 4-byte Folded Spill
	mov	dword ptr [esp + 56], 0         # 4-byte Folded Spill
	mov	ecx, dword ptr [eax]
	mov	edx, esi
	not	edx
	add	edx, edi
	mov	dword ptr [esp + 48], edx       # 4-byte Spill
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	mov	ecx, dword ptr [eax + 8]
	mov	dword ptr [esp + 68], ecx       # 4-byte Spill
	mov	ecx, dword ptr [eax + 20]
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 100]      # 4-byte Reload
	mov	dword ptr [esp + 64], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 96]       # 4-byte Reload
	lea	ebx, [eax + esi]
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	ebp, [ecx + esi]
	jmp	LBB119_119
	.p2align	4, 0x90
LBB119_118:                             #   in Loop: Header=BB119_119 Depth=2
	mov	esi, dword ptr [esp + 44]       # 4-byte Reload
	inc	ebp
	dec	eax
	inc	dword ptr [esp + 56]            # 4-byte Folded Spill
	mov	edi, dword ptr [esp + 136]
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	mov	eax, ecx
	mov	dword ptr [esi + 4*edx], ebx
	mov	edx, dword ptr [esp + 60]       # 4-byte Reload
	mov	ebx, ebp
	mov	ebp, dword ptr [esp + 16]       # 4-byte Reload
	inc	edx
	inc	ebp
	mov	dword ptr [esp + 60], edx       # 4-byte Spill
	cmp	edx, dword ptr [esp + 8]        # 4-byte Folded Reload
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	esi, edx
	je	LBB119_145
LBB119_119:                             #   Parent Loop BB119_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_131 Depth 3
                                        #       Child Loop BB119_134 Depth 3
                                        #       Child Loop BB119_137 Depth 3
	mov	ecx, dword ptr [esp + 76]       # 4-byte Reload
	mov	dword ptr [esp + 16], ebp       # 4-byte Spill
	lea	edx, [esi + 3]
	cmp	ebp, ecx
	cmovb	ecx, ebp
	lea	ebp, [esi + 1]
	mov	dword ptr [esp + 52], ecx       # 4-byte Spill
	mov	ecx, ebp
	mov	dword ptr [esp + 12], ebp       # 4-byte Spill
	and	ecx, dword ptr [esp + 40]       # 4-byte Folded Reload
	cmp	edx, edi
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	jae	LBB119_127
# %bb.120:                              #   in Loop: Header=BB119_119 Depth=2
	mov	edi, dword ptr [esp + 128]
	mov	ebp, ebx
	mov	ebx, dword ptr [esp + 28]       # 4-byte Reload
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	dword ptr [esp], esi            # 4-byte Spill
	movzx	edx, byte ptr [edi + esi + 2]
	movzx	ecx, byte ptr [edi + esi + 1]
	movzx	edi, byte ptr [edi + esi + 3]
	shl	edi, 8
	shl	edx, 4
	xor	edi, ecx
	xor	edi, edx
LBB119_121:                             #   in Loop: Header=BB119_119 Depth=2
	mov	esi, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	xor	ecx, ecx
	and	edi, 65535
	jne	LBB119_141
	jmp	LBB119_122
	.p2align	4, 0x90
LBB119_127:                             #   in Loop: Header=BB119_119 Depth=2
	cmp	ebp, edi
	mov	ebp, ebx
	mov	ebx, dword ptr [esp + 28]       # 4-byte Reload
	jae	LBB119_122
# %bb.128:                              #   in Loop: Header=BB119_119 Depth=2
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	cmp	dword ptr [esp + 136], ecx
	je	LBB119_122
# %bb.129:                              #   in Loop: Header=BB119_119 Depth=2
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	xor	edx, edx
	mov	edi, 0
	mov	dword ptr [esp], esi            # 4-byte Spill
	sub	ecx, dword ptr [esp + 56]       # 4-byte Folded Reload
	cmp	ecx, 4
	jb	LBB119_133
# %bb.130:                              #   in Loop: Header=BB119_119 Depth=2
	movdqa	xmm1, xmmword ptr [__xmm@00000003000000020000000100000000] # xmm1 = [0,1,2,3]
	mov	edi, eax
	mov	edx, ecx
	pxor	xmm0, xmm0
	mov	esi, ebp
	and	edi, -4
	and	edx, -4
	.p2align	4, 0x90
LBB119_131:                             #   Parent Loop BB119_5 Depth=1
                                        #     Parent Loop BB119_119 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movd	xmm2, dword ptr [esi]           # xmm2 = mem[0],zero,zero,zero
	movdqa	xmm3, xmm1
	add	esi, 4
	paddd	xmm1, xmm7
	add	edi, -4
	pslld	xmm3, 26
	paddd	xmm3, xmm6
	cvttps2dq	xmm3, xmm3
	punpcklbw	xmm2, xmm5              # xmm2 = xmm2[0],xmm5[0],xmm2[1],xmm5[1],xmm2[2],xmm5[2],xmm2[3],xmm5[3],xmm2[4],xmm5[4],xmm2[5],xmm5[5],xmm2[6],xmm5[6],xmm2[7],xmm5[7]
	punpcklwd	xmm2, xmm5              # xmm2 = xmm2[0],xmm5[0],xmm2[1],xmm5[1],xmm2[2],xmm5[2],xmm2[3],xmm5[3]
	pshufd	xmm4, xmm2, 245                 # xmm4 = xmm2[1,1,3,3]
	pmuludq	xmm2, xmm3
	pshufd	xmm3, xmm3, 245                 # xmm3 = xmm3[1,1,3,3]
	pmuludq	xmm3, xmm4
	pshufd	xmm2, xmm2, 232                 # xmm2 = xmm2[0,2,2,3]
	pshufd	xmm3, xmm3, 232                 # xmm3 = xmm3[0,2,2,3]
	punpckldq	xmm2, xmm3              # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	pxor	xmm0, xmm2
	jne	LBB119_131
# %bb.132:                              #   in Loop: Header=BB119_119 Depth=2
	pshufd	xmm1, xmm0, 78                  # xmm1 = xmm0[2,3,0,1]
	cmp	ecx, edx
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm1, 229                 # xmm0 = xmm1[1,1,2,3]
	pxor	xmm0, xmm1
	movd	edi, xmm0
	je	LBB119_121
LBB119_133:                             #   in Loop: Header=BB119_119 Depth=2
	lea	ecx, [8*edx]
	.p2align	4, 0x90
LBB119_134:                             #   Parent Loop BB119_5 Depth=1
                                        #     Parent Loop BB119_119 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzx	esi, byte ptr [ebp + edx]
	inc	edx
	shl	esi, cl
	add	ecx, 8
	xor	edi, esi
	cmp	eax, edx
	jne	LBB119_134
	jmp	LBB119_121
	.p2align	4, 0x90
LBB119_122:                             #   in Loop: Header=BB119_119 Depth=2
	test	eax, eax
	je	LBB119_135
# %bb.123:                              #   in Loop: Header=BB119_119 Depth=2
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	add	ecx, eax
	cmp	ecx, dword ptr [esp + 136]
	ja	LBB119_125
# %bb.124:                              #   in Loop: Header=BB119_119 Depth=2
	mov	ecx, dword ptr [esp + 128]
	add	esi, eax
	cmp	byte ptr [ecx + esi], 0
	je	LBB119_126
LBB119_125:                             #   in Loop: Header=BB119_119 Depth=2
	dec	eax
LBB119_126:                             #   in Loop: Header=BB119_119 Depth=2
	xor	edi, edi
	mov	ecx, eax
	jmp	LBB119_141
	.p2align	4, 0x90
LBB119_135:                             #   in Loop: Header=BB119_119 Depth=2
	mov	ecx, dword ptr [esp + 128]
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	lea	edx, [ecx + eax]
	lea	esi, [ecx + eax + 258]
	mov	ecx, dword ptr [esp + 76]       # 4-byte Reload
	cmp	esi, ecx
	cmova	esi, ecx
	mov	ecx, edx
	cmp	edx, esi
	je	LBB119_140
# %bb.136:                              #   in Loop: Header=BB119_119 Depth=2
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	mov	ecx, edx
	.p2align	4, 0x90
LBB119_137:                             #   Parent Loop BB119_5 Depth=1
                                        #     Parent Loop BB119_119 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmp	byte ptr [ecx], 0
	jne	LBB119_140
# %bb.138:                              #   in Loop: Header=BB119_137 Depth=3
	inc	ecx
	cmp	eax, ecx
	jne	LBB119_137
# %bb.139:                              #   in Loop: Header=BB119_119 Depth=2
	mov	ecx, esi
LBB119_140:                             #   in Loop: Header=BB119_119 Depth=2
	sub	ecx, edx
	xor	edi, edi
LBB119_141:                             #   in Loop: Header=BB119_119 Depth=2
	mov	edx, dword ptr [esp + 68]       # 4-byte Reload
	mov	dword ptr [edx + 4*ebx], edi
	mov	edx, dword ptr [esp + 32]       # 4-byte Reload
	mov	edx, dword ptr [edx + 4*edi]
	cmp	edx, -1
	je	LBB119_143
# %bb.142:                              #   in Loop: Header=BB119_119 Depth=2
	mov	esi, dword ptr [esp + 36]       # 4-byte Reload
	mov	esi, dword ptr [esi + 4]
	mov	word ptr [esi + 2*ebx], dx
LBB119_143:                             #   in Loop: Header=BB119_119 Depth=2
	mov	edx, dword ptr [esp + 32]       # 4-byte Reload
	mov	esi, dword ptr [esp + 44]       # 4-byte Reload
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [edx + 4*edi], ebx
	mov	edx, dword ptr [esp + 64]       # 4-byte Reload
	mov	word ptr [edx + 2*ebx], cx
	movzx	edx, cx
	mov	esi, dword ptr [esi + 4*edx]
	cmp	esi, -1
	je	LBB119_118
# %bb.144:                              #   in Loop: Header=BB119_119 Depth=2
	mov	edi, dword ptr [esp + 36]       # 4-byte Reload
	mov	edi, dword ptr [edi + 16]
	mov	word ptr [edi + 2*ebx], si
	jmp	LBB119_118
LBB119_145:                             #   in Loop: Header=BB119_5 Depth=1
	mov	esi, ecx
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	jmp	LBB119_92
LBB119_93:
	xor	eax, eax
	jmp	LBB119_150
LBB119_148:
	mov	eax, 86
	jmp	LBB119_150
LBB119_83:
	mov	eax, 83
	jmp	LBB119_150
LBB119_149:
	mov	eax, 81
LBB119_150:
	add	esp, 108
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?color_tree_get@@YAHPAUColorTree@@EEEE@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ?color_tree_get@@YAHPAUColorTree@@EEEE@Z
"?color_tree_get@@YAHPAUColorTree@@EEEE@Z": # @"?color_tree_get@@YAHPAUColorTree@@EEEE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	movzx	esi, byte ptr [esp + 32]
	movzx	ebx, byte ptr [esp + 24]
	movzx	edi, byte ptr [esp + 28]
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	eax, ebx
	mov	ebp, esi
	and	eax, 1
	and	ebp, 1
	lea	eax, [ebp + 4*eax]
	mov	ebp, edx
	and	ebp, 1
	lea	eax, [eax + 8*ebp]
	mov	ebp, edi
	and	ebp, 1
	lea	eax, [eax + 2*ebp]
	mov	ecx, dword ptr [ecx + 4*eax]
	mov	eax, -1
	test	ecx, ecx
	je	LBB120_9
# %bb.1:
	mov	edx, edi
	mov	edi, esi
	mov	ebp, ebx
	shr	edi
	and	ebp, 2
	and	edi, 1
	lea	edi, [edi + 2*ebp]
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	and	ebp, 2
	lea	edi, [edi + 4*ebp]
	mov	ebp, edx
	and	ebp, 2
	or	edi, ebp
	mov	ecx, dword ptr [ecx + 4*edi]
	test	ecx, ecx
	je	LBB120_9
# %bb.2:
	mov	ebp, esi
	mov	edi, ebx
	shr	ebp, 2
	and	edi, 4
	and	ebp, 1
	or	ebp, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	and	edi, 4
	lea	edi, [ebp + 2*edi]
	mov	ebp, edx
	shr	ebp
	and	ebp, 2
	or	edi, ebp
	mov	ecx, dword ptr [ecx + 4*edi]
	test	ecx, ecx
	je	LBB120_9
# %bb.3:
	mov	edi, ebx
	mov	ebp, esi
	shr	edi
	shr	ebp, 3
	and	edi, 4
	and	ebp, 1
	or	ebp, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	and	edi, 8
	or	ebp, edi
	mov	edi, edx
	shr	edi, 2
	and	edi, 2
	or	ebp, edi
	mov	ecx, dword ptr [ecx + 4*ebp]
	test	ecx, ecx
	je	LBB120_9
# %bb.4:
	mov	edi, ebx
	mov	ebp, esi
	shr	edi, 2
	shr	ebp, 4
	and	edi, 4
	and	ebp, 1
	or	ebp, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	shr	edi
	and	edi, 8
	or	ebp, edi
	mov	edi, edx
	shr	edi, 3
	and	edi, 2
	or	ebp, edi
	mov	ecx, dword ptr [ecx + 4*ebp]
	test	ecx, ecx
	je	LBB120_9
# %bb.5:
	mov	edi, ebx
	mov	ebp, esi
	shr	edi, 3
	shr	ebp, 5
	and	edi, 4
	and	ebp, 1
	or	ebp, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	shr	edi, 2
	and	edi, 8
	or	ebp, edi
	mov	edi, edx
	shr	edi, 4
	and	edi, 2
	or	ebp, edi
	mov	ecx, dword ptr [ecx + 4*ebp]
	test	ecx, ecx
	je	LBB120_9
# %bb.6:
	mov	edi, ebx
	mov	ebp, esi
	shr	edi, 4
	shr	ebp, 6
	and	edi, 4
	and	ebp, 1
	or	ebp, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	shr	edi, 3
	and	edi, 8
	or	ebp, edi
	mov	edi, edx
	shr	edi, 5
	and	edi, 2
	or	ebp, edi
	mov	ecx, dword ptr [ecx + 4*ebp]
	test	ecx, ecx
	je	LBB120_9
# %bb.7:
	mov	edi, edx
	mov	edx, dword ptr [esp]            # 4-byte Reload
	shr	ebx, 7
	shr	esi, 7
	lea	esi, [esi + 4*ebx]
	shr	edi, 7
	shr	edx, 7
	lea	esi, [esi + 8*edx]
	lea	edx, [esi + 2*edi]
	mov	ecx, dword ptr [ecx + 4*edx]
	test	ecx, ecx
	je	LBB120_9
# %bb.8:
	mov	eax, dword ptr [ecx + 64]
LBB120_9:
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?unfilter@@YAIPAEPBEIII@Z";
	.scl	3;
	.type	32;
	.endef
	.globl	__xmm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f # -- Begin function ?unfilter@@YAIPAEPBEIII@Z
	.section	.rdata,"dr",discard,__xmm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f
	.p2align	4
__xmm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f:
	.zero	16,127
	.text
	.p2align	4, 0x90
"?unfilter@@YAIPAEPBEIII@Z":            # @"?unfilter@@YAIPAEPBEIII@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 524
	cmp	dword ptr [esp + 548], 0
	mov	dword ptr [esp + 168], edx      # 4-byte Spill
	je	LBB121_142
# %bb.1:
	mov	eax, dword ptr [esp + 544]
	mov	edi, dword ptr [esp + 552]
	mov	edx, ecx
	movdqa	xmm5, xmmword ptr [__xmm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f] # xmm5 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	mov	dword ptr [esp + 20], 0         # 4-byte Folded Spill
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	dword ptr [esp + 232], edx      # 4-byte Spill
	mov	esi, eax
	and	eax, 7
	lea	ebx, [edi + 7]
	imul	eax, edi
	mov	ebp, ebx
	shr	esi, 3
	mov	dword ptr [esp + 92], ebx       # 4-byte Spill
	add	eax, 7
	shr	ebp, 3
	imul	esi, edi
	shr	eax, 3
	cmp	ebx, 15
	lea	ebx, [edx + ebp + 3]
	lea	ecx, [eax + esi]
	lea	eax, [eax + esi + 1]
	lea	esi, [ebp + 1]
	mov	dword ptr [esp + 172], eax      # 4-byte Spill
	seta	al
	cmp	esi, ecx
	mov	dword ptr [esp + 328], esi      # 4-byte Spill
	mov	esi, ecx
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	setb	ah
	sub	esi, ebp
	and	ah, al
	mov	edi, esi
	mov	dword ptr [esp + 28], esi       # 4-byte Spill
	mov	byte ptr [esp + 63], ah         # 1-byte Spill
	mov	eax, ebp
	and	edi, -32
	neg	eax
	mov	dword ptr [esp + 152], edi      # 4-byte Spill
	mov	dword ptr [esp + 160], eax      # 4-byte Spill
	mov	eax, ebp
	and	eax, -32
	mov	dword ptr [esp + 96], eax       # 4-byte Spill
	mov	eax, esi
	mov	eax, ecx
	mov	ecx, dword ptr [esp + 168]      # 4-byte Reload
	and	esi, -16
	and	eax, -32
	mov	dword ptr [esp + 308], esi      # 4-byte Spill
	mov	dword ptr [esp + 156], eax      # 4-byte Spill
	mov	eax, edx
	sub	eax, ebp
	mov	dword ptr [esp + 56], eax       # 4-byte Spill
	lea	eax, [ebp + 2]
	mov	dword ptr [esp + 312], eax      # 4-byte Spill
	lea	eax, [ebp + 3]
	mov	dword ptr [esp + 220], eax      # 4-byte Spill
	lea	eax, [ebp + edi]
	lea	edi, [ecx + 3]
	mov	dword ptr [esp + 164], edi      # 4-byte Spill
	lea	edi, [ecx + 4]
	mov	dword ptr [esp + 148], eax      # 4-byte Spill
	lea	eax, [ebp + esi]
	lea	esi, [edx + 16]
	mov	dword ptr [esp + 104], edi      # 4-byte Spill
	mov	edi, ebp
	lea	ebp, [ebp + ecx + 4]
	mov	dword ptr [esp + 304], eax      # 4-byte Spill
	mov	dword ptr [esp + 24], esi       # 4-byte Spill
	lea	eax, [ecx + 17]
	lea	esi, [ecx + 1]
	mov	dword ptr [esp + 108], ebp      # 4-byte Spill
	lea	ebp, [edi + ecx + 17]
	mov	dword ptr [esp + 8], edi        # 4-byte Spill
	mov	dword ptr [esp + 100], ebp      # 4-byte Spill
	lea	ebp, [ecx + edi + 1]
	mov	ecx, edx
	mov	dword ptr [esp + 228], ebp      # 4-byte Spill
	xor	ebp, ebp
	jmp	LBB121_3
	.p2align	4, 0x90
LBB121_2:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, dword ptr [esp + 332]      # 4-byte Reload
	mov	edi, dword ptr [esp + 172]      # 4-byte Reload
	mov	eax, dword ptr [esp + 52]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 236]      # 4-byte Reload
	add	ebp, edx
	inc	ecx
	add	eax, edi
	add	dword ptr [esp + 24], edx       # 4-byte Folded Spill
	add	esi, edi
	add	dword ptr [esp + 164], edi      # 4-byte Folded Spill
	add	dword ptr [esp + 56], edx       # 4-byte Folded Spill
	add	dword ptr [esp + 104], edi      # 4-byte Folded Spill
	add	ebx, edx
	add	dword ptr [esp + 108], edi      # 4-byte Folded Spill
	add	dword ptr [esp + 100], edi      # 4-byte Folded Spill
	add	dword ptr [esp + 228], edi      # 4-byte Folded Spill
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp], ebp            # 4-byte Spill
	mov	ebp, ecx
	cmp	ecx, dword ptr [esp + 548]
	mov	ecx, dword ptr [esp + 232]      # 4-byte Reload
	je	LBB121_142
LBB121_3:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_52 Depth 2
                                        #     Child Loop BB121_113 Depth 2
                                        #     Child Loop BB121_125 Depth 2
                                        #     Child Loop BB121_122 Depth 2
                                        #     Child Loop BB121_117 Depth 2
                                        #     Child Loop BB121_134 Depth 2
                                        #     Child Loop BB121_141 Depth 2
                                        #     Child Loop BB121_84 Depth 2
                                        #     Child Loop BB121_86 Depth 2
                                        #     Child Loop BB121_92 Depth 2
                                        #     Child Loop BB121_95 Depth 2
                                        #     Child Loop BB121_44 Depth 2
                                        #     Child Loop BB121_100 Depth 2
                                        #     Child Loop BB121_109 Depth 2
                                        #     Child Loop BB121_104 Depth 2
                                        #     Child Loop BB121_67 Depth 2
                                        #     Child Loop BB121_69 Depth 2
                                        #     Child Loop BB121_75 Depth 2
                                        #     Child Loop BB121_78 Depth 2
                                        #     Child Loop BB121_36 Depth 2
                                        #     Child Loop BB121_98 Depth 2
                                        #     Child Loop BB121_59 Depth 2
                                        #     Child Loop BB121_61 Depth 2
                                        #     Child Loop BB121_18 Depth 2
                                        #     Child Loop BB121_20 Depth 2
                                        #     Child Loop BB121_26 Depth 2
                                        #     Child Loop BB121_29 Depth 2
                                        #     Child Loop BB121_10 Depth 2
                                        #     Child Loop BB121_12 Depth 2
	mov	dword ptr [esp + 236], ebx      # 4-byte Spill
	mov	ebx, dword ptr [esp + 172]      # 4-byte Reload
	mov	dword ptr [esp + 16], esi       # 4-byte Spill
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	mov	edx, dword ptr [esp + 168]      # 4-byte Reload
	mov	dword ptr [esp + 52], eax       # 4-byte Spill
	imul	ebx, ebp
	mov	dword ptr [esp + 12], esi       # 4-byte Spill
	movzx	esi, byte ptr [edx + ebx]
	cmp	esi, 4
	ja	LBB121_143
# %bb.4:                                #   in Loop: Header=BB121_3 Depth=1
	mov	edx, edi
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, ebp
	mov	dword ptr [esp + 332], eax      # 4-byte Spill
	mov	ebp, edi
	imul	ebp, eax
	lea	eax, [edx + ebp]
	mov	edx, dword ptr [esp + 168]      # 4-byte Reload
	add	eax, ecx
	mov	dword ptr [esp + 64], eax       # 4-byte Spill
	lea	eax, [edx + ebx + 1]
	mov	dword ptr [esp + 112], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 328]      # 4-byte Reload
	add	eax, ebx
	add	ebx, dword ptr [esp + 172]      # 4-byte Folded Reload
	add	eax, edx
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	lea	eax, [edi + ebp]
	add	eax, ecx
	mov	dword ptr [esp + 192], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	add	ebx, edx
	add	eax, ebp
	add	eax, ecx
	add	ecx, ebp
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	jmp	dword ptr [4*esi + LJTI121_0]
LBB121_5:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	je	LBB121_2
# %bb.6:                                #   in Loop: Header=BB121_3 Depth=1
	xor	eax, eax
	cmp	dword ptr [esp + 4], 32         # 4-byte Folded Reload
	jb	LBB121_12
# %bb.7:                                #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 20], ebx       # 4-byte Folded Reload
	jae	LBB121_9
# %bb.8:                                #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 112]      # 4-byte Reload
	cmp	ecx, dword ptr [esp + 192]      # 4-byte Folded Reload
	jb	LBB121_12
LBB121_9:                               #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 156]      # 4-byte Reload
	mov	edx, dword ptr [esp + 52]       # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	xor	eax, eax
	.p2align	4, 0x90
LBB121_10:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [edx + eax - 16]
	movdqu	xmm1, xmmword ptr [edx + eax]
	movdqu	xmmword ptr [esi + eax - 16], xmm0
	movdqu	xmmword ptr [esi + eax], xmm1
	add	eax, 32
	cmp	ecx, eax
	jne	LBB121_10
# %bb.11:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 4], ecx        # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	eax, ecx
	je	LBB121_2
	.p2align	4, 0x90
LBB121_12:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ecx, byte ptr [esi + eax]
	mov	byte ptr [ebp + eax], cl
	inc	eax
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	jne	LBB121_12
	jmp	LBB121_2
LBB121_13:                              #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esp + 240], eax      # 4-byte Spill
	test	edi, edi
	je	LBB121_21
# %bb.14:                               #   in Loop: Header=BB121_3 Depth=1
	xor	ecx, ecx
	cmp	dword ptr [esp + 92], 255       # 4-byte Folded Reload
	jbe	LBB121_20
# %bb.15:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	cmp	dword ptr [esp + 20], eax       # 4-byte Folded Reload
	jae	LBB121_17
# %bb.16:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	cmp	dword ptr [esp + 112], eax      # 4-byte Folded Reload
	jb	LBB121_20
LBB121_17:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, ebx
	mov	edx, dword ptr [esp + 96]       # 4-byte Reload
	mov	esi, dword ptr [esp + 52]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	xor	ecx, ecx
	.p2align	4, 0x90
LBB121_18:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [esi + ecx - 16]
	movdqu	xmm1, xmmword ptr [esi + ecx]
	movdqu	xmmword ptr [ebx + ecx - 16], xmm0
	movdqu	xmmword ptr [ebx + ecx], xmm1
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB121_18
# %bb.19:                               #   in Loop: Header=BB121_3 Depth=1
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	cmp	edi, edx
	mov	ecx, edx
	mov	ebx, eax
	je	LBB121_21
	.p2align	4, 0x90
LBB121_20:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [esi + ecx]
	mov	byte ptr [ebp + ecx], dl
	inc	ecx
	cmp	edi, ecx
	jne	LBB121_20
LBB121_21:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	cmp	edi, eax
	jae	LBB121_2
# %bb.22:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 28], 31        # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	jbe	LBB121_28
# %bb.23:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 64]       # 4-byte Reload
	mov	edx, dword ptr [esp + 192]      # 4-byte Reload
	cmp	edi, ebx
	setb	cl
	cmp	dword ptr [esp + 32], edx       # 4-byte Folded Reload
	setb	ah
	cmp	edi, dword ptr [esp + 240]      # 4-byte Folded Reload
	setb	al
	cmp	dword ptr [esp + 20], edx       # 4-byte Folded Reload
	setb	dl
	test	cl, ah
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	jne	LBB121_28
# %bb.24:                               #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	and	al, dl
	jne	LBB121_28
# %bb.25:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 152]      # 4-byte Reload
	mov	edi, dword ptr [esp + 100]      # 4-byte Reload
	xor	ecx, ecx
	add	eax, esi
	.p2align	4, 0x90
LBB121_26:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [edi + ecx - 16]
	movdqu	xmm2, xmmword ptr [esi + ecx - 16]
	movdqu	xmm1, xmmword ptr [edi + ecx]
	movdqu	xmm3, xmmword ptr [esi + ecx]
	paddb	xmm2, xmm0
	paddb	xmm3, xmm1
	movdqu	xmmword ptr [eax + ecx - 16], xmm2
	movdqu	xmmword ptr [eax + ecx], xmm3
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB121_26
# %bb.27:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 28], edx       # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 148]      # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	je	LBB121_2
LBB121_28:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	edx, [ebp + ecx]
	sub	eax, ecx
	.p2align	4, 0x90
LBB121_29:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	movzx	ebx, byte ptr [edi + ecx]
	add	bl, byte ptr [esi + ecx]
	inc	ecx
	mov	byte ptr [edx], bl
	inc	edx
	dec	eax
	jne	LBB121_29
	jmp	LBB121_2
LBB121_30:                              #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 12], 0         # 4-byte Folded Reload
	je	LBB121_54
# %bb.31:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	je	LBB121_2
# %bb.32:                               #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	xor	eax, eax
	cmp	ecx, 31
	jbe	LBB121_98
# %bb.33:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [esp], ebp            # 4-byte Spill
	mov	ebp, dword ptr [esp + 192]      # 4-byte Reload
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	cmp	edx, ebx
	lea	ecx, [edi + ecx]
	setb	bh
	cmp	dword ptr [esp + 112], ebp      # 4-byte Folded Reload
	setb	bl
	cmp	edx, ecx
	setb	cl
	cmp	edi, ebp
	setb	dl
	test	bh, bl
	jne	LBB121_97
# %bb.34:                               #   in Loop: Header=BB121_3 Depth=1
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	and	cl, dl
	jne	LBB121_98
# %bb.35:                               #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 156]      # 4-byte Reload
	mov	edx, dword ptr [esp + 52]       # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	xor	eax, eax
	.p2align	4, 0x90
LBB121_36:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	movdqu	xmm0, xmmword ptr [edx + eax - 16]
	movdqu	xmm1, xmmword ptr [edx + eax]
	movdqu	xmm2, xmmword ptr [edi + eax]
	movdqu	xmm3, xmmword ptr [edi + eax + 16]
	paddb	xmm2, xmm0
	paddb	xmm3, xmm1
	movdqu	xmmword ptr [esi + eax - 16], xmm2
	movdqu	xmmword ptr [esi + eax], xmm3
	add	eax, 32
	cmp	ecx, eax
	jne	LBB121_36
# %bb.37:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 4], ecx        # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	eax, ecx
	jne	LBB121_98
	jmp	LBB121_2
LBB121_38:                              #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [esp + 12], 0         # 4-byte Folded Reload
	mov	dword ptr [esp + 240], eax      # 4-byte Spill
	je	LBB121_62
# %bb.39:                               #   in Loop: Header=BB121_3 Depth=1
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	test	edi, edi
	je	LBB121_101
# %bb.40:                               #   in Loop: Header=BB121_3 Depth=1
	xor	ecx, ecx
	cmp	dword ptr [esp + 92], 255       # 4-byte Folded Reload
	jbe	LBB121_100
# %bb.41:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edx, edi
	mov	edi, dword ptr [esp + 20]       # 4-byte Reload
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 272], ebx      # 4-byte Spill
	cmp	edi, dword ptr [esp + 32]       # 4-byte Folded Reload
	lea	edx, [ebp + edx]
	setb	bl
	cmp	dword ptr [esp + 112], eax      # 4-byte Folded Reload
	setb	bh
	cmp	edi, edx
	setb	dl
	cmp	ebp, eax
	setb	dh
	test	bl, bh
	jne	LBB121_99
# %bb.42:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [esp + 272]      # 4-byte Reload
	and	dl, dh
	jne	LBB121_100
# %bb.43:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edx, dword ptr [esp + 96]       # 4-byte Reload
	mov	esi, dword ptr [esp + 52]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	xor	ecx, ecx
	mov	dword ptr [esp], ebp            # 4-byte Spill
	.p2align	4, 0x90
LBB121_44:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	movdqu	xmm0, xmmword ptr [esi + ecx - 16]
	movdqu	xmm1, xmmword ptr [esi + ecx]
	movdqu	xmm2, xmmword ptr [edi + ecx]
	movdqu	xmm3, xmmword ptr [edi + ecx + 16]
	psrlw	xmm2, 1
	psrlw	xmm3, 1
	pand	xmm2, xmm5
	pand	xmm3, xmm5
	paddb	xmm2, xmm0
	paddb	xmm3, xmm1
	movdqu	xmmword ptr [ebx + ecx - 16], xmm2
	movdqu	xmmword ptr [ebx + ecx], xmm3
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB121_44
# %bb.45:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [esp + 272]      # 4-byte Reload
	mov	ecx, edx
	cmp	edi, edx
	jne	LBB121_100
	jmp	LBB121_101
LBB121_46:                              #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [esp + 12], 0         # 4-byte Folded Reload
	mov	dword ptr [esp + 240], eax      # 4-byte Spill
	je	LBB121_79
# %bb.47:                               #   in Loop: Header=BB121_3 Depth=1
	test	edi, edi
	mov	dword ptr [esp + 272], ebx      # 4-byte Spill
	mov	dword ptr [esp + 336], ebp      # 4-byte Spill
	je	LBB121_96
# %bb.48:                               #   in Loop: Header=BB121_3 Depth=1
	xor	ecx, ecx
	cmp	dword ptr [esp + 92], 255       # 4-byte Folded Reload
	jbe	LBB121_112
# %bb.49:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	lea	ebp, [edx + edi]
	cmp	esi, dword ptr [esp + 32]       # 4-byte Folded Reload
	mov	edi, dword ptr [esp + 64]       # 4-byte Reload
	setb	ah
	cmp	dword ptr [esp + 112], edi      # 4-byte Folded Reload
	setb	bl
	cmp	esi, ebp
	setb	al
	cmp	edx, edi
	setb	dl
	test	ah, bl
	jne	LBB121_111
# %bb.50:                               #   in Loop: Header=BB121_3 Depth=1
	and	al, dl
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	esi, dword ptr [esp + 52]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	jne	LBB121_113
# %bb.51:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edx, dword ptr [esp + 96]       # 4-byte Reload
	xor	eax, eax
	.p2align	4, 0x90
LBB121_52:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	movdqu	xmm0, xmmword ptr [esi + eax - 16]
	movdqu	xmm1, xmmword ptr [esi + eax]
	movdqu	xmm2, xmmword ptr [ecx + eax]
	movdqu	xmm3, xmmword ptr [ecx + eax + 16]
	paddb	xmm2, xmm0
	paddb	xmm3, xmm1
	movdqu	xmmword ptr [ebx + eax - 16], xmm2
	movdqu	xmmword ptr [ebx + eax], xmm3
	add	eax, 32
	cmp	edx, eax
	jne	LBB121_52
# %bb.53:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	edi, edx
	mov	ecx, edx
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	jne	LBB121_113
	jmp	LBB121_114
LBB121_54:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	test	eax, eax
	je	LBB121_2
# %bb.55:                               #   in Loop: Header=BB121_3 Depth=1
	xor	eax, eax
	cmp	dword ptr [esp + 4], 31         # 4-byte Folded Reload
	jbe	LBB121_61
# %bb.56:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 20], ebx       # 4-byte Folded Reload
	jae	LBB121_58
# %bb.57:                               #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 112]      # 4-byte Reload
	cmp	ecx, dword ptr [esp + 192]      # 4-byte Folded Reload
	jb	LBB121_61
LBB121_58:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 156]      # 4-byte Reload
	mov	edx, dword ptr [esp + 52]       # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	xor	eax, eax
	.p2align	4, 0x90
LBB121_59:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [edx + eax - 16]
	movdqu	xmm1, xmmword ptr [edx + eax]
	movdqu	xmmword ptr [esi + eax - 16], xmm0
	movdqu	xmmword ptr [esi + eax], xmm1
	add	eax, 32
	cmp	ecx, eax
	jne	LBB121_59
# %bb.60:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 4], ecx        # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	eax, ecx
	je	LBB121_2
	.p2align	4, 0x90
LBB121_61:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ecx, byte ptr [esi + eax]
	mov	byte ptr [ebp + eax], cl
	inc	eax
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	jne	LBB121_61
	jmp	LBB121_2
LBB121_62:                              #   in Loop: Header=BB121_3 Depth=1
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	test	edi, edi
	je	LBB121_70
# %bb.63:                               #   in Loop: Header=BB121_3 Depth=1
	xor	ecx, ecx
	cmp	dword ptr [esp + 92], 255       # 4-byte Folded Reload
	jbe	LBB121_69
# %bb.64:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	cmp	dword ptr [esp + 20], eax       # 4-byte Folded Reload
	jae	LBB121_66
# %bb.65:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	cmp	dword ptr [esp + 112], eax      # 4-byte Folded Reload
	jb	LBB121_69
LBB121_66:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, ebx
	mov	edx, dword ptr [esp + 96]       # 4-byte Reload
	mov	esi, dword ptr [esp + 52]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	xor	ecx, ecx
	.p2align	4, 0x90
LBB121_67:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [esi + ecx - 16]
	movdqu	xmm1, xmmword ptr [esi + ecx]
	movdqu	xmmword ptr [ebx + ecx - 16], xmm0
	movdqu	xmmword ptr [ebx + ecx], xmm1
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB121_67
# %bb.68:                               #   in Loop: Header=BB121_3 Depth=1
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	cmp	edi, edx
	mov	ecx, edx
	mov	ebx, eax
	je	LBB121_70
	.p2align	4, 0x90
LBB121_69:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [esi + ecx]
	mov	byte ptr [ebp + ecx], dl
	inc	ecx
	cmp	edi, ecx
	jne	LBB121_69
LBB121_70:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	cmp	edi, eax
	jae	LBB121_2
# %bb.71:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 28], 31        # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	jbe	LBB121_77
# %bb.72:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 64]       # 4-byte Reload
	mov	edx, dword ptr [esp + 192]      # 4-byte Reload
	cmp	edi, ebx
	setb	cl
	cmp	dword ptr [esp + 32], edx       # 4-byte Folded Reload
	setb	ah
	cmp	edi, dword ptr [esp + 240]      # 4-byte Folded Reload
	setb	al
	cmp	dword ptr [esp + 20], edx       # 4-byte Folded Reload
	setb	dl
	test	cl, ah
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	jne	LBB121_77
# %bb.73:                               #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	and	al, dl
	jne	LBB121_77
# %bb.74:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 152]      # 4-byte Reload
	mov	edi, dword ptr [esp + 100]      # 4-byte Reload
	xor	ecx, ecx
	add	eax, esi
	.p2align	4, 0x90
LBB121_75:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm2, xmmword ptr [esi + ecx - 16]
	movdqu	xmm3, xmmword ptr [esi + ecx]
	movdqu	xmm0, xmmword ptr [edi + ecx - 16]
	movdqu	xmm1, xmmword ptr [edi + ecx]
	psrlw	xmm2, 1
	psrlw	xmm3, 1
	pand	xmm2, xmm5
	pand	xmm3, xmm5
	paddb	xmm2, xmm0
	paddb	xmm3, xmm1
	movdqu	xmmword ptr [eax + ecx - 16], xmm2
	movdqu	xmmword ptr [eax + ecx], xmm3
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB121_75
# %bb.76:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 28], edx       # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 148]      # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	je	LBB121_2
LBB121_77:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	edx, [ebp + ecx]
	sub	eax, ecx
	.p2align	4, 0x90
LBB121_78:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	movzx	ebx, byte ptr [edi + ecx]
	shr	bl
	add	bl, byte ptr [esi + ecx]
	inc	ecx
	mov	byte ptr [edx], bl
	inc	edx
	dec	eax
	jne	LBB121_78
	jmp	LBB121_2
LBB121_79:                              #   in Loop: Header=BB121_3 Depth=1
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	test	edi, edi
	je	LBB121_87
# %bb.80:                               #   in Loop: Header=BB121_3 Depth=1
	xor	ecx, ecx
	cmp	dword ptr [esp + 92], 255       # 4-byte Folded Reload
	jbe	LBB121_86
# %bb.81:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	cmp	dword ptr [esp + 20], eax       # 4-byte Folded Reload
	jae	LBB121_83
# %bb.82:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	cmp	dword ptr [esp + 112], eax      # 4-byte Folded Reload
	jb	LBB121_86
LBB121_83:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, ebx
	mov	edx, dword ptr [esp + 96]       # 4-byte Reload
	mov	esi, dword ptr [esp + 52]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 24]       # 4-byte Reload
	xor	ecx, ecx
	.p2align	4, 0x90
LBB121_84:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [esi + ecx - 16]
	movdqu	xmm1, xmmword ptr [esi + ecx]
	movdqu	xmmword ptr [ebx + ecx - 16], xmm0
	movdqu	xmmword ptr [ebx + ecx], xmm1
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB121_84
# %bb.85:                               #   in Loop: Header=BB121_3 Depth=1
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	cmp	edi, edx
	mov	ecx, edx
	mov	ebx, eax
	je	LBB121_87
	.p2align	4, 0x90
LBB121_86:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [esi + ecx]
	mov	byte ptr [ebp + ecx], dl
	inc	ecx
	cmp	edi, ecx
	jne	LBB121_86
LBB121_87:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	cmp	edi, eax
	jae	LBB121_2
# %bb.88:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 28], 31        # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	jbe	LBB121_94
# %bb.89:                               #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 64]       # 4-byte Reload
	mov	edx, dword ptr [esp + 192]      # 4-byte Reload
	cmp	edi, ebx
	setb	cl
	cmp	dword ptr [esp + 32], edx       # 4-byte Folded Reload
	setb	ah
	cmp	edi, dword ptr [esp + 240]      # 4-byte Folded Reload
	setb	al
	cmp	dword ptr [esp + 20], edx       # 4-byte Folded Reload
	setb	dl
	test	cl, ah
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	jne	LBB121_94
# %bb.90:                               #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	and	al, dl
	jne	LBB121_94
# %bb.91:                               #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	esi, dword ptr [esp + 24]       # 4-byte Reload
	mov	edx, dword ptr [esp + 152]      # 4-byte Reload
	mov	edi, dword ptr [esp + 100]      # 4-byte Reload
	xor	ecx, ecx
	add	eax, esi
	.p2align	4, 0x90
LBB121_92:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [edi + ecx - 16]
	movdqu	xmm2, xmmword ptr [esi + ecx - 16]
	movdqu	xmm1, xmmword ptr [edi + ecx]
	movdqu	xmm3, xmmword ptr [esi + ecx]
	paddb	xmm2, xmm0
	paddb	xmm3, xmm1
	movdqu	xmmword ptr [eax + ecx - 16], xmm2
	movdqu	xmmword ptr [eax + ecx], xmm3
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB121_92
# %bb.93:                               #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 28], edx       # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 148]      # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	je	LBB121_2
LBB121_94:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	edx, [ebp + ecx]
	sub	eax, ecx
	.p2align	4, 0x90
LBB121_95:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edi, dword ptr [esp + 56]       # 4-byte Reload
	movzx	ebx, byte ptr [edi + ecx]
	add	bl, byte ptr [esi + ecx]
	inc	ecx
	mov	byte ptr [edx], bl
	inc	edx
	dec	eax
	jne	LBB121_95
	jmp	LBB121_2
LBB121_96:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	xor	edi, edi
	jmp	LBB121_126
LBB121_97:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	.p2align	4, 0x90
LBB121_98:                              #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	movzx	ecx, byte ptr [ecx + eax]
	add	cl, byte ptr [esi + eax]
	mov	byte ptr [ebp + eax], cl
	inc	eax
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	jne	LBB121_98
	jmp	LBB121_2
LBB121_99:                              #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [esp + 272]      # 4-byte Reload
	.p2align	4, 0x90
LBB121_100:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	movzx	edx, byte ptr [edx + ecx]
	shr	dl
	add	dl, byte ptr [esi + ecx]
	mov	byte ptr [ebp + ecx], dl
	inc	ecx
	cmp	edi, ecx
	jne	LBB121_100
LBB121_101:                             #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	cmp	edi, eax
	jae	LBB121_2
# %bb.102:                              #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 28], 15        # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	ja	LBB121_105
LBB121_103:                             #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	edx, [ebp + ecx]
	sub	eax, ecx
	.p2align	4, 0x90
LBB121_104:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	esi, dword ptr [esp + 56]       # 4-byte Reload
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	movzx	esi, byte ptr [esi + ecx]
	movzx	ebx, byte ptr [edi + ecx]
	add	ebx, esi
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	shr	ebx
	add	bl, byte ptr [esi + ecx]
	inc	ecx
	mov	byte ptr [edx], bl
	inc	edx
	dec	eax
	jne	LBB121_104
	jmp	LBB121_2
LBB121_105:                             #   in Loop: Header=BB121_3 Depth=1
	mov	esi, dword ptr [esp + 64]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 192]      # 4-byte Reload
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	cmp	esi, ebx
	lea	eax, [edi + eax]
	setb	byte ptr [esp]                  # 1-byte Folded Spill
	cmp	dword ptr [esp + 32], ecx       # 4-byte Folded Reload
	setb	byte ptr [esp + 32]             # 1-byte Folded Spill
	cmp	esi, dword ptr [esp + 240]      # 4-byte Folded Reload
	setb	dh
	cmp	dword ptr [esp + 20], ecx       # 4-byte Folded Reload
	setb	byte ptr [esp + 112]            # 1-byte Folded Spill
	cmp	esi, eax
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	setb	dl
	lea	eax, [edi + esi]
	cmp	eax, ecx
	mov	cl, byte ptr [esp + 32]         # 1-byte Reload
	setb	bl
	test	byte ptr [esp], cl              # 1-byte Folded Reload
	mov	ecx, esi
	jne	LBB121_103
# %bb.106:                              #   in Loop: Header=BB121_3 Depth=1
	and	dh, byte ptr [esp + 112]        # 1-byte Folded Reload
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	jne	LBB121_103
# %bb.107:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	and	dl, bl
	jne	LBB121_103
# %bb.108:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	esi, dword ptr [esp + 308]      # 4-byte Reload
	mov	edi, dword ptr [esp + 228]      # 4-byte Reload
	xor	edx, edx
	add	ecx, ebp
	.p2align	4, 0x90
LBB121_109:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm1, xmmword ptr [ebp + edx]
	movdqu	xmm3, xmmword ptr [eax + edx]
	pxor	xmm6, xmm6
	movdqu	xmm0, xmmword ptr [edi + edx]
	movdqa	xmm2, xmm1
	movdqa	xmm4, xmm3
	punpcklbw	xmm1, xmm6              # xmm1 = xmm1[0],xmm6[0],xmm1[1],xmm6[1],xmm1[2],xmm6[2],xmm1[3],xmm6[3],xmm1[4],xmm6[4],xmm1[5],xmm6[5],xmm1[6],xmm6[6],xmm1[7],xmm6[7]
	punpcklbw	xmm3, xmm6              # xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1],xmm3[2],xmm6[2],xmm3[3],xmm6[3],xmm3[4],xmm6[4],xmm3[5],xmm6[5],xmm3[6],xmm6[6],xmm3[7],xmm6[7]
	punpckhbw	xmm2, xmm6              # xmm2 = xmm2[8],xmm6[8],xmm2[9],xmm6[9],xmm2[10],xmm6[10],xmm2[11],xmm6[11],xmm2[12],xmm6[12],xmm2[13],xmm6[13],xmm2[14],xmm6[14],xmm2[15],xmm6[15]
	punpckhbw	xmm4, xmm6              # xmm4 = xmm4[8],xmm6[8],xmm4[9],xmm6[9],xmm4[10],xmm6[10],xmm4[11],xmm6[11],xmm4[12],xmm6[12],xmm4[13],xmm6[13],xmm4[14],xmm6[14],xmm4[15],xmm6[15]
	paddw	xmm3, xmm1
	paddw	xmm4, xmm2
	psrlw	xmm3, 1
	psrlw	xmm4, 1
	packuswb	xmm3, xmm4
	paddb	xmm3, xmm0
	movdqu	xmmword ptr [ecx + edx], xmm3
	add	edx, 16
	cmp	esi, edx
	jne	LBB121_109
# %bb.110:                              #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 28], esi       # 4-byte Folded Reload
	mov	ecx, dword ptr [esp + 304]      # 4-byte Reload
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	je	LBB121_2
	jmp	LBB121_103
LBB121_111:                             #   in Loop: Header=BB121_3 Depth=1
	mov	edi, dword ptr [esp + 8]        # 4-byte Reload
LBB121_112:                             #   in Loop: Header=BB121_3 Depth=1
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	.p2align	4, 0x90
LBB121_113:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	movzx	eax, byte ptr [eax + ecx]
	add	al, byte ptr [edx + ecx]
	mov	byte ptr [ebp + ecx], al
	inc	ecx
	cmp	edi, ecx
	jne	LBB121_113
LBB121_114:                             #   in Loop: Header=BB121_3 Depth=1
	cmp	dword ptr [esp + 92], 32        # 4-byte Folded Reload
	jb	LBB121_119
# %bb.115:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	cmp	dword ptr [esp + 220], ecx      # 4-byte Folded Reload
	jae	LBB121_126
# %bb.116:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 220]      # 4-byte Reload
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	xor	edi, edi
	add	eax, ecx
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	.p2align	4, 0x90
LBB121_117:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	movzx	ebx, byte ptr [ebp + edi]
	movzx	eax, byte ptr [eax + edi - 3]
	movzx	ecx, byte ptr [ecx + edi]
	mov	ebp, ebx
	mov	dword ptr [esp + 64], ebx       # 4-byte Spill
	mov	edx, eax
	mov	dword ptr [esp + 176], ecx      # 4-byte Spill
	sub	edx, ecx
	mov	esi, edx
	neg	esi
	cmovl	esi, edx
	sub	ebp, ecx
	mov	edx, ebp
	neg	edx
	cmovl	edx, ebp
	lea	ebp, [ecx + ecx]
	lea	ecx, [eax + ebx]
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	sub	ecx, ebp
	cmp	edx, esi
	cmovge	edx, esi
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	movzx	ebp, byte ptr [ebx + edi + 1]
	mov	ebx, dword ptr [esp + 64]       # 4-byte Reload
	movzx	esi, byte ptr [esi + edi - 2]
	cmovl	ebx, eax
	mov	eax, ecx
	neg	eax
	cmovl	eax, ecx
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 256], esi      # 4-byte Spill
	cmp	eax, edx
	mov	eax, dword ptr [esp + 108]      # 4-byte Reload
	cmovl	ebx, dword ptr [esp + 176]      # 4-byte Folded Reload
	movzx	esi, byte ptr [ecx + edi + 1]
	add	bl, byte ptr [eax + edi - 3]
	mov	dword ptr [esp + 128], esi      # 4-byte Spill
	mov	dword ptr [esp + 64], ebx       # 4-byte Spill
	mov	ebx, dword ptr [esp + 256]      # 4-byte Reload
	mov	eax, ebx
	sub	eax, esi
	mov	ecx, eax
	neg	ecx
	cmovl	ecx, eax
	mov	eax, ebp
	sub	eax, esi
	mov	edx, eax
	neg	edx
	cmovl	edx, eax
	lea	eax, [esi + esi]
	lea	esi, [ebx + ebp]
	sub	esi, eax
	mov	eax, dword ptr [esp]            # 4-byte Reload
	cmp	edx, ecx
	cmovge	edx, ecx
	cmovl	ebp, ebx
	movzx	ecx, byte ptr [eax + edi + 2]
	mov	eax, esi
	neg	eax
	cmovl	eax, esi
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	cmp	eax, edx
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	movzx	esi, byte ptr [esi + edi - 1]
	movzx	edx, byte ptr [eax + edi + 2]
	mov	eax, ebp
	mov	ebp, dword ptr [esp + 108]      # 4-byte Reload
	cmovl	eax, dword ptr [esp + 128]      # 4-byte Folded Reload
	mov	dword ptr [esp + 256], esi      # 4-byte Spill
	add	al, byte ptr [ebp + edi - 2]
	mov	dword ptr [esp + 128], eax      # 4-byte Spill
	mov	eax, esi
	mov	esi, edx
	sub	eax, edx
	mov	ebx, esi
	mov	dword ptr [esp + 176], esi      # 4-byte Spill
	mov	edx, eax
	neg	edx
	cmovl	edx, eax
	mov	eax, ecx
	sub	eax, esi
	mov	esi, eax
	neg	esi
	cmovl	esi, eax
	lea	eax, [ebx + ebx]
	mov	ebx, dword ptr [esp + 256]      # 4-byte Reload
	mov	dword ptr [esp + 352], eax      # 4-byte Spill
	lea	eax, [ebx + ecx]
	sub	eax, dword ptr [esp + 352]      # 4-byte Folded Reload
	cmp	esi, edx
	cmovge	esi, edx
	cmovl	ecx, ebx
	mov	edx, eax
	neg	edx
	cmovl	edx, eax
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	cmp	edx, esi
	cmovl	ecx, dword ptr [esp + 176]      # 4-byte Folded Reload
	movzx	ebx, byte ptr [eax + edi]
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	add	cl, byte ptr [ebp + edi - 1]
	movzx	esi, byte ptr [eax + edi + 3]
	mov	eax, ebx
	mov	dword ptr [esp + 176], ecx      # 4-byte Spill
	sub	eax, esi
	mov	edx, eax
	neg	edx
	cmovl	edx, eax
	mov	eax, dword ptr [esp]            # 4-byte Reload
	movzx	eax, byte ptr [eax + edi + 3]
	mov	ecx, eax
	sub	ecx, esi
	mov	ebp, ecx
	neg	ebp
	cmovl	ebp, ecx
	lea	ecx, [esi + esi]
	mov	dword ptr [esp + 256], ecx      # 4-byte Spill
	lea	ecx, [ebx + eax]
	sub	ecx, dword ptr [esp + 256]      # 4-byte Folded Reload
	cmp	ebp, edx
	cmovl	eax, ebx
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	cmovge	ebp, edx
	mov	edx, ecx
	neg	edx
	cmovl	edx, ecx
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	cmp	edx, ebp
	mov	ebp, ebx
	mov	ebx, dword ptr [esp + 108]      # 4-byte Reload
	cmovl	eax, esi
	mov	esi, dword ptr [esp + 236]      # 4-byte Reload
	add	al, byte ptr [ebx + edi]
	mov	ebx, dword ptr [esp + 64]       # 4-byte Reload
	mov	byte ptr [esi + edi - 3], bl
	mov	ebx, dword ptr [esp + 128]      # 4-byte Reload
	mov	byte ptr [esi + edi - 2], bl
	mov	ebx, dword ptr [esp + 176]      # 4-byte Reload
	mov	byte ptr [esi + edi - 1], bl
	mov	byte ptr [esi + edi], al
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	lea	eax, [eax + edi + 7]
	add	edi, 4
	cmp	eax, ecx
	jb	LBB121_117
# %bb.118:                              #   in Loop: Header=BB121_3 Depth=1
	add	edi, dword ptr [esp + 8]        # 4-byte Folded Reload
	jmp	LBB121_126
LBB121_119:                             #   in Loop: Header=BB121_3 Depth=1
	cmp	edi, 3
	jne	LBB121_123
# %bb.120:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	edi, 3
	cmp	dword ptr [esp + 312], ecx      # 4-byte Folded Reload
	jae	LBB121_126
# %bb.121:                              #   in Loop: Header=BB121_3 Depth=1
	mov	esi, 3
	.p2align	4, 0x90
LBB121_122:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	movzx	ebp, byte ptr [ebp + esi - 3]
	movzx	edx, byte ptr [eax + esi]
	movzx	edi, byte ptr [eax + esi - 3]
	mov	dword ptr [esp + 32], ebp       # 4-byte Spill
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	ecx, edx
	mov	dword ptr [esp + 176], edi      # 4-byte Spill
	sub	ecx, edi
	add	eax, edx
	mov	ebx, ecx
	neg	ebx
	cmovl	ebx, ecx
	mov	ecx, ebp
	sub	ecx, edi
	mov	ebp, ecx
	neg	ebp
	cmovl	ebp, ecx
	lea	ecx, [edi + edi]
	sub	eax, ecx
	cmp	ebp, ebx
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	cmovge	ebp, ebx
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	movzx	ecx, byte ptr [ecx + esi - 2]
	cmovl	ebx, edx
	mov	edx, eax
	neg	edx
	cmovl	edx, eax
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	cmp	edx, ebp
	cmovl	ebx, dword ptr [esp + 176]      # 4-byte Folded Reload
	movzx	edi, byte ptr [eax + esi + 1]
	movzx	ebp, byte ptr [eax + esi - 2]
	mov	eax, dword ptr [esp + 104]      # 4-byte Reload
	mov	dword ptr [esp + 128], edi      # 4-byte Spill
	add	bl, byte ptr [eax + esi - 3]
	mov	eax, ebp
	mov	dword ptr [esp + 64], ebp       # 4-byte Spill
	mov	edx, dword ptr [esp + 128]      # 4-byte Reload
	mov	dword ptr [esp + 32], ebx       # 4-byte Spill
	mov	edi, edx
	sub	edi, ebp
	mov	ebx, edi
	neg	ebx
	cmovl	ebx, edi
	mov	edi, ecx
	sub	edi, ebp
	mov	ebp, edi
	neg	ebp
	cmovl	ebp, edi
	lea	edi, [eax + eax]
	lea	eax, [edx + ecx]
	sub	eax, edi
	cmp	ebp, ebx
	mov	edi, eax
	cmovl	ecx, edx
	cmovge	ebp, ebx
	neg	edi
	mov	edx, ecx
	cmovl	edi, eax
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	cmp	edi, ebp
	cmovl	edx, dword ptr [esp + 64]       # 4-byte Folded Reload
	movzx	ecx, byte ptr [eax + esi + 2]
	movzx	ebx, byte ptr [eax + esi - 1]
	mov	eax, dword ptr [esp + 104]      # 4-byte Reload
	add	dl, byte ptr [eax + esi - 2]
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esp + 64], edx       # 4-byte Spill
	mov	edx, ecx
	sub	edx, ebx
	mov	edi, edx
	neg	edi
	cmovl	edi, edx
	movzx	edx, byte ptr [eax + esi - 1]
	mov	eax, edx
	sub	eax, ebx
	mov	ebp, eax
	neg	ebp
	cmovl	ebp, eax
	lea	eax, [ebx + ebx]
	mov	dword ptr [esp + 128], eax      # 4-byte Spill
	lea	eax, [ecx + edx]
	sub	eax, dword ptr [esp + 128]      # 4-byte Folded Reload
	cmp	ebp, edi
	cmovge	ebp, edi
	cmovl	edx, ecx
	mov	ecx, dword ptr [esp + 64]       # 4-byte Reload
	mov	edi, eax
	neg	edi
	cmovl	edi, eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	cmp	edi, ebp
	mov	edi, dword ptr [esp + 104]      # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	cmovl	edx, ebx
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	add	dl, byte ptr [edi + esi - 1]
	lea	edi, [esi + 3]
	mov	byte ptr [ebp + esi], bl
	mov	byte ptr [ebp + esi + 1], cl
	mov	ecx, eax
	mov	byte ptr [ebp + esi + 2], dl
	add	esi, 5
	cmp	esi, eax
	mov	esi, edi
	jb	LBB121_122
	jmp	LBB121_126
LBB121_123:                             #   in Loop: Header=BB121_3 Depth=1
	cmp	byte ptr [esp + 63], 0          # 1-byte Folded Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	je	LBB121_126
# %bb.124:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 160]      # 4-byte Reload
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	esi, 2
	add	eax, ecx
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	.p2align	4, 0x90
LBB121_125:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 56]       # 4-byte Reload
	movzx	ebp, byte ptr [eax + esi]
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	movzx	edi, byte ptr [eax + esi]
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	movzx	edx, byte ptr [eax + esi]
	mov	ecx, edi
	mov	eax, ebp
	sub	ecx, edx
	mov	dword ptr [esp + 64], edx       # 4-byte Spill
	mov	ebx, ecx
	neg	ebx
	cmovl	ebx, ecx
	sub	eax, edx
	mov	ecx, eax
	neg	ecx
	cmovl	ecx, eax
	lea	eax, [edx + edx]
	lea	edx, [edi + ebp]
	sub	edx, eax
	cmp	ecx, ebx
	mov	eax, dword ptr [esp + 56]       # 4-byte Reload
	cmovl	ebp, edi
	mov	edi, edx
	cmovge	ecx, ebx
	neg	edi
	cmovl	edi, edx
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	cmp	edi, ecx
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	mov	edi, dword ptr [esp + 164]      # 4-byte Reload
	movzx	eax, byte ptr [eax + esi + 1]
	movzx	edx, byte ptr [edx + esi + 1]
	movzx	ebx, byte ptr [ecx + esi + 1]
	mov	ecx, ebp
	cmovl	ecx, dword ptr [esp + 64]       # 4-byte Folded Reload
	add	cl, byte ptr [edi + esi - 2]
	mov	dword ptr [esp + 64], ecx       # 4-byte Spill
	mov	ecx, edx
	sub	ecx, ebx
	mov	edi, ecx
	neg	edi
	cmovl	edi, ecx
	mov	ecx, eax
	sub	ecx, ebx
	mov	ebp, ecx
	neg	ebp
	cmovl	ebp, ecx
	lea	ecx, [ebx + ebx]
	mov	dword ptr [esp + 128], ecx      # 4-byte Spill
	lea	ecx, [edx + eax]
	sub	ecx, dword ptr [esp + 128]      # 4-byte Folded Reload
	cmp	ebp, edi
	cmovl	eax, edx
	cmovge	ebp, edi
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, ecx
	neg	edx
	cmovl	edx, ecx
	mov	ecx, edi
	lea	edi, [esi + 2]
	cmp	edx, ebp
	mov	edx, dword ptr [esp + 164]      # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	cmovl	eax, ebx
	add	al, byte ptr [edx + esi - 1]
	mov	edx, dword ptr [esp + 64]       # 4-byte Reload
	mov	byte ptr [ebp + esi], dl
	mov	byte ptr [ebp + esi + 1], al
	add	esi, 3
	cmp	esi, ecx
	mov	esi, edi
	jb	LBB121_125
LBB121_126:                             #   in Loop: Header=BB121_3 Depth=1
	mov	dword ptr [esp + 32], edi       # 4-byte Spill
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	cmp	ebx, ecx
	je	LBB121_2
# %bb.127:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	sub	ecx, ebx
	cmp	ecx, 16
	jae	LBB121_129
# %bb.128:                              #   in Loop: Header=BB121_3 Depth=1
	mov	edx, ebx
	jmp	LBB121_140
LBB121_129:                             #   in Loop: Header=BB121_3 Depth=1
	mov	edx, dword ptr [esp + 336]      # 4-byte Reload
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [esp], ebp            # 4-byte Spill
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 216], ecx      # 4-byte Spill
	add	dword ptr [esp + 112], ebx      # 4-byte Folded Spill
	sub	edx, dword ptr [esp + 8]        # 4-byte Folded Reload
	lea	ebp, [eax + ebx]
	mov	eax, dword ptr [esp + 160]      # 4-byte Reload
	mov	dword ptr [esp + 128], ebp      # 4-byte Spill
	add	edx, dword ptr [esp + 232]      # 4-byte Folded Reload
	lea	ecx, [edi + eax]
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	add	ecx, ebx
	mov	dword ptr [esp + 300], ecx      # 4-byte Spill
	add	edx, ebx
	cmp	ebp, dword ptr [esp + 272]      # 4-byte Folded Reload
	mov	ebp, dword ptr [esp + 192]      # 4-byte Reload
	lea	eax, [edi + eax]
	mov	dword ptr [esp + 176], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 128]      # 4-byte Reload
	setb	byte ptr [esp + 64]             # 1-byte Folded Spill
	cmp	dword ptr [esp + 112], ebp      # 4-byte Folded Reload
	setb	byte ptr [esp + 112]            # 1-byte Folded Spill
	cmp	eax, dword ptr [esp + 176]      # 4-byte Folded Reload
	setb	byte ptr [esp + 176]            # 1-byte Folded Spill
	cmp	ecx, ebp
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	setb	byte ptr [esp + 256]            # 1-byte Folded Spill
	add	ecx, edi
	add	edi, ebx
	cmp	eax, ecx
	setb	cl
	cmp	edi, ebp
	setb	bl
	cmp	eax, dword ptr [esp + 240]      # 4-byte Folded Reload
	setb	ch
	cmp	edx, ebp
	mov	dl, byte ptr [esp + 112]        # 1-byte Reload
	setb	dh
	test	byte ptr [esp + 64], dl         # 1-byte Folded Reload
	jne	LBB121_139
# %bb.130:                              #   in Loop: Header=BB121_3 Depth=1
	mov	al, byte ptr [esp + 256]        # 1-byte Reload
	and	byte ptr [esp + 176], al        # 1-byte Folded Spill
	jne	LBB121_139
# %bb.131:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	and	cl, bl
	jne	LBB121_137
# %bb.132:                              #   in Loop: Header=BB121_3 Depth=1
	and	ch, dh
	jne	LBB121_137
# %bb.133:                              #   in Loop: Header=BB121_3 Depth=1
	mov	ecx, dword ptr [esp + 216]      # 4-byte Reload
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	xor	ebx, ebx
	mov	dword ptr [esp + 324], edi      # 4-byte Spill
	and	ecx, -16
	mov	dword ptr [esp + 224], ecx      # 4-byte Spill
	lea	edx, [eax + ecx]
	lea	ecx, [esi + eax]
	mov	dword ptr [esp + 320], ecx      # 4-byte Spill
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	add	ecx, eax
	add	eax, ebp
	mov	dword ptr [esp + 316], ecx      # 4-byte Spill
	mov	ecx, dword ptr [esp + 300]      # 4-byte Reload
	.p2align	4, 0x90
LBB121_134:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edi, dword ptr [esp + 324]      # 4-byte Reload
	movdqu	xmm6, xmmword ptr [ecx + ebx]
	pxor	xmm7, xmm7
	movdqu	xmm1, xmmword ptr [edi + ebx]
	movdqa	xmm3, xmm6
	movdqu	xmmword ptr [esp + 496], xmm6   # 16-byte Spill
	punpckhbw	xmm6, xmm7              # xmm6 = xmm6[8],xmm7[8],xmm6[9],xmm7[9],xmm6[10],xmm7[10],xmm6[11],xmm7[11],xmm6[12],xmm7[12],xmm6[13],xmm7[13],xmm6[14],xmm7[14],xmm6[15],xmm7[15]
	mov	edi, dword ptr [esp + 316]      # 4-byte Reload
	punpcklbw	xmm3, xmm7              # xmm3 = xmm3[0],xmm7[0],xmm3[1],xmm7[1],xmm3[2],xmm7[2],xmm3[3],xmm7[3],xmm3[4],xmm7[4],xmm3[5],xmm7[5],xmm3[6],xmm7[6],xmm3[7],xmm7[7]
	movdqa	xmm0, xmm3
	punpckhwd	xmm3, xmm7              # xmm3 = xmm3[4],xmm7[4],xmm3[5],xmm7[5],xmm3[6],xmm7[6],xmm3[7],xmm7[7]
	punpcklwd	xmm0, xmm7              # xmm0 = xmm0[0],xmm7[0],xmm0[1],xmm7[1],xmm0[2],xmm7[2],xmm0[3],xmm7[3]
	movdqu	xmmword ptr [esp + 176], xmm1   # 16-byte Spill
	punpcklbw	xmm1, xmm7              # xmm1 = xmm1[0],xmm7[0],xmm1[1],xmm7[1],xmm1[2],xmm7[2],xmm1[3],xmm7[3],xmm1[4],xmm7[4],xmm1[5],xmm7[5],xmm1[6],xmm7[6],xmm1[7],xmm7[7]
	movdqu	xmmword ptr [esp + 432], xmm0   # 16-byte Spill
	movdqa	xmm2, xmm1
	punpckhwd	xmm1, xmm7              # xmm1 = xmm1[4],xmm7[4],xmm1[5],xmm7[5],xmm1[6],xmm7[6],xmm1[7],xmm7[7]
	punpcklwd	xmm2, xmm7              # xmm2 = xmm2[0],xmm7[0],xmm2[1],xmm7[1],xmm2[2],xmm7[2],xmm2[3],xmm7[3]
	movdqa	xmm5, xmm1
	movdqu	xmmword ptr [esp + 192], xmm1   # 16-byte Spill
	movdqa	xmm4, xmm2
	movdqu	xmmword ptr [esp + 64], xmm2    # 16-byte Spill
	movdqa	xmm2, xmm5
	movdqu	xmm5, xmmword ptr [edi + ebx]
	mov	edi, dword ptr [esp + 320]      # 4-byte Reload
	psubd	xmm4, xmm0
	psubd	xmm2, xmm3
	movdqa	xmm1, xmm4
	psrad	xmm1, 31
	paddd	xmm4, xmm1
	movdqu	xmmword ptr [esp + 480], xmm5   # 16-byte Spill
	pxor	xmm4, xmm1
	movdqa	xmm1, xmm2
	psrad	xmm1, 31
	movdqu	xmmword ptr [esp + 256], xmm4   # 16-byte Spill
	movdqa	xmm4, xmm3
	paddd	xmm2, xmm1
	pxor	xmm2, xmm1
	movdqa	xmm1, xmm6
	punpckhwd	xmm6, xmm7              # xmm6 = xmm6[4],xmm7[4],xmm6[5],xmm7[5],xmm6[6],xmm7[6],xmm6[7],xmm7[7]
	movdqu	xmmword ptr [esp + 352], xmm2   # 16-byte Spill
	movdqu	xmm2, xmmword ptr [esp + 176]   # 16-byte Reload
	punpcklwd	xmm1, xmm7              # xmm1 = xmm1[0],xmm7[0],xmm1[1],xmm7[1],xmm1[2],xmm7[2],xmm1[3],xmm7[3]
	movdqu	xmmword ptr [esp + 32], xmm6    # 16-byte Spill
	movdqu	xmmword ptr [esp + 336], xmm1   # 16-byte Spill
	punpckhbw	xmm2, xmm7              # xmm2 = xmm2[8],xmm7[8],xmm2[9],xmm7[9],xmm2[10],xmm7[10],xmm2[11],xmm7[11],xmm2[12],xmm7[12],xmm2[13],xmm7[13],xmm2[14],xmm7[14],xmm2[15],xmm7[15]
	movdqa	xmm0, xmm2
	punpckhwd	xmm2, xmm7              # xmm2 = xmm2[4],xmm7[4],xmm2[5],xmm7[5],xmm2[6],xmm7[6],xmm2[7],xmm7[7]
	punpcklwd	xmm0, xmm7              # xmm0 = xmm0[0],xmm7[0],xmm0[1],xmm7[1],xmm0[2],xmm7[2],xmm0[3],xmm7[3]
	movdqu	xmmword ptr [esp + 112], xmm2   # 16-byte Spill
	movdqu	xmmword ptr [esp + 128], xmm0   # 16-byte Spill
	psubd	xmm0, xmm1
	movdqa	xmm1, xmm5
	punpckhbw	xmm5, xmm7              # xmm5 = xmm5[8],xmm7[8],xmm5[9],xmm7[9],xmm5[10],xmm7[10],xmm5[11],xmm7[11],xmm5[12],xmm7[12],xmm5[13],xmm7[13],xmm5[14],xmm7[14],xmm5[15],xmm7[15]
	movdqa	xmm3, xmm0
	punpcklbw	xmm1, xmm7              # xmm1 = xmm1[0],xmm7[0],xmm1[1],xmm7[1],xmm1[2],xmm7[2],xmm1[3],xmm7[3],xmm1[4],xmm7[4],xmm1[5],xmm7[5],xmm1[6],xmm7[6],xmm1[7],xmm7[7]
	psrad	xmm3, 31
	paddd	xmm0, xmm3
	pxor	xmm0, xmm3
	movdqu	xmmword ptr [esp + 272], xmm0   # 16-byte Spill
	movdqa	xmm0, xmm2
	movdqa	xmm2, xmm1
	psubd	xmm0, xmm6
	movdqa	xmm3, xmm0
	psrad	xmm3, 31
	paddd	xmm0, xmm3
	pxor	xmm0, xmm3
	movdqu	xmmword ptr [esp + 240], xmm0   # 16-byte Spill
	movdqa	xmm0, xmm1
	punpcklwd	xmm0, xmm7              # xmm0 = xmm0[0],xmm7[0],xmm0[1],xmm7[1],xmm0[2],xmm7[2],xmm0[3],xmm7[3]
	movdqa	xmm1, xmm0
	movdqu	xmmword ptr [esp + 448], xmm0   # 16-byte Spill
	movdqu	xmm0, xmmword ptr [esp + 432]   # 16-byte Reload
	psubd	xmm1, xmm0
	paddd	xmm0, xmm0
	movdqa	xmm3, xmm1
	psrad	xmm3, 31
	paddd	xmm1, xmm3
	pxor	xmm1, xmm3
	movdqu	xmmword ptr [esp + 464], xmm1   # 16-byte Spill
	movdqa	xmm1, xmm2
	movdqa	xmm2, xmm4
	punpckhwd	xmm1, xmm7              # xmm1 = xmm1[4],xmm7[4],xmm1[5],xmm7[5],xmm1[6],xmm7[6],xmm1[7],xmm7[7]
	paddd	xmm2, xmm2
	movdqu	xmmword ptr [esp + 400], xmm1   # 16-byte Spill
	psubd	xmm1, xmm4
	movdqa	xmm3, xmm1
	psrad	xmm3, 31
	paddd	xmm1, xmm3
	pxor	xmm1, xmm3
	movdqa	xmm3, xmm5
	punpckhwd	xmm5, xmm7              # xmm5 = xmm5[4],xmm7[4],xmm5[5],xmm7[5],xmm5[6],xmm7[6],xmm5[7],xmm7[7]
	movdqu	xmmword ptr [esp + 416], xmm1   # 16-byte Spill
	movdqu	xmm1, xmmword ptr [esp + 336]   # 16-byte Reload
	punpcklwd	xmm3, xmm7              # xmm3 = xmm3[0],xmm7[0],xmm3[1],xmm7[1],xmm3[2],xmm7[2],xmm3[3],xmm7[3]
	movdqa	xmm4, xmm5
	movdqu	xmmword ptr [esp + 368], xmm3   # 16-byte Spill
	psubd	xmm3, xmm1
	movdqu	xmm1, xmmword ptr [esp + 32]    # 16-byte Reload
	movdqa	xmm6, xmm3
	psrad	xmm6, 31
	paddd	xmm3, xmm6
	psubd	xmm4, xmm1
	pxor	xmm3, xmm6
	movdqu	xmm1, xmmword ptr [esp + 64]    # 16-byte Reload
	movdqa	xmm6, xmm4
	psrad	xmm6, 31
	paddd	xmm4, xmm6
	pxor	xmm4, xmm6
	movdqu	xmm6, xmmword ptr [esp + 192]   # 16-byte Reload
	psubd	xmm1, xmm0
	movdqu	xmm0, xmmword ptr [esp + 128]   # 16-byte Reload
	movdqa	xmm7, xmm4
	movdqu	xmmword ptr [esp + 384], xmm4   # 16-byte Spill
	psubd	xmm6, xmm2
	movdqu	xmm2, xmmword ptr [esp + 336]   # 16-byte Reload
	paddd	xmm2, xmm2
	psubd	xmm0, xmm2
	movdqu	xmm2, xmmword ptr [esp + 32]    # 16-byte Reload
	paddd	xmm2, xmm2
	movdqu	xmmword ptr [esp + 32], xmm2    # 16-byte Spill
	movdqu	xmm2, xmmword ptr [esp + 112]   # 16-byte Reload
	movdqu	xmm4, xmmword ptr [esp + 32]    # 16-byte Reload
	psubd	xmm2, xmm4
	movdqu	xmm4, xmmword ptr [esp + 416]   # 16-byte Reload
	paddd	xmm2, xmm5
	movdqu	xmm5, xmmword ptr [esp + 352]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 112], xmm2   # 16-byte Spill
	movdqu	xmm2, xmmword ptr [esp + 368]   # 16-byte Reload
	pcmpgtd	xmm5, xmm4
	paddd	xmm0, xmm2
	movdqu	xmm2, xmmword ptr [esp + 256]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 128], xmm0   # 16-byte Spill
	movdqu	xmm0, xmmword ptr [esp + 400]   # 16-byte Reload
	paddd	xmm6, xmm0
	movdqu	xmm0, xmmword ptr [esp + 448]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 192], xmm6   # 16-byte Spill
	paddd	xmm1, xmm0
	movdqu	xmm0, xmmword ptr [esp + 240]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 64], xmm1    # 16-byte Spill
	movdqu	xmm1, xmmword ptr [esp + 464]   # 16-byte Reload
	pcmpgtd	xmm0, xmm7
	movdqu	xmm7, xmmword ptr [esp + 272]   # 16-byte Reload
	pcmpgtd	xmm2, xmm1
	movdqu	xmmword ptr [esp + 32], xmm0    # 16-byte Spill
	pand	xmm1, xmm2
	pcmpgtd	xmm7, xmm3
	movdqa	xmm6, xmm7
	pand	xmm3, xmm7
	packssdw	xmm6, xmm0
	movdqa	xmm0, xmm2
	packssdw	xmm0, xmm5
	packsswb	xmm0, xmm6
	movdqu	xmm6, xmmword ptr [esp + 256]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 336], xmm0   # 16-byte Spill
	movdqu	xmm0, xmmword ptr [esp + 384]   # 16-byte Reload
	pandn	xmm2, xmm6
	movdqu	xmm6, xmmword ptr [esp + 352]   # 16-byte Reload
	por	xmm2, xmm1
	movdqa	xmm1, xmm4
	movdqu	xmm4, xmmword ptr [esp + 272]   # 16-byte Reload
	pand	xmm1, xmm5
	pandn	xmm5, xmm6
	movdqu	xmm6, xmmword ptr [esp + 336]   # 16-byte Reload
	pandn	xmm7, xmm4
	por	xmm5, xmm1
	movdqu	xmm1, xmmword ptr [esp + 32]    # 16-byte Reload
	movdqu	xmm4, xmmword ptr [esp + 480]   # 16-byte Reload
	por	xmm7, xmm3
	movdqu	xmm3, xmmword ptr [esp + 240]   # 16-byte Reload
	pand	xmm0, xmm1
	pandn	xmm1, xmm3
	movdqu	xmm3, xmmword ptr [esp + 176]   # 16-byte Reload
	por	xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqu	xmm1, xmmword ptr [esp + 192]   # 16-byte Reload
	pand	xmm3, xmm6
	pandn	xmm6, xmm4
	movdqu	xmm4, xmmword ptr [esp + 64]    # 16-byte Reload
	por	xmm6, xmm3
	movdqa	xmm3, xmm4
	psrad	xmm3, 31
	paddd	xmm4, xmm3
	pxor	xmm4, xmm3
	movdqa	xmm3, xmm1
	psrad	xmm3, 31
	pcmpgtd	xmm2, xmm4
	paddd	xmm1, xmm3
	pxor	xmm1, xmm3
	movdqu	xmm3, xmmword ptr [esp + 128]   # 16-byte Reload
	pcmpgtd	xmm5, xmm1
	packssdw	xmm2, xmm5
	movdqa	xmm1, xmm3
	psrad	xmm1, 31
	paddd	xmm3, xmm1
	pxor	xmm3, xmm1
	pcmpgtd	xmm7, xmm3
	movdqu	xmm3, xmmword ptr [esp + 112]   # 16-byte Reload
	movdqa	xmm1, xmm3
	psrad	xmm1, 31
	paddd	xmm3, xmm1
	pxor	xmm3, xmm1
	pcmpgtd	xmm0, xmm3
	movdqu	xmm3, xmmword ptr [esp + 496]   # 16-byte Reload
	packssdw	xmm7, xmm0
	movdqu	xmm0, xmmword ptr [edi + ebx]
	packsswb	xmm2, xmm7
	pand	xmm3, xmm2
	pandn	xmm2, xmm6
	por	xmm2, xmm3
	paddb	xmm2, xmm0
	movdqu	xmmword ptr [eax + ebx], xmm2
	add	ebx, 16
	cmp	dword ptr [esp + 224], ebx      # 4-byte Folded Reload
	jne	LBB121_134
# %bb.135:                              #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 224]      # 4-byte Reload
	movdqa	xmm5, xmmword ptr [__xmm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f] # xmm5 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	cmp	dword ptr [esp + 216], eax      # 4-byte Folded Reload
	je	LBB121_2
	jmp	LBB121_140
LBB121_137:                             #   in Loop: Header=BB121_3 Depth=1
	mov	edx, eax
	jmp	LBB121_140
LBB121_139:                             #   in Loop: Header=BB121_3 Depth=1
	mov	edx, dword ptr [esp + 32]       # 4-byte Reload
LBB121_140:                             #   in Loop: Header=BB121_3 Depth=1
	mov	eax, dword ptr [esp + 160]      # 4-byte Reload
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	add	eax, ecx
	mov	dword ptr [esp + 64], eax       # 4-byte Spill
	.p2align	4, 0x90
LBB121_141:                             #   Parent Loop BB121_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, dword ptr [esp + 64]       # 4-byte Reload
	mov	dword ptr [esp + 32], edx       # 4-byte Spill
	movzx	esi, byte ptr [eax + edx]
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	movzx	ecx, byte ptr [eax + edx]
	mov	eax, dword ptr [esp + 56]       # 4-byte Reload
	mov	edx, dword ptr [esp + 32]       # 4-byte Reload
	movzx	edx, byte ptr [eax + edx]
	mov	ebx, ecx
	mov	edi, ecx
	sub	ebx, esi
	mov	ebp, ebx
	neg	ebp
	mov	eax, edx
	cmovl	ebp, ebx
	sub	eax, esi
	mov	ebx, eax
	neg	ebx
	cmovl	ebx, eax
	lea	eax, [esi + esi]
	sub	edi, eax
	add	edi, edx
	cmp	ebx, ebp
	mov	eax, edi
	cmovge	ebx, ebp
	cmovl	edx, ecx
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	neg	eax
	cmovl	eax, edi
	cmp	eax, ebx
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	cmovl	edx, esi
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	add	dl, byte ptr [esi + eax]
	mov	eax, dword ptr [esp + 32]       # 4-byte Reload
	mov	byte ptr [ebp + eax], dl
	mov	edx, dword ptr [esp + 32]       # 4-byte Reload
	inc	edx
	cmp	dword ptr [esp + 4], edx        # 4-byte Folded Reload
	jne	LBB121_141
	jmp	LBB121_2
LBB121_142:
	xor	eax, eax
	jmp	LBB121_144
LBB121_143:
	mov	eax, 36
LBB121_144:
	add	esp, 524
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI121_0:
	.long	LBB121_5
	.long	LBB121_13
	.long	LBB121_30
	.long	LBB121_38
	.long	LBB121_46
                                        # -- End function
	.def	 "?Adam7_getpassvalues@@YAXQAI0000III@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function ?Adam7_getpassvalues@@YAXQAI0000III@Z
"?Adam7_getpassvalues@@YAXQAI0000III@Z": # @"?Adam7_getpassvalues@@YAXQAI0000III@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	ebp, dword ptr [esp + 36]
	mov	edi, dword ptr [esp + 40]
	lea	eax, [ebp + 7]
	shr	eax, 3
	mov	dword ptr [ecx], eax
	lea	eax, [edi + 7]
	shr	eax, 3
	mov	dword ptr [edx], eax
	mov	esi, dword ptr [ecx]
	test	esi, esi
	cmovne	esi, eax
	test	esi, esi
	mov	dword ptr [edx], esi
	jne	LBB122_2
# %bb.1:
	mov	dword ptr [ecx], 0
LBB122_2:
	lea	esi, [ebp + 3]
	mov	ebx, esi
	shr	ebx, 3
	mov	dword ptr [ecx + 4], ebx
	mov	dword ptr [edx + 4], eax
	mov	ebx, dword ptr [ecx + 4]
	test	ebx, ebx
	cmove	eax, ebx
	test	eax, eax
	mov	dword ptr [edx + 4], eax
	jne	LBB122_4
# %bb.3:
	mov	dword ptr [ecx + 4], 0
LBB122_4:
	shr	esi, 2
	lea	eax, [edi + 3]
	mov	dword ptr [ecx + 8], esi
	mov	esi, eax
	shr	esi, 3
	mov	dword ptr [edx + 8], esi
	mov	ebx, dword ptr [ecx + 8]
	test	ebx, ebx
	cmove	esi, ebx
	test	esi, esi
	mov	dword ptr [edx + 8], esi
	jne	LBB122_6
# %bb.5:
	mov	dword ptr [ecx + 8], 0
LBB122_6:
	lea	esi, [ebp + 1]
	shr	eax, 2
	mov	ebx, esi
	shr	ebx, 2
	mov	dword ptr [ecx + 12], ebx
	mov	dword ptr [edx + 12], eax
	mov	ebx, dword ptr [ecx + 12]
	test	ebx, ebx
	cmove	eax, ebx
	test	eax, eax
	mov	dword ptr [edx + 12], eax
	jne	LBB122_8
# %bb.7:
	mov	dword ptr [ecx + 12], 0
LBB122_8:
	shr	esi
	lea	eax, [edi + 1]
	mov	dword ptr [ecx + 16], esi
	mov	esi, eax
	shr	esi, 2
	mov	dword ptr [edx + 16], esi
	mov	ebx, dword ptr [ecx + 16]
	test	ebx, ebx
	cmove	esi, ebx
	test	esi, esi
	mov	dword ptr [edx + 16], esi
	jne	LBB122_10
# %bb.9:
	mov	dword ptr [ecx + 16], 0
LBB122_10:
	mov	esi, ebp
	shr	eax
	shr	esi
	mov	dword ptr [ecx + 20], esi
	mov	dword ptr [edx + 20], eax
	mov	esi, dword ptr [ecx + 20]
	test	esi, esi
	cmove	eax, esi
	mov	dword ptr [edx + 20], eax
	test	eax, eax
	mov	eax, ebp
	jne	LBB122_12
# %bb.11:
	mov	dword ptr [ecx + 20], 0
LBB122_12:
	shr	edi
	mov	dword ptr [ecx + 24], eax
	mov	esi, dword ptr [esp + 32]
	mov	ebx, dword ptr [esp + 28]
	mov	ebp, dword ptr [esp + 24]
	mov	dword ptr [edx + 24], edi
	mov	eax, dword ptr [ecx + 24]
	test	eax, eax
	cmove	edi, eax
	test	edi, edi
	mov	dword ptr [edx + 24], edi
	jne	LBB122_14
# %bb.13:
	mov	dword ptr [ecx + 24], 0
LBB122_14:
	mov	dword ptr [esi], 0
	mov	dword ptr [ebx], 0
	mov	dword ptr [ebp], 0
	mov	edi, dword ptr [esp + 44]
	xor	esi, esi
	mov	ebp, 0
	mov	ebx, dword ptr [ecx]
	test	ebx, ebx
	je	LBB122_17
# %bb.15:
	mov	eax, dword ptr [edx]
	mov	ebp, 0
	test	eax, eax
	je	LBB122_17
# %bb.16:
	imul	ebx, edi
	add	ebx, 7
	shr	ebx, 3
	inc	ebx
	imul	eax, ebx
	mov	ebp, eax
LBB122_17:
	mov	eax, dword ptr [esp + 24]
	mov	ebx, dword ptr [esp + 28]
	mov	dword ptr [eax + 4], ebp
	mov	ebp, eax
	mov	eax, dword ptr [ecx]
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	imul	eax, dword ptr [edx]
	add	eax, dword ptr [ebx]
	mov	dword ptr [ebx + 4], eax
	mov	ebx, dword ptr [esp + 32]
	mov	eax, dword ptr [edx]
	imul	eax, edi
	imul	eax, dword ptr [ecx]
	add	eax, 7
	shr	eax, 3
	add	eax, dword ptr [ebx]
	mov	dword ptr [ebx + 4], eax
	mov	eax, dword ptr [ecx + 4]
	mov	ebx, dword ptr [ebp + 4]
	test	eax, eax
	je	LBB122_20
# %bb.18:
	mov	ebp, dword ptr [edx + 4]
	test	ebp, ebp
	je	LBB122_20
# %bb.19:
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	inc	eax
	imul	ebp, eax
	mov	esi, ebp
LBB122_20:
	add	esi, ebx
	mov	ebx, dword ptr [esp + 24]
	xor	ebp, ebp
	mov	dword ptr [ebx + 8], esi
	mov	esi, dword ptr [esp + 28]
	mov	eax, dword ptr [ecx + 4]
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	imul	eax, dword ptr [edx + 4]
	add	eax, dword ptr [esi + 4]
	mov	dword ptr [esi + 8], eax
	mov	esi, dword ptr [esp + 32]
	mov	eax, dword ptr [edx + 4]
	imul	eax, edi
	imul	eax, dword ptr [ecx + 4]
	add	eax, 7
	shr	eax, 3
	add	eax, dword ptr [esi + 4]
	mov	dword ptr [esi + 8], eax
	mov	esi, 0
	mov	eax, dword ptr [ebx + 8]
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	eax, dword ptr [ecx + 8]
	test	eax, eax
	je	LBB122_23
# %bb.21:
	mov	ebx, dword ptr [edx + 8]
	mov	esi, 0
	test	ebx, ebx
	je	LBB122_23
# %bb.22:
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	inc	eax
	imul	ebx, eax
	mov	esi, ebx
LBB122_23:
	add	esi, dword ptr [esp]            # 4-byte Folded Reload
	mov	ebx, dword ptr [esp + 24]
	mov	dword ptr [ebx + 12], esi
	mov	esi, dword ptr [esp + 28]
	mov	eax, dword ptr [ecx + 8]
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	imul	eax, dword ptr [edx + 8]
	add	eax, dword ptr [esi + 8]
	mov	dword ptr [esi + 12], eax
	mov	esi, dword ptr [esp + 32]
	mov	eax, dword ptr [edx + 8]
	imul	eax, edi
	imul	eax, dword ptr [ecx + 8]
	add	eax, 7
	shr	eax, 3
	add	eax, dword ptr [esi + 8]
	mov	dword ptr [esi + 12], eax
	mov	eax, dword ptr [ecx + 12]
	mov	ebx, dword ptr [ebx + 12]
	test	eax, eax
	je	LBB122_26
# %bb.24:
	mov	esi, dword ptr [edx + 12]
	test	esi, esi
	je	LBB122_26
# %bb.25:
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	inc	eax
	imul	esi, eax
	mov	ebp, esi
LBB122_26:
	add	ebp, ebx
	mov	ebx, dword ptr [esp + 24]
	mov	esi, dword ptr [esp + 28]
	mov	dword ptr [ebx + 16], ebp
	xor	ebp, ebp
	mov	eax, dword ptr [ecx + 12]
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	imul	eax, dword ptr [edx + 12]
	add	eax, dword ptr [esi + 12]
	mov	dword ptr [esi + 16], eax
	mov	esi, dword ptr [esp + 32]
	mov	eax, dword ptr [edx + 12]
	imul	eax, edi
	imul	eax, dword ptr [ecx + 12]
	add	eax, 7
	shr	eax, 3
	add	eax, dword ptr [esi + 12]
	mov	dword ptr [esi + 16], eax
	mov	esi, 0
	mov	eax, dword ptr [ebx + 16]
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	eax, dword ptr [ecx + 16]
	test	eax, eax
	je	LBB122_29
# %bb.27:
	mov	ebx, dword ptr [edx + 16]
	mov	esi, 0
	test	ebx, ebx
	je	LBB122_29
# %bb.28:
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	inc	eax
	imul	ebx, eax
	mov	esi, ebx
LBB122_29:
	add	esi, dword ptr [esp]            # 4-byte Folded Reload
	mov	ebx, dword ptr [esp + 24]
	mov	dword ptr [ebx + 20], esi
	mov	esi, dword ptr [esp + 28]
	mov	eax, dword ptr [ecx + 16]
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	imul	eax, dword ptr [edx + 16]
	add	eax, dword ptr [esi + 16]
	mov	dword ptr [esi + 20], eax
	mov	esi, dword ptr [esp + 32]
	mov	eax, dword ptr [edx + 16]
	imul	eax, edi
	imul	eax, dword ptr [ecx + 16]
	add	eax, 7
	shr	eax, 3
	add	eax, dword ptr [esi + 16]
	mov	dword ptr [esi + 20], eax
	mov	eax, dword ptr [ecx + 20]
	mov	ebx, dword ptr [ebx + 20]
	test	eax, eax
	je	LBB122_32
# %bb.30:
	mov	esi, dword ptr [edx + 20]
	test	esi, esi
	je	LBB122_32
# %bb.31:
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	inc	eax
	imul	esi, eax
	mov	ebp, esi
LBB122_32:
	add	ebp, ebx
	mov	ebx, dword ptr [esp + 24]
	mov	esi, dword ptr [esp + 28]
	mov	dword ptr [ebx + 24], ebp
	mov	eax, dword ptr [ecx + 20]
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	imul	eax, dword ptr [edx + 20]
	add	eax, dword ptr [esi + 20]
	mov	dword ptr [esi + 24], eax
	mov	esi, dword ptr [esp + 32]
	mov	eax, dword ptr [edx + 20]
	imul	eax, edi
	imul	eax, dword ptr [ecx + 20]
	add	eax, 7
	shr	eax, 3
	add	eax, dword ptr [esi + 20]
	mov	dword ptr [esi + 24], eax
	mov	eax, dword ptr [ecx + 24]
	mov	ebp, dword ptr [ebx + 24]
	xor	ebx, ebx
	test	eax, eax
	je	LBB122_35
# %bb.33:
	mov	esi, dword ptr [edx + 24]
	test	esi, esi
	je	LBB122_35
# %bb.34:
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	inc	eax
	imul	esi, eax
	mov	ebx, esi
LBB122_35:
	mov	eax, dword ptr [esp + 24]
	add	ebx, ebp
	mov	esi, dword ptr [esp + 28]
	mov	dword ptr [eax + 28], ebx
	mov	eax, dword ptr [ecx + 24]
	imul	eax, edi
	add	eax, 7
	shr	eax, 3
	imul	eax, dword ptr [edx + 24]
	add	eax, dword ptr [esi + 24]
	mov	dword ptr [esi + 28], eax
	mov	eax, dword ptr [esp + 32]
	imul	edi, dword ptr [edx + 24]
	imul	edi, dword ptr [ecx + 24]
	add	edi, 7
	shr	edi, 3
	add	edi, dword ptr [eax + 24]
	mov	dword ptr [eax + 28], edi
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?filter@@YAIPAEPBEIIPBULodePNGColorMode@@PBULodePNGEncoderSettings@@@Z";
	.scl	3;
	.type	32;
	.endef
	.globl	__xmm@000000ff000000ff000000ff000000ff # -- Begin function ?filter@@YAIPAEPBEIIPBULodePNGColorMode@@PBULodePNGEncoderSettings@@@Z
	.section	.rdata,"dr",discard,__xmm@000000ff000000ff000000ff000000ff
	.p2align	4
__xmm@000000ff000000ff000000ff000000ff:
	.long	255                             # 0xff
	.long	255                             # 0xff
	.long	255                             # 0xff
	.long	255                             # 0xff
	.text
	.p2align	4, 0x90
"?filter@@YAIPAEPBEIIPBULodePNGColorMode@@PBULodePNGEncoderSettings@@@Z": # @"?filter@@YAIPAEPBEIIPBULodePNGColorMode@@PBULodePNGEncoderSettings@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 1156
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 1184]
	mov	ebp, dword ptr [esp + 1192]
	mov	eax, dword ptr [esp + 1188]
	mov	ebx, dword ptr [esp + 1176]
	mov	dword ptr [esp + 36], edx       # 4-byte Spill
	cmp	ecx, 6
	ja	LBB123_3
# %bb.1:
	mov	edx, 1
	jmp	dword ptr [4*ecx + LJTI123_0]
LBB123_2:
	mov	edx, 3
	jmp	LBB123_7
LBB123_3:
	cmp	ecx, 255
LBB123_4:
	xor	edx, edx
	jmp	LBB123_7
LBB123_5:
	mov	edx, 2
	jmp	LBB123_7
LBB123_6:
	mov	edx, 4
LBB123_7:
	mov	esi, ebx
	imul	edx, eax
	and	ebx, 7
	imul	ebx, edx
	shr	esi, 3
	add	ebx, 7
	imul	esi, edx
	shr	ebx, 3
	lea	edi, [ebx + esi]
	lea	esi, [ebx + esi + 1]
	mov	ebx, dword ptr [ebp + 44]
	mov	dword ptr [esp + 40], esi       # 4-byte Spill
	lea	esi, [edx + 7]
	mov	dword ptr [esp + 4], edi        # 4-byte Spill
	shr	esi, 3
	cmp	dword ptr [ebp + 40], 0
	je	LBB123_10
# %bb.8:
	cmp	ecx, 3
	je	LBB123_13
# %bb.9:
	cmp	eax, 8
	jb	LBB123_13
LBB123_10:
	test	edx, edx
	je	LBB123_18
# %bb.11:
	cmp	ebx, 4
	ja	LBB123_19
# %bb.12:
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	jmp	LBB123_14
LBB123_13:
	mov	ebp, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	xor	ebx, ebx
	test	edx, edx
	je	LBB123_18
LBB123_14:
	cmp	dword ptr [esp + 1180], 0
	je	LBB123_65
# %bb.15:
	movzx	edx, bl
	mov	dword ptr [esp + 8], ebx        # 4-byte Spill
	mov	ebx, ebp
	mov	ebp, dword ptr [esp + 1180]
	inc	ecx
	xor	eax, eax
	xor	edi, edi
	mov	dword ptr [esp + 20], esi       # 4-byte Spill
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	.p2align	4, 0x90
LBB123_16:                              # =>This Inner Loop Header: Depth=1
	mov	esi, edi
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	imul	esi, dword ptr [esp + 4]        # 4-byte Folded Reload
	mov	byte ptr [ecx - 1], dl
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, ebx
	add	esi, dword ptr [esp + 36]       # 4-byte Folded Reload
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	eax
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	add	esp, 16
	add	ecx, dword ptr [esp + 40]       # 4-byte Folded Reload
	add	ebx, dword ptr [esp + 4]        # 4-byte Folded Reload
	inc	edi
	dec	ebp
	mov	eax, esi
	jne	LBB123_16
LBB123_65:
	xor	eax, eax
	jmp	LBB123_165
LBB123_18:
	mov	eax, 31
	jmp	LBB123_165
LBB123_19:
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	add	ebx, -5
	cmp	ebx, 3
	ja	LBB123_67
# %bb.20:
	mov	dword ptr [esp + 20], esi       # 4-byte Spill
	jmp	dword ptr [4*ebx + LJTI123_1]
LBB123_21:
	push	edi
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 132], eax
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
	sete	byte ptr [esp + 12]             # 1-byte Folded Spill
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_malloc
	add	esp, 4
	mov	edi, eax
	mov	dword ptr [esp + 136], eax
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_malloc
	add	esp, 4
	mov	ebp, eax
	mov	dword ptr [esp + 140], eax
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_malloc
	add	esp, 4
	mov	ebx, eax
	mov	dword ptr [esp + 144], eax
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_malloc
	add	esp, 4
	movd	xmm0, edi
	movd	xmm1, ebp
	movd	xmm3, ebx
	movd	xmm2, eax
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	dword ptr [esp + 148], eax
	mov	dword ptr [esp + 56], ebx       # 4-byte Spill
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esp + 60], edi       # 4-byte Spill
	mov	dword ptr [esp + 72], ebp       # 4-byte Spill
	punpckldq	xmm2, xmm3              # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	punpckldq	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	pxor	xmm3, xmm3
	punpcklqdq	xmm2, xmm1              # xmm2 = xmm2[0],xmm1[0]
	pcmpeqd	xmm3, xmm2
	movmskps	eax, xmm3
	test	al, al
	setne	al
	xor	ecx, ecx
	or	al, byte ptr [esp + 12]         # 1-byte Folded Reload
	mov	eax, 83
	cmove	eax, ecx
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	mov	dword ptr [esp + 100], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 1180]
	jne	LBB123_143
# %bb.22:
	test	eax, eax
	je	LBB123_143
# %bb.23:
	mov	eax, ebx
	xor	edi, edi
	and	eax, -8
	mov	dword ptr [esp + 96], eax       # 4-byte Spill
	mov	eax, ebx
	and	eax, -4
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	eax, ebx
	and	eax, -32
	mov	dword ptr [esp + 108], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	add	eax, 4
	mov	dword ptr [esp + 104], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	lea	ebp, [eax + 17]
	inc	eax
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	xor	eax, eax
	jmp	LBB123_26
	.p2align	4, 0x90
LBB123_24:                              #   in Loop: Header=BB123_26 Depth=1
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	push	0
	push	esi
	push	0
	push	eax
	mov	edi, edx
	mov	ebp, eax
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	mov	edx, edi
	push	1
	push	esi
	push	0
	push	ebp
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	ecx, dword ptr [esp + 72]       # 4-byte Reload
	mov	edx, edi
	push	2
	push	esi
	push	0
	push	ebp
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	mov	edx, edi
	push	3
	push	esi
	push	0
	push	ebp
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	mov	edx, edi
	push	4
	push	esi
	push	0
	push	ebp
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	mov	byte ptr [eax + ecx], 0
LBB123_25:                              #   in Loop: Header=BB123_26 Depth=1
	mov	edi, dword ptr [esp + 52]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 64]       # 4-byte Reload
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	inc	edi
	add	ebp, ecx
	add	dword ptr [esp + 12], ecx       # 4-byte Folded Spill
	cmp	edi, dword ptr [esp + 1180]
	je	LBB123_143
LBB123_26:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_29 Depth 2
                                        #     Child Loop BB123_32 Depth 2
                                        #     Child Loop BB123_35 Depth 2
                                        #     Child Loop BB123_38 Depth 2
                                        #     Child Loop BB123_41 Depth 2
                                        #     Child Loop BB123_44 Depth 2
                                        #     Child Loop BB123_47 Depth 2
                                        #     Child Loop BB123_50 Depth 2
                                        #     Child Loop BB123_53 Depth 2
                                        #     Child Loop BB123_56 Depth 2
                                        #     Child Loop BB123_62 Depth 2
                                        #     Child Loop BB123_64 Depth 2
	mov	edx, edi
	imul	ecx, edi
	mov	dword ptr [esp + 64], ebp       # 4-byte Spill
	mov	dword ptr [esp + 52], edi       # 4-byte Spill
	imul	edx, ebx
	mov	dword ptr [esp + 48], ecx       # 4-byte Spill
	add	edx, dword ptr [esp + 36]       # 4-byte Folded Reload
	test	ebx, ebx
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	je	LBB123_24
# %bb.27:                               #   in Loop: Header=BB123_26 Depth=1
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	push	0
	push	esi
	push	ebx
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	push	eax
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	xor	eax, eax
	cmp	ebx, 8
	mov	ebp, 0
	jb	LBB123_31
# %bb.28:                               #   in Loop: Header=BB123_26 Depth=1
	mov	eax, dword ptr [esp + 96]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 104]      # 4-byte Reload
	pxor	xmm0, xmm0
	pxor	xmm1, xmm1
	pxor	xmm4, xmm4
	.p2align	4, 0x90
LBB123_29:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	xmm2, dword ptr [ecx - 4]       # xmm2 = mem[0],zero,zero,zero
	movd	xmm3, dword ptr [ecx]           # xmm3 = mem[0],zero,zero,zero
	add	ecx, 8
	add	eax, -8
	punpcklbw	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3],xmm2[4],xmm4[4],xmm2[5],xmm4[5],xmm2[6],xmm4[6],xmm2[7],xmm4[7]
	punpcklbw	xmm3, xmm4              # xmm3 = xmm3[0],xmm4[0],xmm3[1],xmm4[1],xmm3[2],xmm4[2],xmm3[3],xmm4[3],xmm3[4],xmm4[4],xmm3[5],xmm4[5],xmm3[6],xmm4[6],xmm3[7],xmm4[7]
	punpcklwd	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3]
	punpcklwd	xmm3, xmm4              # xmm3 = xmm3[0],xmm4[0],xmm3[1],xmm4[1],xmm3[2],xmm4[2],xmm3[3],xmm4[3]
	paddd	xmm0, xmm2
	paddd	xmm1, xmm3
	jne	LBB123_29
# %bb.30:                               #   in Loop: Header=BB123_26 Depth=1
	paddd	xmm1, xmm0
	mov	eax, dword ptr [esp + 96]       # 4-byte Reload
	pshufd	xmm0, xmm1, 78                  # xmm0 = xmm1[2,3,0,1]
	paddd	xmm0, xmm1
	pshufd	xmm1, xmm0, 229                 # xmm1 = xmm0[1,1,2,3]
	paddd	xmm1, xmm0
	cmp	ebx, eax
	movd	ebp, xmm1
	je	LBB123_33
LBB123_31:                              #   in Loop: Header=BB123_26 Depth=1
	mov	ecx, ebx
	sub	ecx, eax
	add	eax, dword ptr [esp + 44]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB123_32:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [eax]
	inc	eax
	add	ebp, edx
	dec	ecx
	jne	LBB123_32
LBB123_33:                              #   in Loop: Header=BB123_26 Depth=1
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	push	1
	push	esi
	push	ebx
	push	dword ptr [esp + 28]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	xor	ecx, ecx
	cmp	ebx, 4
	mov	eax, 0
	jb	LBB123_37
# %bb.34:                               #   in Loop: Header=BB123_26 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	movdqa	xmm6, xmmword ptr [__xmm@000000ff000000ff000000ff000000ff] # xmm6 = [255,255,255,255]
	pxor	xmm0, xmm0
	pxor	xmm4, xmm4
	pcmpeqd	xmm5, xmm5
	.p2align	4, 0x90
LBB123_35:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	xmm1, dword ptr [ecx]           # xmm1 = mem[0],zero,zero,zero
	add	ecx, 4
	add	eax, -4
	movdqa	xmm2, xmm1
	pcmpgtb	xmm1, xmm5
	punpcklbw	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3],xmm2[4],xmm4[4],xmm2[5],xmm4[5],xmm2[6],xmm4[6],xmm2[7],xmm4[7]
	punpcklbw	xmm1, xmm1              # xmm1 = xmm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
	punpcklwd	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3]
	punpcklwd	xmm1, xmm1              # xmm1 = xmm1[0,0,1,1,2,2,3,3]
	movdqa	xmm3, xmm2
	psrad	xmm1, 24
	pxor	xmm3, xmm6
	pand	xmm2, xmm1
	pandn	xmm1, xmm3
	por	xmm1, xmm2
	paddd	xmm0, xmm1
	jne	LBB123_35
# %bb.36:                               #   in Loop: Header=BB123_26 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	pshufd	xmm1, xmm0, 78                  # xmm1 = xmm0[2,3,0,1]
	paddd	xmm1, xmm0
	pshufd	xmm0, xmm1, 229                 # xmm0 = xmm1[1,1,2,3]
	paddd	xmm0, xmm1
	cmp	dword ptr [esp + 4], ecx        # 4-byte Folded Reload
	movd	eax, xmm0
	je	LBB123_39
LBB123_37:                              #   in Loop: Header=BB123_26 Depth=1
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	sub	edx, ecx
	add	ecx, dword ptr [esp + 60]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB123_38:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebx, byte ptr [ecx]
	mov	esi, ebx
	xor	esi, 255
	test	bl, bl
	cmovns	esi, ebx
	inc	ecx
	add	eax, esi
	dec	edx
	jne	LBB123_38
LBB123_39:                              #   in Loop: Header=BB123_26 Depth=1
	mov	ecx, dword ptr [esp + 72]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	cmp	eax, ebp
	cmovb	ebp, eax
	setb	byte ptr [esp + 68]             # 1-byte Folded Spill
	push	2
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	push	esi
	push	dword ptr [esp + 28]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	xor	ecx, ecx
	cmp	esi, 4
	mov	eax, 0
	jb	LBB123_43
# %bb.40:                               #   in Loop: Header=BB123_26 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 72]       # 4-byte Reload
	movdqa	xmm6, xmmword ptr [__xmm@000000ff000000ff000000ff000000ff] # xmm6 = [255,255,255,255]
	pxor	xmm0, xmm0
	pxor	xmm4, xmm4
	pcmpeqd	xmm5, xmm5
	.p2align	4, 0x90
LBB123_41:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	xmm1, dword ptr [ecx]           # xmm1 = mem[0],zero,zero,zero
	add	ecx, 4
	add	eax, -4
	movdqa	xmm2, xmm1
	pcmpgtb	xmm1, xmm5
	punpcklbw	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3],xmm2[4],xmm4[4],xmm2[5],xmm4[5],xmm2[6],xmm4[6],xmm2[7],xmm4[7]
	punpcklbw	xmm1, xmm1              # xmm1 = xmm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
	punpcklwd	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3]
	punpcklwd	xmm1, xmm1              # xmm1 = xmm1[0,0,1,1,2,2,3,3]
	movdqa	xmm3, xmm2
	psrad	xmm1, 24
	pxor	xmm3, xmm6
	pand	xmm2, xmm1
	pandn	xmm1, xmm3
	por	xmm1, xmm2
	paddd	xmm0, xmm1
	jne	LBB123_41
# %bb.42:                               #   in Loop: Header=BB123_26 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	pshufd	xmm1, xmm0, 78                  # xmm1 = xmm0[2,3,0,1]
	paddd	xmm1, xmm0
	pshufd	xmm0, xmm1, 229                 # xmm0 = xmm1[1,1,2,3]
	paddd	xmm0, xmm1
	cmp	dword ptr [esp + 4], ecx        # 4-byte Folded Reload
	movd	eax, xmm0
	je	LBB123_45
LBB123_43:                              #   in Loop: Header=BB123_26 Depth=1
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	sub	edx, ecx
	add	ecx, dword ptr [esp + 72]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB123_44:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebx, byte ptr [ecx]
	mov	esi, ebx
	xor	esi, 255
	test	bl, bl
	cmovns	esi, ebx
	inc	ecx
	add	eax, esi
	dec	edx
	jne	LBB123_44
LBB123_45:                              #   in Loop: Header=BB123_26 Depth=1
	mov	bl, byte ptr [esp + 68]         # 1-byte Reload
	cmp	eax, ebp
	mov	ecx, 0
	mov	edx, 2
	cmovb	ebp, eax
	mov	cl, bl
	cmovb	ecx, edx
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	edi, ecx
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	push	3
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	push	esi
	push	dword ptr [esp + 28]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	xor	ecx, ecx
	cmp	esi, 4
	mov	eax, 0
	jb	LBB123_49
# %bb.46:                               #   in Loop: Header=BB123_26 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	movdqa	xmm6, xmmword ptr [__xmm@000000ff000000ff000000ff000000ff] # xmm6 = [255,255,255,255]
	pxor	xmm0, xmm0
	pxor	xmm4, xmm4
	pcmpeqd	xmm5, xmm5
	.p2align	4, 0x90
LBB123_47:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	xmm1, dword ptr [ecx]           # xmm1 = mem[0],zero,zero,zero
	add	ecx, 4
	add	eax, -4
	movdqa	xmm2, xmm1
	pcmpgtb	xmm1, xmm5
	punpcklbw	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3],xmm2[4],xmm4[4],xmm2[5],xmm4[5],xmm2[6],xmm4[6],xmm2[7],xmm4[7]
	punpcklbw	xmm1, xmm1              # xmm1 = xmm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
	punpcklwd	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3]
	punpcklwd	xmm1, xmm1              # xmm1 = xmm1[0,0,1,1,2,2,3,3]
	movdqa	xmm3, xmm2
	psrad	xmm1, 24
	pxor	xmm3, xmm6
	pand	xmm2, xmm1
	pandn	xmm1, xmm3
	por	xmm1, xmm2
	paddd	xmm0, xmm1
	jne	LBB123_47
# %bb.48:                               #   in Loop: Header=BB123_26 Depth=1
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	pshufd	xmm1, xmm0, 78                  # xmm1 = xmm0[2,3,0,1]
	paddd	xmm1, xmm0
	pshufd	xmm0, xmm1, 229                 # xmm0 = xmm1[1,1,2,3]
	paddd	xmm0, xmm1
	cmp	dword ptr [esp + 4], ecx        # 4-byte Folded Reload
	movd	eax, xmm0
	je	LBB123_51
LBB123_49:                              #   in Loop: Header=BB123_26 Depth=1
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	sub	edx, ecx
	add	ecx, dword ptr [esp + 56]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB123_50:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebx, byte ptr [ecx]
	mov	esi, ebx
	xor	esi, 255
	test	bl, bl
	cmovns	esi, ebx
	inc	ecx
	add	eax, esi
	dec	edx
	jne	LBB123_50
LBB123_51:                              #   in Loop: Header=BB123_26 Depth=1
	cmp	eax, ebp
	mov	edx, 3
	cmovb	ebp, eax
	mov	eax, edi
	movzx	ecx, al
	cmovb	ecx, edx
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp + 68], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	push	4
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	push	esi
	push	dword ptr [esp + 28]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	movdqa	xmm6, xmmword ptr [__xmm@000000ff000000ff000000ff000000ff] # xmm6 = [255,255,255,255]
	mov	edi, dword ptr [esp + 48]       # 4-byte Reload
	xor	eax, eax
	cmp	esi, 4
	mov	ecx, 0
	pxor	xmm4, xmm4
	pcmpeqd	xmm5, xmm5
	jb	LBB123_55
# %bb.52:                               #   in Loop: Header=BB123_26 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	pxor	xmm0, xmm0
	.p2align	4, 0x90
LBB123_53:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movd	xmm1, dword ptr [ecx]           # xmm1 = mem[0],zero,zero,zero
	add	ecx, 4
	add	eax, -4
	movdqa	xmm2, xmm1
	pcmpgtb	xmm1, xmm5
	punpcklbw	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3],xmm2[4],xmm4[4],xmm2[5],xmm4[5],xmm2[6],xmm4[6],xmm2[7],xmm4[7]
	punpcklbw	xmm1, xmm1              # xmm1 = xmm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
	punpcklwd	xmm2, xmm4              # xmm2 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3]
	punpcklwd	xmm1, xmm1              # xmm1 = xmm1[0,0,1,1,2,2,3,3]
	movdqa	xmm3, xmm2
	psrad	xmm1, 24
	pxor	xmm3, xmm6
	pand	xmm2, xmm1
	pandn	xmm1, xmm3
	por	xmm1, xmm2
	paddd	xmm0, xmm1
	jne	LBB123_53
# %bb.54:                               #   in Loop: Header=BB123_26 Depth=1
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	pshufd	xmm1, xmm0, 78                  # xmm1 = xmm0[2,3,0,1]
	paddd	xmm1, xmm0
	pshufd	xmm0, xmm1, 229                 # xmm0 = xmm1[1,1,2,3]
	paddd	xmm0, xmm1
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	movd	ecx, xmm0
	je	LBB123_57
LBB123_55:                              #   in Loop: Header=BB123_26 Depth=1
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	sub	edx, eax
	add	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	.p2align	4, 0x90
LBB123_56:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	ebx, byte ptr [eax]
	mov	esi, ebx
	xor	esi, 255
	test	bl, bl
	cmovns	esi, ebx
	inc	eax
	add	ecx, esi
	dec	edx
	jne	LBB123_56
LBB123_57:                              #   in Loop: Header=BB123_26 Depth=1
	movzx	eax, byte ptr [esp + 68]        # 1-byte Folded Reload
	mov	ebx, dword ptr [esp + 4]        # 4-byte Reload
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	cmp	ecx, ebp
	mov	ecx, 4
	cmovb	eax, ecx
	test	ebx, ebx
	mov	byte ptr [edx + edi], al
	je	LBB123_25
# %bb.58:                               #   in Loop: Header=BB123_26 Depth=1
	movzx	eax, al
	xor	ecx, ecx
	cmp	ebx, 32
	mov	eax, dword ptr [esp + 4*eax + 132]
	jb	LBB123_64
# %bb.59:                               #   in Loop: Header=BB123_26 Depth=1
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	lea	esi, [eax + ebx]
	lea	edx, [edi + edx + 1]
	cmp	edx, esi
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	jae	LBB123_61
# %bb.60:                               #   in Loop: Header=BB123_26 Depth=1
	add	edi, dword ptr [esp + 40]       # 4-byte Folded Reload
	add	edi, dword ptr [esp + 28]       # 4-byte Folded Reload
	cmp	eax, edi
	jb	LBB123_64
LBB123_61:                              #   in Loop: Header=BB123_26 Depth=1
	mov	edx, dword ptr [esp + 64]       # 4-byte Reload
	mov	edi, dword ptr [esp + 108]      # 4-byte Reload
	xor	ecx, ecx
	.p2align	4, 0x90
LBB123_62:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmmword ptr [edx + ecx - 16], xmm0
	movdqu	xmmword ptr [edx + ecx], xmm1
	add	ecx, 32
	cmp	edi, ecx
	jne	LBB123_62
# %bb.63:                               #   in Loop: Header=BB123_26 Depth=1
	cmp	ebx, edi
	mov	ecx, edi
	je	LBB123_25
	.p2align	4, 0x90
LBB123_64:                              #   Parent Loop BB123_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [eax + ecx]
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	mov	byte ptr [edi + ecx], dl
	inc	ecx
	cmp	ebx, ecx
	jne	LBB123_64
	jmp	LBB123_25
LBB123_67:
	mov	eax, 88
	jmp	LBB123_165
LBB123_68:
	push	edi
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 76], eax
	mov	dword ptr [esp + 68], eax       # 4-byte Spill
	sete	byte ptr [esp + 12]             # 1-byte Folded Spill
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_malloc
	add	esp, 4
	mov	edi, eax
	mov	dword ptr [esp + 80], eax
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_malloc
	add	esp, 4
	mov	ebp, eax
	mov	dword ptr [esp + 84], eax
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_malloc
	add	esp, 4
	mov	ebx, eax
	mov	dword ptr [esp + 88], eax
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	_malloc
	add	esp, 4
	movd	xmm0, edi
	movd	xmm1, ebp
	movd	xmm3, ebx
	movd	xmm2, eax
	mov	dword ptr [esp + 44], eax       # 4-byte Spill
	mov	dword ptr [esp + 92], eax
	mov	dword ptr [esp + 96], edi       # 4-byte Spill
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esp + 56], ebp       # 4-byte Spill
	mov	dword ptr [esp + 32], ebx       # 4-byte Spill
	punpckldq	xmm2, xmm3              # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	punpckldq	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	pxor	xmm3, xmm3
	punpcklqdq	xmm2, xmm1              # xmm2 = xmm2[0],xmm1[0]
	pcmpeqd	xmm3, xmm2
	movmskps	eax, xmm3
	test	al, al
	setne	al
	xor	ecx, ecx
	or	al, byte ptr [esp + 12]         # 1-byte Folded Reload
	mov	eax, 83
	cmove	eax, ecx
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	mov	dword ptr [esp + 100], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 1180]
	jne	LBB123_144
# %bb.69:
	test	eax, eax
	je	LBB123_144
# %bb.70:
	mov	eax, edi
	xor	edx, edx
	mov	dword ptr [esp + 16], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	and	eax, -32
	mov	dword ptr [esp + 104], eax      # 4-byte Spill
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	lea	ebp, [eax + 17]
	lea	ebx, [eax + 1]
	xor	eax, eax
	jmp	LBB123_72
	.p2align	4, 0x90
LBB123_71:                              #   in Loop: Header=BB123_72 Depth=1
	mov	edx, dword ptr [esp + 72]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 40]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 60]       # 4-byte Reload
	mov	eax, dword ptr [esp + 24]       # 4-byte Reload
	inc	edx
	add	ebp, ecx
	add	ebx, ecx
	cmp	edx, dword ptr [esp + 1180]
	je	LBB123_144
LBB123_72:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_75 Depth 2
                                        #       Child Loop BB123_76 Depth 3
                                        #       Child Loop BB123_79 Depth 3
                                        #     Child Loop BB123_83 Depth 2
                                        #     Child Loop BB123_87 Depth 2
                                        #     Child Loop BB123_91 Depth 2
                                        #     Child Loop BB123_95 Depth 2
                                        #     Child Loop BB123_99 Depth 2
                                        #     Child Loop BB123_108 Depth 2
                                        #     Child Loop BB123_110 Depth 2
	imul	ecx, edx
	mov	dword ptr [esp + 72], edx       # 4-byte Spill
	imul	edx, edi
	mov	dword ptr [esp + 52], ebx       # 4-byte Spill
	mov	dword ptr [esp + 60], ebp       # 4-byte Spill
	mov	dword ptr [esp + 64], eax       # 4-byte Spill
	add	edx, dword ptr [esp + 36]       # 4-byte Folded Reload
	test	edi, edi
	mov	dword ptr [esp + 48], ecx       # 4-byte Spill
	mov	dword ptr [esp + 24], edx       # 4-byte Spill
	je	LBB123_81
# %bb.73:                               #   in Loop: Header=BB123_72 Depth=1
	xor	eax, eax
	jmp	LBB123_75
	.p2align	4, 0x90
LBB123_74:                              #   in Loop: Header=BB123_75 Depth=2
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	test	edi, edi
	sete	al
	cmp	esi, edx
	seta	cl
	or	cl, al
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	cmovne	edx, esi
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	cmovne	eax, edi
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	mov	eax, edi
	inc	eax
	cmp	eax, 5
	je	LBB123_102
LBB123_75:                              #   Parent Loop BB123_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_76 Depth 3
                                        #       Child Loop BB123_79 Depth 3
	mov	ebx, dword ptr [esp + 4*eax + 76]
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	movzx	eax, al
	mov	ecx, ebx
	push	eax
	push	esi
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	push	esi
	push	dword ptr [esp + 76]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	push	1024
	push	0
	lea	eax, [esp + 140]
	push	eax
	call	_memset
	add	esp, 12
	mov	eax, esi
	.p2align	4, 0x90
LBB123_76:                              #   Parent Loop BB123_72 Depth=1
                                        #     Parent Loop BB123_75 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzx	ecx, byte ptr [ebx]
	inc	ebx
	inc	dword ptr [esp + 4*ecx + 132]
	dec	eax
	jne	LBB123_76
# %bb.77:                               #   in Loop: Header=BB123_75 Depth=2
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	xor	esi, esi
	mov	edx, -1024
	inc	dword ptr [esp + 4*eax + 132]
	jmp	LBB123_79
	.p2align	4, 0x90
LBB123_78:                              #   in Loop: Header=BB123_79 Depth=3
	add	esi, eax
	add	edx, 4
	je	LBB123_74
LBB123_79:                              #   Parent Loop BB123_72 Depth=1
                                        #     Parent Loop BB123_75 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	mov	ebp, dword ptr [esp + edx + 1156]
	mov	eax, 0
	test	ebp, ebp
	je	LBB123_78
# %bb.80:                               #   in Loop: Header=BB123_79 Depth=3
	mov	ebx, ebp
	xor	ecx, ecx
	shr	ebx, 16
	cmp	ebp, 65535
	cmovbe	ebx, ebp
	seta	cl
	mov	eax, ebx
	shl	ecx, 4
	shr	eax, 8
	cmp	ebx, 255
	lea	edi, [ecx + 8]
	cmovbe	eax, ebx
	cmovbe	edi, ecx
	mov	ebx, eax
	lea	ecx, [edi + 4]
	shr	ebx, 4
	cmp	eax, 15
	cmovbe	ebx, eax
	cmovbe	ecx, edi
	mov	edi, ebx
	lea	eax, [ecx + 2]
	shr	edi, 2
	cmp	ebx, 3
	cmovbe	edi, ebx
	cmovbe	eax, ecx
	xor	ecx, ecx
	cmp	edi, 1
	mov	edi, -1
	seta	cl
	add	ecx, eax
	mov	eax, ecx
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	imul	eax, ebp
	add	edi, ebp
	lea	eax, [eax + 2*edi]
	jmp	LBB123_78
	.p2align	4, 0x90
LBB123_81:                              #   in Loop: Header=BB123_72 Depth=1
	mov	ecx, dword ptr [esp + 68]       # 4-byte Reload
	push	0
	push	esi
	push	0
	push	eax
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	push	1020
	push	0
	lea	eax, [esp + 144]
	push	eax
	call	_memset
	add	esp, 12
	mov	edx, 1
	mov	eax, -255
	mov	dword ptr [esp + 132], 1
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	test	edx, edx
	mov	ecx, 0
	jne	LBB123_82
	jmp	LBB123_83
	.p2align	4, 0x90
LBB123_84:                              #   in Loop: Header=BB123_83 Depth=2
	mov	edx, dword ptr [esp + 4*eax + 1156]
	inc	eax
	test	edx, edx
	mov	ecx, 0
	je	LBB123_83
LBB123_82:                              #   in Loop: Header=BB123_72 Depth=1
	mov	esi, edx
	xor	ecx, ecx
	shr	esi, 16
	cmp	edx, 65535
	cmovbe	esi, edx
	seta	cl
	mov	ebx, esi
	shl	ecx, 4
	shr	ebx, 8
	cmp	esi, 255
	lea	edi, [ecx + 8]
	cmovbe	ebx, esi
	cmovbe	edi, ecx
	mov	esi, ebx
	lea	ecx, [edi + 4]
	shr	esi, 4
	cmp	ebx, 15
	cmovbe	esi, ebx
	cmovbe	ecx, edi
	mov	ebx, esi
	lea	edi, [ecx + 2]
	shr	ebx, 2
	cmp	esi, 3
	cmovbe	ebx, esi
	cmovbe	edi, ecx
	xor	ecx, ecx
	mov	esi, -1
	cmp	ebx, 1
	seta	cl
	add	ecx, edi
	mov	ebx, ecx
                                        # kill: def $cl killed $cl killed $ecx
	shl	esi, cl
	imul	ebx, edx
	add	esi, edx
	lea	ecx, [ebx + 2*esi]
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
LBB123_83:                              #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add	dword ptr [esp + 8], ecx        # 4-byte Folded Spill
	test	eax, eax
	jne	LBB123_84
# %bb.85:                               #   in Loop: Header=BB123_72 Depth=1
	mov	ecx, dword ptr [esp + 96]       # 4-byte Reload
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	push	1
	push	esi
	push	0
	push	dword ptr [esp + 76]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	push	1024
	push	0
	lea	eax, [esp + 140]
	push	eax
	call	_memset
	add	esp, 12
	xor	ebx, ebx
	mov	esi, -255
	xor	eax, eax
	mov	dword ptr [esp + 136], 1
	test	ebx, ebx
	mov	ecx, 0
	jne	LBB123_86
	jmp	LBB123_87
	.p2align	4, 0x90
LBB123_88:                              #   in Loop: Header=BB123_87 Depth=2
	mov	ebx, dword ptr [esp + 4*esi + 1156]
	inc	esi
	test	ebx, ebx
	mov	ecx, 0
	je	LBB123_87
LBB123_86:                              #   in Loop: Header=BB123_72 Depth=1
	mov	edx, ebx
	xor	ecx, ecx
	shr	edx, 16
	cmp	ebx, 65535
	cmovbe	edx, ebx
	seta	cl
	mov	ebp, edx
	shl	ecx, 4
	shr	ebp, 8
	cmp	edx, 255
	lea	edi, [ecx + 8]
	cmovbe	ebp, edx
	cmovbe	edi, ecx
	mov	edx, ebp
	lea	ecx, [edi + 4]
	shr	edx, 4
	cmp	ebp, 15
	cmovbe	edx, ebp
	cmovbe	ecx, edi
	mov	ebp, edx
	lea	edi, [ecx + 2]
	shr	ebp, 2
	cmp	edx, 3
	cmovbe	ebp, edx
	cmovbe	edi, ecx
	xor	ecx, ecx
	cmp	ebp, 1
	seta	cl
	add	ecx, edi
	mov	edi, -1
	mov	edx, ecx
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	imul	edx, ebx
	add	edi, ebx
	lea	ecx, [edx + 2*edi]
LBB123_87:                              #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add	eax, ecx
	test	esi, esi
	jne	LBB123_88
# %bb.89:                               #   in Loop: Header=BB123_72 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	xor	edx, edx
	cmp	eax, ecx
	seta	dl
	cmova	ecx, eax
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	mov	ecx, dword ptr [esp + 56]       # 4-byte Reload
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	push	2
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	0
	push	dword ptr [esp + 76]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	push	1024
	push	0
	lea	eax, [esp + 140]
	push	eax
	call	_memset
	add	esp, 12
	xor	ebx, ebx
	mov	esi, -255
	xor	eax, eax
	mov	dword ptr [esp + 140], 1
	test	ebx, ebx
	mov	ecx, 0
	jne	LBB123_90
	jmp	LBB123_91
	.p2align	4, 0x90
LBB123_92:                              #   in Loop: Header=BB123_91 Depth=2
	mov	ebx, dword ptr [esp + 4*esi + 1156]
	inc	esi
	test	ebx, ebx
	mov	ecx, 0
	je	LBB123_91
LBB123_90:                              #   in Loop: Header=BB123_72 Depth=1
	mov	edx, ebx
	xor	ecx, ecx
	shr	edx, 16
	cmp	ebx, 65535
	cmovbe	edx, ebx
	seta	cl
	mov	ebp, edx
	shl	ecx, 4
	shr	ebp, 8
	cmp	edx, 255
	lea	edi, [ecx + 8]
	cmovbe	ebp, edx
	cmovbe	edi, ecx
	mov	edx, ebp
	lea	ecx, [edi + 4]
	shr	edx, 4
	cmp	ebp, 15
	cmovbe	edx, ebp
	cmovbe	ecx, edi
	mov	ebp, edx
	lea	edi, [ecx + 2]
	shr	ebp, 2
	cmp	edx, 3
	cmovbe	ebp, edx
	cmovbe	edi, ecx
	xor	ecx, ecx
	cmp	ebp, 1
	seta	cl
	add	ecx, edi
	mov	edi, -1
	mov	edx, ecx
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	imul	edx, ebx
	add	edi, ebx
	lea	ecx, [edx + 2*edi]
LBB123_91:                              #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add	eax, ecx
	test	esi, esi
	jne	LBB123_92
# %bb.93:                               #   in Loop: Header=BB123_72 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	cmp	eax, ecx
	cmova	ecx, eax
	mov	eax, 2
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	cmova	ecx, eax
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	push	3
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	0
	push	dword ptr [esp + 76]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	push	1024
	push	0
	lea	eax, [esp + 140]
	push	eax
	call	_memset
	add	esp, 12
	xor	ebx, ebx
	mov	esi, -255
	xor	eax, eax
	mov	dword ptr [esp + 144], 1
	test	ebx, ebx
	mov	ecx, 0
	jne	LBB123_94
	jmp	LBB123_95
	.p2align	4, 0x90
LBB123_96:                              #   in Loop: Header=BB123_95 Depth=2
	mov	ebx, dword ptr [esp + 4*esi + 1156]
	inc	esi
	test	ebx, ebx
	mov	ecx, 0
	je	LBB123_95
LBB123_94:                              #   in Loop: Header=BB123_72 Depth=1
	mov	edx, ebx
	xor	ecx, ecx
	shr	edx, 16
	cmp	ebx, 65535
	cmovbe	edx, ebx
	seta	cl
	mov	ebp, edx
	shl	ecx, 4
	shr	ebp, 8
	cmp	edx, 255
	lea	edi, [ecx + 8]
	cmovbe	ebp, edx
	cmovbe	edi, ecx
	mov	edx, ebp
	lea	ecx, [edi + 4]
	shr	edx, 4
	cmp	ebp, 15
	cmovbe	edx, ebp
	cmovbe	ecx, edi
	mov	ebp, edx
	lea	edi, [ecx + 2]
	shr	ebp, 2
	cmp	edx, 3
	cmovbe	ebp, edx
	cmovbe	edi, ecx
	xor	ecx, ecx
	cmp	ebp, 1
	seta	cl
	add	ecx, edi
	mov	edi, -1
	mov	edx, ecx
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	imul	edx, ebx
	add	edi, ebx
	lea	ecx, [edx + 2*edi]
LBB123_95:                              #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add	eax, ecx
	test	esi, esi
	jne	LBB123_96
# %bb.97:                               #   in Loop: Header=BB123_72 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	cmp	eax, ecx
	cmova	ecx, eax
	mov	eax, 3
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	cmova	ecx, eax
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 44]       # 4-byte Reload
	push	4
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	0
	push	dword ptr [esp + 76]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	push	1024
	push	0
	lea	eax, [esp + 140]
	push	eax
	call	_memset
	add	esp, 12
	xor	ebx, ebx
	mov	esi, -255
	xor	eax, eax
	mov	dword ptr [esp + 148], 1
	test	ebx, ebx
	mov	ecx, 0
	jne	LBB123_98
	jmp	LBB123_99
	.p2align	4, 0x90
LBB123_100:                             #   in Loop: Header=BB123_99 Depth=2
	mov	ebx, dword ptr [esp + 4*esi + 1156]
	inc	esi
	test	ebx, ebx
	mov	ecx, 0
	je	LBB123_99
LBB123_98:                              #   in Loop: Header=BB123_72 Depth=1
	mov	edx, ebx
	xor	ecx, ecx
	shr	edx, 16
	cmp	ebx, 65535
	cmovbe	edx, ebx
	seta	cl
	mov	ebp, edx
	shl	ecx, 4
	shr	ebp, 8
	cmp	edx, 255
	lea	edi, [ecx + 8]
	cmovbe	ebp, edx
	cmovbe	edi, ecx
	mov	edx, ebp
	lea	ecx, [edi + 4]
	shr	edx, 4
	cmp	ebp, 15
	cmovbe	edx, ebp
	cmovbe	ecx, edi
	mov	ebp, edx
	lea	edi, [ecx + 2]
	shr	ebp, 2
	cmp	edx, 3
	cmovbe	ebp, edx
	cmovbe	edi, ecx
	xor	ecx, ecx
	cmp	ebp, 1
	seta	cl
	add	ecx, edi
	mov	edi, -1
	mov	edx, ecx
                                        # kill: def $cl killed $cl killed $ecx
	shl	edi, cl
	imul	edx, ebx
	add	edi, ebx
	lea	ecx, [edx + 2*edi]
LBB123_99:                              #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	add	eax, ecx
	test	esi, esi
	jne	LBB123_100
# %bb.101:                              #   in Loop: Header=BB123_72 Depth=1
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	cmp	eax, ecx
	cmova	ecx, eax
	mov	eax, 4
	cmova	edx, eax
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
LBB123_102:                             #   in Loop: Header=BB123_72 Depth=1
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	test	edi, edi
	mov	byte ptr [eax + ecx], dl
	je	LBB123_71
# %bb.103:                              #   in Loop: Header=BB123_72 Depth=1
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	xor	ecx, ecx
	cmp	edi, 32
	mov	eax, dword ptr [esp + 4*eax + 76]
	jae	LBB123_105
# %bb.104:                              #   in Loop: Header=BB123_72 Depth=1
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	jmp	LBB123_110
	.p2align	4, 0x90
LBB123_105:                             #   in Loop: Header=BB123_72 Depth=1
	mov	edx, dword ptr [esp + 28]       # 4-byte Reload
	mov	esi, dword ptr [esp + 48]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	lea	edx, [esi + edx + 1]
	lea	esi, [eax + edi]
	cmp	edx, esi
	mov	edx, dword ptr [esp + 48]       # 4-byte Reload
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	jae	LBB123_107
# %bb.106:                              #   in Loop: Header=BB123_72 Depth=1
	add	edx, dword ptr [esp + 40]       # 4-byte Folded Reload
	add	edx, dword ptr [esp + 28]       # 4-byte Folded Reload
	cmp	eax, edx
	jb	LBB123_110
LBB123_107:                             #   in Loop: Header=BB123_72 Depth=1
	mov	edx, dword ptr [esp + 104]      # 4-byte Reload
	mov	ebx, dword ptr [esp + 60]       # 4-byte Reload
	xor	ecx, ecx
	.p2align	4, 0x90
LBB123_108:                             #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmmword ptr [ebx + ecx - 16], xmm0
	movdqu	xmmword ptr [ebx + ecx], xmm1
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB123_108
# %bb.109:                              #   in Loop: Header=BB123_72 Depth=1
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	cmp	edi, edx
	mov	ecx, edx
	je	LBB123_71
	.p2align	4, 0x90
LBB123_110:                             #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [eax + ecx]
	mov	byte ptr [ebx + ecx], dl
	inc	ecx
	cmp	edi, ecx
	jne	LBB123_110
	jmp	LBB123_71
LBB123_111:
	movsd	xmm0, qword ptr [ebp]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [ebp + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [esp + 132], xmm0
	movsd	xmm0, qword ptr [ebp + 24]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 156], xmm0
	mov	eax, dword ptr [ebp + 32]
	mov	dword ptr [esp + 164], eax
	movsd	xmm0, qword ptr [ebp + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 140], xmm1
	movsd	qword ptr [esp + 148], xmm0
	mov	dword ptr [esp + 132], 1
	mov	dword ptr [esp + 156], 0
	mov	dword ptr [esp + 160], 0
	push	edi
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	dword ptr [esp + 52], eax       # 4-byte Spill
	mov	dword ptr [esp + 112], eax
	sete	byte ptr [esp + 12]             # 1-byte Folded Spill
	push	edi
	call	_malloc
	add	esp, 4
	mov	dword ptr [esp + 32], eax       # 4-byte Spill
	mov	dword ptr [esp + 116], eax
	push	edi
	call	_malloc
	add	esp, 4
	mov	ebp, eax
	mov	dword ptr [esp + 120], eax
	push	edi
	call	_malloc
	add	esp, 4
	mov	ebx, eax
	mov	dword ptr [esp + 124], eax
	push	edi
	call	_malloc
	add	esp, 4
	movd	xmm0, dword ptr [esp + 32]      # 4-byte Folded Reload
                                        # xmm0 = mem[0],zero,zero,zero
	movd	xmm1, ebp
	movd	xmm3, ebx
	movd	xmm2, eax
	mov	dword ptr [esp + 48], eax       # 4-byte Spill
	mov	dword ptr [esp + 128], eax
	mov	dword ptr [esp + 68], ebx       # 4-byte Spill
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	mov	dword ptr [esp + 44], ebp       # 4-byte Spill
	punpckldq	xmm2, xmm3              # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	pxor	xmm3, xmm3
	punpckldq	xmm1, xmm0              # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	punpcklqdq	xmm2, xmm1              # xmm2 = xmm2[0],xmm1[0]
	pcmpeqd	xmm3, xmm2
	movmskps	eax, xmm3
	test	al, al
	setne	al
	xor	ecx, ecx
	or	al, byte ptr [esp + 12]         # 1-byte Folded Reload
	mov	eax, 83
	cmove	eax, ecx
	mov	ecx, dword ptr [esp + 1180]
	mov	dword ptr [esp + 100], eax      # 4-byte Spill
	jne	LBB123_163
# %bb.112:
	test	ecx, ecx
	je	LBB123_163
# %bb.113:
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	test	eax, eax
	je	LBB123_146
# %bb.114:
	and	eax, -32
	xor	edi, edi
	mov	dword ptr [esp + 96], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	lea	ecx, [eax + 17]
	lea	ebp, [eax + 1]
	xor	eax, eax
	jmp	LBB123_116
	.p2align	4, 0x90
LBB123_115:                             #   in Loop: Header=BB123_116 Depth=1
	mov	edi, dword ptr [esp + 64]       # 4-byte Reload
	mov	eax, dword ptr [esp + 40]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 60]       # 4-byte Reload
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	inc	edi
	add	ecx, eax
	add	ebp, eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	cmp	edi, dword ptr [esp + 1180]
	je	LBB123_163
LBB123_116:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_136 Depth 2
                                        #     Child Loop BB123_138 Depth 2
	mov	dword ptr [esp + 60], ecx       # 4-byte Spill
	mov	ecx, ebx
	mov	ebx, eax
	mov	dword ptr [esp + 64], edi       # 4-byte Spill
	mov	eax, edi
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	imul	eax, edi
	add	eax, edx
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	mov	edx, eax
	push	0
	push	esi
	push	edi
	mov	dword ptr [esp + 36], ebx       # 4-byte Spill
	push	ebx
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 76], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_118
# %bb.117:                              #   in Loop: Header=BB123_116 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	edi
	push	dword ptr [esp + 60]            # 4-byte Folded Reload
	lea	ecx, [esp + 88]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_119
LBB123_118:                             #   in Loop: Header=BB123_116 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	edi
	push	dword ptr [esp + 60]            # 4-byte Folded Reload
	lea	eax, [esp + 88]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_119:                             #   in Loop: Header=BB123_116 Depth=1
	add	esp, 20
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 76]
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, ebx
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	push	1
	push	esi
	push	edi
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 80], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_121
# %bb.120:                              #   in Loop: Header=BB123_116 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	edi
	push	ebx
	lea	ecx, [esp + 92]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_122
LBB123_121:                             #   in Loop: Header=BB123_116 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	edi
	push	ebx
	lea	eax, [esp + 92]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_122:                             #   in Loop: Header=BB123_116 Depth=1
	add	esp, 20
	mov	ebx, dword ptr [esp + 44]       # 4-byte Reload
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 80]
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	xor	edx, edx
	cmp	eax, ecx
	setb	dl
	cmovb	ecx, eax
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	mov	ecx, ebx
	push	2
	push	esi
	push	edi
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 84], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_124
# %bb.123:                              #   in Loop: Header=BB123_116 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	edi
	push	ebx
	lea	ecx, [esp + 96]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_125
LBB123_124:                             #   in Loop: Header=BB123_116 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	edi
	push	ebx
	lea	eax, [esp + 96]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_125:                             #   in Loop: Header=BB123_116 Depth=1
	add	esp, 20
	mov	ebx, dword ptr [esp + 68]       # 4-byte Reload
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 84]
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	cmp	eax, ecx
	cmovb	ecx, eax
	mov	eax, 2
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	cmovb	ecx, eax
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	ecx, ebx
	push	3
	push	esi
	push	edi
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 88], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_127
# %bb.126:                              #   in Loop: Header=BB123_116 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	edi
	push	ebx
	lea	ecx, [esp + 100]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_128
LBB123_127:                             #   in Loop: Header=BB123_116 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	edi
	push	ebx
	lea	eax, [esp + 100]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_128:                             #   in Loop: Header=BB123_116 Depth=1
	add	esp, 20
	mov	ebx, dword ptr [esp + 40]       # 4-byte Reload
	imul	ebx, dword ptr [esp + 64]       # 4-byte Folded Reload
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 88]
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	cmp	eax, ecx
	cmovb	ecx, eax
	mov	eax, 3
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	cmovb	ecx, eax
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 48]       # 4-byte Reload
	push	4
	push	esi
	push	edi
	push	dword ptr [esp + 36]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 92], 0
	mov	dword ptr [esp], 0
	mov	dword ptr [esp + 72], ebx       # 4-byte Spill
	mov	dword ptr [esp + 56], ebp       # 4-byte Spill
	test	eax, eax
	je	LBB123_130
# %bb.129:                              #   in Loop: Header=BB123_116 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	edi
	push	dword ptr [esp + 56]            # 4-byte Folded Reload
	lea	ecx, [esp + 104]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_131
LBB123_130:                             #   in Loop: Header=BB123_116 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	edi
	push	dword ptr [esp + 56]            # 4-byte Folded Reload
	lea	eax, [esp + 104]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_131:                             #   in Loop: Header=BB123_116 Depth=1
	add	esp, 20
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 28]       # 4-byte Reload
	mov	edx, dword ptr [esp + 72]       # 4-byte Reload
	cmp	dword ptr [esp + 92], eax
	mov	eax, 4
	cmovb	ebx, eax
	xor	ecx, ecx
	cmp	edi, 31
	mov	byte ptr [ebp + edx], bl
	mov	eax, dword ptr [esp + 4*ebx + 112]
	ja	LBB123_133
# %bb.132:                              #   in Loop: Header=BB123_116 Depth=1
	mov	ebp, dword ptr [esp + 56]       # 4-byte Reload
	jmp	LBB123_138
	.p2align	4, 0x90
LBB123_133:                             #   in Loop: Header=BB123_116 Depth=1
	lea	ebx, [edx + ebp + 1]
	lea	esi, [eax + edi]
	mov	ebp, dword ptr [esp + 56]       # 4-byte Reload
	cmp	ebx, esi
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	jae	LBB123_135
# %bb.134:                              #   in Loop: Header=BB123_116 Depth=1
	add	edx, dword ptr [esp + 40]       # 4-byte Folded Reload
	add	edx, dword ptr [esp + 28]       # 4-byte Folded Reload
	cmp	eax, edx
	jb	LBB123_138
LBB123_135:                             #   in Loop: Header=BB123_116 Depth=1
	mov	edx, dword ptr [esp + 96]       # 4-byte Reload
	mov	edi, dword ptr [esp + 60]       # 4-byte Reload
	xor	ecx, ecx
	.p2align	4, 0x90
LBB123_136:                             #   Parent Loop BB123_116 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmmword ptr [edi + ecx - 16], xmm0
	movdqu	xmmword ptr [edi + ecx], xmm1
	add	ecx, 32
	cmp	edx, ecx
	jne	LBB123_136
# %bb.137:                              #   in Loop: Header=BB123_116 Depth=1
	mov	edi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ecx, edx
	cmp	edi, edx
	je	LBB123_115
	.p2align	4, 0x90
LBB123_138:                             #   Parent Loop BB123_116 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzx	edx, byte ptr [eax + ecx]
	mov	byte ptr [ebp + ecx], dl
	inc	ecx
	cmp	edi, ecx
	jne	LBB123_138
	jmp	LBB123_115
LBB123_139:
	cmp	dword ptr [esp + 1180], 0
	je	LBB123_65
# %bb.140:
	mov	esi, dword ptr [esp + 28]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 36]       # 4-byte Reload
	xor	edi, edi
	xor	ebp, ebp
	inc	esi
	.p2align	4, 0x90
LBB123_141:                             # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esp + 1192]
	mov	dword ptr [esp + 12], edi       # 4-byte Spill
	mov	edi, ebp
	mov	ecx, esi
	mov	edx, ebx
	imul	edi, dword ptr [esp + 4]        # 4-byte Folded Reload
	mov	eax, dword ptr [eax + 48]
	add	edi, dword ptr [esp + 36]       # 4-byte Folded Reload
	movzx	eax, byte ptr [eax + ebp]
	mov	byte ptr [esi - 1], al
	push	eax
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	inc	ebp
	add	esi, dword ptr [esp + 40]       # 4-byte Folded Reload
	add	ebx, dword ptr [esp + 4]        # 4-byte Folded Reload
	cmp	dword ptr [esp + 1180], ebp
	jne	LBB123_141
	jmp	LBB123_65
LBB123_143:
	push	dword ptr [esp + 44]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 60]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 72]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 56]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 32]            # 4-byte Folded Reload
	jmp	LBB123_164
LBB123_144:
	push	dword ptr [esp + 68]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 96]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 56]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 32]            # 4-byte Folded Reload
	call	_free
	add	esp, 4
	push	dword ptr [esp + 44]            # 4-byte Folded Reload
	jmp	LBB123_164
LBB123_146:
	xor	edi, edi
	jmp	LBB123_149
LBB123_147:                             #   in Loop: Header=BB123_149 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	0
	push	ebp
	lea	eax, [esp + 104]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_148:                             #   in Loop: Header=BB123_149 Depth=1
	add	esp, 20
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	cmp	dword ptr [esp + 92], esi
	movzx	eax, bl
	mov	ecx, 4
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	mov	esi, dword ptr [esp + 20]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 52]       # 4-byte Reload
	cmovb	eax, ecx
	mov	ecx, dword ptr [esp + 28]       # 4-byte Reload
	mov	edi, edx
	mov	byte ptr [ecx], al
	add	ecx, dword ptr [esp + 40]       # 4-byte Folded Reload
	mov	dword ptr [esp + 28], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 4]        # 4-byte Reload
	dec	ecx
	je	LBB123_163
LBB123_149:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	ecx, ebx
	push	0
	push	esi
	push	0
	push	edi
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 76], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_151
# %bb.150:                              #   in Loop: Header=BB123_149 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	0
	push	ebx
	lea	ecx, [esp + 88]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_152
LBB123_151:                             #   in Loop: Header=BB123_149 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	0
	push	ebx
	lea	eax, [esp + 88]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_152:                             #   in Loop: Header=BB123_149 Depth=1
	add	esp, 20
	mov	ebx, dword ptr [esp + 32]       # 4-byte Reload
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	mov	esi, dword ptr [esp + 76]
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	mov	ecx, ebx
	push	1
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	0
	push	edi
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 80], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_154
# %bb.153:                              #   in Loop: Header=BB123_149 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	0
	push	ebx
	lea	ecx, [esp + 92]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_155
LBB123_154:                             #   in Loop: Header=BB123_149 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	0
	push	ebx
	lea	eax, [esp + 92]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_155:                             #   in Loop: Header=BB123_149 Depth=1
	add	esp, 20
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 80]
	mov	ebp, dword ptr [esp + 44]       # 4-byte Reload
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	xor	ebx, ebx
	cmp	eax, esi
	mov	ecx, ebp
	cmovb	esi, eax
	setb	byte ptr [esp + 12]             # 1-byte Folded Spill
	push	2
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	0
	push	edi
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 84], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_157
# %bb.156:                              #   in Loop: Header=BB123_149 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	0
	push	ebp
	lea	ecx, [esp + 96]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_158
LBB123_157:                             #   in Loop: Header=BB123_149 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	0
	push	ebp
	lea	eax, [esp + 96]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_158:                             #   in Loop: Header=BB123_149 Depth=1
	add	esp, 20
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	movzx	edx, byte ptr [esp + 12]        # 1-byte Folded Reload
	mov	eax, dword ptr [esp + 84]
	mov	ebp, dword ptr [esp + 68]       # 4-byte Reload
	mov	ecx, 2
	mov	bl, dl
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	cmp	eax, esi
	cmovb	ebx, ecx
	cmovb	esi, eax
	mov	ecx, ebp
	push	3
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	0
	push	edi
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 88], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_160
# %bb.159:                              #   in Loop: Header=BB123_149 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	0
	push	ebp
	lea	ecx, [esp + 100]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_161
LBB123_160:                             #   in Loop: Header=BB123_149 Depth=1
	lea	eax, [esp + 132]
	push	eax
	push	0
	push	ebp
	lea	eax, [esp + 100]
	push	eax
	lea	eax, [esp + 16]
	push	eax
	call	"?lodepng_zlib_compress@@YAIPAPAEPAIPBEIPBULodePNGCompressSettings@@@Z"
LBB123_161:                             #   in Loop: Header=BB123_149 Depth=1
	add	esp, 20
	mov	ebp, dword ptr [esp + 48]       # 4-byte Reload
	push	dword ptr [esp]
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 88]
	mov	edx, dword ptr [esp + 36]       # 4-byte Reload
	movzx	ebx, bl
	mov	ecx, 3
	cmp	eax, esi
	cmovb	ebx, ecx
	cmovb	esi, eax
	mov	ecx, ebp
	push	4
	push	dword ptr [esp + 24]            # 4-byte Folded Reload
	push	0
	push	edi
	call	"?filterScanline@@YAXPAEPBE1IIE@Z"
	add	esp, 16
	mov	eax, dword ptr [esp + 156]
	mov	dword ptr [esp + 92], 0
	mov	dword ptr [esp], 0
	test	eax, eax
	je	LBB123_147
# %bb.162:                              #   in Loop: Header=BB123_149 Depth=1
	lea	ecx, [esp + 132]
	push	ecx
	push	0
	push	ebp
	lea	ecx, [esp + 104]
	push	ecx
	lea	ecx, [esp + 16]
	push	ecx
	call	eax
	jmp	LBB123_148
LBB123_163:
	push	ebx
	call	_free
	add	esp, 4
	push	dword ptr [esp + 116]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 120]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 124]
	call	_free
	add	esp, 4
	push	dword ptr [esp + 128]
LBB123_164:
	call	_free
	add	esp, 4
	mov	eax, dword ptr [esp + 100]      # 4-byte Reload
LBB123_165:
	add	esp, 1156
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI123_0:
	.long	LBB123_7
	.long	LBB123_4
	.long	LBB123_2
	.long	LBB123_7
	.long	LBB123_5
	.long	LBB123_4
	.long	LBB123_6
LJTI123_1:
	.long	LBB123_21
	.long	LBB123_68
	.long	LBB123_111
	.long	LBB123_139
                                        # -- End function
	.def	 "?filterScanline@@YAXPAEPBE1IIE@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function ?filterScanline@@YAXPAEPBE1IIE@Z
"?filterScanline@@YAXPAEPBE1IIE@Z":     # @"?filterScanline@@YAXPAEPBE1IIE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 380
	mov	eax, edx
	movzx	edx, byte ptr [esp + 412]
	cmp	edx, 4
	ja	LBB124_118
# %bb.1:
	mov	ebx, dword ptr [esp + 408]
	mov	ebp, dword ptr [esp + 404]
	mov	edi, dword ptr [esp + 400]
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	jmp	dword ptr [4*edx + LJTI124_0]
LBB124_13:
	test	ebp, ebp
	je	LBB124_118
# %bb.14:
	xor	esi, esi
	cmp	ebp, 32
	jae	LBB124_16
# %bb.15:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	jmp	LBB124_21
LBB124_2:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	test	ebx, ebx
	je	LBB124_9
# %bb.3:
	xor	edi, edi
	cmp	ebx, 31
	jbe	LBB124_27
# %bb.4:
	lea	ecx, [eax + ebx]
	cmp	ecx, edx
	jbe	LBB124_6
# %bb.5:
	lea	ecx, [edx + ebx]
	cmp	ecx, eax
	ja	LBB124_27
LBB124_6:
	mov	edi, ebx
	xor	ecx, ecx
	and	edi, -32
	.p2align	4, 0x90
LBB124_7:                               # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmmword ptr [edx + ecx], xmm0
	movdqu	xmmword ptr [edx + ecx + 16], xmm1
	add	ecx, 32
	cmp	edi, ecx
	jne	LBB124_7
# %bb.8:
	cmp	edi, ebx
	je	LBB124_9
	.p2align	4, 0x90
LBB124_27:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [eax + edi]
	mov	byte ptr [edx + edi], cl
	inc	edi
	cmp	ebx, edi
	jne	LBB124_27
LBB124_9:
	mov	ecx, ebp
	sub	ecx, ebx
	jbe	LBB124_118
# %bb.10:
	mov	esi, edx
	mov	edi, ebx
	cmp	ecx, 31
	ja	LBB124_22
LBB124_11:
	mov	ecx, eax
	sub	ecx, edi
	.p2align	4, 0x90
LBB124_12:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [eax + ebx]
	sub	dl, byte ptr [ecx + ebx]
	mov	byte ptr [esi + ebx], dl
	inc	ebx
	cmp	ebp, ebx
	jne	LBB124_12
	jmp	LBB124_118
LBB124_28:
	test	edi, edi
	je	LBB124_40
# %bb.29:
	test	ebp, ebp
	je	LBB124_118
# %bb.30:
	xor	esi, esi
	mov	edi, ebp
	cmp	ebp, 31
	ja	LBB124_33
# %bb.31:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 400]
	jmp	LBB124_39
LBB124_49:
	test	edi, edi
	je	LBB124_63
# %bb.50:
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	test	ebx, ebx
	mov	edx, ebx
	je	LBB124_59
# %bb.51:
	xor	ebx, ebx
	cmp	edx, 31
	jbe	LBB124_54
# %bb.52:
	mov	edi, dword ptr [esp + 400]
	mov	ebp, edx
	add	edx, esi
	lea	ecx, [eax + ebp]
	cmp	ecx, esi
	seta	byte ptr [esp + 16]             # 1-byte Folded Spill
	cmp	edx, eax
	lea	edi, [edi + ebp]
	seta	ch
	cmp	edi, esi
	mov	edi, dword ptr [esp + 400]
	seta	cl
	cmp	edx, edi
	seta	dl
	test	byte ptr [esp + 16], ch         # 1-byte Folded Reload
	jne	LBB124_53
# %bb.55:
	and	cl, dl
	mov	edx, dword ptr [esp + 408]
	jne	LBB124_54
# %bb.56:
	movdqa	xmm0, xmmword ptr [__xmm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f] # xmm0 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	mov	ebx, edx
	xor	ecx, ecx
	and	ebx, -32
	.p2align	4, 0x90
LBB124_57:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm3, xmmword ptr [edi + ecx]
	movdqu	xmm4, xmmword ptr [edi + ecx + 16]
	movdqu	xmm1, xmmword ptr [eax + ecx]
	movdqu	xmm2, xmmword ptr [eax + ecx + 16]
	psrlw	xmm3, 1
	psrlw	xmm4, 1
	pand	xmm3, xmm0
	pand	xmm4, xmm0
	psubb	xmm1, xmm3
	psubb	xmm2, xmm4
	movdqu	xmmword ptr [esi + ecx], xmm1
	movdqu	xmmword ptr [esi + ecx + 16], xmm2
	add	ecx, 32
	cmp	ebx, ecx
	jne	LBB124_57
# %bb.58:
	mov	edx, dword ptr [esp + 408]
	cmp	ebx, edx
	jne	LBB124_54
	jmp	LBB124_59
LBB124_86:
	test	edi, edi
	je	LBB124_100
# %bb.87:
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	test	ebx, ebx
	mov	edx, ebx
	je	LBB124_96
# %bb.88:
	xor	ebx, ebx
	cmp	edx, 31
	jbe	LBB124_91
# %bb.89:
	mov	ecx, edx
	mov	edi, dword ptr [esp + 400]
	add	edx, esi
	add	ecx, eax
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	ecx, dword ptr [esp + 408]
	cmp	dword ptr [esp + 16], esi       # 4-byte Folded Reload
	lea	edi, [edi + ecx]
	seta	byte ptr [esp + 16]             # 1-byte Folded Spill
	cmp	edx, eax
	seta	ch
	cmp	edi, esi
	mov	edi, dword ptr [esp + 400]
	seta	cl
	cmp	edx, edi
	seta	dl
	test	byte ptr [esp + 16], ch         # 1-byte Folded Reload
	jne	LBB124_90
# %bb.92:
	and	cl, dl
	mov	edx, dword ptr [esp + 408]
	jne	LBB124_91
# %bb.93:
	mov	ebx, edx
	xor	ecx, ecx
	and	ebx, -32
	.p2align	4, 0x90
LBB124_94:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm2, xmmword ptr [edi + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmm3, xmmword ptr [edi + ecx + 16]
	psubb	xmm0, xmm2
	psubb	xmm1, xmm3
	movdqu	xmmword ptr [esi + ecx], xmm0
	movdqu	xmmword ptr [esi + ecx + 16], xmm1
	add	ecx, 32
	cmp	ebx, ecx
	jne	LBB124_94
# %bb.95:
	mov	edx, dword ptr [esp + 408]
	cmp	ebx, edx
	jne	LBB124_91
	jmp	LBB124_96
LBB124_40:
	test	ebp, ebp
	je	LBB124_118
# %bb.41:
	xor	esi, esi
	cmp	ebp, 31
	ja	LBB124_43
# %bb.42:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	jmp	LBB124_48
LBB124_63:
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	test	ebx, ebx
	je	LBB124_70
# %bb.64:
	xor	edi, edi
	cmp	ebx, 31
	jbe	LBB124_85
# %bb.65:
	lea	ecx, [eax + ebx]
	cmp	ecx, esi
	jbe	LBB124_67
# %bb.66:
	lea	ecx, [esi + ebx]
	cmp	ecx, eax
	ja	LBB124_85
LBB124_67:
	mov	edi, ebx
	xor	ecx, ecx
	and	edi, -32
	.p2align	4, 0x90
LBB124_68:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmmword ptr [esi + ecx], xmm0
	movdqu	xmmword ptr [esi + ecx + 16], xmm1
	add	ecx, 32
	cmp	edi, ecx
	jne	LBB124_68
# %bb.69:
	cmp	edi, ebx
	je	LBB124_70
	.p2align	4, 0x90
LBB124_85:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [eax + edi]
	mov	byte ptr [esi + edi], cl
	inc	edi
	cmp	ebx, edi
	jne	LBB124_85
LBB124_70:
	mov	ecx, ebp
	sub	ecx, ebx
	jbe	LBB124_118
# %bb.71:
	mov	edi, ebx
	cmp	ecx, 31
	jbe	LBB124_72
# %bb.80:
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	lea	ecx, [esi + edi]
	lea	edx, [esi + ebp]
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	add	ebx, eax
	mov	dword ptr [esp + 48], ebx       # 4-byte Spill
	lea	ebx, [eax + ebp]
	cmp	ecx, dword ptr [esp + 48]       # 4-byte Folded Reload
	mov	dword ptr [esp + 32], ebx       # 4-byte Spill
	setb	bl
	cmp	edx, eax
	seta	bh
	cmp	ecx, dword ptr [esp + 32]       # 4-byte Folded Reload
	lea	ecx, [eax + edi]
	setb	byte ptr [esp + 32]             # 1-byte Folded Spill
	cmp	ecx, edx
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	setb	dl
	test	bl, bh
	mov	ebx, edi
	jne	LBB124_72
# %bb.81:
	and	byte ptr [esp + 32], dl         # 1-byte Folded Spill
	mov	ebx, edi
	jne	LBB124_72
# %bb.82:
	movdqa	xmm0, xmmword ptr [__xmm@7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f] # xmm0 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	and	ecx, -32
	lea	ebp, [esi + 16]
	lea	edx, [eax + 16]
	lea	ebx, [ecx + edi]
	mov	esi, ecx
	.p2align	4, 0x90
LBB124_83:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm3, xmmword ptr [edx - 16]
	movdqu	xmm4, xmmword ptr [edx]
	movdqu	xmm1, xmmword ptr [edx + edi - 16]
	movdqu	xmm2, xmmword ptr [edx + edi]
	add	edx, 32
	psrlw	xmm3, 1
	psrlw	xmm4, 1
	pand	xmm3, xmm0
	pand	xmm4, xmm0
	psubb	xmm1, xmm3
	psubb	xmm2, xmm4
	movdqu	xmmword ptr [ebp + edi - 16], xmm1
	movdqu	xmmword ptr [ebp + edi], xmm2
	add	ebp, 32
	add	ecx, -32
	jne	LBB124_83
# %bb.84:
	cmp	dword ptr [esp + 16], esi       # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 404]
	je	LBB124_118
LBB124_72:
	mov	ecx, eax
	sub	ecx, edi
	.p2align	4, 0x90
LBB124_73:                              # =>This Inner Loop Header: Depth=1
	mov	dh, byte ptr [ecx + ebx]
	mov	dl, byte ptr [eax + ebx]
	shr	dh
	sub	dl, dh
	mov	byte ptr [esi + ebx], dl
	inc	ebx
	cmp	ebp, ebx
	jne	LBB124_73
	jmp	LBB124_118
LBB124_100:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	test	ebx, ebx
	mov	esi, eax
	je	LBB124_107
# %bb.101:
	xor	edi, edi
	cmp	ebx, 31
	jbe	LBB124_124
# %bb.102:
	lea	ecx, [eax + ebx]
	cmp	ecx, edx
	jbe	LBB124_104
# %bb.103:
	lea	ecx, [edx + ebx]
	cmp	ecx, eax
	ja	LBB124_124
LBB124_104:
	mov	edi, ebx
	xor	ecx, ecx
	and	edi, -32
	.p2align	4, 0x90
LBB124_105:                             # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmmword ptr [edx + ecx], xmm0
	movdqu	xmmword ptr [edx + ecx + 16], xmm1
	add	ecx, 32
	cmp	edi, ecx
	jne	LBB124_105
# %bb.106:
	cmp	edi, ebx
	je	LBB124_107
	.p2align	4, 0x90
LBB124_124:                             # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi + edi]
	mov	byte ptr [edx + edi], al
	inc	edi
	mov	eax, esi
	cmp	ebx, edi
	jne	LBB124_124
LBB124_107:
	mov	ecx, ebp
	sub	ecx, ebx
	jbe	LBB124_118
# %bb.108:
	mov	edi, edx
	mov	edx, ebx
	cmp	ecx, 31
	jbe	LBB124_109
# %bb.119:
	lea	ebx, [edi + ebp]
	mov	eax, edx
	lea	eax, [edi + edx]
	mov	dword ptr [esp + 48], ebx       # 4-byte Spill
	lea	ebx, [esi + ecx]
	mov	dword ptr [esp + 16], ebx       # 4-byte Spill
	lea	ebx, [esi + ebp]
	cmp	eax, dword ptr [esp + 16]       # 4-byte Folded Reload
	mov	dword ptr [esp + 32], ebx       # 4-byte Spill
	mov	ebx, dword ptr [esp + 48]       # 4-byte Reload
	setb	byte ptr [esp + 16]             # 1-byte Folded Spill
	cmp	ebx, esi
	seta	byte ptr [esp + 64]             # 1-byte Folded Spill
	cmp	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	mov	eax, dword ptr [esp + 408]
	lea	eax, [esi + eax]
	setb	byte ptr [esp + 32]             # 1-byte Folded Spill
	cmp	eax, ebx
	mov	bl, byte ptr [esp + 64]         # 1-byte Reload
	mov	eax, esi
	setb	byte ptr [esp + 48]             # 1-byte Folded Spill
	test	byte ptr [esp + 16], bl         # 1-byte Folded Reload
	mov	ebx, dword ptr [esp + 408]
	jne	LBB124_109
# %bb.120:
	mov	bl, byte ptr [esp + 48]         # 1-byte Reload
	and	byte ptr [esp + 32], bl         # 1-byte Folded Spill
	mov	ebx, edx
	jne	LBB124_109
# %bb.121:
	lea	ebp, [edi + 16]
	mov	edi, dword ptr [esp + 408]
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	and	ecx, -32
	lea	ebx, [ecx + edx]
	lea	edx, [eax + 16]
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	.p2align	4, 0x90
LBB124_122:                             # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [edx + edi - 16]
	movdqu	xmm2, xmmword ptr [edx - 16]
	movdqu	xmm1, xmmword ptr [edx + edi]
	movdqu	xmm3, xmmword ptr [edx]
	add	edx, 32
	psubb	xmm0, xmm2
	psubb	xmm1, xmm3
	movdqu	xmmword ptr [ebp + edi - 16], xmm0
	movdqu	xmmword ptr [ebp + edi], xmm1
	add	ebp, 32
	add	ecx, -32
	jne	LBB124_122
# %bb.123:
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	mov	edx, edi
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 404]
	cmp	dword ptr [esp + 16], ecx       # 4-byte Folded Reload
	je	LBB124_118
LBB124_109:
	mov	ecx, eax
	sub	ecx, edx
	.p2align	4, 0x90
LBB124_110:                             # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi + ebx]
	sub	al, byte ptr [ecx + ebx]
	mov	byte ptr [edi + ebx], al
	inc	ebx
	cmp	ebp, ebx
	jne	LBB124_110
	jmp	LBB124_118
LBB124_16:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	lea	ecx, [eax + ebp]
	cmp	ecx, edx
	jbe	LBB124_18
# %bb.17:
	lea	ecx, [edx + ebp]
	cmp	ecx, eax
	ja	LBB124_21
LBB124_18:
	mov	esi, ebp
	xor	ecx, ecx
	and	esi, -32
	.p2align	4, 0x90
LBB124_19:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmmword ptr [edx + ecx], xmm0
	movdqu	xmmword ptr [edx + ecx + 16], xmm1
	add	ecx, 32
	cmp	esi, ecx
	jne	LBB124_19
# %bb.20:
	cmp	esi, ebp
	je	LBB124_118
	.p2align	4, 0x90
LBB124_21:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [eax + esi]
	mov	byte ptr [edx + esi], cl
	inc	esi
	cmp	ebp, esi
	jne	LBB124_21
	jmp	LBB124_118
LBB124_22:
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	lea	ecx, [esi + edi]
	lea	edx, [esi + ebp]
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	add	ebx, eax
	mov	dword ptr [esp + 48], ebx       # 4-byte Spill
	lea	ebx, [eax + ebp]
	cmp	ecx, dword ptr [esp + 48]       # 4-byte Folded Reload
	mov	dword ptr [esp + 32], ebx       # 4-byte Spill
	setb	bl
	cmp	edx, eax
	seta	bh
	cmp	ecx, dword ptr [esp + 32]       # 4-byte Folded Reload
	lea	ecx, [eax + edi]
	setb	byte ptr [esp + 32]             # 1-byte Folded Spill
	cmp	ecx, edx
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	setb	dl
	test	bl, bh
	mov	ebx, edi
	jne	LBB124_11
# %bb.23:
	and	byte ptr [esp + 32], dl         # 1-byte Folded Spill
	mov	ebx, edi
	jne	LBB124_11
# %bb.24:
	and	ecx, -32
	lea	ebp, [esi + 16]
	lea	edx, [eax + 16]
	lea	ebx, [ecx + edi]
	mov	esi, ecx
	.p2align	4, 0x90
LBB124_25:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [edx + edi - 16]
	movdqu	xmm2, xmmword ptr [edx - 16]
	movdqu	xmm1, xmmword ptr [edx + edi]
	movdqu	xmm3, xmmword ptr [edx]
	add	edx, 32
	psubb	xmm0, xmm2
	psubb	xmm1, xmm3
	movdqu	xmmword ptr [ebp + edi - 16], xmm0
	movdqu	xmmword ptr [ebp + edi], xmm1
	add	ebp, 32
	add	ecx, -32
	jne	LBB124_25
# %bb.26:
	cmp	dword ptr [esp + 16], esi       # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 404]
	jne	LBB124_11
	jmp	LBB124_118
LBB124_33:
	mov	ebp, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 400]
	lea	ecx, [eax + edi]
	cmp	ecx, ebp
	lea	edx, [ebp + edi]
	lea	edi, [ebx + edi]
	seta	ch
	cmp	edx, eax
	seta	bl
	cmp	edi, ebp
	seta	cl
	cmp	edx, dword ptr [esp + 400]
	seta	dl
	test	ch, bl
	jne	LBB124_34
# %bb.35:
	and	cl, dl
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	edi, dword ptr [esp + 404]
	mov	ebx, dword ptr [esp + 400]
	jne	LBB124_39
# %bb.36:
	mov	esi, edi
	xor	ecx, ecx
	and	esi, -32
	.p2align	4, 0x90
LBB124_37:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm2, xmmword ptr [ebx + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmm3, xmmword ptr [ebx + ecx + 16]
	psubb	xmm0, xmm2
	psubb	xmm1, xmm3
	movdqu	xmmword ptr [edx + ecx], xmm0
	movdqu	xmmword ptr [edx + ecx + 16], xmm1
	add	ecx, 32
	cmp	esi, ecx
	jne	LBB124_37
# %bb.38:
	cmp	esi, edi
	jne	LBB124_39
	jmp	LBB124_118
LBB124_43:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	lea	ecx, [eax + ebp]
	cmp	ecx, edx
	jbe	LBB124_45
# %bb.44:
	lea	ecx, [edx + ebp]
	cmp	ecx, eax
	ja	LBB124_48
LBB124_45:
	mov	esi, ebp
	xor	ecx, ecx
	and	esi, -32
	.p2align	4, 0x90
LBB124_46:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm0, xmmword ptr [eax + ecx]
	movdqu	xmm1, xmmword ptr [eax + ecx + 16]
	movdqu	xmmword ptr [edx + ecx], xmm0
	movdqu	xmmword ptr [edx + ecx + 16], xmm1
	add	ecx, 32
	cmp	esi, ecx
	jne	LBB124_46
# %bb.47:
	cmp	esi, ebp
	je	LBB124_118
	.p2align	4, 0x90
LBB124_48:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [eax + esi]
	mov	byte ptr [edx + esi], cl
	inc	esi
	cmp	ebp, esi
	jne	LBB124_48
	jmp	LBB124_118
LBB124_53:
	mov	edx, dword ptr [esp + 408]
	.p2align	4, 0x90
LBB124_54:                              # =>This Inner Loop Header: Depth=1
	mov	ebp, edx
	movzx	edx, byte ptr [edi + ebx]
	movzx	ecx, byte ptr [eax + ebx]
	shr	dl
	sub	cl, dl
	mov	edx, ebp
	mov	byte ptr [esi + ebx], cl
	inc	ebx
	cmp	ebp, ebx
	jne	LBB124_54
LBB124_59:
	mov	ecx, dword ptr [esp + 404]
	mov	ebx, ecx
	sub	ebx, edx
	jbe	LBB124_118
# %bb.60:
	mov	esi, edi
	mov	edi, ecx
	cmp	ebx, 15
	mov	ebp, edx
	ja	LBB124_74
LBB124_61:
	mov	ecx, eax
	sub	ecx, edx
	.p2align	4, 0x90
LBB124_62:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [ecx + ebp]
	movzx	ebx, byte ptr [esi + ebp]
	add	ebx, edx
	mov	dh, byte ptr [eax + ebp]
	shr	ebx
	sub	dh, bl
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	byte ptr [ebx + ebp], dh
	inc	ebp
	cmp	edi, ebp
	jne	LBB124_62
	jmp	LBB124_118
LBB124_74:
	mov	ebp, dword ptr [esp + 12]       # 4-byte Reload
	mov	dword ptr [esp + 16], ebx       # 4-byte Spill
	mov	ebx, edx
	lea	ecx, [ebp + edx]
	lea	edx, [ebp + edi]
	mov	ebp, dword ptr [esp + 16]       # 4-byte Reload
	add	ebp, eax
	mov	dword ptr [esp + 32], ebp       # 4-byte Spill
	lea	ebp, [eax + ebx]
	cmp	ecx, dword ptr [esp + 32]       # 4-byte Folded Reload
	mov	dword ptr [esp + 48], ebp       # 4-byte Spill
	lea	ebp, [eax + edi]
	setb	byte ptr [esp + 32]             # 1-byte Folded Spill
	cmp	edx, eax
	seta	byte ptr [esp + 64]             # 1-byte Folded Spill
	cmp	ecx, ebp
	lea	ebp, [esi + edi]
	setb	byte ptr [esp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [esp + 48], edx       # 4-byte Folded Reload
	setb	byte ptr [esp + 48]             # 1-byte Folded Spill
	cmp	ecx, ebp
	lea	ebp, [esi + ebx]
	setb	cl
	cmp	ebp, edx
	mov	edx, ebx
	mov	bh, byte ptr [esp + 64]         # 1-byte Reload
	setb	ch
	mov	ebp, edx
	test	byte ptr [esp + 32], bh         # 1-byte Folded Reload
	jne	LBB124_61
# %bb.75:
	mov	bl, byte ptr [esp + 48]         # 1-byte Reload
	mov	ebp, edx
	and	byte ptr [esp + 96], bl         # 1-byte Folded Spill
	jne	LBB124_61
# %bb.76:
	and	cl, ch
	mov	ebp, edx
	jne	LBB124_61
# %bb.77:
	mov	ebx, dword ptr [esp + 16]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	edi, esi
	pxor	xmm0, xmm0
	mov	esi, edx
	and	ebx, -16
	lea	ebp, [ebx + edx]
	mov	edx, eax
	mov	dword ptr [esp + 32], ebx       # 4-byte Spill
	.p2align	4, 0x90
LBB124_78:                              # =>This Inner Loop Header: Depth=1
	movdqu	xmm4, xmmword ptr [edi + esi]
	movdqu	xmm2, xmmword ptr [edx]
	movdqu	xmm1, xmmword ptr [edx + esi]
	add	edx, 16
	add	edi, 16
	movdqa	xmm3, xmm2
	movdqa	xmm5, xmm4
	punpcklbw	xmm2, xmm0              # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3],xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
	punpcklbw	xmm4, xmm0              # xmm4 = xmm4[0],xmm0[0],xmm4[1],xmm0[1],xmm4[2],xmm0[2],xmm4[3],xmm0[3],xmm4[4],xmm0[4],xmm4[5],xmm0[5],xmm4[6],xmm0[6],xmm4[7],xmm0[7]
	punpckhbw	xmm3, xmm0              # xmm3 = xmm3[8],xmm0[8],xmm3[9],xmm0[9],xmm3[10],xmm0[10],xmm3[11],xmm0[11],xmm3[12],xmm0[12],xmm3[13],xmm0[13],xmm3[14],xmm0[14],xmm3[15],xmm0[15]
	punpckhbw	xmm5, xmm0              # xmm5 = xmm5[8],xmm0[8],xmm5[9],xmm0[9],xmm5[10],xmm0[10],xmm5[11],xmm0[11],xmm5[12],xmm0[12],xmm5[13],xmm0[13],xmm5[14],xmm0[14],xmm5[15],xmm0[15]
	paddw	xmm4, xmm2
	paddw	xmm5, xmm3
	psrlw	xmm4, 1
	psrlw	xmm5, 1
	packuswb	xmm4, xmm5
	psubb	xmm1, xmm4
	movdqu	xmmword ptr [ecx + esi], xmm1
	add	ecx, 16
	add	ebx, -16
	jne	LBB124_78
# %bb.79:
	mov	ecx, dword ptr [esp + 32]       # 4-byte Reload
	mov	edx, esi
	mov	edi, dword ptr [esp + 404]
	mov	esi, dword ptr [esp + 400]
	cmp	dword ptr [esp + 16], ecx       # 4-byte Folded Reload
	jne	LBB124_61
	jmp	LBB124_118
LBB124_90:
	mov	edx, dword ptr [esp + 408]
	.p2align	4, 0x90
LBB124_91:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [eax + ebx]
	sub	cl, byte ptr [edi + ebx]
	mov	byte ptr [esi + ebx], cl
	inc	ebx
	cmp	edx, ebx
	jne	LBB124_91
LBB124_96:
	mov	ecx, ebp
	mov	dword ptr [esp + 92], ebp       # 4-byte Spill
	sub	ecx, edx
	jbe	LBB124_118
# %bb.97:
	mov	ebp, edi
	mov	edi, edx
	cmp	ecx, 15
	ja	LBB124_111
LBB124_98:
	sub	dword ptr [esp + 92], edx       # 4-byte Folded Spill
	neg	edi
	add	esi, edx
	add	ebp, edx
	add	eax, edx
	mov	dword ptr [esp + 48], edi       # 4-byte Spill
	.p2align	4, 0x90
LBB124_99:                              # =>This Inner Loop Header: Depth=1
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	mov	dword ptr [esp + 12], esi       # 4-byte Spill
	movzx	esi, byte ptr [ebp]
	movzx	edx, byte ptr [ebp + edi]
	mov	dword ptr [esp + 32], ebp       # 4-byte Spill
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebx, esi
	movzx	eax, byte ptr [eax + edi]
	sub	ebx, edx
	mov	edi, esi
	mov	ebp, ebx
	neg	ebp
	cmovl	ebp, ebx
	mov	ecx, eax
	sub	ecx, edx
	mov	ebx, ecx
	neg	ebx
	cmovl	ebx, ecx
	lea	ecx, [edx + edx]
	sub	edi, ecx
	add	edi, eax
	cmp	ebx, ebp
	mov	ecx, edi
	cmovge	ebx, ebp
	cmovl	eax, esi
	mov	ebp, dword ptr [esp + 32]       # 4-byte Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	neg	ecx
	cmovl	ecx, edi
	mov	edi, dword ptr [esp + 48]       # 4-byte Reload
	cmp	ecx, ebx
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	cmovl	eax, edx
	inc	ebp
	movzx	ecx, byte ptr [ecx]
	sub	cl, al
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	byte ptr [esi], cl
	inc	esi
	inc	eax
	dec	dword ptr [esp + 92]            # 4-byte Folded Spill
	jne	LBB124_99
	jmp	LBB124_118
LBB124_111:
	lea	edx, [esi + edi]
	lea	esi, [eax + ecx]
	mov	edi, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebx, dword ptr [esp + 404]
	mov	dword ptr [esp + 16], esi       # 4-byte Spill
	mov	esi, dword ptr [esp + 408]
	cmp	edx, dword ptr [esp + 16]       # 4-byte Folded Reload
	lea	edi, [edi + ebx]
	lea	esi, [eax + esi]
	mov	dword ptr [esp + 64], esi       # 4-byte Spill
	lea	esi, [eax + ebx]
	setb	byte ptr [esp + 16]             # 1-byte Folded Spill
	cmp	edi, eax
	mov	dword ptr [esp + 96], esi       # 4-byte Spill
	mov	esi, dword ptr [esp + 408]
	seta	byte ptr [esp + 48]             # 1-byte Folded Spill
	cmp	edx, dword ptr [esp + 96]       # 4-byte Folded Reload
	lea	ebx, [ebp + esi]
	mov	esi, dword ptr [esp + 404]
	setb	byte ptr [esp + 96]             # 1-byte Folded Spill
	cmp	dword ptr [esp + 64], edi       # 4-byte Folded Reload
	mov	dword ptr [esp + 32], ebx       # 4-byte Spill
	lea	ebx, [ebp + esi]
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	setb	byte ptr [esp + 64]             # 1-byte Folded Spill
	cmp	edx, ebx
	lea	ebx, [ebp + ecx]
	setb	byte ptr [esp + 128]            # 1-byte Folded Spill
	cmp	dword ptr [esp + 32], edi       # 4-byte Folded Reload
	setb	byte ptr [esp + 32]             # 1-byte Folded Spill
	cmp	edx, ebx
	mov	dl, byte ptr [esp + 48]         # 1-byte Reload
	setb	bl
	cmp	edi, ebp
	mov	edi, dword ptr [esp + 408]
	seta	bh
	test	byte ptr [esp + 16], dl         # 1-byte Folded Reload
	mov	edx, edi
	jne	LBB124_98
# %bb.112:
	mov	dl, byte ptr [esp + 64]         # 1-byte Reload
	and	byte ptr [esp + 96], dl         # 1-byte Folded Spill
	mov	edx, edi
	jne	LBB124_98
# %bb.113:
	mov	dl, byte ptr [esp + 32]         # 1-byte Reload
	and	byte ptr [esp + 128], dl        # 1-byte Folded Spill
	mov	edx, edi
	jne	LBB124_98
# %bb.114:
	and	bl, bh
	mov	edx, edi
	jne	LBB124_98
# %bb.115:
	mov	ebx, ecx
	and	ebx, -16
	lea	edx, [ebx + edi]
	mov	dword ptr [esp + 116], ebx      # 4-byte Spill
	mov	dword ptr [esp + 124], ebx      # 4-byte Spill
	mov	ebx, ebp
	mov	ebp, eax
	mov	dword ptr [esp + 120], edx      # 4-byte Spill
	mov	edx, ebx
	.p2align	4, 0x90
LBB124_116:                             # =>This Inner Loop Header: Depth=1
	movdqu	xmm1, xmmword ptr [ebx + edi]
	movdqu	xmm0, xmmword ptr [ebx]
	pxor	xmm7, xmm7
	add	ebx, 16
	movdqu	xmmword ptr [esp + 128], xmm1   # 16-byte Spill
	punpcklbw	xmm1, xmm7              # xmm1 = xmm1[0],xmm7[0],xmm1[1],xmm7[1],xmm1[2],xmm7[2],xmm1[3],xmm7[3],xmm1[4],xmm7[4],xmm1[5],xmm7[5],xmm1[6],xmm7[6],xmm1[7],xmm7[7]
	movdqa	xmm4, xmm0
	movdqu	xmmword ptr [esp + 352], xmm0   # 16-byte Spill
	movdqa	xmm3, xmm1
	punpckhwd	xmm1, xmm7              # xmm1 = xmm1[4],xmm7[4],xmm1[5],xmm7[5],xmm1[6],xmm7[6],xmm1[7],xmm7[7]
	punpckhbw	xmm4, xmm7              # xmm4 = xmm4[8],xmm7[8],xmm4[9],xmm7[9],xmm4[10],xmm7[10],xmm4[11],xmm7[11],xmm4[12],xmm7[12],xmm4[13],xmm7[13],xmm4[14],xmm7[14],xmm4[15],xmm7[15]
	movdqa	xmm5, xmm1
	movdqu	xmmword ptr [esp + 96], xmm1    # 16-byte Spill
	movdqa	xmm1, xmm0
	punpcklwd	xmm3, xmm7              # xmm3 = xmm3[0],xmm7[0],xmm3[1],xmm7[1],xmm3[2],xmm7[2],xmm3[3],xmm7[3]
	punpcklbw	xmm1, xmm7              # xmm1 = xmm1[0],xmm7[0],xmm1[1],xmm7[1],xmm1[2],xmm7[2],xmm1[3],xmm7[3],xmm1[4],xmm7[4],xmm1[5],xmm7[5],xmm1[6],xmm7[6],xmm1[7],xmm7[7]
	movdqu	xmmword ptr [esp + 48], xmm3    # 16-byte Spill
	movdqa	xmm0, xmm5
	movdqu	xmm5, xmmword ptr [ebp]
	movdqa	xmm2, xmm1
	punpckhwd	xmm1, xmm7              # xmm1 = xmm1[4],xmm7[4],xmm1[5],xmm7[5],xmm1[6],xmm7[6],xmm1[7],xmm7[7]
	punpcklwd	xmm2, xmm7              # xmm2 = xmm2[0],xmm7[0],xmm2[1],xmm7[1],xmm2[2],xmm7[2],xmm2[3],xmm7[3]
	movdqa	xmm6, xmm1
	psubd	xmm3, xmm2
	psubd	xmm0, xmm6
	movdqu	xmmword ptr [esp + 304], xmm2   # 16-byte Spill
	movdqa	xmm2, xmm4
	punpckhwd	xmm4, xmm7              # xmm4 = xmm4[4],xmm7[4],xmm4[5],xmm7[5],xmm4[6],xmm7[6],xmm4[7],xmm7[7]
	movdqu	xmmword ptr [esp + 240], xmm6   # 16-byte Spill
	movdqa	xmm1, xmm3
	punpcklwd	xmm2, xmm7              # xmm2 = xmm2[0],xmm7[0],xmm2[1],xmm7[1],xmm2[2],xmm7[2],xmm2[3],xmm7[3]
	movdqu	xmmword ptr [esp + 336], xmm5   # 16-byte Spill
	movdqu	xmmword ptr [esp + 224], xmm4   # 16-byte Spill
	psrad	xmm1, 31
	movdqu	xmmword ptr [esp + 32], xmm2    # 16-byte Spill
	paddd	xmm3, xmm1
	pxor	xmm3, xmm1
	movdqa	xmm1, xmm0
	psrad	xmm1, 31
	movdqu	xmmword ptr [esp + 208], xmm3   # 16-byte Spill
	paddd	xmm0, xmm1
	pxor	xmm0, xmm1
	movdqu	xmmword ptr [esp + 192], xmm0   # 16-byte Spill
	movdqu	xmm0, xmmword ptr [esp + 128]   # 16-byte Reload
	punpckhbw	xmm0, xmm7              # xmm0 = xmm0[8],xmm7[8],xmm0[9],xmm7[9],xmm0[10],xmm7[10],xmm0[11],xmm7[11],xmm0[12],xmm7[12],xmm0[13],xmm7[13],xmm0[14],xmm7[14],xmm0[15],xmm7[15]
	movdqa	xmm1, xmm0
	punpckhwd	xmm0, xmm7              # xmm0 = xmm0[4],xmm7[4],xmm0[5],xmm7[5],xmm0[6],xmm7[6],xmm0[7],xmm7[7]
	punpcklwd	xmm1, xmm7              # xmm1 = xmm1[0],xmm7[0],xmm1[1],xmm7[1],xmm1[2],xmm7[2],xmm1[3],xmm7[3]
	movdqu	xmmword ptr [esp + 64], xmm0    # 16-byte Spill
	movdqa	xmm3, xmm1
	movdqu	xmmword ptr [esp + 16], xmm1    # 16-byte Spill
	psubd	xmm3, xmm2
	movdqa	xmm2, xmm3
	psrad	xmm2, 31
	paddd	xmm3, xmm2
	pxor	xmm3, xmm2
	movdqu	xmmword ptr [esp + 160], xmm3   # 16-byte Spill
	movdqa	xmm3, xmm0
	psubd	xmm3, xmm4
	movdqa	xmm2, xmm3
	psrad	xmm2, 31
	paddd	xmm3, xmm2
	pxor	xmm3, xmm2
	movdqu	xmmword ptr [esp + 176], xmm3   # 16-byte Spill
	movdqa	xmm3, xmm5
	punpckhbw	xmm5, xmm7              # xmm5 = xmm5[8],xmm7[8],xmm5[9],xmm7[9],xmm5[10],xmm7[10],xmm5[11],xmm7[11],xmm5[12],xmm7[12],xmm5[13],xmm7[13],xmm5[14],xmm7[14],xmm5[15],xmm7[15]
	punpcklbw	xmm3, xmm7              # xmm3 = xmm3[0],xmm7[0],xmm3[1],xmm7[1],xmm3[2],xmm7[2],xmm3[3],xmm7[3],xmm3[4],xmm7[4],xmm3[5],xmm7[5],xmm3[6],xmm7[6],xmm3[7],xmm7[7]
	movdqa	xmm0, xmm3
	punpckhwd	xmm3, xmm7              # xmm3 = xmm3[4],xmm7[4],xmm3[5],xmm7[5],xmm3[6],xmm7[6],xmm3[7],xmm7[7]
	punpcklwd	xmm0, xmm7              # xmm0 = xmm0[0],xmm7[0],xmm0[1],xmm7[1],xmm0[2],xmm7[2],xmm0[3],xmm7[3]
	movdqu	xmmword ptr [esp + 288], xmm3   # 16-byte Spill
	psubd	xmm3, xmm6
	movdqa	xmm1, xmm0
	movdqu	xmmword ptr [esp + 144], xmm0   # 16-byte Spill
	movdqu	xmm0, xmmword ptr [esp + 304]   # 16-byte Reload
	psubd	xmm1, xmm0
	movdqa	xmm2, xmm1
	psrad	xmm2, 31
	paddd	xmm1, xmm2
	pxor	xmm1, xmm2
	movdqa	xmm2, xmm3
	movdqu	xmmword ptr [esp + 320], xmm1   # 16-byte Spill
	psrad	xmm2, 31
	movdqu	xmm1, xmmword ptr [esp + 32]    # 16-byte Reload
	paddd	xmm3, xmm2
	pxor	xmm3, xmm2
	movdqa	xmm2, xmm5
	punpckhwd	xmm5, xmm7              # xmm5 = xmm5[4],xmm7[4],xmm5[5],xmm7[5],xmm5[6],xmm7[6],xmm5[7],xmm7[7]
	punpcklwd	xmm2, xmm7              # xmm2 = xmm2[0],xmm7[0],xmm2[1],xmm7[1],xmm2[2],xmm7[2],xmm2[3],xmm7[3]
	movdqa	xmm7, xmm5
	movdqu	xmmword ptr [esp + 256], xmm2   # 16-byte Spill
	psubd	xmm2, xmm1
	psubd	xmm7, xmm4
	movdqu	xmm1, xmmword ptr [esp + 240]   # 16-byte Reload
	movdqa	xmm6, xmm2
	psrad	xmm6, 31
	paddd	xmm2, xmm6
	pxor	xmm2, xmm6
	movdqa	xmm6, xmm7
	paddd	xmm1, xmm1
	psrad	xmm6, 31
	paddd	xmm7, xmm6
	pxor	xmm7, xmm6
	movdqa	xmm6, xmm0
	paddd	xmm6, xmm0
	movdqu	xmm0, xmmword ptr [esp + 48]    # 16-byte Reload
	movdqu	xmmword ptr [esp + 272], xmm7   # 16-byte Spill
	psubd	xmm0, xmm6
	movdqu	xmm6, xmmword ptr [esp + 96]    # 16-byte Reload
	psubd	xmm6, xmm1
	movdqu	xmm1, xmmword ptr [esp + 32]    # 16-byte Reload
	paddd	xmm1, xmm1
	movdqu	xmmword ptr [esp + 32], xmm1    # 16-byte Spill
	movdqu	xmm1, xmmword ptr [esp + 16]    # 16-byte Reload
	movdqu	xmm4, xmmword ptr [esp + 32]    # 16-byte Reload
	psubd	xmm1, xmm4
	movdqu	xmm4, xmmword ptr [esp + 224]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 16], xmm1    # 16-byte Spill
	movdqu	xmm1, xmmword ptr [esp + 64]    # 16-byte Reload
	paddd	xmm4, xmm4
	psubd	xmm1, xmm4
	movdqu	xmm4, xmmword ptr [esp + 256]   # 16-byte Reload
	paddd	xmm1, xmm5
	movdqu	xmm5, xmmword ptr [esp + 192]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 64], xmm1    # 16-byte Spill
	movdqu	xmm1, xmmword ptr [esp + 16]    # 16-byte Reload
	pcmpgtd	xmm5, xmm3
	paddd	xmm1, xmm4
	movdqu	xmm4, xmmword ptr [esp + 208]   # 16-byte Reload
	pand	xmm3, xmm5
	movdqu	xmmword ptr [esp + 16], xmm1    # 16-byte Spill
	movdqu	xmm1, xmmword ptr [esp + 288]   # 16-byte Reload
	paddd	xmm6, xmm1
	movdqu	xmm1, xmmword ptr [esp + 144]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 96], xmm6    # 16-byte Spill
	paddd	xmm0, xmm1
	movdqu	xmm1, xmmword ptr [esp + 320]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 48], xmm0    # 16-byte Spill
	movdqu	xmm0, xmmword ptr [esp + 176]   # 16-byte Reload
	pcmpgtd	xmm4, xmm1
	pcmpgtd	xmm0, xmm7
	movdqu	xmm7, xmmword ptr [esp + 160]   # 16-byte Reload
	pand	xmm1, xmm4
	movdqu	xmmword ptr [esp + 32], xmm0    # 16-byte Spill
	pcmpgtd	xmm7, xmm2
	movdqa	xmm6, xmm7
	pand	xmm2, xmm7
	packssdw	xmm6, xmm0
	movdqa	xmm0, xmm4
	packssdw	xmm0, xmm5
	packsswb	xmm0, xmm6
	movdqu	xmm6, xmmword ptr [esp + 208]   # 16-byte Reload
	movdqu	xmmword ptr [esp + 144], xmm0   # 16-byte Spill
	movdqu	xmm0, xmmword ptr [esp + 272]   # 16-byte Reload
	pandn	xmm4, xmm6
	movdqu	xmm6, xmmword ptr [esp + 192]   # 16-byte Reload
	por	xmm4, xmm1
	movdqu	xmm1, xmmword ptr [esp + 32]    # 16-byte Reload
	pandn	xmm5, xmm6
	movdqu	xmm6, xmmword ptr [esp + 144]   # 16-byte Reload
	por	xmm5, xmm3
	movdqu	xmm3, xmmword ptr [esp + 160]   # 16-byte Reload
	pand	xmm0, xmm1
	pandn	xmm7, xmm3
	movdqu	xmm3, xmmword ptr [esp + 336]   # 16-byte Reload
	por	xmm7, xmm2
	movdqu	xmm2, xmmword ptr [esp + 176]   # 16-byte Reload
	pandn	xmm1, xmm2
	movdqu	xmm2, xmmword ptr [esp + 128]   # 16-byte Reload
	por	xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqu	xmm1, xmmword ptr [esp + 96]    # 16-byte Reload
	pand	xmm2, xmm6
	pandn	xmm6, xmm3
	movdqu	xmm3, xmmword ptr [esp + 48]    # 16-byte Reload
	por	xmm6, xmm2
	movdqa	xmm2, xmm3
	psrad	xmm2, 31
	paddd	xmm3, xmm2
	pxor	xmm3, xmm2
	movdqa	xmm2, xmm1
	psrad	xmm2, 31
	pcmpgtd	xmm4, xmm3
	paddd	xmm1, xmm2
	pxor	xmm1, xmm2
	movdqu	xmm2, xmmword ptr [esp + 16]    # 16-byte Reload
	pcmpgtd	xmm5, xmm1
	packssdw	xmm4, xmm5
	movdqa	xmm1, xmm2
	psrad	xmm1, 31
	paddd	xmm2, xmm1
	pxor	xmm2, xmm1
	pcmpgtd	xmm7, xmm2
	movdqu	xmm2, xmmword ptr [esp + 64]    # 16-byte Reload
	movdqa	xmm1, xmm2
	psrad	xmm1, 31
	paddd	xmm2, xmm1
	pxor	xmm2, xmm1
	pcmpgtd	xmm0, xmm2
	movdqu	xmm2, xmmword ptr [esp + 352]   # 16-byte Reload
	packssdw	xmm7, xmm0
	movdqu	xmm0, xmmword ptr [ebp + edi]
	add	ebp, 16
	packsswb	xmm4, xmm7
	pand	xmm2, xmm4
	pandn	xmm4, xmm6
	por	xmm4, xmm2
	psubb	xmm0, xmm4
	movdqu	xmmword ptr [esi + edi], xmm0
	add	esi, 16
	add	dword ptr [esp + 124], -16      # 4-byte Folded Spill
	jne	LBB124_116
# %bb.117:
	mov	ebp, edx
	cmp	ecx, dword ptr [esp + 116]      # 4-byte Folded Reload
	mov	esi, dword ptr [esp + 12]       # 4-byte Reload
	mov	edx, dword ptr [esp + 120]      # 4-byte Reload
	jne	LBB124_98
	jmp	LBB124_118
LBB124_34:
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	mov	edi, dword ptr [esp + 404]
	mov	ebx, dword ptr [esp + 400]
	.p2align	4, 0x90
LBB124_39:                              # =>This Inner Loop Header: Depth=1
	movzx	ecx, byte ptr [eax + esi]
	sub	cl, byte ptr [ebx + esi]
	mov	byte ptr [edx + esi], cl
	inc	esi
	cmp	edi, esi
	jne	LBB124_39
LBB124_118:
	add	esp, 380
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.section	.rdata,"dr"
	.p2align	2
LJTI124_0:
	.long	LBB124_13
	.long	LBB124_2
	.long	LBB124_28
	.long	LBB124_49
	.long	LBB124_86
                                        # -- End function
	.def	 "??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
	.globl	"??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z" # -- Begin function ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	.p2align	4, 0x90
"??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z": # @"??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
Lfunc_begin3:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 24
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	test	edi, edi
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	js	LBB125_16
# %bb.1:
	mov	edx, dword ptr [ecx]
	mov	eax, dword ptr [ecx + 8]
	mov	esi, dword ptr [ecx + 4]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	sub	eax, edx
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	ebx, eax
	shr	ebx
	mov	edx, ebx
	add	ebx, eax
	xor	edx, 2147483647
	cmp	ebx, edi
	cmovb	ebx, edi
	cmp	eax, edx
	cmova	ebx, edi
	cmp	ebx, 4096
	jb	LBB125_4
# %bb.2:
	cmp	ebx, -35
	jae	LBB125_17
# %bb.3:
	lea	eax, [ebx + 35]
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
	jmp	LBB125_7
LBB125_4:
	test	ebx, ebx
	je	LBB125_5
# %bb.6:
	push	ebx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edi, eax
	jmp	LBB125_7
LBB125_5:
	xor	edi, edi
LBB125_7:
	sub	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	mov	ecx, dword ptr [ebp + 8]
	sub	ecx, esi
	lea	eax, [edi + esi]
	push	ecx
	push	0
	push	eax
	call	_memset
	add	esp, 12
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [esi + 4]
	sub	ecx, eax
	push	ecx
	push	eax
	push	edi
	call	_memmove
	add	esp, 12
	mov	ecx, dword ptr [esi]
	test	ecx, ecx
	je	LBB125_15
# %bb.8:
	mov	eax, dword ptr [esi + 8]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB125_14
# %bb.9:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB125_10
# %bb.13:
	add	eax, 35
	mov	ecx, edx
LBB125_14:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB125_15:
	mov	eax, dword ptr [ebp + 8]
	add	ebx, edi
	mov	dword ptr [esi], edi
	add	eax, edi
	mov	dword ptr [esi + 4], eax
	mov	dword ptr [esi + 8], ebx
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 24
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
LBB125_16:
	call	"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
LBB125_17:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB125_10:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.11:
	.def	 "?dtor$12@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z@4HA":
LBB125_12:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end3:
	.section	.xdata,"dr",associative,"??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
	.p2align	2
"L__ehtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
                                        # -- End function
	.def	 "?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
	.globl	"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
	.p2align	4, 0x90
"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ": # @"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
# %bb.0:
	push	offset "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "?_Throw_bad_array_new_length@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Throw_bad_array_new_length@std@@YAXXZ"
	.globl	"?_Throw_bad_array_new_length@std@@YAXXZ" # -- Begin function ?_Throw_bad_array_new_length@std@@YAXXZ
	.p2align	4, 0x90
"?_Throw_bad_array_new_length@std@@YAXXZ": # @"?_Throw_bad_array_new_length@std@@YAXXZ"
# %bb.0:
	sub	esp, 12
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 4], offset "??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
	mov	dword ptr [esp], offset "??_7bad_array_new_length@std@@6B@"
	mov	eax, esp
	push	offset "__TI3?AVbad_array_new_length@std@@"
	push	eax
	call	__CxxThrowException@8
                                        # -- End function
	.def	 "??0bad_array_new_length@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.globl	"??0bad_array_new_length@std@@QAE@ABV01@@Z" # -- Begin function ??0bad_array_new_length@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0bad_array_new_length@std@@QAE@ABV01@@Z": # @"??0bad_array_new_length@std@@QAE@ABV01@@Z"
Lfunc_begin4:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7bad_array_new_length@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA":
LBB128_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end4:
	.section	.xdata,"dr",associative,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0bad_array_new_length@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0bad_array_new_length@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0bad_array_new_length@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0bad_alloc@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.globl	"??0bad_alloc@std@@QAE@ABV01@@Z" # -- Begin function ??0bad_alloc@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0bad_alloc@std@@QAE@ABV01@@Z":       # @"??0bad_alloc@std@@QAE@ABV01@@Z"
Lfunc_begin5:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7bad_alloc@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA":
LBB129_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end5:
	.section	.xdata,"dr",associative,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0bad_alloc@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0bad_alloc@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0bad_alloc@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0bad_alloc@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0exception@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QAE@ABV01@@Z"
	.globl	"??0exception@std@@QAE@ABV01@@Z" # -- Begin function ??0exception@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0exception@std@@QAE@ABV01@@Z":       # @"??0exception@std@@QAE@ABV01@@Z"
Lfunc_begin6:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA":
LBB130_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end6:
	.section	.xdata,"dr",associative,"??0exception@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0exception@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0exception@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0exception@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0exception@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??1exception@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1exception@std@@UAE@XZ"
	.globl	"??1exception@std@@UAE@XZ"      # -- Begin function ??1exception@std@@UAE@XZ
	.p2align	4, 0x90
"??1exception@std@@UAE@XZ":             # @"??1exception@std@@UAE@XZ"
Lfunc_begin7:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1exception@std@@UAE@XZ"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	add	ecx, 4
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$2@?0???1exception@std@@UAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???1exception@std@@UAE@XZ@4HA":
LBB131_2:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end7:
	.section	.xdata,"dr",associative,"??1exception@std@@UAE@XZ"
	.p2align	2
"L__ehtable$??1exception@std@@UAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1exception@std@@UAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1exception@std@@UAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???1exception@std@@UAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1exception@std@@UAE@XZ"
                                        # -- End function
	.def	 "??_Gbad_array_new_length@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.globl	"??_Gbad_array_new_length@std@@UAEPAXI@Z" # -- Begin function ??_Gbad_array_new_length@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gbad_array_new_length@std@@UAEPAXI@Z": # @"??_Gbad_array_new_length@std@@UAEPAXI@Z"
Lfunc_begin8:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB132_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB132_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA":
LBB132_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end8:
	.section	.xdata,"dr",associative,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gbad_array_new_length@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gbad_array_new_length@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gbad_array_new_length@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "?what@exception@std@@UBEPBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@exception@std@@UBEPBDXZ"
	.globl	"?what@exception@std@@UBEPBDXZ" # -- Begin function ?what@exception@std@@UBEPBDXZ
	.p2align	4, 0x90
"?what@exception@std@@UBEPBDXZ":        # @"?what@exception@std@@UBEPBDXZ"
# %bb.0:
	mov	ecx, dword ptr [ecx + 4]
	mov	eax, offset "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	test	ecx, ecx
	cmovne	eax, ecx
	ret
                                        # -- End function
	.def	 "??_Gbad_alloc@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.globl	"??_Gbad_alloc@std@@UAEPAXI@Z"  # -- Begin function ??_Gbad_alloc@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gbad_alloc@std@@UAEPAXI@Z":         # @"??_Gbad_alloc@std@@UAEPAXI@Z"
Lfunc_begin9:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB134_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB134_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA":
LBB134_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end9:
	.section	.xdata,"dr",associative,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gbad_alloc@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gbad_alloc@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gbad_alloc@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??_Gexception@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gexception@std@@UAEPAXI@Z"
	.globl	"??_Gexception@std@@UAEPAXI@Z"  # -- Begin function ??_Gexception@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gexception@std@@UAEPAXI@Z":         # @"??_Gexception@std@@UAEPAXI@Z"
Lfunc_begin10:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB135_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB135_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA":
LBB135_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end10:
	.section	.xdata,"dr",associative,"??_Gexception@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gexception@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gexception@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gexception@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gexception@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	.globl	"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z" # -- Begin function ??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z
	.p2align	4, 0x90
"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z": # @"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
Lfunc_begin11:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 44
	mov	ebx, dword ptr [ebp + 16]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	sub	ebx, dword ptr [ebp + 12]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	je	LBB136_26
# %bb.1:
	mov	eax, dword ptr [ecx + 8]
	mov	edi, dword ptr [ecx + 4]
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	edx, eax
	sub	edx, edi
	cmp	ebx, edx
	mov	edx, dword ptr [ebp + 8]
	jbe	LBB136_22
# %bb.2:
	mov	edx, dword ptr [ecx]
	mov	esi, edi
	mov	ecx, 2147483647
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	sub	esi, edx
	mov	edi, edx
	sub	ecx, esi
	cmp	ebx, ecx
	ja	LBB136_27
# %bb.3:
	sub	eax, edi
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 52], esi       # 4-byte Spill
	add	esi, ebx
	mov	edi, eax
	mov	dword ptr [ebp - 56], esi       # 4-byte Spill
	shr	edi
	mov	edx, edi
	add	edi, eax
	xor	edx, 2147483647
	cmp	edi, esi
	cmovb	edi, esi
	cmp	eax, edx
	cmova	edi, esi
	cmp	edi, 4096
	jb	LBB136_6
# %bb.4:
	cmp	edi, -35
	jae	LBB136_28
# %bb.5:
	lea	eax, [edi + 35]
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
	jmp	LBB136_9
LBB136_22:
	mov	esi, edi
	sub	esi, edx
	cmp	ebx, esi
	jae	LBB136_24
# %bb.23:
	mov	esi, edi
	sub	esi, ebx
	push	ebx
	push	esi
	push	edi
	call	_memmove
	add	esp, 12
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	lea	eax, [edi + ebx]
	mov	dword ptr [ecx + 4], eax
	mov	eax, dword ptr [ebp + 8]
	sub	esi, eax
	sub	edi, esi
	push	esi
	push	eax
	mov	esi, eax
	push	edi
	call	_memmove
	add	esp, 12
	push	ebx
	push	dword ptr [ebp + 12]
	push	esi
	jmp	LBB136_25
LBB136_24:
	lea	edi, [edx + ebx]
	push	esi
	push	edx
	push	edi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	edi, esi
	mov	dword ptr [eax + 4], edi
	push	ebx
	push	dword ptr [ebp + 12]
	push	dword ptr [ebp + 8]
LBB136_25:
	call	_memmove
	add	esp, 12
	jmp	LBB136_26
LBB136_6:
	test	edi, edi
	je	LBB136_7
# %bb.8:
	push	edi
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
	jmp	LBB136_9
LBB136_7:
	xor	ecx, ecx
LBB136_9:
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	sub	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	lea	eax, [ecx + esi]
	push	ebx
	push	dword ptr [ebp + 12]
	mov	dword ptr [ebp - 48], eax       # 4-byte Spill
	push	eax
	call	_memmove
	add	esp, 12
	cmp	ebx, 1
	jne	LBB136_12
# %bb.10:
	mov	eax, dword ptr [ebp + 8]
	cmp	dword ptr [ebp - 44], eax       # 4-byte Folded Reload
	jne	LBB136_12
# %bb.11:
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	jmp	LBB136_13
LBB136_12:
	mov	eax, dword ptr [ebp - 48]       # 4-byte Reload
	add	eax, ebx
	mov	ebx, eax
	push	esi
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	sub	eax, ecx
	push	eax
	push	ecx
	push	ebx
LBB136_13:
	call	_memmove
	add	esp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [esi]
	test	ecx, ecx
	je	LBB136_21
# %bb.14:
	mov	eax, dword ptr [esi + 8]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB136_20
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB136_16
# %bb.19:
	add	eax, 35
	mov	ecx, edx
LBB136_20:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB136_21:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	add	eax, ecx
	add	edi, ecx
	mov	dword ptr [esi], ecx
	mov	dword ptr [esi + 4], eax
	mov	dword ptr [esi + 8], edi
LBB136_26:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 44
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	16
LBB136_27:
	call	"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
LBB136_28:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB136_16:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.17:
	.def	 "?dtor$18@?0???$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0???$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z@4HA":
LBB136_18:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end11:
	.section	.xdata,"dr",associative,"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	.p2align	2
"L__ehtable$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0???$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
                                        # -- End function
	.def	 "___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z
"___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z": # @"__ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z
"___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z": # @"__ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z
"___ehhandler$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z": # @"__ehhandler$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
"___ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z": # @"__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
"___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z": # @"__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
"___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z": # @"__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0bad_alloc@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0exception@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0exception@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0exception@std@@QAE@ABV01@@Z
"___ehhandler$??0exception@std@@QAE@ABV01@@Z": # @"__ehhandler$??0exception@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0exception@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1exception@std@@UAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1exception@std@@UAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1exception@std@@UAE@XZ
"___ehhandler$??1exception@std@@UAE@XZ": # @"__ehhandler$??1exception@std@@UAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1exception@std@@UAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z
"___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z": # @"__ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z
"___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z": # @"__ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gbad_alloc@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gexception@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gexception@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gexception@std@@UAEPAXI@Z
"___ehhandler$??_Gexception@std@@UAEPAXI@Z": # @"__ehhandler$??_Gexception@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gexception@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z
"___ehhandler$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z": # @"__ehhandler$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.section	.rdata,"dr",discard,"??_C@_08HOLOKFKK@20201017?$AA@"
	.globl	"??_C@_08HOLOKFKK@20201017?$AA@" # @"??_C@_08HOLOKFKK@20201017?$AA@"
"??_C@_08HOLOKFKK@20201017?$AA@":
	.asciz	"20201017"

	.data
	.globl	"?LODEPNG_VERSION_STRING@@3PBDB" # @"?LODEPNG_VERSION_STRING@@3PBDB"
	.p2align	2
"?LODEPNG_VERSION_STRING@@3PBDB":
	.long	"??_C@_08HOLOKFKK@20201017?$AA@"

	.section	.rdata,"dr",discard,"??_C@_02GMLFBBN@wb?$AA@"
	.globl	"??_C@_02GMLFBBN@wb?$AA@"       # @"??_C@_02GMLFBBN@wb?$AA@"
"??_C@_02GMLFBBN@wb?$AA@":
	.asciz	"wb"

	.section	.rdata,"dr"
	.globl	"?lodepng_default_compress_settings@@3ULodePNGCompressSettings@@B" # @"?lodepng_default_compress_settings@@3ULodePNGCompressSettings@@B"
	.p2align	2
"?lodepng_default_compress_settings@@3ULodePNGCompressSettings@@B":
	.long	2                               # 0x2
	.long	1                               # 0x1
	.long	2048                            # 0x800
	.long	3                               # 0x3
	.long	128                             # 0x80
	.long	1                               # 0x1
	.long	0
	.long	0
	.long	0

	.globl	"?lodepng_default_decompress_settings@@3ULodePNGDecompressSettings@@B" # @"?lodepng_default_decompress_settings@@3ULodePNGDecompressSettings@@B"
	.p2align	2
"?lodepng_default_decompress_settings@@3ULodePNGDecompressSettings@@B":
	.zero	24

	.p2align	2                               # @lodepng_crc32_table
_lodepng_crc32_table:
	.long	0                               # 0x0
	.long	1996959894                      # 0x77073096
	.long	3993919788                      # 0xee0e612c
	.long	2567524794                      # 0x990951ba
	.long	124634137                       # 0x76dc419
	.long	1886057615                      # 0x706af48f
	.long	3915621685                      # 0xe963a535
	.long	2657392035                      # 0x9e6495a3
	.long	249268274                       # 0xedb8832
	.long	2044508324                      # 0x79dcb8a4
	.long	3772115230                      # 0xe0d5e91e
	.long	2547177864                      # 0x97d2d988
	.long	162941995                       # 0x9b64c2b
	.long	2125561021                      # 0x7eb17cbd
	.long	3887607047                      # 0xe7b82d07
	.long	2428444049                      # 0x90bf1d91
	.long	498536548                       # 0x1db71064
	.long	1789927666                      # 0x6ab020f2
	.long	4089016648                      # 0xf3b97148
	.long	2227061214                      # 0x84be41de
	.long	450548861                       # 0x1adad47d
	.long	1843258603                      # 0x6ddde4eb
	.long	4107580753                      # 0xf4d4b551
	.long	2211677639                      # 0x83d385c7
	.long	325883990                       # 0x136c9856
	.long	1684777152                      # 0x646ba8c0
	.long	4251122042                      # 0xfd62f97a
	.long	2321926636                      # 0x8a65c9ec
	.long	335633487                       # 0x14015c4f
	.long	1661365465                      # 0x63066cd9
	.long	4195302755                      # 0xfa0f3d63
	.long	2366115317                      # 0x8d080df5
	.long	997073096                       # 0x3b6e20c8
	.long	1281953886                      # 0x4c69105e
	.long	3579855332                      # 0xd56041e4
	.long	2724688242                      # 0xa2677172
	.long	1006888145                      # 0x3c03e4d1
	.long	1258607687                      # 0x4b04d447
	.long	3524101629                      # 0xd20d85fd
	.long	2768942443                      # 0xa50ab56b
	.long	901097722                       # 0x35b5a8fa
	.long	1119000684                      # 0x42b2986c
	.long	3686517206                      # 0xdbbbc9d6
	.long	2898065728                      # 0xacbcf940
	.long	853044451                       # 0x32d86ce3
	.long	1172266101                      # 0x45df5c75
	.long	3705015759                      # 0xdcd60dcf
	.long	2882616665                      # 0xabd13d59
	.long	651767980                       # 0x26d930ac
	.long	1373503546                      # 0x51de003a
	.long	3369554304                      # 0xc8d75180
	.long	3218104598                      # 0xbfd06116
	.long	565507253                       # 0x21b4f4b5
	.long	1454621731                      # 0x56b3c423
	.long	3485111705                      # 0xcfba9599
	.long	3099436303                      # 0xb8bda50f
	.long	671266974                       # 0x2802b89e
	.long	1594198024                      # 0x5f058808
	.long	3322730930                      # 0xc60cd9b2
	.long	2970347812                      # 0xb10be924
	.long	795835527                       # 0x2f6f7c87
	.long	1483230225                      # 0x58684c11
	.long	3244367275                      # 0xc1611dab
	.long	3060149565                      # 0xb6662d3d
	.long	1994146192                      # 0x76dc4190
	.long	31158534                        # 0x1db7106
	.long	2563907772                      # 0x98d220bc
	.long	4023717930                      # 0xefd5102a
	.long	1907459465                      # 0x71b18589
	.long	112637215                       # 0x6b6b51f
	.long	2680153253                      # 0x9fbfe4a5
	.long	3904427059                      # 0xe8b8d433
	.long	2013776290                      # 0x7807c9a2
	.long	251722036                       # 0xf00f934
	.long	2517215374                      # 0x9609a88e
	.long	3775830040                      # 0xe10e9818
	.long	2137656763                      # 0x7f6a0dbb
	.long	141376813                       # 0x86d3d2d
	.long	2439277719                      # 0x91646c97
	.long	3865271297                      # 0xe6635c01
	.long	1802195444                      # 0x6b6b51f4
	.long	476864866                       # 0x1c6c6162
	.long	2238001368                      # 0x856530d8
	.long	4066508878                      # 0xf262004e
	.long	1812370925                      # 0x6c0695ed
	.long	453092731                       # 0x1b01a57b
	.long	2181625025                      # 0x8208f4c1
	.long	4111451223                      # 0xf50fc457
	.long	1706088902                      # 0x65b0d9c6
	.long	314042704                       # 0x12b7e950
	.long	2344532202                      # 0x8bbeb8ea
	.long	4240017532                      # 0xfcb9887c
	.long	1658658271                      # 0x62dd1ddf
	.long	366619977                       # 0x15da2d49
	.long	2362670323                      # 0x8cd37cf3
	.long	4224994405                      # 0xfbd44c65
	.long	1303535960                      # 0x4db26158
	.long	984961486                       # 0x3ab551ce
	.long	2747007092                      # 0xa3bc0074
	.long	3569037538                      # 0xd4bb30e2
	.long	1256170817                      # 0x4adfa541
	.long	1037604311                      # 0x3dd895d7
	.long	2765210733                      # 0xa4d1c46d
	.long	3554079995                      # 0xd3d6f4fb
	.long	1131014506                      # 0x4369e96a
	.long	879679996                       # 0x346ed9fc
	.long	2909243462                      # 0xad678846
	.long	3663771856                      # 0xda60b8d0
	.long	1141124467                      # 0x44042d73
	.long	855842277                       # 0x33031de5
	.long	2852801631                      # 0xaa0a4c5f
	.long	3708648649                      # 0xdd0d7cc9
	.long	1342533948                      # 0x5005713c
	.long	654459306                       # 0x270241aa
	.long	3188396048                      # 0xbe0b1010
	.long	3373015174                      # 0xc90c2086
	.long	1466479909                      # 0x5768b525
	.long	544179635                       # 0x206f85b3
	.long	3110523913                      # 0xb966d409
	.long	3462522015                      # 0xce61e49f
	.long	1591671054                      # 0x5edef90e
	.long	702138776                       # 0x29d9c998
	.long	2966460450                      # 0xb0d09822
	.long	3352799412                      # 0xc7d7a8b4
	.long	1504918807                      # 0x59b33d17
	.long	783551873                       # 0x2eb40d81
	.long	3082640443                      # 0xb7bd5c3b
	.long	3233442989                      # 0xc0ba6cad
	.long	3988292384                      # 0xedb88320
	.long	2596254646                      # 0x9abfb3b6
	.long	62317068                        # 0x3b6e20c
	.long	1957810842                      # 0x74b1d29a
	.long	3939845945                      # 0xead54739
	.long	2647816111                      # 0x9dd277af
	.long	81470997                        # 0x4db2615
	.long	1943803523                      # 0x73dc1683
	.long	3814918930                      # 0xe3630b12
	.long	2489596804                      # 0x94643b84
	.long	225274430                       # 0xd6d6a3e
	.long	2053790376                      # 0x7a6a5aa8
	.long	3826175755                      # 0xe40ecf0b
	.long	2466906013                      # 0x9309ff9d
	.long	167816743                       # 0xa00ae27
	.long	2097651377                      # 0x7d079eb1
	.long	4027552580                      # 0xf00f9344
	.long	2265490386                      # 0x8708a3d2
	.long	503444072                       # 0x1e01f268
	.long	1762050814                      # 0x6906c2fe
	.long	4150417245                      # 0xf762575d
	.long	2154129355                      # 0x806567cb
	.long	426522225                       # 0x196c3671
	.long	1852507879                      # 0x6e6b06e7
	.long	4275313526                      # 0xfed41b76
	.long	2312317920                      # 0x89d32be0
	.long	282753626                       # 0x10da7a5a
	.long	1742555852                      # 0x67dd4acc
	.long	4189708143                      # 0xf9b9df6f
	.long	2394877945                      # 0x8ebeeff9
	.long	397917763                       # 0x17b7be43
	.long	1622183637                      # 0x60b08ed5
	.long	3604390888                      # 0xd6d6a3e8
	.long	2714866558                      # 0xa1d1937e
	.long	953729732                       # 0x38d8c2c4
	.long	1340076626                      # 0x4fdff252
	.long	3518719985                      # 0xd1bb67f1
	.long	2797360999                      # 0xa6bc5767
	.long	1068828381                      # 0x3fb506dd
	.long	1219638859                      # 0x48b2364b
	.long	3624741850                      # 0xd80d2bda
	.long	2936675148                      # 0xaf0a1b4c
	.long	906185462                       # 0x36034af6
	.long	1090812512                      # 0x41047a60
	.long	3747672003                      # 0xdf60efc3
	.long	2825379669                      # 0xa867df55
	.long	829329135                       # 0x316e8eef
	.long	1181335161                      # 0x4669be79
	.long	3412177804                      # 0xcb61b38c
	.long	3160834842                      # 0xbc66831a
	.long	628085408                       # 0x256fd2a0
	.long	1382605366                      # 0x5268e236
	.long	3423369109                      # 0xcc0c7795
	.long	3138078467                      # 0xbb0b4703
	.long	570562233                       # 0x220216b9
	.long	1426400815                      # 0x5505262f
	.long	3317316542                      # 0xc5ba3bbe
	.long	2998733608                      # 0xb2bd0b28
	.long	733239954                       # 0x2bb45a92
	.long	1555261956                      # 0x5cb36a04
	.long	3268935591                      # 0xc2d7ffa7
	.long	3050360625                      # 0xb5d0cf31
	.long	752459403                       # 0x2cd99e8b
	.long	1541320221                      # 0x5bdeae1d
	.long	2607071920                      # 0x9b64c2b0
	.long	3965973030                      # 0xec63f226
	.long	1969922972                      # 0x756aa39c
	.long	40735498                        # 0x26d930a
	.long	2617837225                      # 0x9c0906a9
	.long	3943577151                      # 0xeb0e363f
	.long	1913087877                      # 0x72076785
	.long	83908371                        # 0x5005713
	.long	2512341634                      # 0x95bf4a82
	.long	3803740692                      # 0xe2b87a14
	.long	2075208622                      # 0x7bb12bae
	.long	213261112                       # 0xcb61b38
	.long	2463272603                      # 0x92d28e9b
	.long	3855990285                      # 0xe5d5be0d
	.long	2094854071                      # 0x7cdcefb7
	.long	198958881                       # 0xbdbdf21
	.long	2262029012                      # 0x86d3d2d4
	.long	4057260610                      # 0xf1d4e242
	.long	1759359992                      # 0x68ddb3f8
	.long	534414190                       # 0x1fda836e
	.long	2176718541                      # 0x81be16cd
	.long	4139329115                      # 0xf6b9265b
	.long	1873836001                      # 0x6fb077e1
	.long	414664567                       # 0x18b74777
	.long	2282248934                      # 0x88085ae6
	.long	4279200368                      # 0xff0f6a70
	.long	1711684554                      # 0x66063bca
	.long	285281116                       # 0x11010b5c
	.long	2405801727                      # 0x8f659eff
	.long	4167216745                      # 0xf862ae69
	.long	1634467795                      # 0x616bffd3
	.long	376229701                       # 0x166ccf45
	.long	2685067896                      # 0xa00ae278
	.long	3608007406                      # 0xd70dd2ee
	.long	1308918612                      # 0x4e048354
	.long	956543938                       # 0x3903b3c2
	.long	2808555105                      # 0xa7672661
	.long	3495958263                      # 0xd06016f7
	.long	1231636301                      # 0x4969474d
	.long	1047427035                      # 0x3e6e77db
	.long	2932959818                      # 0xaed16a4a
	.long	3654703836                      # 0xd9d65adc
	.long	1088359270                      # 0x40df0b66
	.long	936918000                       # 0x37d83bf0
	.long	2847714899                      # 0xa9bcae53
	.long	3736837829                      # 0xdebb9ec5
	.long	1202900863                      # 0x47b2cf7f
	.long	817233897                       # 0x30b5ffe9
	.long	3183342108                      # 0xbdbdf21c
	.long	3401237130                      # 0xcabac28a
	.long	1404277552                      # 0x53b39330
	.long	615818150                       # 0x24b4a3a6
	.long	3134207493                      # 0xbad03605
	.long	3453421203                      # 0xcdd70693
	.long	1423857449                      # 0x54de5729
	.long	601450431                       # 0x23d967bf
	.long	3009837614                      # 0xb3667a2e
	.long	3294710456                      # 0xc4614ab8
	.long	1567103746                      # 0x5d681b02
	.long	711928724                       # 0x2a6f2b94
	.long	3020668471                      # 0xb40bbe37
	.long	3272380065                      # 0xc30c8ea1
	.long	1510334235                      # 0x5a05df1b
	.long	755167117                       # 0x2d02ef8d

	.section	.rdata,"dr",discard,"??_C@_07FFJHAIOD@LodePNG?$AA@"
	.globl	"??_C@_07FFJHAIOD@LodePNG?$AA@" # @"??_C@_07FFJHAIOD@LodePNG?$AA@"
"??_C@_07FFJHAIOD@LodePNG?$AA@":
	.asciz	"LodePNG"

	.section	.rdata,"dr",discard,"??_C@_0BN@IBGHKPF@no?5error?0?5everything?5went?5ok?$AA@"
	.globl	"??_C@_0BN@IBGHKPF@no?5error?0?5everything?5went?5ok?$AA@" # @"??_C@_0BN@IBGHKPF@no?5error?0?5everything?5went?5ok?$AA@"
"??_C@_0BN@IBGHKPF@no?5error?0?5everything?5went?5ok?$AA@":
	.asciz	"no error, everything went ok"

	.section	.rdata,"dr",discard,"??_C@_0BB@KHCEDELJ@nothing?5done?5yet?$AA@"
	.globl	"??_C@_0BB@KHCEDELJ@nothing?5done?5yet?$AA@" # @"??_C@_0BB@KHCEDELJ@nothing?5done?5yet?$AA@"
"??_C@_0BB@KHCEDELJ@nothing?5done?5yet?$AA@":
	.asciz	"nothing done yet"

	.section	.rdata,"dr",discard,"??_C@_0DF@INKBJCMB@end?5of?5input?5memory?5reached?5with@"
	.globl	"??_C@_0DF@INKBJCMB@end?5of?5input?5memory?5reached?5with@" # @"??_C@_0DF@INKBJCMB@end?5of?5input?5memory?5reached?5with@"
"??_C@_0DF@INKBJCMB@end?5of?5input?5memory?5reached?5with@":
	.asciz	"end of input memory reached without huffman end code"

	.section	.rdata,"dr",discard,"??_C@_0DI@OINNFIKI@error?5in?5code?5tree?5made?5it?5jump?5@"
	.globl	"??_C@_0DI@OINNFIKI@error?5in?5code?5tree?5made?5it?5jump?5@" # @"??_C@_0DI@OINNFIKI@error?5in?5code?5tree?5made?5it?5jump?5@"
"??_C@_0DI@OINNFIKI@error?5in?5code?5tree?5made?5it?5jump?5@":
	.asciz	"error in code tree made it jump outside of huffman tree"

	.section	.rdata,"dr",discard,"??_C@_0CP@DDHBCAOL@problem?5while?5processing?5dynamic@"
	.globl	"??_C@_0CP@DDHBCAOL@problem?5while?5processing?5dynamic@" # @"??_C@_0CP@DDHBCAOL@problem?5while?5processing?5dynamic@"
"??_C@_0CP@DDHBCAOL@problem?5while?5processing?5dynamic@":
	.asciz	"problem while processing dynamic deflate block"

	.section	.rdata,"dr",discard,"??_C@_0DE@PCCGDGNM@invalid?5code?5while?5processing?5dy@"
	.globl	"??_C@_0DE@PCCGDGNM@invalid?5code?5while?5processing?5dy@" # @"??_C@_0DE@PCCGDGNM@invalid?5code?5while?5processing?5dy@"
"??_C@_0DE@PCCGDGNM@invalid?5code?5while?5processing?5dy@":
	.asciz	"invalid code while processing dynamic deflate block"

	.section	.rdata,"dr",discard,"??_C@_0DB@CCCHOPLJ@end?5of?5out?5buffer?5memory?5reached@"
	.globl	"??_C@_0DB@CCCHOPLJ@end?5of?5out?5buffer?5memory?5reached@" # @"??_C@_0DB@CCCHOPLJ@end?5of?5out?5buffer?5memory?5reached@"
"??_C@_0DB@CCCHOPLJ@end?5of?5out?5buffer?5memory?5reached@":
	.asciz	"end of out buffer memory reached while inflating"

	.section	.rdata,"dr",discard,"??_C@_0CG@MOLAAFOP@invalid?5distance?5code?5while?5infl@"
	.globl	"??_C@_0CG@MOLAAFOP@invalid?5distance?5code?5while?5infl@" # @"??_C@_0CG@MOLAAFOP@invalid?5distance?5code?5while?5infl@"
"??_C@_0CG@MOLAAFOP@invalid?5distance?5code?5while?5infl@":
	.asciz	"invalid distance code while inflating"

	.section	.rdata,"dr",discard,"??_C@_0DH@OHJCBPG@invalid?5deflate?5block?5BTYPE?5enco@"
	.globl	"??_C@_0DH@OHJCBPG@invalid?5deflate?5block?5BTYPE?5enco@" # @"??_C@_0DH@OHJCBPG@invalid?5deflate?5block?5BTYPE?5enco@"
"??_C@_0DH@OHJCBPG@invalid?5deflate?5block?5BTYPE?5enco@":
	.asciz	"invalid deflate block BTYPE encountered while decoding"

	.section	.rdata,"dr",discard,"??_C@_0DG@LJBKCKDJ@NLEN?5is?5not?5ones?5complement?5of?5L@"
	.globl	"??_C@_0DG@LJBKCKDJ@NLEN?5is?5not?5ones?5complement?5of?5L@" # @"??_C@_0DG@LJBKCKDJ@NLEN?5is?5not?5ones?5complement?5of?5L@"
"??_C@_0DG@LJBKCKDJ@NLEN?5is?5not?5ones?5complement?5of?5L@":
	.asciz	"NLEN is not ones complement of LEN in a deflate block"

	.section	.rdata,"dr",discard,"??_C@_0DA@BOMDJJCD@end?5of?5in?5buffer?5memory?5reached?5@"
	.globl	"??_C@_0DA@BOMDJJCD@end?5of?5in?5buffer?5memory?5reached?5@" # @"??_C@_0DA@BOMDJJCD@end?5of?5in?5buffer?5memory?5reached?5@"
"??_C@_0DA@BOMDJJCD@end?5of?5in?5buffer?5memory?5reached?5@":
	.asciz	"end of in buffer memory reached while inflating"

	.section	.rdata,"dr",discard,"??_C@_0BO@LPIJIILG@invalid?5FCHECK?5in?5zlib?5header?$AA@"
	.globl	"??_C@_0BO@LPIJIILG@invalid?5FCHECK?5in?5zlib?5header?$AA@" # @"??_C@_0BO@LPIJIILG@invalid?5FCHECK?5in?5zlib?5header?$AA@"
"??_C@_0BO@LPIJIILG@invalid?5FCHECK?5in?5zlib?5header?$AA@":
	.asciz	"invalid FCHECK in zlib header"

	.section	.rdata,"dr",discard,"??_C@_0CK@OFGJAJAB@invalid?5compression?5method?5in?5zl@"
	.globl	"??_C@_0CK@OFGJAJAB@invalid?5compression?5method?5in?5zl@" # @"??_C@_0CK@OFGJAJAB@invalid?5compression?5method?5in?5zl@"
"??_C@_0CK@OFGJAJAB@invalid?5compression?5method?5in?5zl@":
	.asciz	"invalid compression method in zlib header"

	.section	.rdata,"dr",discard,"??_C@_0DN@IHNMFLFH@FDICT?5encountered?5in?5zlib?5header@"
	.globl	"??_C@_0DN@IHNMFLFH@FDICT?5encountered?5in?5zlib?5header@" # @"??_C@_0DN@IHNMFLFH@FDICT?5encountered?5in?5zlib?5header@"
"??_C@_0DN@IHNMFLFH@FDICT?5encountered?5in?5zlib?5header@":
	.asciz	"FDICT encountered in zlib header while it's not used for PNG"

	.section	.rdata,"dr",discard,"??_C@_0CG@PKFJEKKJ@PNG?5file?5is?5smaller?5than?5a?5PNG?5h@"
	.globl	"??_C@_0CG@PKFJEKKJ@PNG?5file?5is?5smaller?5than?5a?5PNG?5h@" # @"??_C@_0CG@PKFJEKKJ@PNG?5file?5is?5smaller?5than?5a?5PNG?5h@"
"??_C@_0CG@PKFJEKKJ@PNG?5file?5is?5smaller?5than?5a?5PNG?5h@":
	.asciz	"PNG file is smaller than a PNG header"

	.section	.rdata,"dr",discard,"??_C@_0DC@KNOMKLMA@incorrect?5PNG?5signature?0?5it?8s?5no@"
	.globl	"??_C@_0DC@KNOMKLMA@incorrect?5PNG?5signature?0?5it?8s?5no@" # @"??_C@_0DC@KNOMKLMA@incorrect?5PNG?5signature?0?5it?8s?5no@"
"??_C@_0DC@KNOMKLMA@incorrect?5PNG?5signature?0?5it?8s?5no@":
	.asciz	"incorrect PNG signature, it's no PNG or corrupted"

	.section	.rdata,"dr",discard,"??_C@_0CE@PGBEOGCC@first?5chunk?5is?5not?5the?5header?5ch@"
	.globl	"??_C@_0CE@PGBEOGCC@first?5chunk?5is?5not?5the?5header?5ch@" # @"??_C@_0CE@PGBEOGCC@first?5chunk?5is?5not?5the?5header?5ch@"
"??_C@_0CE@PGBEOGCC@first?5chunk?5is?5not?5the?5header?5ch@":
	.asciz	"first chunk is not the header chunk"

	.section	.rdata,"dr",discard,"??_C@_0DI@DMLNOICN@chunk?5length?5too?5large?0?5chunk?5br@"
	.globl	"??_C@_0DI@DMLNOICN@chunk?5length?5too?5large?0?5chunk?5br@" # @"??_C@_0DI@DMLNOICN@chunk?5length?5too?5large?0?5chunk?5br@"
"??_C@_0DI@DMLNOICN@chunk?5length?5too?5large?0?5chunk?5br@":
	.asciz	"chunk length too large, chunk broken off at end of file"

	.section	.rdata,"dr",discard,"??_C@_0BO@NDHLKIKI@illegal?5PNG?5color?5type?5or?5bpp?$AA@"
	.globl	"??_C@_0BO@NDHLKIKI@illegal?5PNG?5color?5type?5or?5bpp?$AA@" # @"??_C@_0BO@NDHLKIKI@illegal?5PNG?5color?5type?5or?5bpp?$AA@"
"??_C@_0BO@NDHLKIKI@illegal?5PNG?5color?5type?5or?5bpp?$AA@":
	.asciz	"illegal PNG color type or bpp"

	.section	.rdata,"dr",discard,"??_C@_0BP@ODHKPHCH@illegal?5PNG?5compression?5method?$AA@"
	.globl	"??_C@_0BP@ODHKPHCH@illegal?5PNG?5compression?5method?$AA@" # @"??_C@_0BP@ODHKPHCH@illegal?5PNG?5compression?5method?$AA@"
"??_C@_0BP@ODHKPHCH@illegal?5PNG?5compression?5method?$AA@":
	.asciz	"illegal PNG compression method"

	.section	.rdata,"dr",discard,"??_C@_0BK@NEGKONLH@illegal?5PNG?5filter?5method?$AA@"
	.globl	"??_C@_0BK@NEGKONLH@illegal?5PNG?5filter?5method?$AA@" # @"??_C@_0BK@NEGKONLH@illegal?5PNG?5filter?5method?$AA@"
"??_C@_0BK@NEGKONLH@illegal?5PNG?5filter?5method?$AA@":
	.asciz	"illegal PNG filter method"

	.section	.rdata,"dr",discard,"??_C@_0BN@BGHOFLAF@illegal?5PNG?5interlace?5method?$AA@"
	.globl	"??_C@_0BN@BGHOFLAF@illegal?5PNG?5interlace?5method?$AA@" # @"??_C@_0BN@BGHOFLAF@illegal?5PNG?5interlace?5method?$AA@"
"??_C@_0BN@BGHOFLAF@illegal?5PNG?5interlace?5method?$AA@":
	.asciz	"illegal PNG interlace method"

	.section	.rdata,"dr",discard,"??_C@_0DM@MBIDFHIJ@chunk?5length?5of?5a?5chunk?5is?5too?5l@"
	.globl	"??_C@_0DM@MBIDFHIJ@chunk?5length?5of?5a?5chunk?5is?5too?5l@" # @"??_C@_0DM@MBIDFHIJ@chunk?5length?5of?5a?5chunk?5is?5too?5l@"
"??_C@_0DM@MBIDFHIJ@chunk?5length?5of?5a?5chunk?5is?5too?5l@":
	.asciz	"chunk length of a chunk is too large or the chunk too small"

	.section	.rdata,"dr",discard,"??_C@_0CE@HJIDBMAH@illegal?5PNG?5filter?5type?5encounte@"
	.globl	"??_C@_0CE@HJIDBMAH@illegal?5PNG?5filter?5type?5encounte@" # @"??_C@_0CE@HJIDBMAH@illegal?5PNG?5filter?5type?5encounte@"
"??_C@_0CE@HJIDBMAH@illegal?5PNG?5filter?5type?5encounte@":
	.asciz	"illegal PNG filter type encountered"

	.section	.rdata,"dr",discard,"??_C@_0CM@DFEKLLPN@illegal?5bit?5depth?5for?5this?5color@"
	.globl	"??_C@_0CM@DFEKLLPN@illegal?5bit?5depth?5for?5this?5color@" # @"??_C@_0CM@DFEKLLPN@illegal?5bit?5depth?5for?5this?5color@"
"??_C@_0CM@DFEKLLPN@illegal?5bit?5depth?5for?5this?5color@":
	.asciz	"illegal bit depth for this color type given"

	.section	.rdata,"dr",discard,"??_C@_0CE@OODHKAPE@the?5palette?5is?5too?5small?5or?5too?5@"
	.globl	"??_C@_0CE@OODHKAPE@the?5palette?5is?5too?5small?5or?5too?5@" # @"??_C@_0CE@OODHKAPE@the?5palette?5is?5too?5small?5or?5too?5@"
"??_C@_0CE@OODHKAPE@the?5palette?5is?5too?5small?5or?5too?5@":
	.asciz	"the palette is too small or too big"

	.section	.rdata,"dr",discard,"??_C@_0DN@OLGBICPI@tRNS?5chunk?5before?5PLTE?5or?5has?5mo@"
	.globl	"??_C@_0DN@OLGBICPI@tRNS?5chunk?5before?5PLTE?5or?5has?5mo@" # @"??_C@_0DN@OLGBICPI@tRNS?5chunk?5before?5PLTE?5or?5has?5mo@"
"??_C@_0DN@OLGBICPI@tRNS?5chunk?5before?5PLTE?5or?5has?5mo@":
	.asciz	"tRNS chunk before PLTE or has more entries than palette size"

	.section	.rdata,"dr",discard,"??_C@_0CO@IDOGAOKB@tRNS?5chunk?5has?5wrong?5size?5for?5gr@"
	.globl	"??_C@_0CO@IDOGAOKB@tRNS?5chunk?5has?5wrong?5size?5for?5gr@" # @"??_C@_0CO@IDOGAOKB@tRNS?5chunk?5has?5wrong?5size?5for?5gr@"
"??_C@_0CO@IDOGAOKB@tRNS?5chunk?5has?5wrong?5size?5for?5gr@":
	.asciz	"tRNS chunk has wrong size for grayscale image"

	.section	.rdata,"dr",discard,"??_C@_0CI@IFCNLLFM@tRNS?5chunk?5has?5wrong?5size?5for?5RG@"
	.globl	"??_C@_0CI@IFCNLLFM@tRNS?5chunk?5has?5wrong?5size?5for?5RG@" # @"??_C@_0CI@IFCNLLFM@tRNS?5chunk?5has?5wrong?5size?5for?5RG@"
"??_C@_0CI@IFCNLLFM@tRNS?5chunk?5has?5wrong?5size?5for?5RG@":
	.asciz	"tRNS chunk has wrong size for RGB image"

	.section	.rdata,"dr",discard,"??_C@_0EB@CHDDNMPD@tRNS?5chunk?5appeared?5while?5it?5was@"
	.globl	"??_C@_0EB@CHDDNMPD@tRNS?5chunk?5appeared?5while?5it?5was@" # @"??_C@_0EB@CHDDNMPD@tRNS?5chunk?5appeared?5while?5it?5was@"
"??_C@_0EB@CHDDNMPD@tRNS?5chunk?5appeared?5while?5it?5was@":
	.asciz	"tRNS chunk appeared while it was not allowed for this color type"

	.section	.rdata,"dr",discard,"??_C@_0CM@HNLFOPI@bKGD?5chunk?5has?5wrong?5size?5for?5pa@"
	.globl	"??_C@_0CM@HNLFOPI@bKGD?5chunk?5has?5wrong?5size?5for?5pa@" # @"??_C@_0CM@HNLFOPI@bKGD?5chunk?5has?5wrong?5size?5for?5pa@"
"??_C@_0CM@HNLFOPI@bKGD?5chunk?5has?5wrong?5size?5for?5pa@":
	.asciz	"bKGD chunk has wrong size for palette image"

	.section	.rdata,"dr",discard,"??_C@_0CO@ELMIGKLO@bKGD?5chunk?5has?5wrong?5size?5for?5gr@"
	.globl	"??_C@_0CO@ELMIGKLO@bKGD?5chunk?5has?5wrong?5size?5for?5gr@" # @"??_C@_0CO@ELMIGKLO@bKGD?5chunk?5has?5wrong?5size?5for?5gr@"
"??_C@_0CO@ELMIGKLO@bKGD?5chunk?5has?5wrong?5size?5for?5gr@":
	.asciz	"bKGD chunk has wrong size for grayscale image"

	.section	.rdata,"dr",discard,"??_C@_0CI@CMLABIJA@bKGD?5chunk?5has?5wrong?5size?5for?5RG@"
	.globl	"??_C@_0CI@CMLABIJA@bKGD?5chunk?5has?5wrong?5size?5for?5RG@" # @"??_C@_0CI@CMLABIJA@bKGD?5chunk?5has?5wrong?5size?5for?5RG@"
"??_C@_0CI@CMLABIJA@bKGD?5chunk?5has?5wrong?5size?5for?5RG@":
	.asciz	"bKGD chunk has wrong size for RGB image"

	.section	.rdata,"dr",discard,"??_C@_0EI@GHHJBLGG@empty?5input?5buffer?5given?5to?5deco@"
	.globl	"??_C@_0EI@GHHJBLGG@empty?5input?5buffer?5given?5to?5deco@" # @"??_C@_0EI@GHHJBLGG@empty?5input?5buffer?5given?5to?5deco@"
"??_C@_0EI@GHHJBLGG@empty?5input?5buffer?5given?5to?5deco@":
	.asciz	"empty input buffer given to decoder. Maybe caused by non-existing file?"

	.section	.rdata,"dr",discard,"??_C@_0DJ@MHOEEPLI@jumped?5past?5memory?5while?5generat@"
	.globl	"??_C@_0DJ@MHOEEPLI@jumped?5past?5memory?5while?5generat@" # @"??_C@_0DJ@MHOEEPLI@jumped?5past?5memory?5while?5generat@"
"??_C@_0DJ@MHOEEPLI@jumped?5past?5memory?5while?5generat@":
	.asciz	"jumped past memory while generating dynamic huffman tree"

	.section	.rdata,"dr",discard,"??_C@_0DB@BNPOFNMD@jumped?5past?5memory?5while?5inflati@"
	.globl	"??_C@_0DB@BNPOFNMD@jumped?5past?5memory?5while?5inflati@" # @"??_C@_0DB@BNPOFNMD@jumped?5past?5memory?5while?5inflati@"
"??_C@_0DB@BNPOFNMD@jumped?5past?5memory?5while?5inflati@":
	.asciz	"jumped past memory while inflating huffman block"

	.section	.rdata,"dr",discard,"??_C@_0CD@ICHNJILK@jumped?5past?5memory?5while?5inflati@"
	.globl	"??_C@_0CD@ICHNJILK@jumped?5past?5memory?5while?5inflati@" # @"??_C@_0CD@ICHNJILK@jumped?5past?5memory?5while?5inflati@"
"??_C@_0CD@ICHNJILK@jumped?5past?5memory?5while?5inflati@":
	.asciz	"jumped past memory while inflating"

	.section	.rdata,"dr",discard,"??_C@_0BM@CEJPNBLF@size?5of?5zlib?5data?5too?5small?$AA@"
	.globl	"??_C@_0BM@CEJPNBLF@size?5of?5zlib?5data?5too?5small?$AA@" # @"??_C@_0BM@CEJPNBLF@size?5of?5zlib?5data?5too?5small?$AA@"
"??_C@_0BM@CEJPNBLF@size?5of?5zlib?5data?5too?5small?$AA@":
	.asciz	"size of zlib data too small"

	.section	.rdata,"dr",discard,"??_C@_0DK@DEJNNMNC@repeat?5symbol?5in?5tree?5while?5ther@"
	.globl	"??_C@_0DK@DEJNNMNC@repeat?5symbol?5in?5tree?5while?5ther@" # @"??_C@_0DK@DEJNNMNC@repeat?5symbol?5in?5tree?5while?5ther@"
"??_C@_0DK@DEJNNMNC@repeat?5symbol?5in?5tree?5while?5ther@":
	.asciz	"repeat symbol in tree while there was no value symbol yet"

	.section	.rdata,"dr",discard,"??_C@_0CP@JKHHNIDN@jumped?5past?5tree?5while?5generatin@"
	.globl	"??_C@_0CP@JKHHNIDN@jumped?5past?5tree?5while?5generatin@" # @"??_C@_0CP@JKHHNIDN@jumped?5past?5tree?5while?5generatin@"
"??_C@_0CP@JKHHNIDN@jumped?5past?5tree?5while?5generatin@":
	.asciz	"jumped past tree while generating huffman tree"

	.section	.rdata,"dr",discard,"??_C@_0EM@MLFECFBO@given?5output?5image?5colortype?5or?5@"
	.globl	"??_C@_0EM@MLFECFBO@given?5output?5image?5colortype?5or?5@" # @"??_C@_0EM@MLFECFBO@given?5output?5image?5colortype?5or?5@"
"??_C@_0EM@MLFECFBO@given?5output?5image?5colortype?5or?5@":
	.asciz	"given output image colortype or bitdepth not supported for color conversion"

	.section	.rdata,"dr",discard,"??_C@_0DH@GCCBCJBH@invalid?5CRC?5encountered?5?$CIcheckin@"
	.globl	"??_C@_0DH@GCCBCJBH@invalid?5CRC?5encountered?5?$CIcheckin@" # @"??_C@_0DH@GCCBCJBH@invalid?5CRC?5encountered?5?$CIcheckin@"
"??_C@_0DH@GCCBCJBH@invalid?5CRC?5encountered?5?$CIcheckin@":
	.asciz	"invalid CRC encountered (checking CRC can be disabled)"

	.section	.rdata,"dr",discard,"??_C@_0DP@NMFEBLDJ@invalid?5ADLER32?5encountered?5?$CIche@"
	.globl	"??_C@_0DP@NMFEBLDJ@invalid?5ADLER32?5encountered?5?$CIche@" # @"??_C@_0DP@NMFEBLDJ@invalid?5ADLER32?5encountered?5?$CIche@"
"??_C@_0DP@NMFEBLDJ@invalid?5ADLER32?5encountered?5?$CIche@":
	.asciz	"invalid ADLER32 encountered (checking ADLER32 can be disabled)"

	.section	.rdata,"dr",discard,"??_C@_0CJ@PKIBMELO@requested?5color?5conversion?5not?5s@"
	.globl	"??_C@_0CJ@PKIBMELO@requested?5color?5conversion?5not?5s@" # @"??_C@_0CJ@PKIBMELO@requested?5color?5conversion?5not?5s@"
"??_C@_0CJ@PKIBMELO@requested?5color?5conversion?5not?5s@":
	.asciz	"requested color conversion not supported"

	.section	.rdata,"dr",discard,"??_C@_0EL@DFAHNGDC@invalid?5window?5size?5given?5in?5the@"
	.globl	"??_C@_0EL@DFAHNGDC@invalid?5window?5size?5given?5in?5the@" # @"??_C@_0EL@DFAHNGDC@invalid?5window?5size?5given?5in?5the@"
"??_C@_0EL@DFAHNGDC@invalid?5window?5size?5given?5in?5the@":
	.asciz	"invalid window size given in the settings of the encoder (must be 0-32768)"

	.section	.rdata,"dr",discard,"??_C@_0FB@CGBCJAKP@invalid?5BTYPE?5given?5in?5the?5setti@"
	.globl	"??_C@_0FB@CGBCJAKP@invalid?5BTYPE?5given?5in?5the?5setti@" # @"??_C@_0FB@CGBCJAKP@invalid?5BTYPE?5given?5in?5the?5setti@"
"??_C@_0FB@CGBCJAKP@invalid?5BTYPE?5given?5in?5the?5setti@":
	.asciz	"invalid BTYPE given in the settings of the encoder (only 0, 1 and 2 are allowed)"

	.section	.rdata,"dr",discard,"??_C@_0DB@GEFIFIEM@conversion?5from?5color?5to?5graysca@"
	.globl	"??_C@_0DB@GEFIFIEM@conversion?5from?5color?5to?5graysca@" # @"??_C@_0DB@GEFIFIEM@conversion?5from?5color?5to?5graysca@"
"??_C@_0DB@GEFIFIEM@conversion?5from?5color?5to?5graysca@":
	.asciz	"conversion from color to grayscale not supported"

	.section	.rdata,"dr",discard,"??_C@_0EO@OPNCIJKM@length?5of?5a?5chunk?5too?5long?0?5max?5@"
	.globl	"??_C@_0EO@OPNCIJKM@length?5of?5a?5chunk?5too?5long?0?5max?5@" # @"??_C@_0EO@OPNCIJKM@length?5of?5a?5chunk?5too?5long?0?5max?5@"
"??_C@_0EO@OPNCIJKM@length?5of?5a?5chunk?5too?5long?0?5max?5@":
	.asciz	"length of a chunk too long, max allowed for PNG is 2147483647 bytes per chunk"

	.section	.rdata,"dr",discard,"??_C@_0DK@CGBJPOCG@the?5length?5of?5the?5END?5symbol?5256@"
	.globl	"??_C@_0DK@CGBJPOCG@the?5length?5of?5the?5END?5symbol?5256@" # @"??_C@_0DK@CGBJPOCG@the?5length?5of?5the?5END?5symbol?5256@"
"??_C@_0DK@CGBJPOCG@the?5length?5of?5the?5END?5symbol?5256@":
	.asciz	"the length of the END symbol 256 in the Huffman tree is 0"

	.section	.rdata,"dr",discard,"??_C@_0FP@NKPOKJKO@the?5length?5of?5a?5text?5chunk?5keywo@"
	.globl	"??_C@_0FP@NKPOKJKO@the?5length?5of?5a?5text?5chunk?5keywo@" # @"??_C@_0FP@NKPOKJKO@the?5length?5of?5a?5text?5chunk?5keywo@"
"??_C@_0FP@NKPOKJKO@the?5length?5of?5a?5text?5chunk?5keywo@":
	.asciz	"the length of a text chunk keyword given to the encoder is longer than the maximum of 79 bytes"

	.section	.rdata,"dr",discard,"??_C@_0FO@HGBKNLHO@the?5length?5of?5a?5text?5chunk?5keywo@"
	.globl	"??_C@_0FO@HGBKNLHO@the?5length?5of?5a?5text?5chunk?5keywo@" # @"??_C@_0FO@HGBKNLHO@the?5length?5of?5a?5text?5chunk?5keywo@"
"??_C@_0FO@HGBKNLHO@the?5length?5of?5a?5text?5chunk?5keywo@":
	.asciz	"the length of a text chunk keyword given to the encoder is smaller than the minimum of 1 byte"

	.section	.rdata,"dr",discard,"??_C@_0FJ@LPKJLMJ@tried?5to?5encode?5a?5PLTE?5chunk?5wit@"
	.globl	"??_C@_0FJ@LPKJLMJ@tried?5to?5encode?5a?5PLTE?5chunk?5wit@" # @"??_C@_0FJ@LPKJLMJ@tried?5to?5encode?5a?5PLTE?5chunk?5wit@"
"??_C@_0FJ@LPKJLMJ@tried?5to?5encode?5a?5PLTE?5chunk?5wit@":
	.asciz	"tried to encode a PLTE chunk with a palette that has less than 1 or more than 256 colors"

	.section	.rdata,"dr",discard,"??_C@_0ED@FHCCPMOF@unknown?5chunk?5type?5with?5?8critica@"
	.globl	"??_C@_0ED@FHCCPMOF@unknown?5chunk?5type?5with?5?8critica@" # @"??_C@_0ED@FHCCPMOF@unknown?5chunk?5type?5with?5?8critica@"
"??_C@_0ED@FHCCPMOF@unknown?5chunk?5type?5with?5?8critica@":
	.asciz	"unknown chunk type with 'critical' flag encountered by the decoder"

	.section	.rdata,"dr",discard,"??_C@_0DJ@OGMBNCEO@invalid?5interlace?5mode?5given?5to?5@"
	.globl	"??_C@_0DJ@OGMBNCEO@invalid?5interlace?5mode?5given?5to?5@" # @"??_C@_0DJ@OGMBNCEO@invalid?5interlace?5mode?5given?5to?5@"
"??_C@_0DJ@OGMBNCEO@invalid?5interlace?5mode?5given?5to?5@":
	.asciz	"invalid interlace mode given to encoder (must be 0 or 1)"

	.section	.rdata,"dr",discard,"??_C@_0FN@JOBHGFBG@while?5decoding?0?5invalid?5compress@"
	.globl	"??_C@_0FN@JOBHGFBG@while?5decoding?0?5invalid?5compress@" # @"??_C@_0FN@JOBHGFBG@while?5decoding?0?5invalid?5compress@"
"??_C@_0FN@JOBHGFBG@while?5decoding?0?5invalid?5compress@":
	.asciz	"while decoding, invalid compression method encountering in zTXt or iTXt chunk (it must be 0)"

	.section	.rdata,"dr",discard,"??_C@_0BI@GJKJMBKH@invalid?5tIME?5chunk?5size?$AA@"
	.globl	"??_C@_0BI@GJKJMBKH@invalid?5tIME?5chunk?5size?$AA@" # @"??_C@_0BI@GJKJMBKH@invalid?5tIME?5chunk?5size?$AA@"
"??_C@_0BI@GJKJMBKH@invalid?5tIME?5chunk?5size?$AA@":
	.asciz	"invalid tIME chunk size"

	.section	.rdata,"dr",discard,"??_C@_0BI@NMOBNHEN@invalid?5pHYs?5chunk?5size?$AA@"
	.globl	"??_C@_0BI@NMOBNHEN@invalid?5pHYs?5chunk?5size?$AA@" # @"??_C@_0BI@NMOBNHEN@invalid?5pHYs?5chunk?5size?$AA@"
"??_C@_0BI@NMOBNHEN@invalid?5pHYs?5chunk?5size?$AA@":
	.asciz	"invalid pHYs chunk size"

	.section	.rdata,"dr",discard,"??_C@_0DJ@PANFLBNP@no?5null?5termination?5char?5found?5w@"
	.globl	"??_C@_0DJ@PANFLBNP@no?5null?5termination?5char?5found?5w@" # @"??_C@_0DJ@PANFLBNP@no?5null?5termination?5char?5found?5w@"
"??_C@_0DJ@PANFLBNP@no?5null?5termination?5char?5found?5w@":
	.asciz	"no null termination char found while decoding text chunk"

	.section	.rdata,"dr",discard,"??_C@_0CP@KDAKHJNL@iTXt?5chunk?5too?5short?5to?5contain?5@"
	.globl	"??_C@_0CP@KDAKHJNL@iTXt?5chunk?5too?5short?5to?5contain?5@" # @"??_C@_0CP@KDAKHJNL@iTXt?5chunk?5too?5short?5to?5contain?5@"
"??_C@_0CP@KDAKHJNL@iTXt?5chunk?5too?5short?5to?5contain?5@":
	.asciz	"iTXt chunk too short to contain required bytes"

	.section	.rdata,"dr",discard,"??_C@_0CA@FGDALBLM@integer?5overflow?5in?5buffer?5size?$AA@"
	.globl	"??_C@_0CA@FGDALBLM@integer?5overflow?5in?5buffer?5size?$AA@" # @"??_C@_0CA@FGDALBLM@integer?5overflow?5in?5buffer?5size?$AA@"
"??_C@_0CA@FGDALBLM@integer?5overflow?5in?5buffer?5size?$AA@":
	.asciz	"integer overflow in buffer size"

	.section	.rdata,"dr",discard,"??_C@_0CA@CBHGFENA@failed?5to?5open?5file?5for?5reading?$AA@"
	.globl	"??_C@_0CA@CBHGFENA@failed?5to?5open?5file?5for?5reading?$AA@" # @"??_C@_0CA@CBHGFENA@failed?5to?5open?5file?5for?5reading?$AA@"
"??_C@_0CA@CBHGFENA@failed?5to?5open?5file?5for?5reading?$AA@":
	.asciz	"failed to open file for reading"

	.section	.rdata,"dr",discard,"??_C@_0CA@EHFMONBL@failed?5to?5open?5file?5for?5writing?$AA@"
	.globl	"??_C@_0CA@EHFMONBL@failed?5to?5open?5file?5for?5writing?$AA@" # @"??_C@_0CA@EHFMONBL@failed?5to?5open?5file?5for?5writing?$AA@"
"??_C@_0CA@EHFMONBL@failed?5to?5open?5file?5for?5writing?$AA@":
	.asciz	"failed to open file for writing"

	.section	.rdata,"dr",discard,"??_C@_0CD@MOHNLFBI@tried?5creating?5a?5tree?5of?50?5symbo@"
	.globl	"??_C@_0CD@MOHNLFBI@tried?5creating?5a?5tree?5of?50?5symbo@" # @"??_C@_0CD@MOHNLFBI@tried?5creating?5a?5tree?5of?50?5symbo@"
"??_C@_0CD@MOHNLFBI@tried?5creating?5a?5tree?5of?50?5symbo@":
	.asciz	"tried creating a tree of 0 symbols"

	.section	.rdata,"dr",discard,"??_C@_0CF@PBAGOFJG@lazy?5matching?5at?5pos?50?5is?5imposs@"
	.globl	"??_C@_0CF@PBAGOFJG@lazy?5matching?5at?5pos?50?5is?5imposs@" # @"??_C@_0CF@PBAGOFJG@lazy?5matching?5at?5pos?50?5is?5imposs@"
"??_C@_0CF@PBAGOFJG@lazy?5matching?5at?5pos?50?5is?5imposs@":
	.asciz	"lazy matching at pos 0 is impossible"

	.section	.rdata,"dr",discard,"??_C@_0FN@POPKDEPB@color?5conversion?5to?5palette?5requ@"
	.globl	"??_C@_0FN@POPKDEPB@color?5conversion?5to?5palette?5requ@" # @"??_C@_0FN@POPKDEPB@color?5conversion?5to?5palette?5requ@"
"??_C@_0FN@POPKDEPB@color?5conversion?5to?5palette?5requ@":
	.asciz	"color conversion to palette requested while a color isn't in palette, or index out of bounds"

	.section	.rdata,"dr",discard,"??_C@_0BJ@FDBIHNP@memory?5allocation?5failed?$AA@"
	.globl	"??_C@_0BJ@FDBIHNP@memory?5allocation?5failed?$AA@" # @"??_C@_0BJ@FDBIHNP@memory?5allocation?5failed?$AA@"
"??_C@_0BJ@FDBIHNP@memory?5allocation?5failed?$AA@":
	.asciz	"memory allocation failed"

	.section	.rdata,"dr",discard,"??_C@_0DK@JNCHGFNK@given?5image?5too?5small?5to?5contain@"
	.globl	"??_C@_0DK@JNCHGFNK@given?5image?5too?5small?5to?5contain@" # @"??_C@_0DK@JNCHGFNK@given?5image?5too?5small?5to?5contain@"
"??_C@_0DK@JNCHGFNK@given?5image?5too?5small?5to?5contain@":
	.asciz	"given image too small to contain all pixels to be encoded"

	.section	.rdata,"dr",discard,"??_C@_0DC@KAGBFHHD@impossible?5offset?5in?5lz77?5encodi@"
	.globl	"??_C@_0DC@KAGBFHHD@impossible?5offset?5in?5lz77?5encodi@" # @"??_C@_0DC@KAGBFHHD@impossible?5offset?5in?5lz77?5encodi@"
"??_C@_0DC@KAGBFHHD@impossible?5offset?5in?5lz77?5encodi@":
	.asciz	"impossible offset in lz77 encoding (internal bug)"

	.section	.rdata,"dr",discard,"??_C@_0FB@OFCJJNFO@must?5provide?5custom?5zlib?5functio@"
	.globl	"??_C@_0FB@OFCJJNFO@must?5provide?5custom?5zlib?5functio@" # @"??_C@_0FB@OFCJJNFO@must?5provide?5custom?5zlib?5functio@"
"??_C@_0FB@OFCJJNFO@must?5provide?5custom?5zlib?5functio@":
	.asciz	"must provide custom zlib function pointer if LODEPNG_COMPILE_ZLIB is not defined"

	.section	.rdata,"dr",discard,"??_C@_0EJ@PHLJLBOL@invalid?5filter?5strategy?5given?5fo@"
	.globl	"??_C@_0EJ@PHLJLBOL@invalid?5filter?5strategy?5given?5fo@" # @"??_C@_0EJ@PHLJLBOL@invalid?5filter?5strategy?5given?5fo@"
"??_C@_0EJ@PHLJLBOL@invalid?5filter?5strategy?5given?5fo@":
	.asciz	"invalid filter strategy given for LodePNGEncoderSettings.filter_strategy"

	.section	.rdata,"dr",discard,"??_C@_0DK@LPMOJNBK@text?5chunk?5keyword?5too?5short?5or?5@"
	.globl	"??_C@_0DK@LPMOJNBK@text?5chunk?5keyword?5too?5short?5or?5@" # @"??_C@_0DK@LPMOJNBK@text?5chunk?5keyword?5too?5short?5or?5@"
"??_C@_0DK@LPMOJNBK@text?5chunk?5keyword?5too?5short?5or?5@":
	.asciz	"text chunk keyword too short or long: must have size 1-79"

	.section	.rdata,"dr",discard,"??_C@_0CC@EIKGNLEE@windowsize?5must?5be?5a?5power?5of?5tw@"
	.globl	"??_C@_0CC@EIKGNLEE@windowsize?5must?5be?5a?5power?5of?5tw@" # @"??_C@_0CC@EIKGNLEE@windowsize?5must?5be?5a?5power?5of?5tw@"
"??_C@_0CC@EIKGNLEE@windowsize?5must?5be?5a?5power?5of?5tw@":
	.asciz	"windowsize must be a power of two"

	.section	.rdata,"dr",discard,"??_C@_0BP@ICCEHJFD@invalid?5decompressed?5idat?5size?$AA@"
	.globl	"??_C@_0BP@ICCEHJFD@invalid?5decompressed?5idat?5size?$AA@" # @"??_C@_0BP@ICCEHJFD@invalid?5decompressed?5idat?5size?$AA@"
"??_C@_0BP@ICCEHJFD@invalid?5decompressed?5idat?5size?$AA@":
	.asciz	"invalid decompressed idat size"

	.section	.rdata,"dr",discard,"??_C@_0CI@JGFANBIB@integer?5overflow?5due?5to?5too?5many@"
	.globl	"??_C@_0CI@JGFANBIB@integer?5overflow?5due?5to?5too?5many@" # @"??_C@_0CI@JGFANBIB@integer?5overflow?5due?5to?5too?5many@"
"??_C@_0CI@JGFANBIB@integer?5overflow?5due?5to?5too?5many@":
	.asciz	"integer overflow due to too many pixels"

	.section	.rdata,"dr",discard,"??_C@_0CA@MGMLPFDK@zero?5width?5or?5height?5is?5invalid?$AA@"
	.globl	"??_C@_0CA@MGMLPFDK@zero?5width?5or?5height?5is?5invalid?$AA@" # @"??_C@_0CA@MGMLPFDK@zero?5width?5or?5height?5is?5invalid?$AA@"
"??_C@_0CA@MGMLPFDK@zero?5width?5or?5height?5is?5invalid?$AA@":
	.asciz	"zero width or height is invalid"

	.section	.rdata,"dr",discard,"??_C@_0CK@EGDBBGEN@header?5chunk?5must?5have?5a?5size?5of@"
	.globl	"??_C@_0CK@EGDBBGEN@header?5chunk?5must?5have?5a?5size?5of@" # @"??_C@_0CK@EGDBBGEN@header?5chunk?5must?5have?5a?5size?5of@"
"??_C@_0CK@EGDBBGEN@header?5chunk?5must?5have?5a?5size?5of@":
	.asciz	"header chunk must have a size of 13 bytes"

	.section	.rdata,"dr",discard,"??_C@_0CP@IHBLLFBA@integer?5overflow?5with?5combined?5i@"
	.globl	"??_C@_0CP@IHBLLFBA@integer?5overflow?5with?5combined?5i@" # @"??_C@_0CP@IHBLLFBA@integer?5overflow?5with?5combined?5i@"
"??_C@_0CP@IHBLLFBA@integer?5overflow?5with?5combined?5i@":
	.asciz	"integer overflow with combined idat chunk size"

	.section	.rdata,"dr",discard,"??_C@_0BI@KJHGONNK@invalid?5gAMA?5chunk?5size?$AA@"
	.globl	"??_C@_0BI@KJHGONNK@invalid?5gAMA?5chunk?5size?$AA@" # @"??_C@_0BI@KJHGONNK@invalid?5gAMA?5chunk?5size?$AA@"
"??_C@_0BI@KJHGONNK@invalid?5gAMA?5chunk?5size?$AA@":
	.asciz	"invalid gAMA chunk size"

	.section	.rdata,"dr",discard,"??_C@_0BI@KBKJIHFD@invalid?5cHRM?5chunk?5size?$AA@"
	.globl	"??_C@_0BI@KBKJIHFD@invalid?5cHRM?5chunk?5size?$AA@" # @"??_C@_0BI@KBKJIHFD@invalid?5cHRM?5chunk?5size?$AA@"
"??_C@_0BI@KBKJIHFD@invalid?5cHRM?5chunk?5size?$AA@":
	.asciz	"invalid cHRM chunk size"

	.section	.rdata,"dr",discard,"??_C@_0BI@KBICNMKA@invalid?5sRGB?5chunk?5size?$AA@"
	.globl	"??_C@_0BI@KBICNMKA@invalid?5sRGB?5chunk?5size?$AA@" # @"??_C@_0BI@KBICNMKA@invalid?5sRGB?5chunk?5size?$AA@"
"??_C@_0BI@KBICNMKA@invalid?5sRGB?5chunk?5size?$AA@":
	.asciz	"invalid sRGB chunk size"

	.section	.rdata,"dr",discard,"??_C@_0BO@IGFOGDFM@invalid?5sRGB?5rendering?5intent?$AA@"
	.globl	"??_C@_0BO@IGFOGDFM@invalid?5sRGB?5rendering?5intent?$AA@" # @"??_C@_0BO@IGFOGDFM@invalid?5sRGB?5rendering?5intent?$AA@"
"??_C@_0BO@IGFOGDFM@invalid?5sRGB?5rendering?5intent?$AA@":
	.asciz	"invalid sRGB rendering intent"

	.section	.rdata,"dr",discard,"??_C@_0EO@BMBKHOHC@invalid?5ICC?5profile?5color?5type?0?5@"
	.globl	"??_C@_0EO@BMBKHOHC@invalid?5ICC?5profile?5color?5type?0?5@" # @"??_C@_0EO@BMBKHOHC@invalid?5ICC?5profile?5color?5type?0?5@"
"??_C@_0EO@BMBKHOHC@invalid?5ICC?5profile?5color?5type?0?5@":
	.asciz	"invalid ICC profile color type, the PNG specification only allows RGB or GRAY"

	.section	.rdata,"dr",discard,"??_C@_0FE@BPIFLHKO@PNG?5specification?5does?5not?5allow@"
	.globl	"??_C@_0FE@BPIFLHKO@PNG?5specification?5does?5not?5allow@" # @"??_C@_0FE@BPIFLHKO@PNG?5specification?5does?5not?5allow@"
"??_C@_0FE@BPIFLHKO@PNG?5specification?5does?5not?5allow@":
	.asciz	"PNG specification does not allow RGB ICC profile on gray color types and vice versa"

	.section	.rdata,"dr",discard,"??_C@_0FC@MLLAEFDG@not?5allowed?5to?5set?5grayscale?5ICC@"
	.globl	"??_C@_0FC@MLLAEFDG@not?5allowed?5to?5set?5grayscale?5ICC@" # @"??_C@_0FC@MLLAEFDG@not?5allowed?5to?5set?5grayscale?5ICC@"
"??_C@_0FC@MLLAEFDG@not?5allowed?5to?5set?5grayscale?5ICC@":
	.asciz	"not allowed to set grayscale ICC profile with colored pixels by PNG specification"

	.section	.rdata,"dr",discard,"??_C@_0EG@EPGPMDIP@invalid?5palette?5index?5in?5bKGD?5ch@"
	.globl	"??_C@_0EG@EPGPMDIP@invalid?5palette?5index?5in?5bKGD?5ch@" # @"??_C@_0EG@EPGPMDIP@invalid?5palette?5index?5in?5bKGD?5ch@"
"??_C@_0EG@EPGPMDIP@invalid?5palette?5index?5in?5bKGD?5ch@":
	.asciz	"invalid palette index in bKGD chunk. Maybe it came before PLTE chunk?"

	.section	.rdata,"dr",discard,"??_C@_0EE@GHMHHHIO@invalid?5bKGD?5color?5while?5encodin@"
	.globl	"??_C@_0EE@GHMHHHIO@invalid?5bKGD?5color?5while?5encodin@" # @"??_C@_0EE@GHMHHHIO@invalid?5bKGD?5color?5while?5encodin@"
"??_C@_0EE@GHMHHHIO@invalid?5bKGD?5color?5while?5encodin@":
	.asciz	"invalid bKGD color while encoding (e.g. palette index out of range)"

	.section	.rdata,"dr",discard,"??_C@_0BM@KEIHAKGF@integer?5overflow?5of?5bitsize?$AA@"
	.globl	"??_C@_0BM@KEIHAKGF@integer?5overflow?5of?5bitsize?$AA@" # @"??_C@_0BM@KEIHAKGF@integer?5overflow?5of?5bitsize?$AA@"
"??_C@_0BM@KEIHAKGF@integer?5overflow?5of?5bitsize?$AA@":
	.asciz	"integer overflow of bitsize"

	.section	.rdata,"dr",discard,"??_C@_0DH@FKDLAJAG@PNG?5file?5must?5have?5PLTE?5chunk?5if@"
	.globl	"??_C@_0DH@FKDLAJAG@PNG?5file?5must?5have?5PLTE?5chunk?5if@" # @"??_C@_0DH@FKDLAJAG@PNG?5file?5must?5have?5PLTE?5chunk?5if@"
"??_C@_0DH@FKDLAJAG@PNG?5file?5must?5have?5PLTE?5chunk?5if@":
	.asciz	"PNG file must have PLTE chunk if color type is palette"

	.section	.rdata,"dr",discard,"??_C@_0FB@PHFDHCLM@color?5convert?5from?5palette?5mode?5@"
	.globl	"??_C@_0FB@PHFDHCLM@color?5convert?5from?5palette?5mode?5@" # @"??_C@_0FB@PHFDHCLM@color?5convert?5from?5palette?5mode?5@"
"??_C@_0FB@PHFDHCLM@color?5convert?5from?5palette?5mode?5@":
	.asciz	"color convert from palette mode requested without setting the palette data in it"

	.section	.rdata,"dr",discard,"??_C@_0CP@FAHPCGCI@tried?5to?5add?5more?5than?5256?5value@"
	.globl	"??_C@_0CP@FAHPCGCI@tried?5to?5add?5more?5than?5256?5value@" # @"??_C@_0CP@FAHPCGCI@tried?5to?5add?5more?5than?5256?5value@"
"??_C@_0CP@FAHPCGCI@tried?5to?5add?5more?5than?5256?5value@":
	.asciz	"tried to add more than 256 values to a palette"

	.section	.rdata,"dr",discard,"??_C@_0EN@GBDNGCEI@tried?5to?5decompress?5zlib?5or?5defl@"
	.globl	"??_C@_0EN@GBDNGCEI@tried?5to?5decompress?5zlib?5or?5defl@" # @"??_C@_0EN@GBDNGCEI@tried?5to?5decompress?5zlib?5or?5defl@"
"??_C@_0EN@GBDNGCEI@tried?5to?5decompress?5zlib?5or?5defl@":
	.asciz	"tried to decompress zlib or deflate data larger than desired max_output_size"

	.section	.rdata,"dr",discard,"??_C@_0CM@BLPPFIOD@custom?5zlib?5or?5inflate?5decompres@"
	.globl	"??_C@_0CM@BLPPFIOD@custom?5zlib?5or?5inflate?5decompres@" # @"??_C@_0CM@BLPPFIOD@custom?5zlib?5or?5inflate?5decompres@"
"??_C@_0CM@BLPPFIOD@custom?5zlib?5or?5inflate?5decompres@":
	.asciz	"custom zlib or inflate decompression failed"

	.section	.rdata,"dr",discard,"??_C@_0CK@GAHFELDC@custom?5zlib?5or?5deflate?5compressi@"
	.globl	"??_C@_0CK@GAHFELDC@custom?5zlib?5or?5deflate?5compressi@" # @"??_C@_0CK@GAHFELDC@custom?5zlib?5or?5deflate?5compressi@"
"??_C@_0CK@GAHFELDC@custom?5zlib?5or?5deflate?5compressi@":
	.asciz	"custom zlib or deflate compression failed"

	.section	.rdata,"dr",discard,"??_C@_0CD@FMIJDPHM@compressed?5text?5unreasonably?5lar@"
	.globl	"??_C@_0CD@FMIJDPHM@compressed?5text?5unreasonably?5lar@" # @"??_C@_0CD@FMIJDPHM@compressed?5text?5unreasonably?5lar@"
"??_C@_0CD@FMIJDPHM@compressed?5text?5unreasonably?5lar@":
	.asciz	"compressed text unreasonably large"

	.section	.rdata,"dr",discard,"??_C@_0BP@KANCDNDL@ICC?5profile?5unreasonably?5large?$AA@"
	.globl	"??_C@_0BP@KANCDNDL@ICC?5profile?5unreasonably?5large?$AA@" # @"??_C@_0BP@KANCDNDL@ICC?5profile?5unreasonably?5large?$AA@"
"??_C@_0BP@KANCDNDL@ICC?5profile?5unreasonably?5large?$AA@":
	.asciz	"ICC profile unreasonably large"

	.section	.rdata,"dr",discard,"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.globl	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@" # @"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@":
	.asciz	"unknown error code"

	.section	.rdata,"dr",discard,"??_C@_02JDPG@rb?$AA@"
	.globl	"??_C@_02JDPG@rb?$AA@"          # @"??_C@_02JDPG@rb?$AA@"
"??_C@_02JDPG@rb?$AA@":
	.asciz	"rb"

	.section	.rdata,"dr"
	.p2align	2                               # @LENGTHBASE
_LENGTHBASE:
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	7                               # 0x7
	.long	8                               # 0x8
	.long	9                               # 0x9
	.long	10                              # 0xa
	.long	11                              # 0xb
	.long	13                              # 0xd
	.long	15                              # 0xf
	.long	17                              # 0x11
	.long	19                              # 0x13
	.long	23                              # 0x17
	.long	27                              # 0x1b
	.long	31                              # 0x1f
	.long	35                              # 0x23
	.long	43                              # 0x2b
	.long	51                              # 0x33
	.long	59                              # 0x3b
	.long	67                              # 0x43
	.long	83                              # 0x53
	.long	99                              # 0x63
	.long	115                             # 0x73
	.long	131                             # 0x83
	.long	163                             # 0xa3
	.long	195                             # 0xc3
	.long	227                             # 0xe3
	.long	258                             # 0x102

	.p2align	2                               # @LENGTHEXTRA
_LENGTHEXTRA:
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	1                               # 0x1
	.long	1                               # 0x1
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	2                               # 0x2
	.long	2                               # 0x2
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	3                               # 0x3
	.long	3                               # 0x3
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	4                               # 0x4
	.long	4                               # 0x4
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	5                               # 0x5
	.long	5                               # 0x5
	.long	5                               # 0x5
	.long	0                               # 0x0

	.p2align	2                               # @DISTANCEBASE
_DISTANCEBASE:
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	7                               # 0x7
	.long	9                               # 0x9
	.long	13                              # 0xd
	.long	17                              # 0x11
	.long	25                              # 0x19
	.long	33                              # 0x21
	.long	49                              # 0x31
	.long	65                              # 0x41
	.long	97                              # 0x61
	.long	129                             # 0x81
	.long	193                             # 0xc1
	.long	257                             # 0x101
	.long	385                             # 0x181
	.long	513                             # 0x201
	.long	769                             # 0x301
	.long	1025                            # 0x401
	.long	1537                            # 0x601
	.long	2049                            # 0x801
	.long	3073                            # 0xc01
	.long	4097                            # 0x1001
	.long	6145                            # 0x1801
	.long	8193                            # 0x2001
	.long	12289                           # 0x3001
	.long	16385                           # 0x4001
	.long	24577                           # 0x6001

	.p2align	2                               # @DISTANCEEXTRA
_DISTANCEEXTRA:
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	1                               # 0x1
	.long	2                               # 0x2
	.long	2                               # 0x2
	.long	3                               # 0x3
	.long	3                               # 0x3
	.long	4                               # 0x4
	.long	4                               # 0x4
	.long	5                               # 0x5
	.long	5                               # 0x5
	.long	6                               # 0x6
	.long	6                               # 0x6
	.long	7                               # 0x7
	.long	7                               # 0x7
	.long	8                               # 0x8
	.long	8                               # 0x8
	.long	9                               # 0x9
	.long	9                               # 0x9
	.long	10                              # 0xa
	.long	10                              # 0xa
	.long	11                              # 0xb
	.long	11                              # 0xb
	.long	12                              # 0xc
	.long	12                              # 0xc
	.long	13                              # 0xd
	.long	13                              # 0xd

	.p2align	2                               # @CLCL_ORDER
_CLCL_ORDER:
	.long	16                              # 0x10
	.long	17                              # 0x11
	.long	18                              # 0x12
	.long	0                               # 0x0
	.long	8                               # 0x8
	.long	7                               # 0x7
	.long	9                               # 0x9
	.long	6                               # 0x6
	.long	10                              # 0xa
	.long	5                               # 0x5
	.long	11                              # 0xb
	.long	4                               # 0x4
	.long	12                              # 0xc
	.long	3                               # 0x3
	.long	13                              # 0xd
	.long	2                               # 0x2
	.long	14                              # 0xe
	.long	1                               # 0x1
	.long	15                              # 0xf

	.p2align	2                               # @ADAM7_DX
_ADAM7_DX:
	.long	8                               # 0x8
	.long	8                               # 0x8
	.long	4                               # 0x4
	.long	4                               # 0x4
	.long	2                               # 0x2
	.long	2                               # 0x2
	.long	1                               # 0x1

	.p2align	2                               # @ADAM7_IX
_ADAM7_IX:
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	0                               # 0x0

	.p2align	2                               # @ADAM7_DY
_ADAM7_DY:
	.long	8                               # 0x8
	.long	8                               # 0x8
	.long	8                               # 0x8
	.long	4                               # 0x4
	.long	4                               # 0x4
	.long	2                               # 0x2
	.long	2                               # 0x2

	.p2align	2                               # @ADAM7_IY
_ADAM7_IY:
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	1                               # 0x1

	.section	.rdata,"dr",discard,"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
	.globl	"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@" # @"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@":
	.asciz	"vector too long"

	.section	.data,"dw",discard,"??_R0?AVbad_array_new_length@std@@@8"
	.globl	"??_R0?AVbad_array_new_length@std@@@8" # @"??_R0?AVbad_array_new_length@std@@@8"
	.p2align	4
"??_R0?AVbad_array_new_length@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVbad_array_new_length@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0bad_array_new_length@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVbad_alloc@std@@@8"
	.globl	"??_R0?AVbad_alloc@std@@@8"     # @"??_R0?AVbad_alloc@std@@@8"
	.p2align	4
"??_R0?AVbad_alloc@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVbad_alloc@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12":
	.long	16                              # 0x10
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0bad_alloc@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
	.globl	"??_R0?AVexception@std@@@8"     # @"??_R0?AVexception@std@@@8"
	.p2align	4
"??_R0?AVexception@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVexception@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVexception@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0exception@std@@QAE@ABV01@@Z"

	.section	.xdata,"dr",discard,"__CTA3?AVbad_array_new_length@std@@"
	.globl	"__CTA3?AVbad_array_new_length@std@@" # @"_CTA3?AVbad_array_new_length@std@@"
	.p2align	2
"__CTA3?AVbad_array_new_length@std@@":
	.long	3                               # 0x3
	.long	"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"

	.section	.xdata,"dr",discard,"__TI3?AVbad_array_new_length@std@@"
	.globl	"__TI3?AVbad_array_new_length@std@@" # @"_TI3?AVbad_array_new_length@std@@"
	.p2align	2
"__TI3?AVbad_array_new_length@std@@":
	.long	0                               # 0x0
	.long	"??1exception@std@@UAE@XZ"
	.long	0
	.long	"__CTA3?AVbad_array_new_length@std@@"

	.section	.rdata,"dr",discard,"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
	.globl	"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@" # @"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@":
	.asciz	"bad array new length"

	.section	.rdata,"dr",largest,"??_7bad_array_new_length@std@@6B@"
	.p2align	2                               # @0
L___unnamed_1:
	.long	"??_R4bad_array_new_length@std@@6B@"
	.long	"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_array_new_length@std@@6B@"
	.globl	"??_R4bad_array_new_length@std@@6B@" # @"??_R4bad_array_new_length@std@@6B@"
	.p2align	4
"??_R4bad_array_new_length@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	"??_R3bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R3bad_array_new_length@std@@8"
	.globl	"??_R3bad_array_new_length@std@@8" # @"??_R3bad_array_new_length@std@@8"
	.p2align	2
"??_R3bad_array_new_length@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	"??_R2bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R2bad_array_new_length@std@@8"
	.globl	"??_R2bad_array_new_length@std@@8" # @"??_R2bad_array_new_length@std@@8"
	.p2align	2
"??_R2bad_array_new_length@std@@8":
	.long	"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.long	"??_R1A@?0A@EA@bad_alloc@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.globl	"??_R1A@?0A@EA@bad_array_new_length@std@@8" # @"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_array_new_length@std@@8":
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_alloc@std@@8"
	.globl	"??_R1A@?0A@EA@bad_alloc@std@@8" # @"??_R1A@?0A@EA@bad_alloc@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_alloc@std@@8":
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3bad_alloc@std@@8"

	.section	.rdata,"dr",discard,"??_R3bad_alloc@std@@8"
	.globl	"??_R3bad_alloc@std@@8"         # @"??_R3bad_alloc@std@@8"
	.p2align	2
"??_R3bad_alloc@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2bad_alloc@std@@8"

	.section	.rdata,"dr",discard,"??_R2bad_alloc@std@@8"
	.globl	"??_R2bad_alloc@std@@8"         # @"??_R2bad_alloc@std@@8"
	.p2align	2
"??_R2bad_alloc@std@@8":
	.long	"??_R1A@?0A@EA@bad_alloc@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
	.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3exception@std@@8"

	.section	.rdata,"dr",discard,"??_R3exception@std@@8"
	.globl	"??_R3exception@std@@8"         # @"??_R3exception@std@@8"
	.p2align	2
"??_R3exception@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2exception@std@@8"

	.section	.rdata,"dr",discard,"??_R2exception@std@@8"
	.globl	"??_R2exception@std@@8"         # @"??_R2exception@std@@8"
	.p2align	2
"??_R2exception@std@@8":
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",largest,"??_7bad_alloc@std@@6B@"
	.p2align	2                               # @1
L___unnamed_2:
	.long	"??_R4bad_alloc@std@@6B@"
	.long	"??_Gbad_alloc@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_alloc@std@@6B@"
	.globl	"??_R4bad_alloc@std@@6B@"       # @"??_R4bad_alloc@std@@6B@"
	.p2align	4
"??_R4bad_alloc@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	"??_R3bad_alloc@std@@8"

	.section	.rdata,"dr",largest,"??_7exception@std@@6B@"
	.p2align	2                               # @2
L___unnamed_3:
	.long	"??_R4exception@std@@6B@"
	.long	"??_Gexception@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
	.globl	"??_R4exception@std@@6B@"       # @"??_R4exception@std@@6B@"
	.p2align	4
"??_R4exception@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVexception@std@@@8"
	.long	"??_R3exception@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
	.asciz	"Unknown exception"

	.section	.rdata,"dr"
	.p2align	2                               # @"switch.table.?lodepng_error_text@@YAPBDI@Z"
"L_switch.table.?lodepng_error_text@@YAPBDI@Z":
	.long	"??_C@_0BN@IBGHKPF@no?5error?0?5everything?5went?5ok?$AA@"
	.long	"??_C@_0BB@KHCEDELJ@nothing?5done?5yet?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0DF@INKBJCMB@end?5of?5input?5memory?5reached?5with@"
	.long	"??_C@_0DI@OINNFIKI@error?5in?5code?5tree?5made?5it?5jump?5@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0CP@DDHBCAOL@problem?5while?5processing?5dynamic@"
	.long	"??_C@_0CP@DDHBCAOL@problem?5while?5processing?5dynamic@"
	.long	"??_C@_0CP@DDHBCAOL@problem?5while?5processing?5dynamic@"
	.long	"??_C@_0DE@PCCGDGNM@invalid?5code?5while?5processing?5dy@"
	.long	"??_C@_0DB@CCCHOPLJ@end?5of?5out?5buffer?5memory?5reached@"
	.long	"??_C@_0CG@MOLAAFOP@invalid?5distance?5code?5while?5infl@"
	.long	"??_C@_0DB@CCCHOPLJ@end?5of?5out?5buffer?5memory?5reached@"
	.long	"??_C@_0DH@OHJCBPG@invalid?5deflate?5block?5BTYPE?5enco@"
	.long	"??_C@_0DG@LJBKCKDJ@NLEN?5is?5not?5ones?5complement?5of?5L@"
	.long	"??_C@_0DB@CCCHOPLJ@end?5of?5out?5buffer?5memory?5reached@"
	.long	"??_C@_0DA@BOMDJJCD@end?5of?5in?5buffer?5memory?5reached?5@"
	.long	"??_C@_0BO@LPIJIILG@invalid?5FCHECK?5in?5zlib?5header?$AA@"
	.long	"??_C@_0CK@OFGJAJAB@invalid?5compression?5method?5in?5zl@"
	.long	"??_C@_0DN@IHNMFLFH@FDICT?5encountered?5in?5zlib?5header@"
	.long	"??_C@_0CG@PKFJEKKJ@PNG?5file?5is?5smaller?5than?5a?5PNG?5h@"
	.long	"??_C@_0DC@KNOMKLMA@incorrect?5PNG?5signature?0?5it?8s?5no@"
	.long	"??_C@_0CE@PGBEOGCC@first?5chunk?5is?5not?5the?5header?5ch@"
	.long	"??_C@_0DI@DMLNOICN@chunk?5length?5too?5large?0?5chunk?5br@"
	.long	"??_C@_0BO@NDHLKIKI@illegal?5PNG?5color?5type?5or?5bpp?$AA@"
	.long	"??_C@_0BP@ODHKPHCH@illegal?5PNG?5compression?5method?$AA@"
	.long	"??_C@_0BK@NEGKONLH@illegal?5PNG?5filter?5method?$AA@"
	.long	"??_C@_0BN@BGHOFLAF@illegal?5PNG?5interlace?5method?$AA@"
	.long	"??_C@_0DM@MBIDFHIJ@chunk?5length?5of?5a?5chunk?5is?5too?5l@"
	.long	"??_C@_0CE@HJIDBMAH@illegal?5PNG?5filter?5type?5encounte@"
	.long	"??_C@_0CM@DFEKLLPN@illegal?5bit?5depth?5for?5this?5color@"
	.long	"??_C@_0CE@OODHKAPE@the?5palette?5is?5too?5small?5or?5too?5@"
	.long	"??_C@_0DN@OLGBICPI@tRNS?5chunk?5before?5PLTE?5or?5has?5mo@"
	.long	"??_C@_0CO@IDOGAOKB@tRNS?5chunk?5has?5wrong?5size?5for?5gr@"
	.long	"??_C@_0CI@IFCNLLFM@tRNS?5chunk?5has?5wrong?5size?5for?5RG@"
	.long	"??_C@_0EB@CHDDNMPD@tRNS?5chunk?5appeared?5while?5it?5was@"
	.long	"??_C@_0CM@HNLFOPI@bKGD?5chunk?5has?5wrong?5size?5for?5pa@"
	.long	"??_C@_0CO@ELMIGKLO@bKGD?5chunk?5has?5wrong?5size?5for?5gr@"
	.long	"??_C@_0CI@CMLABIJA@bKGD?5chunk?5has?5wrong?5size?5for?5RG@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0EI@GHHJBLGG@empty?5input?5buffer?5given?5to?5deco@"
	.long	"??_C@_0DJ@MHOEEPLI@jumped?5past?5memory?5while?5generat@"
	.long	"??_C@_0DJ@MHOEEPLI@jumped?5past?5memory?5while?5generat@"
	.long	"??_C@_0DB@BNPOFNMD@jumped?5past?5memory?5while?5inflati@"
	.long	"??_C@_0CD@ICHNJILK@jumped?5past?5memory?5while?5inflati@"
	.long	"??_C@_0BM@CEJPNBLF@size?5of?5zlib?5data?5too?5small?$AA@"
	.long	"??_C@_0DK@DEJNNMNC@repeat?5symbol?5in?5tree?5while?5ther@"
	.long	"??_C@_0CP@JKHHNIDN@jumped?5past?5tree?5while?5generatin@"
	.long	"??_C@_0EM@MLFECFBO@given?5output?5image?5colortype?5or?5@"
	.long	"??_C@_0DH@GCCBCJBH@invalid?5CRC?5encountered?5?$CIcheckin@"
	.long	"??_C@_0DP@NMFEBLDJ@invalid?5ADLER32?5encountered?5?$CIche@"
	.long	"??_C@_0CJ@PKIBMELO@requested?5color?5conversion?5not?5s@"
	.long	"??_C@_0EL@DFAHNGDC@invalid?5window?5size?5given?5in?5the@"
	.long	"??_C@_0FB@CGBCJAKP@invalid?5BTYPE?5given?5in?5the?5setti@"
	.long	"??_C@_0DB@GEFIFIEM@conversion?5from?5color?5to?5graysca@"
	.long	"??_C@_0EO@OPNCIJKM@length?5of?5a?5chunk?5too?5long?0?5max?5@"
	.long	"??_C@_0DK@CGBJPOCG@the?5length?5of?5the?5END?5symbol?5256@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0FP@NKPOKJKO@the?5length?5of?5a?5text?5chunk?5keywo@"
	.long	"??_C@_0FO@HGBKNLHO@the?5length?5of?5a?5text?5chunk?5keywo@"
	.long	"??_C@_0FJ@LPKJLMJ@tried?5to?5encode?5a?5PLTE?5chunk?5wit@"
	.long	"??_C@_0ED@FHCCPMOF@unknown?5chunk?5type?5with?5?8critica@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0DJ@OGMBNCEO@invalid?5interlace?5mode?5given?5to?5@"
	.long	"??_C@_0FN@JOBHGFBG@while?5decoding?0?5invalid?5compress@"
	.long	"??_C@_0BI@GJKJMBKH@invalid?5tIME?5chunk?5size?$AA@"
	.long	"??_C@_0BI@NMOBNHEN@invalid?5pHYs?5chunk?5size?$AA@"
	.long	"??_C@_0DJ@PANFLBNP@no?5null?5termination?5char?5found?5w@"
	.long	"??_C@_0CP@KDAKHJNL@iTXt?5chunk?5too?5short?5to?5contain?5@"
	.long	"??_C@_0CA@FGDALBLM@integer?5overflow?5in?5buffer?5size?$AA@"
	.long	"??_C@_0CA@CBHGFENA@failed?5to?5open?5file?5for?5reading?$AA@"
	.long	"??_C@_0CA@EHFMONBL@failed?5to?5open?5file?5for?5writing?$AA@"
	.long	"??_C@_0CD@MOHNLFBI@tried?5creating?5a?5tree?5of?50?5symbo@"
	.long	"??_C@_0CF@PBAGOFJG@lazy?5matching?5at?5pos?50?5is?5imposs@"
	.long	"??_C@_0FN@POPKDEPB@color?5conversion?5to?5palette?5requ@"
	.long	"??_C@_0BJ@FDBIHNP@memory?5allocation?5failed?$AA@"
	.long	"??_C@_0DK@JNCHGFNK@given?5image?5too?5small?5to?5contain@"
	.long	"??_C@_0BD@KFLAIOGJ@unknown?5error?5code?$AA@"
	.long	"??_C@_0DC@KAGBFHHD@impossible?5offset?5in?5lz77?5encodi@"
	.long	"??_C@_0FB@OFCJJNFO@must?5provide?5custom?5zlib?5functio@"
	.long	"??_C@_0EJ@PHLJLBOL@invalid?5filter?5strategy?5given?5fo@"
	.long	"??_C@_0DK@LPMOJNBK@text?5chunk?5keyword?5too?5short?5or?5@"
	.long	"??_C@_0CC@EIKGNLEE@windowsize?5must?5be?5a?5power?5of?5tw@"
	.long	"??_C@_0BP@ICCEHJFD@invalid?5decompressed?5idat?5size?$AA@"
	.long	"??_C@_0CI@JGFANBIB@integer?5overflow?5due?5to?5too?5many@"
	.long	"??_C@_0CA@MGMLPFDK@zero?5width?5or?5height?5is?5invalid?$AA@"
	.long	"??_C@_0CK@EGDBBGEN@header?5chunk?5must?5have?5a?5size?5of@"
	.long	"??_C@_0CP@IHBLLFBA@integer?5overflow?5with?5combined?5i@"
	.long	"??_C@_0BI@KJHGONNK@invalid?5gAMA?5chunk?5size?$AA@"
	.long	"??_C@_0BI@KBKJIHFD@invalid?5cHRM?5chunk?5size?$AA@"
	.long	"??_C@_0BI@KBICNMKA@invalid?5sRGB?5chunk?5size?$AA@"
	.long	"??_C@_0BO@IGFOGDFM@invalid?5sRGB?5rendering?5intent?$AA@"
	.long	"??_C@_0EO@BMBKHOHC@invalid?5ICC?5profile?5color?5type?0?5@"
	.long	"??_C@_0FE@BPIFLHKO@PNG?5specification?5does?5not?5allow@"
	.long	"??_C@_0FC@MLLAEFDG@not?5allowed?5to?5set?5grayscale?5ICC@"
	.long	"??_C@_0EG@EPGPMDIP@invalid?5palette?5index?5in?5bKGD?5ch@"
	.long	"??_C@_0EE@GHMHHHIO@invalid?5bKGD?5color?5while?5encodin@"
	.long	"??_C@_0BM@KEIHAKGF@integer?5overflow?5of?5bitsize?$AA@"
	.long	"??_C@_0DH@FKDLAJAG@PNG?5file?5must?5have?5PLTE?5chunk?5if@"
	.long	"??_C@_0FB@PHFDHCLM@color?5convert?5from?5palette?5mode?5@"
	.long	"??_C@_0CP@FAHPCGCI@tried?5to?5add?5more?5than?5256?5value@"
	.long	"??_C@_0EN@GBDNGCEI@tried?5to?5decompress?5zlib?5or?5defl@"
	.long	"??_C@_0CM@BLPPFIOD@custom?5zlib?5or?5inflate?5decompres@"
	.long	"??_C@_0CK@GAHFELDC@custom?5zlib?5or?5deflate?5compressi@"
	.long	"??_C@_0CD@FMIJDPHM@compressed?5text?5unreasonably?5lar@"
	.long	"??_C@_0BP@KANCDNDL@ICC?5profile?5unreasonably?5large?$AA@"

	.section	.drectve,"yn"
	.ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
	.ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=0\""
	.ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MT_StaticRelease\""
	.ascii	" /DEFAULTLIB:libcpmt.lib"
	.ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
	.safeseh	"___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z"
	.safeseh	"___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z"
	.safeseh	"___ehhandler$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z"
	.safeseh	"___ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
	.safeseh	"___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??1exception@std@@UAE@XZ"
	.safeseh	"___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	.globl	"??_7bad_array_new_length@std@@6B@"
.set "??_7bad_array_new_length@std@@6B@", L___unnamed_1+4
	.globl	"??_7bad_alloc@std@@6B@"
.set "??_7bad_alloc@std@@6B@", L___unnamed_2+4
	.globl	"??_7exception@std@@6B@"
.set "??_7exception@std@@6B@", L___unnamed_3+4
	.addrsig
	.addrsig_sym ___CxxFrameHandler3
	.addrsig_sym "___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1PBEIW4LodePNGColorType@@I@Z"
	.addrsig_sym "___ehhandler$?decode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@AAI1ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@W4LodePNGColorType@@I@Z"
	.addrsig_sym "___ehhandler$?encode@lodepng@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIIW4LodePNGColorType@@I@Z"
	.addrsig_sym "___ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z"
	.addrsig_sym "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??1exception@std@@UAE@XZ"
	.addrsig_sym "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??$_Insert_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@1@PAE1Uforward_iterator_tag@1@@Z"
	.addrsig_sym "??_7type_info@@6B@"
	.addrsig_sym "??_R0?AVbad_array_new_length@std@@@8"
	.addrsig_sym "??_R0?AVbad_alloc@std@@@8"
	.addrsig_sym "??_R0?AVexception@std@@@8"
	.addrsig_sym "??_R4bad_array_new_length@std@@6B@"
	.addrsig_sym "??_R3bad_array_new_length@std@@8"
	.addrsig_sym "??_R2bad_array_new_length@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_alloc@std@@8"
	.addrsig_sym "??_R3bad_alloc@std@@8"
	.addrsig_sym "??_R2bad_alloc@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@exception@std@@8"
	.addrsig_sym "??_R3exception@std@@8"
	.addrsig_sym "??_R2exception@std@@8"
	.addrsig_sym "??_R4bad_alloc@std@@6B@"
	.addrsig_sym "??_R4exception@std@@6B@"
