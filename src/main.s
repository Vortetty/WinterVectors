	.text
	.def	 @feat.00;
	.scl	3;
	.type	0;
	.endef
	.globl	@feat.00
.set @feat.00, 1
	.intel_syntax noprefix
	.file	"main.cpp"
	.def	 "?concolor_setup@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?concolor_setup@@YAXXZ"        # -- Begin function ?concolor_setup@@YAXXZ
	.p2align	4, 0x90
"?concolor_setup@@YAXXZ":               # @"?concolor_setup@@YAXXZ"
# %bb.0:
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [__imp__GetStdHandle@4]
	mov	dword ptr [esp], 0
	push	-11
	call	esi
	mov	ecx, esp
	push	ecx
	push	eax
	call	dword ptr [__imp__GetConsoleMode@8]
	mov	edi, dword ptr [esp]
	or	edi, 4
	mov	dword ptr [esp], edi
	push	-11
	call	esi
	push	edi
	push	eax
	call	dword ptr [__imp__SetConsoleMode@8]
	add	esp, 4
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z" # -- Begin function ?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z
	.p2align	4, 0x90
"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z": # @"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
Lfunc_begin0:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 236
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	movzx	ebx, byte ptr [ebp + 20]
	lea	eax, [ebp - 24]
	lea	edi, [ebp - 227]
	xor	esi, esi
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	.p2align	4, 0x90
LBB1_1:                                 # =>This Inner Loop Header: Depth=1
	mov	eax, ebx
	mov	ecx, -858993459
	inc	esi
	mul	ecx
	mov	ecx, ebx
	shr	edx, 3
	lea	eax, [edx + edx]
	lea	eax, [eax + 4*eax]
	sub	ecx, eax
	or	cl, 48
	mov	byte ptr [edi - 1], cl
	dec	edi
	cmp	ebx, 9
	mov	ebx, edx
	ja	LBB1_1
# %bb.2:
	test	esi, esi
	mov	dword ptr [ebp - 204], 15
	mov	dword ptr [ebp - 208], 0
	mov	byte ptr [ebp - 224], 0
	je	LBB1_6
# %bb.3:
	cmp	esi, 15
	jbe	LBB1_4
# %bb.5:
	mov	dword ptr [ebp - 16], -1
	sub	esp, 12
	mov	al, byte ptr [ebp - 200]
	lea	ecx, [ebp - 224]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB1_6
LBB1_4:
	mov	dword ptr [ebp - 208], esi
	lea	eax, [ebp - 224]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 224], 0
LBB1_6:
	movzx	ebx, byte ptr [ebp + 16]
	lea	edi, [ebp - 227]
	xor	esi, esi
	.p2align	4, 0x90
LBB1_7:                                 # =>This Inner Loop Header: Depth=1
	mov	eax, ebx
	mov	ecx, -858993459
	inc	esi
	mul	ecx
	mov	ecx, ebx
	shr	edx, 3
	lea	eax, [edx + edx]
	lea	eax, [eax + 4*eax]
	sub	ecx, eax
	or	cl, 48
	mov	byte ptr [edi - 1], cl
	dec	edi
	cmp	ebx, 9
	mov	ebx, edx
	ja	LBB1_7
# %bb.8:
	test	esi, esi
	mov	dword ptr [ebp - 156], 15
	mov	dword ptr [ebp - 160], 0
	mov	byte ptr [ebp - 176], 0
	je	LBB1_12
# %bb.9:
	cmp	esi, 15
	jbe	LBB1_10
# %bb.11:
	mov	dword ptr [ebp - 16], 8
	sub	esp, 12
	mov	al, byte ptr [ebp - 152]
	lea	ecx, [ebp - 176]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB1_12
LBB1_10:
	mov	dword ptr [ebp - 160], esi
	lea	eax, [ebp - 176]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 176], 0
LBB1_12:
	movzx	ebx, byte ptr [ebp + 12]
	lea	edi, [ebp - 227]
	xor	esi, esi
	.p2align	4, 0x90
LBB1_13:                                # =>This Inner Loop Header: Depth=1
	mov	eax, ebx
	mov	ecx, -858993459
	inc	esi
	mul	ecx
	mov	ecx, ebx
	shr	edx, 3
	lea	eax, [edx + edx]
	lea	eax, [eax + 4*eax]
	sub	ecx, eax
	or	cl, 48
	mov	byte ptr [edi - 1], cl
	dec	edi
	cmp	ebx, 9
	mov	ebx, edx
	ja	LBB1_13
# %bb.14:
	test	esi, esi
	mov	dword ptr [ebp - 36], 15
	mov	dword ptr [ebp - 40], 0
	mov	byte ptr [ebp - 56], 0
	je	LBB1_15
# %bb.16:
	cmp	esi, 15
	jbe	LBB1_17
# %bb.18:
	mov	dword ptr [ebp - 16], 9
	sub	esp, 12
	mov	al, byte ptr [ebp - 32]
	lea	ecx, [ebp - 56]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB1_19
LBB1_15:
	xor	eax, eax
	mov	ecx, 15
	mov	edx, ecx
	sub	edx, eax
	cmp	edx, 7
	jb	LBB1_29
LBB1_21:
	lea	edx, [eax + 7]
	cmp	ecx, 15
	mov	dword ptr [ebp - 40], edx
	jbe	LBB1_22
# %bb.23:
	mov	edi, dword ptr [ebp - 56]
	cmp	edi, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"+7
	mov	ebx, 7
	jb	LBB1_25
	jmp	LBB1_28
LBB1_17:
	mov	dword ptr [ebp - 40], esi
	lea	eax, [ebp - 56]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 56], 0
LBB1_19:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [ebp - 36]
	mov	edx, ecx
	sub	edx, eax
	cmp	edx, 7
	jae	LBB1_21
LBB1_29:
	mov	dword ptr [ebp - 16], 10
	sub	esp, 20
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 56]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 16], 7
	mov	dword ptr [esp + 12], offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp], 7
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
# %bb.30:
	mov	esi, eax
	jmp	LBB1_31
LBB1_22:
	lea	edi, [ebp - 56]
	cmp	edi, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"+7
	mov	ebx, 7
	jae	LBB1_28
LBB1_25:
	lea	ecx, [edi + eax]
	mov	ebx, 7
	cmp	ecx, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	jb	LBB1_28
# %bb.26:
	xor	ebx, ebx
	cmp	edi, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	jbe	LBB1_28
# %bb.27:
	mov	ecx, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	mov	ebx, edi
	sub	ebx, ecx
LBB1_28:
	lea	esi, [ebp - 56]
	inc	eax
	lea	ecx, [edi + 7]
	push	eax
	push	edi
	push	ecx
	call	_memmove
	add	esp, 12
	push	ebx
	push	offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	push	edi
	call	_memcpy
	add	esp, 12
	mov	ecx, 7
	lea	eax, [ebx + "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"+7]
	add	edi, ebx
	sub	ecx, ebx
	push	ecx
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12
LBB1_31:
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [esi + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [ebp - 80], xmm0
	movsd	qword ptr [ebp - 72], xmm1
	movsd	xmm0, qword ptr [esi + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 64], xmm0
	mov	dword ptr [esi + 16], 0
	mov	dword ptr [esi + 20], 15
	mov	byte ptr [esi], 0
	mov	ecx, dword ptr [ebp - 64]
	mov	edx, dword ptr [ebp - 60]
	cmp	edx, ecx
	jne	LBB1_32
# %bb.35:
	mov	dword ptr [ebp - 16], 11
	sub	esp, 16
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 80]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp + 8], offset "??_C@_01ICJEACDI@?$DL?$AA@"
	mov	dword ptr [esp], 1
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	jmp	LBB1_36
LBB1_32:
	lea	eax, [ebp - 80]
	lea	esi, [ecx + 1]
	cmp	edx, 15
	mov	edx, eax
	mov	dword ptr [ebp - 64], esi
	jbe	LBB1_34
# %bb.33:
	mov	edx, dword ptr [ebp - 80]
LBB1_34:
	mov	word ptr [edx + ecx], 59
	mov	dword ptr [ebp - 16], 12
LBB1_36:
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [ebp - 152], xmm0
	movsd	qword ptr [ebp - 144], xmm1
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 136], xmm0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 15
	mov	byte ptr [eax], 0
	mov	dword ptr [ebp - 16], 12
	sub	esp, 12
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 104]
	mov	byte ptr [esp], al
	lea	eax, [ebp - 176]
	mov	dword ptr [esp + 8], eax
	lea	eax, [ebp - 152]
	mov	dword ptr [esp + 4], eax
	call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z"
# %bb.37:
	mov	esi, dword ptr [ebp - 88]
	mov	ecx, dword ptr [ebp - 84]
	cmp	ecx, esi
	jne	LBB1_38
# %bb.41:
	mov	dword ptr [ebp - 16], 13
	sub	esp, 16
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 104]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp + 8], offset "??_C@_01ICJEACDI@?$DL?$AA@"
	mov	dword ptr [esp], 1
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	jmp	LBB1_42
LBB1_38:
	lea	eax, [ebp - 104]
	lea	edx, [esi + 1]
	cmp	ecx, 15
	mov	ecx, eax
	mov	dword ptr [ebp - 88], edx
	jbe	LBB1_40
# %bb.39:
	mov	ecx, dword ptr [ebp - 104]
LBB1_40:
	mov	word ptr [ecx + esi], 59
LBB1_42:
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [ebp - 200], xmm0
	movsd	qword ptr [ebp - 192], xmm1
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 184], xmm0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 15
	mov	byte ptr [eax], 0
	mov	dword ptr [ebp - 16], 14
	sub	esp, 12
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 128]
	mov	byte ptr [esp], al
	lea	eax, [ebp - 224]
	mov	dword ptr [esp + 8], eax
	lea	eax, [ebp - 200]
	mov	dword ptr [esp + 4], eax
	call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z"
# %bb.43:
	mov	esi, dword ptr [ebp - 112]
	mov	ecx, dword ptr [ebp - 108]
	cmp	ecx, esi
	jne	LBB1_44
# %bb.47:
	mov	dword ptr [ebp - 16], 15
	sub	esp, 16
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 128]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp + 8], offset "??_C@_01GOHFPIOK@m?$AA@"
	mov	dword ptr [esp], 1
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
# %bb.48:
	mov	edi, dword ptr [ebp + 8]
	jmp	LBB1_49
LBB1_44:
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 128]
	lea	edx, [esi + 1]
	cmp	ecx, 15
	mov	ecx, eax
	mov	dword ptr [ebp - 112], edx
	jbe	LBB1_46
# %bb.45:
	mov	ecx, dword ptr [ebp - 128]
LBB1_46:
	mov	word ptr [ecx + esi], 109
LBB1_49:
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [edi + 16], xmm0
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [edi + 8], xmm1
	movsd	qword ptr [edi], xmm0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 15
	mov	byte ptr [eax], 0
	mov	eax, dword ptr [ebp - 108]
	cmp	eax, 16
	jb	LBB1_57
# %bb.50:
	mov	ecx, dword ptr [ebp - 128]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_56
# %bb.51:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_52
# %bb.55:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_56:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_57:
	mov	eax, dword ptr [ebp - 180]
	mov	dword ptr [ebp - 112], 0
	mov	dword ptr [ebp - 108], 15
	mov	byte ptr [ebp - 128], 0
	cmp	eax, 16
	jb	LBB1_65
# %bb.58:
	mov	ecx, dword ptr [ebp - 200]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_64
# %bb.59:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_60
# %bb.63:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_64:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_65:
	mov	eax, dword ptr [ebp - 84]
	mov	dword ptr [ebp - 184], 0
	mov	dword ptr [ebp - 180], 15
	mov	byte ptr [ebp - 200], 0
	cmp	eax, 16
	jb	LBB1_73
# %bb.66:
	mov	ecx, dword ptr [ebp - 104]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_72
# %bb.67:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_68
# %bb.71:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_72:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_73:
	mov	eax, dword ptr [ebp - 132]
	mov	dword ptr [ebp - 88], 0
	mov	dword ptr [ebp - 84], 15
	mov	byte ptr [ebp - 104], 0
	cmp	eax, 16
	jb	LBB1_81
# %bb.74:
	mov	ecx, dword ptr [ebp - 152]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_80
# %bb.75:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_76
# %bb.79:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_80:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_81:
	mov	eax, dword ptr [ebp - 60]
	mov	dword ptr [ebp - 136], 0
	mov	dword ptr [ebp - 132], 15
	mov	byte ptr [ebp - 152], 0
	cmp	eax, 16
	jb	LBB1_89
# %bb.82:
	mov	ecx, dword ptr [ebp - 80]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_88
# %bb.83:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_84
# %bb.87:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_88:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_89:
	mov	eax, dword ptr [ebp - 36]
	mov	dword ptr [ebp - 64], 0
	mov	dword ptr [ebp - 60], 15
	mov	byte ptr [ebp - 80], 0
	cmp	eax, 16
	jb	LBB1_97
# %bb.90:
	mov	ecx, dword ptr [ebp - 56]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_96
# %bb.91:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_92
# %bb.95:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_96:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_97:
	mov	eax, dword ptr [ebp - 156]
	cmp	eax, 16
	jb	LBB1_105
# %bb.98:
	mov	ecx, dword ptr [ebp - 176]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_104
# %bb.99:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_100
# %bb.103:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_104:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_105:
	mov	eax, dword ptr [ebp - 204]
	cmp	eax, 16
	jb	LBB1_113
# %bb.106:
	mov	ecx, dword ptr [ebp - 224]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_112
# %bb.107:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_108
# %bb.111:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_112:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_113:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 236
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB1_52:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.53:
LBB1_60:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.61:
LBB1_68:
	mov	dword ptr [ebp - 16], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.69:
LBB1_76:
	mov	dword ptr [ebp - 16], 3
	call	__invalid_parameter_noinfo_noreturn
# %bb.77:
LBB1_84:
	mov	dword ptr [ebp - 16], 4
	call	__invalid_parameter_noinfo_noreturn
# %bb.85:
LBB1_92:
	mov	dword ptr [ebp - 16], 5
	call	__invalid_parameter_noinfo_noreturn
# %bb.93:
LBB1_100:
	mov	dword ptr [ebp - 16], 6
	call	__invalid_parameter_noinfo_noreturn
# %bb.101:
LBB1_108:
	mov	dword ptr [ebp - 16], 7
	call	__invalid_parameter_noinfo_noreturn
# %bb.109:
	.def	 "?dtor$54@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$54@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_54:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$62@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$62@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_62:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$70@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$70@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_70:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$78@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$78@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_78:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$86@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$86@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_86:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$94@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$94@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_94:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$102@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$102@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_102:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$110@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$110@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_110:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$114@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$114@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_114:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 108]
	cmp	eax, 16
	jb	LBB1_119
# %bb.115:
	mov	ecx, dword ptr [ebp - 128]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_118
# %bb.116:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_162
# %bb.117:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_118:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_119:
	mov	dword ptr [ebp - 112], 0
	mov	dword ptr [ebp - 108], 15
	mov	byte ptr [ebp - 128], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_162:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$120@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$120@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_120:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 180]
	cmp	eax, 16
	jb	LBB1_125
# %bb.121:
	mov	ecx, dword ptr [ebp - 200]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_124
# %bb.122:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_163
# %bb.123:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_124:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_125:
	mov	dword ptr [ebp - 184], 0
	mov	dword ptr [ebp - 180], 15
	mov	byte ptr [ebp - 200], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_163:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$126@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$126@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_126:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 84]
	cmp	eax, 16
	jb	LBB1_131
# %bb.127:
	mov	ecx, dword ptr [ebp - 104]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_130
# %bb.128:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_164
# %bb.129:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_130:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_131:
	mov	dword ptr [ebp - 88], 0
	mov	dword ptr [ebp - 84], 15
	mov	byte ptr [ebp - 104], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_164:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$132@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$132@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_132:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 132]
	cmp	eax, 16
	jb	LBB1_137
# %bb.133:
	mov	ecx, dword ptr [ebp - 152]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_136
# %bb.134:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_165
# %bb.135:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_136:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_137:
	mov	dword ptr [ebp - 136], 0
	mov	dword ptr [ebp - 132], 15
	mov	byte ptr [ebp - 152], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_165:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$138@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$138@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_138:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 60]
	cmp	eax, 16
	jb	LBB1_143
# %bb.139:
	mov	ecx, dword ptr [ebp - 80]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_142
# %bb.140:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_166
# %bb.141:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_142:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_143:
	mov	dword ptr [ebp - 64], 0
	mov	dword ptr [ebp - 60], 15
	mov	byte ptr [ebp - 80], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_166:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$144@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$144@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_144:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jb	LBB1_149
# %bb.145:
	mov	ecx, dword ptr [ebp - 56]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_148
# %bb.146:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_167
# %bb.147:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_148:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_149:
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 15
	mov	byte ptr [ebp - 56], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_167:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$150@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$150@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_150:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 156]
	cmp	eax, 16
	jb	LBB1_155
# %bb.151:
	mov	ecx, dword ptr [ebp - 176]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_154
# %bb.152:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_168
# %bb.153:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_154:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_155:
	mov	dword ptr [ebp - 160], 0
	mov	dword ptr [ebp - 156], 15
	mov	byte ptr [ebp - 176], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_168:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$156@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$156@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_156:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 204]
	cmp	eax, 16
	jb	LBB1_161
# %bb.157:
	mov	ecx, dword ptr [ebp - 224]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_160
# %bb.158:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_169
# %bb.159:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_160:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_161:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_169:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end0:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z":
	.long	429065506                       # MagicNumber
	.long	16                              # MaxState
	.long	("$stateUnwindMap$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z":
	.long	-1                              # ToState
	.long	"?dtor$54@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$62@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$70@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$78@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$86@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$94@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$102@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$110@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$156@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	8                               # ToState
	.long	"?dtor$150@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	9                               # ToState
	.long	"?dtor$144@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	10                              # ToState
	.long	"?dtor$138@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	11                              # ToState
	.long	"?dtor$132@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	12                              # ToState
	.long	"?dtor$126@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	13                              # ToState
	.long	"?dtor$120@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	14                              # ToState
	.long	"?dtor$114@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ" # -- Begin function ?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	.p2align	4, 0x90
"?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ": # @"?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	dword ptr [eax + 20], 15
	mov	dword ptr [eax + 16], 4
	mov	dword ptr [eax], 1831885595
	mov	byte ptr [eax + 4], 0
	ret
                                        # -- End function
	.def	 "??__FsupportedExtensions@@YAXXZ";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ??__FsupportedExtensions@@YAXXZ
"??__FsupportedExtensions@@YAXXZ":      # @"??__FsupportedExtensions@@YAXXZ"
# %bb.0:
	mov	ecx, offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	call	"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	mov	eax, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"]
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	ret
                                        # -- End function
	.def	 "?genInt@@YAIEEEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?genInt@@YAIEEEE@Z"            # -- Begin function ?genInt@@YAIEEEE@Z
	.p2align	4, 0x90
"?genInt@@YAIEEEE@Z":                   # @"?genInt@@YAIEEEE@Z"
# %bb.0:
	push	esi
	movzx	edx, byte ptr [esp + 12]
	mov	esi, dword ptr [esp + 8]
	movzx	eax, byte ptr [esp + 16]
	movzx	ecx, byte ptr [esp + 20]
	shl	esi, 24
	shl	edx, 16
	shl	eax, 8
	or	edx, esi
	or	eax, edx
	or	eax, ecx
	pop	esi
	ret
                                        # -- End function
	.def	 "?genInt16@@YAGEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?genInt16@@YAGEE@Z"            # -- Begin function ?genInt16@@YAGEE@Z
	.p2align	4, 0x90
"?genInt16@@YAGEE@Z":                   # @"?genInt16@@YAGEE@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	movzx	ecx, byte ptr [esp + 8]
	shl	eax, 8
	or	eax, ecx
                                        # kill: def $ax killed $ax killed $eax
	ret
                                        # -- End function
	.def	 "?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z" # -- Begin function ?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z
	.p2align	4, 0x90
"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z": # @"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	edx, dword ptr [esp + 20]
	mov	ecx, dword ptr [esp + 16]
	mov	eax, dword ptr [esp + 28]
	imul	edx, dword ptr [esp + 24]
	shl	ecx, 2
	mov	ebx, dword ptr [eax + 8]
	lea	esi, [ecx + 4*edx]
	dec	ebx
	add	esi, dword ptr [eax + 12]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 32]
	mov	byte ptr [edi + esi], bl
	lea	esi, [ecx + 4*edx + 1]
	add	esi, dword ptr [eax + 12]
	mov	ebx, dword ptr [eax + 8]
	mov	edi, esi
	dec	ebx
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 36]
	mov	byte ptr [edi + esi], bl
	lea	esi, [ecx + 4*edx + 2]
	lea	ecx, [ecx + 4*edx + 3]
	add	esi, dword ptr [eax + 12]
	mov	ebx, dword ptr [eax + 8]
	mov	edi, esi
	dec	ebx
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 40]
	mov	byte ptr [edi + esi], bl
	add	ecx, dword ptr [eax + 12]
	mov	esi, dword ptr [eax + 8]
	mov	eax, dword ptr [eax + 4]
	mov	edx, ecx
	dec	esi
	and	ecx, 15
	shr	edx, 4
	and	esi, edx
	mov	dl, byte ptr [esp + 44]
	mov	eax, dword ptr [eax + 4*esi]
	mov	byte ptr [eax + ecx], dl
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z" # -- Begin function ?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z
	.p2align	4, 0x90
"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z": # @"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	edx, dword ptr [esp + 20]
	mov	ecx, dword ptr [esp + 16]
	mov	eax, dword ptr [esp + 28]
	imul	edx, dword ptr [esp + 24]
	shl	ecx, 2
	mov	ebx, dword ptr [eax + 8]
	lea	esi, [ecx + 4*edx]
	dec	ebx
	add	esi, dword ptr [eax + 12]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 32]
	mov	byte ptr [edi + esi], bl
	lea	esi, [ecx + 4*edx + 1]
	add	esi, dword ptr [eax + 12]
	mov	ebx, dword ptr [eax + 8]
	mov	edi, esi
	dec	ebx
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 33]
	mov	byte ptr [edi + esi], bl
	lea	esi, [ecx + 4*edx + 2]
	lea	ecx, [ecx + 4*edx + 3]
	add	esi, dword ptr [eax + 12]
	mov	ebx, dword ptr [eax + 8]
	mov	edi, esi
	dec	ebx
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 34]
	mov	byte ptr [edi + esi], bl
	add	ecx, dword ptr [eax + 12]
	mov	esi, dword ptr [eax + 8]
	mov	eax, dword ptr [eax + 4]
	mov	edx, ecx
	dec	esi
	and	ecx, 15
	shr	edx, 4
	and	esi, edx
	mov	dl, byte ptr [esp + 35]
	mov	eax, dword ptr [eax + 4*esi]
	mov	byte ptr [eax + ecx], dl
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?pointDistance@@YANIIII@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__real@4330000000000000         # -- Begin function ?pointDistance@@YANIIII@Z
	.section	.rdata,"dr",discard,__real@4330000000000000
	.p2align	3
__real@4330000000000000:
	.quad	0x4330000000000000              # double 4503599627370496
	.text
	.globl	"?pointDistance@@YANIIII@Z"
	.p2align	4, 0x90
"?pointDistance@@YANIIII@Z":            # @"?pointDistance@@YANIIII@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	and	esp, -8
	sub	esp, 8
	mov	eax, dword ptr [ebp + 20]
	mov	ecx, dword ptr [ebp + 16]
	movq	xmm1, qword ptr [__real@4330000000000000] # xmm1 = mem[0],zero
	sub	ecx, dword ptr [ebp + 8]
	sub	eax, dword ptr [ebp + 12]
	imul	ecx, ecx
	imul	eax, eax
	add	eax, ecx
	movd	xmm0, eax
	por	xmm0, xmm1
	subsd	xmm0, xmm1
	sqrtsd	xmm0, xmm0
	movsd	qword ptr [esp], xmm0
	fld	qword ptr [esp]
	mov	esp, ebp
	pop	ebp
	ret
                                        # -- End function
	.def	 "?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z" # -- Begin function ?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z
	.p2align	4, 0x90
"?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z": # @"?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	ecx, dword ptr [esp + 24]
	mov	ebp, 268435455
	mov	esi, dword ptr [ecx + 12]
	add	ebp, dword ptr [ecx + 8]
	mov	ebx, dword ptr [ecx + 4]
	lea	eax, [esi + 3]
	mov	edx, eax
	and	eax, 15
	shr	edx, 4
	and	edx, ebp
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	eax, byte ptr [edx + eax]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 2]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [edi + eax]
	lea	eax, [esi + 1]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, esi
	shr	eax, 4
	and	eax, ebp
	mov	edx, dword ptr [ebx + 4*eax]
	mov	eax, dword ptr [esp + 24]
	mov	ebx, esi
	add	esi, 4
	and	ebx, 15
	mov	ebp, dword ptr [eax + 16]
	mov	eax, 3
	movzx	edx, byte ptr [edx + ebx]
	cmp	ebp, 1
	cmovne	eax, esi
	cmp	ebp, 2
	mov	esi, 1
	cmove	eax, ebp
	cmp	ebp, 3
	cmovne	esi, eax
	xor	eax, eax
	cmp	ebp, 4
	cmovne	eax, esi
	shl	ecx, 8
	mov	esi, dword ptr [esp + 24]
	shl	edi, 16
	shl	edx, 24
	add	ebp, -4
	add	ecx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [esi + 12], eax
	mov	dword ptr [esi + 16], ebp
	or	ecx, edi
	or	ecx, edx
	mov	eax, ecx
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z" # -- Begin function ?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z
	.p2align	4, 0x90
"?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z": # @"?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	ecx, dword ptr [esp + 16]
	mov	ebx, 268435455
	mov	edx, dword ptr [ecx + 12]
	add	ebx, dword ptr [ecx + 8]
	mov	eax, dword ptr [ecx + 4]
	lea	esi, [edx + 1]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	edi, ebx
	mov	edi, dword ptr [eax + 4*edi]
	movzx	esi, byte ptr [edi + esi]
	mov	edi, edx
	shr	edi, 4
	and	edi, ebx
	mov	ebx, edx
	add	edx, 2
	mov	eax, dword ptr [eax + 4*edi]
	and	ebx, 15
	movzx	eax, byte ptr [eax + ebx]
	shl	eax, 8
	or	eax, esi
	mov	esi, dword ptr [ecx + 16]
	cmp	esi, 1
	cmove	edx, esi
	xor	edi, edi
	add	esi, -2
	cmovne	edi, edx
	mov	dword ptr [ecx + 16], esi
	mov	dword ptr [ecx + 12], edi
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z" # -- Begin function ?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z
	.p2align	4, 0x90
"?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z": # @"?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z"
# %bb.0:
	push	edi
	push	esi
	mov	ecx, dword ptr [esp + 12]
	mov	edx, dword ptr [ecx + 12]
	mov	edi, dword ptr [ecx + 8]
	mov	esi, dword ptr [ecx + 4]
	mov	eax, edx
	dec	edi
	shr	eax, 4
	and	edi, eax
	mov	eax, edx
	inc	edx
	mov	esi, dword ptr [esi + 4*edi]
	and	eax, 15
	mov	al, byte ptr [esi + eax]
	xor	esi, esi
	dec	dword ptr [ecx + 16]
	cmovne	esi, edx
	mov	dword ptr [ecx + 12], esi
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z" # -- Begin function ?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z
	.p2align	4, 0x90
"?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z": # @"?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	ecx, dword ptr [esp + 24]
	mov	ebp, 268435455
	mov	esi, dword ptr [ecx + 12]
	add	ebp, dword ptr [ecx + 8]
	mov	ebx, dword ptr [ecx + 4]
	mov	eax, esi
	mov	edx, esi
	shr	eax, 4
	and	edx, 15
	and	eax, ebp
	mov	eax, dword ptr [ebx + 4*eax]
	movzx	eax, byte ptr [eax + edx]
	lea	edx, [esi + 3]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 1]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [edi + eax]
	lea	eax, [esi + 2]
	add	esi, 4
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, edx
	and	edx, 15
	shr	eax, 4
	and	eax, ebp
	mov	ebp, 3
	mov	eax, dword ptr [ebx + 4*eax]
	mov	ebx, dword ptr [esp + 24]
	mov	ebx, dword ptr [ebx + 16]
	movzx	eax, byte ptr [eax + edx]
	mov	edx, dword ptr [esp + 24]
	cmp	ebx, 1
	cmovne	ebp, esi
	cmp	ebx, 2
	mov	esi, 1
	cmove	ebp, ebx
	cmp	ebx, 3
	cmovne	esi, ebp
	xor	ebp, ebp
	cmp	ebx, 4
	cmovne	ebp, esi
	shl	ecx, 8
	shl	edi, 16
	shl	eax, 24
	add	ebx, -4
	add	ecx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [edx + 12], ebp
	mov	dword ptr [edx + 16], ebx
	or	ecx, edi
	or	ecx, eax
	mov	eax, ecx
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?checkInstructionSetSupported@@YA_NEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?checkInstructionSetSupported@@YA_NEE@Z" # -- Begin function ?checkInstructionSetSupported@@YA_NEE@Z
	.p2align	4, 0x90
"?checkInstructionSetSupported@@YA_NEE@Z": # @"?checkInstructionSetSupported@@YA_NEE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	edx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"]
	mov	esi, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+12]
	mov	ecx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+16]
	test	edx, edx
	je	LBB13_1
# %bb.2:
	mov	ebx, dword ptr [edx]
	lea	edx, [ecx + esi]
	test	ecx, ecx
	mov	eax, edx
	jne	LBB13_4
	jmp	LBB13_9
LBB13_1:
	xor	ebx, ebx
	lea	edx, [ecx + esi]
	test	ecx, ecx
	mov	eax, edx
	je	LBB13_9
LBB13_4:
	mov	dword ptr [esp], edx            # 4-byte Spill
	movzx	edx, byte ptr [esp + 24]
	movzx	edi, byte ptr [esp + 28]
	shl	edx, 8
	or	edx, edi
	mov	edi, 536870911
	add	edi, dword ptr [ebx + 8]
	mov	ebx, dword ptr [ebx + 4]
	.p2align	4, 0x90
LBB13_5:                                # =>This Inner Loop Header: Depth=1
	mov	ebp, esi
	mov	eax, esi
	shr	ebp, 3
	and	eax, 7
	and	ebp, edi
	mov	ebp, dword ptr [ebx + 4*ebp]
	movzx	eax, word ptr [ebp + 2*eax]
	cmp	edx, eax
	je	LBB13_6
# %bb.7:                                #   in Loop: Header=BB13_5 Depth=1
	inc	esi
	dec	ecx
	jne	LBB13_5
# %bb.8:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	eax, edx
	jmp	LBB13_9
LBB13_6:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	eax, esi
LBB13_9:
	cmp	eax, edx
	setne	al
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z" # -- Begin function ?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z
	.p2align	4, 0x90
"?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z": # @"?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
Lfunc_begin1:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 256
	mov	esi, esp
	mov	dword ptr [esi + 232], ebp
	mov	dword ptr [esi + 236], esp
	mov	dword ptr [esi + 248], -1
	mov	dword ptr [esi + 244], offset "___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	mov	eax, dword ptr [ebp + 12]
	lea	ecx, [esi + 240]
	lea	edi, [esi + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [esi + 240], edx
	mov	dword ptr fs:[0], ecx
	mov	ecx, edi
	push	1
	push	64
	push	32
	push	eax
	call	"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	mov	eax, dword ptr [esi + 8]
	mov	ecx, edi
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + 248], 1
	and	dword ptr [esi + eax + 28], -2
	push	2
	push	0
	push	0
	call	"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
# %bb.1:
	lea	eax, [esi + 208]
	lea	ecx, [esi + 8]
	push	eax
	call	"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
# %bb.2:
	lea	ecx, [esi + 8]
	push	0
	push	0
	push	0
	call	"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
# %bb.3:
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.4:
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [esi], esp            # 4-byte Spill
	mov	dword ptr [ecx], eax
	mov	dword ptr [eax], ecx
	push	eax
	sub	esp, 28
	mov	ecx, esp
	lea	edx, [esi + 8]
	mov	dword ptr [esi + 248], 2
	lea	eax, [ecx + 20]
	mov	dword ptr [ecx + 24], 0
	mov	byte ptr [ecx + 28], 0
	mov	dword ptr [ecx + 16], edx
	mov	dword ptr [esi + 4], ecx        # 4-byte Spill
	mov	byte ptr [ecx + 20], 0
	push	eax
	push	edx
	call	"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	add	esp, 8
# %bb.5:
	mov	ecx, dword ptr [eax]
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	mov	ecx, dword ptr [ecx + 4]
	test	byte ptr [eax + ecx + 12], 6
	je	LBB14_7
# %bb.6:
	mov	dword ptr [edi + 16], 0
LBB14_7:
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [edi + 4], 0
	mov	dword ptr [edi + 8], 0
	mov	edx, dword ptr [ecx]
	mov	eax, dword ptr [ecx + 12]
	test	edx, edx
	je	LBB14_11
# %bb.8:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB14_10
# %bb.9:
	mov	edx, dword ptr [edx]
	mov	dword ptr [edi + 4], edx
LBB14_11:
	mov	dword ptr [edi + 12], eax
	lea	eax, [esi + 196]
	mov	dword ptr [edi], eax
	call	"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
LBB14_12:
	mov	esp, dword ptr [esi]            # 4-byte Reload
	mov	eax, dword ptr [esi + 8]
	lea	edi, [esi + 120]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + eax + 8], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [esi + 8]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [esi + eax + 4], ecx
	lea	ecx, [esi + 24]
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	mov	dword ptr [esi + 120], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [esi + 248], 0
	push	edi
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.13:
	mov	eax, dword ptr [esi + 240]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 8]
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB14_10:
	mov	dword ptr [edi + 4], 0
	mov	dword ptr [edi + 12], eax
	lea	eax, [esi + 196]
	mov	dword ptr [edi], eax
	call	"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	jmp	LBB14_12
	.def	 "?dtor$14@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA":
LBB14_14:
	push	ebp
	sub	esp, 32
	lea	esi, [ebp - 252]
	mov	ebp, dword ptr [esi + 232]
	mov	edi, dword ptr [ebp + 8]
	mov	ecx, edi
	call	"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	mov	eax, dword ptr [edi]
	mov	dword ptr [edi], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 40
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$15@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA":
LBB14_15:
	push	ebp
	sub	esp, 32
	lea	esi, [ebp - 252]
	mov	ebp, dword ptr [esi + 232]
	mov	eax, dword ptr [esi + 8]
	lea	edi, [esi + 120]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + eax + 8], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [esi + 8]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [esi + eax + 4], ecx
	lea	ecx, [esi + 24]
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	mov	dword ptr [esi + 120], offset "??_7ios_base@std@@6B@"
	push	edi
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 36
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$16@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA":
LBB14_16:
	push	ebp
	sub	esp, 32
	lea	esi, [ebp - 252]
	mov	ebp, dword ptr [esi + 232]
	call	___std_terminate
Lfunc_end1:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$16@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$15@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA" # Action
	.long	1                               # ToState
	.long	"?dtor$14@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.globl	"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z" # -- Begin function ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	.p2align	4, 0x90
"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z": # @"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
Lfunc_begin2:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 48
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	mov	edx, ecx
	cmp	dword ptr [ebp + 20], 0
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB15_1
# %bb.2:
	mov	eax, offset "??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@"
	mov	dword ptr [edx], offset "??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@"
	mov	dword ptr [edx + 112], offset "??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	jmp	LBB15_3
LBB15_1:
	mov	eax, dword ptr [edx]
LBB15_3:
	mov	eax, dword ptr [eax + 4]
	lea	esi, [edx + 16]
	mov	dword ptr [edx + eax], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [edx + eax - 4], ecx
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [edx + eax], offset "??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 24]
	mov	dword ptr [edx + eax - 4], ecx
	mov	dword ptr [edx + 12], 0
	mov	dword ptr [edx + 8], 0
	mov	eax, dword ptr [edx]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 16], 1
	add	ecx, edx
	push	0
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	push	esi
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	call	"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
# %bb.4:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [edx + eax], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [edx + eax - 4], ecx
	mov	dword ptr [edx + 16], offset "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
# %bb.5:
	mov	dword ptr [ebp - 16], 0
	push	1
	call	"?_Init@locale@std@@CAPAV_Locimp@12@_N@Z"
	add	esp, 4
# %bb.6:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	esi, dword ptr [ebp + 12]
	mov	edx, dword ptr [ebp + 16]
	mov	dword ptr [ecx + 4], eax
	mov	dword ptr [edi + 68], ecx
	lea	eax, [edi + 20]
	lea	ecx, [edi + 24]
	mov	dword ptr [edi + 16], offset "??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	mov	byte ptr [edi + 88], 0
	mov	byte ptr [edi + 77], 0
	or	esi, 1
	mov	dword ptr [edi + 28], eax
	mov	dword ptr [edi + 32], ecx
	lea	eax, [edi + 36]
	lea	ecx, [edi + 40]
	mov	dword ptr [edi + 44], eax
	mov	dword ptr [edi + 48], ecx
	lea	eax, [edi + 52]
	lea	ecx, [edi + 56]
	mov	dword ptr [edi + 60], eax
	mov	dword ptr [edi + 64], ecx
	mov	dword ptr [edi + 24], 0
	mov	dword ptr [edi + 40], 0
	mov	dword ptr [edi + 56], 0
	mov	dword ptr [edi + 20], 0
	mov	dword ptr [edi + 36], 0
	mov	dword ptr [edi + 52], 0
	mov	dword ptr [edi + 92], 0
	mov	eax, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"]
	mov	ecx, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"+4]
	mov	dword ptr [edi + 80], eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [edi + 84], ecx
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [edi + 72], 0
	mov	dword ptr [ebp - 16], 2
	push	edx
	push	esi
	push	eax
	call	"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
# %bb.7:
	test	eax, eax
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	jne	LBB15_14
# %bb.8:
	mov	ecx, dword ptr [eax]
	mov	edx, dword ptr [ecx + 4]
	xor	ecx, ecx
	cmp	dword ptr [eax + edx + 56], 0
	mov	ebx, dword ptr [eax + edx + 12]
	sete	cl
	and	ebx, 21
	shl	ecx, 2
	or	ebx, ecx
	or	ebx, 2
	mov	dword ptr [eax + edx + 12], ebx
	mov	ecx, dword ptr [eax + edx + 16]
	and	ebx, ecx
	jne	LBB15_9
LBB15_14:
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 48
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	16
LBB15_9:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB15_11
# %bb.10:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB15_11:
	test	cl, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	edx, ecx
	test	bl, 4
	lea	ecx, [ebp - 60]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.12:
	mov	dword ptr [ebp - 60], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 60]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.13:
	.def	 "?dtor$15@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA":
LBB15_15:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$16@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA":
LBB15_16:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	cmp	dword ptr [ebp + 20], 0
	je	LBB15_18
# %bb.17:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax + 112], offset "??_7ios_base@std@@6B@"
	add	eax, 112
	push	eax
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
LBB15_18:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$19@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA":
LBB15_19:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end2:
	.section	.xdata,"dr",associative,"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.p2align	2
"L__ehtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z":
	.long	-1                              # ToState
	.long	"?dtor$19@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$16@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA" # Action
	.long	1                               # ToState
	.long	"?dtor$15@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA" # Action
	.section	.text,"xr",discard,"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
                                        # -- End function
	.def	 "?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.globl	"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z" # -- Begin function ?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
	.p2align	4, 0x90
"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z": # @"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
Lfunc_begin3:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 64
	mov	esi, esp
	mov	dword ptr [esi + 40], ebp
	mov	dword ptr [esi + 44], esp
	mov	dword ptr [esi + 56], -1
	mov	dword ptr [esi + 52], offset "___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	mov	edi, ecx
	lea	eax, [esi + 48]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [esi + 48], ecx
	mov	dword ptr fs:[0], eax
	xor	ecx, ecx
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [edi + edx + 56], 0
	mov	eax, dword ptr [edi + edx + 12]
	sete	cl
	and	eax, 22
	shl	ecx, 2
	or	eax, ecx
	mov	dword ptr [edi + edx + 12], eax
	and	eax, dword ptr [edi + edx + 16]
	jne	LBB16_1
# %bb.4:
	mov	eax, dword ptr [edi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edi + eax + 56]
	test	ecx, ecx
	je	LBB16_6
# %bb.5:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
LBB16_6:
	mov	dword ptr [esi + 56], 0
	mov	ecx, edi
	push	1
	mov	dword ptr [esi + 4], edi        # 4-byte Spill
	call	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
# %bb.7:
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, edx
	test	byte ptr [edx + ecx + 12], 6
	jne	LBB16_19
# %bb.8:
	mov	ecx, dword ptr [eax + ecx + 56]
	mov	edi, dword ptr [ebp + 8]
	mov	ebx, dword ptr [ebp + 16]
	lea	edx, [esi + 8]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 40]
	mov	dword ptr [esi + 56], 2
	push	1
	push	ebx
	push	dword ptr [ebp + 12]
	push	edi
	push	edx
	call	eax
# %bb.9:
	mov	eax, dword ptr [esi + 16]
	mov	ecx, dword ptr [esi + 20]
	add	eax, dword ptr [esi + 8]
	adc	ecx, dword ptr [esi + 12]
	and	ecx, eax
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	cmp	ecx, -1
	jne	LBB16_19
# %bb.10:
	mov	ecx, dword ptr [eax]
	mov	edx, dword ptr [ecx + 4]
	xor	ecx, ecx
	cmp	dword ptr [eax + edx + 56], 0
	mov	ebx, dword ptr [eax + edx + 12]
	sete	cl
	and	ebx, 21
	shl	ecx, 2
	or	ebx, ecx
	or	ebx, 2
	mov	dword ptr [eax + edx + 12], ebx
	mov	ecx, dword ptr [eax + edx + 16]
	and	ebx, ecx
	jne	LBB16_11
LBB16_19:
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB16_21
# %bb.20:
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 8]
	mov	dword ptr [esi + 56], 1
	call	edx
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
LBB16_21:
	mov	ecx, dword ptr [esi + 48]
	mov	dword ptr fs:[0], ecx
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB16_1:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB16_3
# %bb.2:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB16_3:
	test	al, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	lea	edi, [esi + 8]
	mov	dword ptr [esi + 32], 1
	mov	dword ptr [esi + 36], offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	mov	ecx, edi
	cmove	eax, edx
	lea	edx, [esi + 32]
	push	edx
	push	eax
	call	"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	push	edi
	call	__CxxThrowException@8
LBB16_11:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB16_13
# %bb.12:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB16_13:
	test	cl, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	edx, ecx
	test	bl, 4
	lea	ecx, [esi + 8]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.14:
	mov	dword ptr [esi + 8], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [esi + 8]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.18:
	.def	 "?dtor$15@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA":
LBB16_15:
	push	ebp
	sub	esp, 20
	lea	esi, [ebp - 60]
	mov	ebp, dword ptr [esi + 40]
	mov	ecx, dword ptr [esi + 4]        # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB16_17
# %bb.16:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB16_17:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$22@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA":
LBB16_22:
	push	ebp
	sub	esp, 20
	lea	esi, [ebp - 60]
	mov	ebp, dword ptr [esi + 40]
	mov	ecx, dword ptr [esi + 4]        # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB16_24
# %bb.23:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB16_24:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$25@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$25@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA":
LBB16_25:
	push	ebp
	sub	esp, 20
	lea	esi, [ebp - 60]
	mov	ebp, dword ptr [esi + 40]
	call	___std_terminate
Lfunc_end3:
	.section	.xdata,"dr",associative,"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.p2align	2
"L__ehtable$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z":
	.long	-1                              # ToState
	.long	"?dtor$15@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$25@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$22@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA" # Action
	.section	.text,"xr",discard,"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
                                        # -- End function
	.def	 "?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.globl	"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ" # -- Begin function ?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ
	.p2align	4, 0x90
"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ": # @"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
Lfunc_begin4:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	test	ecx, ecx
	je	LBB17_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
LBB17_2:
	mov	dword ptr [ebp - 16], 0
	mov	ecx, esi
	push	1
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	call	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
# %bb.3:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp + 8]
	mov	esi, dword ptr [edx]
	mov	ecx, dword ptr [esi + 4]
	test	byte ptr [edx + ecx + 12], 6
	je	LBB17_4
# %bb.9:
	mov	dword ptr [eax + 4], -1
	mov	dword ptr [eax], -1
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	ecx, dword ptr [esi + 4]
	mov	ecx, dword ptr [edx + ecx + 56]
	test	ecx, ecx
	jne	LBB17_11
	jmp	LBB17_12
LBB17_4:
	mov	ecx, dword ptr [edx + ecx + 56]
	mov	esi, dword ptr [ecx]
	mov	esi, dword ptr [esi + 40]
	mov	dword ptr [ebp - 16], 2
	push	1
	push	1
	push	0
	push	0
	push	eax
	call	esi
# %bb.5:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp + 8]
	mov	esi, dword ptr [edx]
	mov	ecx, dword ptr [esi + 4]
	mov	ecx, dword ptr [edx + ecx + 56]
	test	ecx, ecx
	je	LBB17_12
LBB17_11:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	eax, dword ptr [ebp + 8]
LBB17_12:
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$6@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA":
LBB17_6:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB17_8
# %bb.7:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB17_8:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$13@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA":
LBB17_13:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB17_15
# %bb.14:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB17_15:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$16@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA":
LBB17_16:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
Lfunc_end4:
	.section	.xdata,"dr",associative,"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.p2align	2
"L__ehtable$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ":
	.long	-1                              # ToState
	.long	"?dtor$6@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$16@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$13@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA" # Action
	.section	.text,"xr",discard,"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
                                        # -- End function
	.def	 "??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.globl	"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z" # -- Begin function ??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z
	.p2align	4, 0x90
"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z": # @"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
Lfunc_begin5:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 76
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	mov	ebx, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 8]
	mov	ecx, dword ptr [ebp + 24]
	mov	edx, dword ptr [ebp + 28]
	mov	esi, dword ptr [ebp + 20]
	mov	dword ptr [ebp - 64], eax       # 4-byte Spill
	mov	eax, dword ptr [ebx + 12]
	mov	dword ptr [ebp - 56], edx
	mov	dword ptr [ebp - 60], ecx
	mov	edx, dword ptr [ebp + 32]
	sub	esi, eax
	cmp	edx, ecx
	mov	dword ptr [ebp - 52], esi       # 4-byte Spill
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	je	LBB18_92
# %bb.1:
	mov	edx, dword ptr [ebx + 16]
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	ecx, edx
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	shr	ecx
	cmp	dword ptr [ebp - 52], ecx       # 4-byte Folded Reload
	jbe	LBB18_13
# %bb.2:
	mov	ecx, edx
	lea	edx, [ecx + eax]
	test	dl, 15
	jne	LBB18_7
	.p2align	4, 0x90
LBB18_4:
	lea	edx, [ecx + 16]
	shr	edx, 4
	cmp	dword ptr [ebx + 8], edx
	ja	LBB18_7
# %bb.5:
	mov	dword ptr [ebp - 16], 2
	mov	ecx, ebx
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.6:
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebx + 12]
	mov	ecx, dword ptr [ebx + 16]
	.p2align	4, 0x90
LBB18_7:                                # =>This Inner Loop Header: Depth=1
	mov	esi, dword ptr [ebx + 8]
	mov	edx, esi
	add	esi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, eax
	mov	eax, dword ptr [ebx + 4]
	mov	dword ptr [ebx + 12], edx
	add	edx, ecx
	mov	ecx, edx
	shr	ecx, 4
	and	esi, ecx
	mov	eax, dword ptr [eax + 4*esi]
	mov	dword ptr [ebp - 16], 2
	test	eax, eax
	jne	LBB18_10
# %bb.8:                                #   in Loop: Header=BB18_7 Depth=1
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	mov	dword ptr [ebp - 44], edx       # 4-byte Spill
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.9:                                #   in Loop: Header=BB18_7 Depth=1
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebx + 4]
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [ebx + 4]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [ebp - 44]       # 4-byte Reload
LBB18_10:                               #   in Loop: Header=BB18_7 Depth=1
	movzx	ecx, byte ptr [ebp - 56]
	and	edx, 15
	mov	byte ptr [eax + edx], cl
	inc	dword ptr [ebx + 16]
	lea	eax, [ebp - 56]
	push	eax
	push	dword ptr [ebp - 60]
	call	"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	add	esp, 8
# %bb.11:                               #   in Loop: Header=BB18_7 Depth=1
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	test	byte ptr [eax + ecx + 12], 6
	je	LBB18_12
# %bb.66:                               #   in Loop: Header=BB18_7 Depth=1
	xor	eax, eax
	mov	dword ptr [ebp - 60], 0
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, dword ptr [ebp - 48]       # 4-byte Folded Reload
	jne	LBB18_68
	jmp	LBB18_76
	.p2align	4, 0x90
LBB18_12:                               #   in Loop: Header=BB18_7 Depth=1
	mov	eax, dword ptr [ebp - 60]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, dword ptr [ebp - 48]       # 4-byte Folded Reload
	je	LBB18_76
LBB18_68:                               #   in Loop: Header=BB18_7 Depth=1
	mov	eax, dword ptr [ebx + 12]
	mov	ecx, dword ptr [ebx + 16]
	lea	edx, [ecx + eax]
	test	dl, 15
	jne	LBB18_7
	jmp	LBB18_4
	.p2align	4, 0x90
LBB18_13:                               # =>This Inner Loop Header: Depth=1
	test	al, 15
	jne	LBB18_17
# %bb.14:                               #   in Loop: Header=BB18_13 Depth=1
	mov	ecx, dword ptr [ebx + 16]
	add	ecx, 16
	shr	ecx, 4
	cmp	dword ptr [ebx + 8], ecx
	ja	LBB18_17
# %bb.15:                               #   in Loop: Header=BB18_13 Depth=1
	mov	dword ptr [ebp - 16], 0
	mov	ecx, ebx
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.16:                               #   in Loop: Header=BB18_13 Depth=1
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebx + 12]
	.p2align	4, 0x90
LBB18_17:                               #   in Loop: Header=BB18_13 Depth=1
	mov	edx, dword ptr [ebx + 8]
	mov	ecx, edx
	shl	ecx, 4
	lea	esi, [ecx - 1]
	and	esi, eax
	mov	eax, dword ptr [ebx + 4]
	mov	dword ptr [ebx + 12], esi
	cmove	esi, ecx
	add	edx, 268435455
	dec	esi
	mov	ecx, esi
	shr	ecx, 4
	and	edx, ecx
	mov	eax, dword ptr [eax + 4*edx]
	mov	dword ptr [ebp - 16], 0
	test	eax, eax
	jne	LBB18_20
# %bb.18:                               #   in Loop: Header=BB18_13 Depth=1
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.19:                               #   in Loop: Header=BB18_13 Depth=1
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ecx, dword ptr [ebx + 4]
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [ebx + 4]
	mov	eax, dword ptr [eax + 4*edx]
LBB18_20:                               #   in Loop: Header=BB18_13 Depth=1
	movzx	edx, byte ptr [ebp - 56]
	mov	ecx, esi
	and	ecx, 15
	mov	byte ptr [eax + ecx], dl
	mov	dword ptr [ebx + 12], esi
	inc	dword ptr [ebx + 16]
	lea	eax, [ebp - 56]
	push	eax
	push	dword ptr [ebp - 60]
	call	"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	add	esp, 8
# %bb.21:                               #   in Loop: Header=BB18_13 Depth=1
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	test	byte ptr [eax + ecx + 12], 6
	je	LBB18_22
# %bb.23:                               #   in Loop: Header=BB18_13 Depth=1
	xor	eax, eax
	mov	dword ptr [ebp - 60], 0
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	eax, dword ptr [ebp - 48]       # 4-byte Folded Reload
	jne	LBB18_25
	jmp	LBB18_31
	.p2align	4, 0x90
LBB18_22:                               #   in Loop: Header=BB18_13 Depth=1
	mov	eax, dword ptr [ebp - 60]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	eax, dword ptr [ebp - 48]       # 4-byte Folded Reload
	je	LBB18_31
LBB18_25:                               #   in Loop: Header=BB18_13 Depth=1
	mov	eax, dword ptr [ebx + 12]
	jmp	LBB18_13
LBB18_76:
	mov	edi, esp
	push	eax
	sub	esp, 36
	mov	ecx, dword ptr [ebx + 12]
	mov	edx, dword ptr [ebx + 16]
	mov	eax, esp
	mov	dword ptr [eax + 32], 0
	add	edx, ecx
	mov	dword ptr [eax + 36], edx
	mov	edx, dword ptr [ebx]
	test	edx, edx
	mov	dword ptr [eax + 28], edx
	je	LBB18_83
# %bb.77:
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB18_83
# %bb.78:
	mov	esi, dword ptr [esi]
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 0
	test	esi, esi
	je	LBB18_82
# %bb.79:
	mov	esi, dword ptr [esi]
	test	esi, esi
	je	LBB18_81
# %bb.80:
	mov	esi, dword ptr [esi]
	mov	dword ptr [eax + 16], esi
	jmp	LBB18_82
LBB18_31:
	mov	eax, dword ptr [ebx + 16]
	mov	esi, dword ptr [ebx]
	mov	edi, dword ptr [ebx + 12]
	sub	eax, ecx
	test	esi, esi
	je	LBB18_101
# %bb.32:
	mov	edx, dword ptr [esi]
	test	edx, edx
	je	LBB18_35
# %bb.33:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_35
# %bb.34:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_35
# %bb.36:
	mov	ebx, edi
	mov	edi, dword ptr [edx]
	mov	esi, dword ptr [esi]
	mov	ecx, ebx
	lea	edx, [ebx + eax]
	test	edi, edi
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	je	LBB18_37
# %bb.38:
	mov	esi, dword ptr [edi]
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	jmp	LBB18_39
LBB18_83:
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 0
	add	esi, ecx
	mov	dword ptr [eax + 24], esi
	mov	esi, eax
	add	esi, 4
	test	edx, edx
	je	LBB18_85
# %bb.84:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_85
LBB18_86:
	mov	edx, dword ptr [edx]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax + 8], 0
	test	edx, edx
	je	LBB18_90
# %bb.87:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_89
# %bb.88:
	mov	edx, dword ptr [edx]
	mov	dword ptr [esi], edx
	jmp	LBB18_90
LBB18_35:
	mov	esi, dword ptr [esi]
	lea	edx, [edi + eax]
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	test	eax, eax
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	jne	LBB18_41
	jmp	LBB18_44
LBB18_101:
	lea	edx, [edi + eax]
	mov	dword ptr [ebp - 36], 0         # 4-byte Folded Spill
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	test	eax, eax
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	jne	LBB18_41
	jmp	LBB18_44
LBB18_89:
	mov	dword ptr [eax + 4], 0
	jmp	LBB18_90
LBB18_81:
	mov	dword ptr [eax + 16], 0
LBB18_82:
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	add	esi, ecx
	mov	dword ptr [eax + 24], esi
	mov	esi, eax
	add	esi, 4
	mov	edx, dword ptr [edx]
	test	edx, edx
	jne	LBB18_86
LBB18_85:
	mov	dword ptr [esi], 0
	mov	dword ptr [eax + 8], 0
LBB18_90:
	add	ecx, dword ptr [ebp - 52]       # 4-byte Folded Reload
	lea	edx, [ebp - 76]
	mov	dword ptr [eax + 12], ecx
	mov	dword ptr [eax], edx
	jmp	LBB18_91
LBB18_37:
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
LBB18_39:
	mov	edi, ecx
	test	eax, eax
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	je	LBB18_44
LBB18_41:
	dec	edx
	.p2align	4, 0x90
LBB18_42:                               # =>This Inner Loop Header: Depth=1
	cmp	edx, edi
	je	LBB18_44
# %bb.43:                               #   in Loop: Header=BB18_42 Depth=1
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ebx, edx
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	shr	ebx, 4
	mov	eax, dword ptr [esi + 4]
	mov	esi, dword ptr [esi + 8]
	dec	esi
	and	esi, ebx
	mov	ebx, edx
	mov	edx, edi
	mov	ecx, dword ptr [eax + 4*esi]
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	esi, edi
	and	ebx, 15
	shr	esi, 4
	mov	edi, dword ptr [eax + 8]
	dec	edi
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	movzx	eax, byte ptr [ecx + ebx]
	mov	esi, dword ptr [esi + 4*edi]
	mov	edi, edx
	and	edi, 15
	mov	ah, byte ptr [esi + edi]
	mov	byte ptr [esi + edi], al
	mov	edi, edx
	inc	edi
	mov	byte ptr [ecx + ebx], ah
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	cmp	ecx, edi
	lea	edx, [ecx - 1]
	jne	LBB18_42
LBB18_44:
	mov	esi, esp
	push	eax
	sub	esp, 36
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, esp
	mov	dword ptr [ebp - 48], esi       # 4-byte Spill
	mov	edx, dword ptr [eax + 12]
	test	eax, eax
	je	LBB18_45
# %bb.48:
	mov	esi, dword ptr [eax]
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 40]       # 4-byte Reload
	lea	ebx, [edi + eax]
	test	esi, esi
	je	LBB18_46
# %bb.49:
	mov	eax, edi
	mov	edi, dword ptr [esi]
	test	edi, edi
	je	LBB18_46
# %bb.50:
	mov	edi, dword ptr [edi]
	mov	dword ptr [ecx + 28], 0
	mov	dword ptr [ecx + 32], 0
	test	edi, edi
	je	LBB18_54
# %bb.51:
	mov	edi, dword ptr [edi]
	test	edi, edi
	je	LBB18_53
# %bb.52:
	mov	eax, dword ptr [edi]
	mov	dword ptr [ecx + 28], eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB18_54
LBB18_45:
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	lea	ebx, [esi + eax]
LBB18_46:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, ecx
	add	ebx, edx
	mov	dword ptr [ecx + 28], 0
	mov	dword ptr [ecx + 32], 0
	add	edi, 16
	mov	dword ptr [ecx + 36], ebx
	test	eax, eax
	je	LBB18_47
# %bb.55:
	mov	esi, dword ptr [eax]
	mov	ebx, eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	test	esi, esi
	je	LBB18_57
# %bb.56:
	mov	esi, dword ptr [esi]
	test	esi, esi
	jne	LBB18_58
	jmp	LBB18_57
LBB18_47:
	mov	ebx, eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB18_57
LBB18_53:
	mov	dword ptr [ecx + 28], 0
LBB18_54:
	add	ebx, edx
	mov	edi, ecx
	mov	dword ptr [ecx + 36], ebx
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	add	edi, 16
	mov	esi, dword ptr [esi]
	test	esi, esi
	je	LBB18_57
LBB18_58:
	mov	esi, dword ptr [esi]
	mov	dword ptr [ecx + 16], 0
	mov	dword ptr [ecx + 20], 0
	test	esi, esi
	je	LBB18_62
# %bb.59:
	mov	esi, dword ptr [esi]
	test	esi, esi
	je	LBB18_61
# %bb.60:
	mov	eax, dword ptr [esi]
	mov	dword ptr [edi], eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB18_62
LBB18_57:
	mov	dword ptr [edi], 0
	mov	dword ptr [edi + 4], 0
LBB18_62:
	add	eax, edx
	test	ebx, ebx
	mov	dword ptr [edi + 8], eax
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 12], edx
	je	LBB18_64
# %bb.63:
	mov	eax, dword ptr [ebx]
	mov	dword ptr [ecx + 4], eax
	jmp	LBB18_65
LBB18_64:
	mov	dword ptr [ecx + 4], 0
LBB18_65:
	mov	edi, dword ptr [ebp - 48]       # 4-byte Reload
	lea	eax, [ebp - 88]
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ecx], eax
LBB18_91:
	mov	dword ptr [ebp - 16], -1
	call	"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z"
	add	esp, 40
	mov	esp, edi
LBB18_92:
	mov	ecx, dword ptr [ebx + 12]
	lea	eax, [ebp + 8]
	test	ebx, ebx
	je	LBB18_95
# %bb.93:
	mov	edx, dword ptr [ebx]
	test	edx, edx
	je	LBB18_95
# %bb.94:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_95
# %bb.96:
	mov	edx, dword ptr [edx]
	mov	esi, dword ptr [ebp - 64]       # 4-byte Reload
	test	edx, edx
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
	je	LBB18_100
# %bb.97:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_99
# %bb.98:
	mov	edx, dword ptr [edx]
	mov	dword ptr [esi], edx
	jmp	LBB18_100
LBB18_95:
	mov	esi, dword ptr [ebp - 64]       # 4-byte Reload
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
LBB18_100:
	add	ecx, dword ptr [ebp - 52]       # 4-byte Folded Reload
	mov	dword ptr [esi + 8], ecx
	mov	ecx, dword ptr [ebp - 24]
	mov	eax, dword ptr [eax]
	mov	dword ptr fs:[0], ecx
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	32
LBB18_99:
	mov	dword ptr [esi], 0
	jmp	LBB18_100
LBB18_61:
	mov	dword ptr [ecx + 16], 0
	jmp	LBB18_62
	.def	 "?catch$26@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$26@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA":
LBB18_26:
	push	ebp
	sub	esp, 40
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [eax + 16]
	cmp	dword ptr [ebp - 36], ecx       # 4-byte Folded Reload
	jae	LBB18_30
# %bb.27:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edx, edx
	mov	eax, dword ptr [eax + 12]
LBB18_28:                               # =>This Inner Loop Header: Depth=1
	inc	eax
	cmp	ecx, 1
	lea	ecx, [ecx - 1]
	cmove	eax, edx
	cmp	dword ptr [ebp - 36], ecx       # 4-byte Folded Reload
	jb	LBB18_28
# %bb.29:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [ecx + 12], eax
	mov	dword ptr [ecx + 16], edx
	mov	dword ptr [ebp - 16], 1
LBB18_30:
	mov	dword ptr [ebp - 16], 1
	push	0
	push	0
	call	__CxxThrowException@8
	.def	 "?catch$69@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$69@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA":
LBB18_69:
	push	ebp
	sub	esp, 40
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 16]
	cmp	dword ptr [ebp - 36], eax       # 4-byte Folded Reload
	jae	LBB18_75
# %bb.70:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
LBB18_71:                               # =>This Inner Loop Header: Depth=1
	cmp	eax, 1
	lea	eax, [eax - 1]
	jne	LBB18_73
# %bb.72:                               #   in Loop: Header=BB18_71 Depth=1
	mov	dword ptr [ecx + 12], 0
LBB18_73:                               #   in Loop: Header=BB18_71 Depth=1
	cmp	dword ptr [ebp - 36], eax       # 4-byte Folded Reload
	jb	LBB18_71
# %bb.74:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [ebp - 16], 3
LBB18_75:
	mov	dword ptr [ebp - 16], 3
	push	0
	push	0
	call	__CxxThrowException@8
Lfunc_end5:
	.section	.xdata,"dr",associative,"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.p2align	2
"L__ehtable$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	429065506                       # MagicNumber
	.long	4                               # MaxState
	.long	("$stateUnwindMap$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z") # UnwindMap
	.long	2                               # NumTryBlocks
	.long	("$tryMap$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
"$tryMap$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	0                               # TryLow
	.long	0                               # TryHigh
	.long	1                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z") # HandlerArray
	.long	2                               # TryLow
	.long	2                               # TryHigh
	.long	3                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$1$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z") # HandlerArray
"$handlerMap$0$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$26@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA" # Handler
"$handlerMap$1$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$69@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
                                        # -- End function
	.def	 "?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z" # -- Begin function ?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z
	.p2align	4, 0x90
"?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z": # @"?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
Lfunc_begin6:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 84
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	mov	edx, dword ptr [ebp + 12]
	lea	eax, [ebp - 24]
	xor	esi, esi
	mov	ebx, esp
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 52], 0
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], 0
	mov	eax, 0
	mov	ecx, dword ptr [edx + 12]
	mov	edi, dword ptr [edx + 16]
	je	LBB19_2
# %bb.1:
	mov	eax, dword ptr [edx]
LBB19_2:
	test	eax, eax
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
	je	LBB19_4
# %bb.3:
	mov	esi, dword ptr [eax]
LBB19_4:
	test	edi, edi
	je	LBB19_15
# %bb.5:
	js	LBB19_6
# %bb.8:
	cmp	edi, 4096
	mov	dword ptr [ebp - 88], esi       # 4-byte Spill
	mov	dword ptr [ebp - 60], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 96], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 92], edi       # 4-byte Spill
	jb	LBB19_11
# %bb.9:
	lea	eax, [edi + 35]
	mov	dword ptr [ebp - 16], 3
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.10:
	mov	ecx, eax
	add	eax, 35
	and	eax, -32
	mov	dword ptr [eax - 4], ecx
	jmp	LBB19_12
LBB19_11:
	mov	dword ptr [ebp - 16], 3
	push	edi
	call	"??2@YAPAXI@Z"
	add	esp, 4
LBB19_12:
	mov	ebx, dword ptr [ebp - 92]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 60]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 88]       # 4-byte Reload
	mov	dword ptr [ebp - 40], eax
	mov	dword ptr [ebp - 36], eax
	lea	ecx, [eax + ebx]
	mov	dword ptr [ebp - 32], ecx
	.p2align	4, 0x90
LBB19_13:                               # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [esi + 8]
	mov	ecx, edi
	shr	ecx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 4]
	mov	ecx, dword ptr [ecx + 4*edx]
	mov	edx, edi
	inc	edi
	and	edx, 15
	movzx	ecx, byte ptr [ecx + edx]
	mov	byte ptr [eax], cl
	inc	eax
	dec	ebx
	jne	LBB19_13
# %bb.14:
	mov	ebx, dword ptr [ebp - 96]       # 4-byte Reload
	mov	dword ptr [ebp - 36], eax
	mov	dword ptr [ebp - 16], 4
LBB19_15:
	mov	esp, ebx
	lea	eax, [ebp - 40]
	mov	dword ptr [ebp - 16], 4
	lea	ecx, [ebp - 52]
	push	8
	push	6
	push	dword ptr [ebp + 20]
	push	dword ptr [ebp + 16]
	push	eax
	push	ecx
	call	"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIW4LodePNGColorType@@I@Z"
	add	esp, 24
# %bb.16:
	test	eax, eax
	je	LBB19_17
# %bb.35:
	mov	ecx, dword ptr ["?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
	mov	edx, -3585
	mov	ecx, dword ptr [ecx + 4]
	and	edx, dword ptr [ecx + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20]
	or	edx, 512
	mov	dword ptr [ecx + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20], edx
	push	eax
	call	"?lodepng_error_text@@YAPBDI@Z"
	add	esp, 4
# %bb.36:
	push	eax
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.37:
	push	offset "??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.38:
	mov	ecx, dword ptr [ebp + 12]
	mov	edx, dword ptr [ecx + 16]
	mov	ecx, eax
	shr	edx, 2
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.39:
	push	offset "??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.40:
	mov	edx, dword ptr [ebp + 20]
	mov	ecx, eax
	imul	edx, dword ptr [ebp + 16]
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	jmp	LBB19_41
LBB19_17:
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 68], 0
	mov	byte ptr [ebp - 84], 0
	push	edi
	call	_strlen
	add	esp, 4
	mov	esi, eax
	cmp	eax, 15
	jbe	LBB19_18
# %bb.19:
	sub	esp, 12
	mov	al, byte ptr [ebp - 56]
	lea	ecx, [ebp - 84]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB19_20
LBB19_18:
	mov	dword ptr [ebp - 68], esi
	lea	eax, [ebp - 84]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 84], 0
LBB19_20:
	lea	eax, [ebp - 84]
	mov	dword ptr [ebp - 16], 5
	push	eax
	lea	eax, [ebp - 52]
	push	eax
	call	"?save_file@lodepng@@YAIABV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z"
	add	esp, 8
# %bb.21:
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB19_41
# %bb.22:
	mov	ecx, dword ptr [ebp - 84]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB19_28
# %bb.23:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB19_24
# %bb.27:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB19_28:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB19_41:
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	je	LBB19_49
# %bb.42:
	mov	eax, dword ptr [ebp - 32]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB19_48
# %bb.43:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_44
# %bb.47:
	add	eax, 35
	mov	ecx, edx
LBB19_48:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
LBB19_49:
	mov	ecx, dword ptr [ebp - 52]
	test	ecx, ecx
	je	LBB19_57
# %bb.50:
	mov	eax, dword ptr [ebp - 44]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB19_56
# %bb.51:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_52
# %bb.55:
	add	eax, 35
	mov	ecx, edx
LBB19_56:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 52], 0
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], 0
LBB19_57:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 84
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB19_6:
	mov	dword ptr [ebp - 16], 3
	call	"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
# %bb.7:
LBB19_44:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.45:
LBB19_52:
	mov	dword ptr [ebp - 16], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.53:
LBB19_24:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.25:
	.def	 "?dtor$26@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$26@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_26:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$29@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$29@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_29:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB19_34
# %bb.30:
	mov	ecx, dword ptr [ebp - 84]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB19_33
# %bb.31:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_70
# %bb.32:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB19_33:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB19_34:
	mov	dword ptr [ebp - 68], 0
	mov	dword ptr [ebp - 64], 15
	mov	byte ptr [ebp - 84], 0
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB19_70:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$46@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$46@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_46:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$54@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$54@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_54:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$58@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$58@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_58:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	je	LBB19_63
# %bb.59:
	mov	eax, dword ptr [ebp - 32]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB19_62
# %bb.60:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_71
# %bb.61:
	add	eax, 35
	mov	ecx, edx
LBB19_62:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
LBB19_63:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB19_71:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$64@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$64@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_64:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 52]
	test	ecx, ecx
	je	LBB19_69
# %bb.65:
	mov	eax, dword ptr [ebp - 44]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB19_68
# %bb.66:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_72
# %bb.67:
	add	eax, 35
	mov	ecx, edx
LBB19_68:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 52], 0
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], 0
LBB19_69:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB19_72:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end6:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z":
	.long	-1                              # ToState
	.long	"?dtor$26@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$46@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$54@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$64@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$58@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	4                               # ToState
	.long	"?dtor$29@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.globl	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z" # -- Begin function ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	.p2align	4, 0x90
"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z": # @"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
Lfunc_begin7:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 60
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	push	dword ptr [ebp + 12]
	call	_strlen
	add	esp, 4
	mov	ecx, eax
	mov	eax, dword ptr [edi]
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	mov	eax, dword ptr [edi + ebx + 32]
	mov	edx, dword ptr [edi + ebx + 36]
	mov	dword ptr [ebp - 48], edi
	mov	esi, eax
	neg	esi
	mov	esi, 0
	sbb	esi, edx
	mov	esi, 0
	setl	byte ptr [ebp - 32]             # 1-byte Folded Spill
	cmp	ecx, eax
	sbb	esi, edx
	setl	byte ptr [ebp - 36]             # 1-byte Folded Spill
	sub	eax, ecx
	mov	cl, byte ptr [ebp - 36]         # 1-byte Reload
	sbb	edx, 0
	test	byte ptr [ebp - 32], cl         # 1-byte Folded Reload
	mov	ecx, 0
	cmove	edx, ecx
	cmove	eax, ecx
	mov	ecx, dword ptr [edi + ebx + 56]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	test	ecx, ecx
	je	LBB20_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [edi]
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
LBB20_2:
	cmp	dword ptr [edi + ebx + 12], 0
	je	LBB20_9
# %bb.3:
	mov	edx, 4
	mov	byte ptr [ebp - 44], 0
	jmp	LBB20_4
LBB20_9:
	mov	ecx, dword ptr [edi + ebx + 60]
	test	ecx, ecx
	je	LBB20_11
# %bb.10:
	cmp	ecx, edi
	je	LBB20_11
# %bb.15:
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.16:
	mov	edi, dword ptr [ebp + 8]
	mov	edx, 4
	mov	eax, dword ptr [edi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [edi + ecx + 12], 0
	sete	byte ptr [ebp - 44]
	jne	LBB20_4
	jmp	LBB20_17
LBB20_11:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	byte ptr [ebp - 44], 1
LBB20_17:
	mov	eax, dword ptr [eax + 4]
	mov	ecx, 448
	and	ecx, dword ptr [edi + eax + 20]
	cmp	ecx, 64
	jne	LBB20_18
LBB20_27:
	mov	ecx, dword ptr [edi + eax + 56]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 36]
	mov	dword ptr [ebp - 16], 4
	push	0
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	push	dword ptr [ebp + 12]
	call	eax
# %bb.28:
	xor	eax, dword ptr [ebp - 52]       # 4-byte Folded Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 40], 4         # 4-byte Folded Spill
	or	eax, edx
	jne	LBB20_39
# %bb.29:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	jmp	LBB20_30
	.p2align	4, 0x90
LBB20_34:                               #   in Loop: Header=BB20_30 Depth=1
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	dword ptr [edx], ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	byte ptr [esi], al
LBB20_35:                               #   in Loop: Header=BB20_30 Depth=1
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	add	eax, -1
	adc	ecx, -1
LBB20_30:                               # =>This Inner Loop Header: Depth=1
	cmp	eax, 1
	mov	edx, ecx
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	sbb	edx, 0
	jl	LBB20_31
# %bb.32:                               #   in Loop: Header=BB20_30 Depth=1
	mov	eax, dword ptr [edi]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edi + eax + 56]
	movzx	eax, byte ptr [edi + eax + 64]
	mov	edx, dword ptr [ecx + 32]
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB20_36
# %bb.33:                               #   in Loop: Header=BB20_30 Depth=1
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jg	LBB20_34
LBB20_36:                               #   in Loop: Header=BB20_30 Depth=1
	mov	edx, dword ptr [ecx]
	movzx	eax, al
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
# %bb.37:                               #   in Loop: Header=BB20_30 Depth=1
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB20_35
	jmp	LBB20_38
LBB20_18:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB20_19
	.p2align	4, 0x90
LBB20_22:                               #   in Loop: Header=BB20_19 Depth=1
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	dword ptr [edx], ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	byte ptr [esi], al
LBB20_23:                               #   in Loop: Header=BB20_19 Depth=1
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	add	eax, -1
	adc	ecx, -1
LBB20_19:                               # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	cmp	eax, 1
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	sbb	eax, 0
	mov	eax, dword ptr [edi]
	mov	eax, dword ptr [eax + 4]
	jl	LBB20_27
# %bb.20:                               #   in Loop: Header=BB20_19 Depth=1
	mov	ecx, dword ptr [edi + eax + 56]
	movzx	eax, byte ptr [edi + eax + 64]
	mov	edx, dword ptr [ecx + 32]
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB20_24
# %bb.21:                               #   in Loop: Header=BB20_19 Depth=1
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jg	LBB20_22
LBB20_24:                               #   in Loop: Header=BB20_19 Depth=1
	mov	edx, dword ptr [ecx]
	movzx	eax, al
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
# %bb.25:                               #   in Loop: Header=BB20_19 Depth=1
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB20_23
# %bb.26:
	mov	dword ptr [ebp - 40], 4         # 4-byte Folded Spill
LBB20_38:
	mov	edi, dword ptr [ebp + 8]
	jmp	LBB20_39
LBB20_31:
	mov	dword ptr [ebp - 40], 0         # 4-byte Folded Spill
LBB20_39:
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [edi + eax + 36], 0
	mov	dword ptr [edi + eax + 32], 0
LBB20_4:
	mov	eax, dword ptr [edi]
	mov	ecx, dword ptr [eax + 4]
	xor	eax, eax
	or	edx, dword ptr [edi + ecx + 12]
	cmp	dword ptr [edi + ecx + 56], 0
	sete	al
	and	edx, 23
	shl	eax, 2
	or	edx, eax
	mov	dword ptr [edi + ecx + 12], edx
	and	edx, dword ptr [edi + ecx + 16]
	jne	LBB20_5
# %bb.46:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB20_48
# %bb.47:
	mov	ecx, dword ptr [ebp - 48]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	edi, dword ptr [ebp + 8]
LBB20_48:
	mov	eax, dword ptr [ebp - 48]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB20_50
# %bb.49:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	edi, dword ptr [ebp + 8]
LBB20_50:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 60
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB20_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	mov	eax, edx
	#MEMBARRIER
	jne	LBB20_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB20_7:
	mov	edx, eax
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	ecx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	test	dl, 2
	cmove	ecx, eax
	test	dl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	eax, ecx
	lea	ecx, [ebp - 72]
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 72], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 72]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.45:
LBB20_44:                               # Block address taken
	add	ebp, 12
	xor	edx, edx
	mov	edi, dword ptr [ebp + 8]
	jmp	LBB20_4
	.def	 "?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_12:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 48]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB20_14
# %bb.13:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB20_14:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$40@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$40@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_40:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB20_41
# %bb.43:
	mov	eax, offset LBB20_44
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
LBB20_41:
	mov	dword ptr [ebp - 16], 5
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.42:
	.def	 "?dtor$51@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$51@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_51:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_52:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	lea	ecx, [ebp - 48]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_53:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB20_55
# %bb.54:
	mov	ecx, dword ptr [ebp - 48]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB20_55:
	mov	eax, dword ptr [ebp - 48]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB20_57
# %bb.56:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB20_57:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end7:
	.section	.xdata,"dr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.p2align	2
"L__ehtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$51@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z":
	.long	4                               # TryLow
	.long	4                               # TryHigh
	.long	5                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z") # HandlerArray
"$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$40@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
                                        # -- End function
	.def	 "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.globl	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z" # -- Begin function ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	.p2align	4, 0x90
"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z": # @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
Lfunc_begin8:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 64
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 40], esi
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + edx + 56]
	test	ecx, ecx
	je	LBB21_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
LBB21_2:
	cmp	dword ptr [esi + edx + 12], 0
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	je	LBB21_9
# %bb.3:
	xor	edi, edi
	mov	byte ptr [ebp - 36], 0
	jmp	LBB21_4
LBB21_9:
	mov	ecx, dword ptr [esi + edx + 60]
	test	ecx, ecx
	je	LBB21_11
# %bb.10:
	cmp	ecx, esi
	je	LBB21_11
# %bb.15:
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edi, edi
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [esi + ecx + 12], 0
	sete	byte ptr [ebp - 36]
	jne	LBB21_4
	jmp	LBB21_17
LBB21_11:
	mov	byte ptr [ebp - 36], 1
LBB21_17:
	mov	eax, dword ptr [eax + 4]
	mov	eax, dword ptr [esi + eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 64], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 68]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.18:
	mov	ecx, dword ptr [ebp - 64]
	mov	edi, dword ptr [ebp + 8]
	mov	esi, eax
	test	ecx, ecx
	je	LBB21_21
# %bb.19:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB21_21
# %bb.20:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB21_21:
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [ebx + eax]
	movsx	edx, byte ptr [ebx + eax + 64]
	mov	eax, dword ptr [ebx + eax + 56]
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 32]
	mov	dword ptr [ebp - 16], 5
	sub	esp, 24
	movsd	xmm0, qword ptr [ebp - 48]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 4], xmm0
	mov	dword ptr [esp + 12], ecx
	lea	ecx, [ebp - 76]
	mov	dword ptr [esp + 20], edi
	mov	dword ptr [esp + 16], edx
	mov	dword ptr [esp], ecx
	mov	ecx, esi
	call	eax
# %bb.22:
	movzx	edi, byte ptr [ebp - 76]
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
LBB21_4:
	mov	eax, dword ptr [esi]
	xor	ecx, ecx
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [esi + edx + 56], 0
	mov	eax, dword ptr [esi + edx + 12]
	sete	cl
	and	eax, 23
	shl	ecx, 2
	or	ecx, edi
	or	eax, ecx
	mov	dword ptr [esi + edx + 12], eax
	and	eax, dword ptr [esi + edx + 16]
	jne	LBB21_5
# %bb.33:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB21_35
# %bb.34:
	mov	ecx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB21_35:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB21_37
# %bb.36:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB21_37:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 64
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB21_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB21_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB21_7:
	test	al, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 68]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 68], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 68]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.32:
LBB21_31:                               # Block address taken
	add	ebp, 12
	xor	edi, edi
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB21_4
	.def	 "?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_12:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB21_14
# %bb.13:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB21_14:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_23:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 64]
	test	ecx, ecx
	je	LBB21_26
# %bb.24:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB21_26
# %bb.25:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB21_26:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_27:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB21_28
# %bb.30:
	mov	eax, offset LBB21_31
	add	esp, 24
	pop	ebp
	ret                                     # CATCHRET
LBB21_28:
	mov	dword ptr [ebp - 16], 6
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.29:
	.def	 "?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_38:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_39:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_40:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB21_42
# %bb.41:
	mov	ecx, dword ptr [ebp - 40]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB21_42:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB21_44
# %bb.43:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB21_44:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end8:
	.section	.xdata,"dr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.p2align	2
"L__ehtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z":
	.long	429065506                       # MagicNumber
	.long	7                               # MaxState
	.long	("$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z":
	.long	5                               # TryLow
	.long	5                               # TryHigh
	.long	6                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z") # HandlerArray
"$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Handler
	.section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
                                        # -- End function
	.def	 "?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z" # -- Begin function ?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z
	.p2align	4, 0x90
"?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z": # @"?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 20]
	mov	edi, dword ptr [esp + 28]
	mov	eax, dword ptr [esi + 16]
	imul	edi, dword ptr [esp + 24]
	mov	ecx, eax
	shr	ecx, 2
	jmp	LBB22_1
	.p2align	4, 0x90
LBB22_22:                               #   in Loop: Header=BB22_1 Depth=1
	and	ebx, 15
	mov	byte ptr [eax + ebx], 0
	mov	eax, dword ptr [esi + 16]
	inc	eax
	mov	ecx, eax
	mov	dword ptr [esi + 16], eax
	shr	ecx, 2
LBB22_1:                                # =>This Inner Loop Header: Depth=1
	cmp	ecx, edi
	jae	LBB22_23
# %bb.2:                                #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, dword ptr [esi + 12]
	lea	edx, [eax + ecx]
	test	dl, 15
	jne	LBB22_5
# %bb.3:                                #   in Loop: Header=BB22_1 Depth=1
	lea	edx, [eax + 16]
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB22_5
# %bb.4:                                #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
	.p2align	4, 0x90
LBB22_5:                                #   in Loop: Header=BB22_1 Depth=1
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB22_7
# %bb.6:                                #   in Loop: Header=BB22_1 Depth=1
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
LBB22_7:                                #   in Loop: Header=BB22_1 Depth=1
	and	ebx, 15
	mov	byte ptr [eax + ebx], 0
	mov	edx, dword ptr [esi + 16]
	mov	ecx, dword ptr [esi + 12]
	lea	ebx, [edx + ecx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 16], eax
	jne	LBB22_10
# %bb.8:                                #   in Loop: Header=BB22_1 Depth=1
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB22_10
# %bb.9:                                #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
	.p2align	4, 0x90
LBB22_10:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB22_12
# %bb.11:                               #   in Loop: Header=BB22_1 Depth=1
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
LBB22_12:                               #   in Loop: Header=BB22_1 Depth=1
	and	ebx, 15
	mov	byte ptr [eax + ebx], 0
	mov	edx, dword ptr [esi + 16]
	mov	ecx, dword ptr [esi + 12]
	lea	ebx, [edx + ecx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 16], eax
	jne	LBB22_15
# %bb.13:                               #   in Loop: Header=BB22_1 Depth=1
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB22_15
# %bb.14:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
	.p2align	4, 0x90
LBB22_15:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB22_17
# %bb.16:                               #   in Loop: Header=BB22_1 Depth=1
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
LBB22_17:                               #   in Loop: Header=BB22_1 Depth=1
	and	ebx, 15
	mov	byte ptr [eax + ebx], 0
	mov	edx, dword ptr [esi + 16]
	mov	ecx, dword ptr [esi + 12]
	lea	ebx, [edx + ecx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 16], eax
	jne	LBB22_20
# %bb.18:                               #   in Loop: Header=BB22_1 Depth=1
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB22_20
# %bb.19:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
	.p2align	4, 0x90
LBB22_20:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB22_22
# %bb.21:                               #   in Loop: Header=BB22_1 Depth=1
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
	jmp	LBB22_22
LBB22_23:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "??__Fpalettes@@YAXXZ";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ??__Fpalettes@@YAXXZ
"??__Fpalettes@@YAXXZ":                 # @"??__Fpalettes@@YAXXZ"
# %bb.0:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	call	"?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"]
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	ret
                                        # -- End function
	.def	 "??__FpaletteNames@@YAXXZ";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ??__FpaletteNames@@YAXXZ
"??__FpaletteNames@@YAXXZ":             # @"??__FpaletteNames@@YAXXZ"
Lfunc_begin9:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??__FpaletteNames@@YAXXZ"
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+188]
	cmp	eax, 16
	jb	LBB24_8
# %bb.1:
	mov	ecx, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+168]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB24_7
# %bb.2:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB24_3
# %bb.6:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB24_7:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB24_8:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+184], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+188], 15
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+168], 0
	mov	eax, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+164]
	cmp	eax, 16
	jb	LBB24_16
# %bb.9:
	mov	ecx, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+144]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB24_15
# %bb.10:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB24_11
# %bb.14:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB24_15:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB24_16:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+160], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+164], 15
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+144], 0
	mov	eax, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+140]
	cmp	eax, 16
	jb	LBB24_21
# %bb.17:
	mov	ecx, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+120]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB24_20
# %bb.18:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB24_11
# %bb.19:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB24_20:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB24_21:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+136], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+140], 15
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+120], 0
	mov	eax, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+116]
	cmp	eax, 16
	jb	LBB24_26
# %bb.22:
	mov	ecx, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+96]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB24_25
# %bb.23:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB24_11
# %bb.24:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB24_25:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB24_26:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+112], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+116], 15
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+96], 0
	mov	eax, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+92]
	cmp	eax, 16
	jb	LBB24_31
# %bb.27:
	mov	ecx, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+72]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB24_30
# %bb.28:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB24_11
# %bb.29:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB24_30:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB24_31:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+88], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+92], 15
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+72], 0
	mov	eax, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+68]
	cmp	eax, 16
	jb	LBB24_36
# %bb.32:
	mov	ecx, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+48]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB24_35
# %bb.33:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB24_11
# %bb.34:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB24_35:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB24_36:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+64], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+68], 15
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+48], 0
	mov	eax, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+44]
	cmp	eax, 16
	jb	LBB24_41
# %bb.37:
	mov	ecx, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+24]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB24_40
# %bb.38:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB24_11
# %bb.39:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB24_40:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB24_41:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+40], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+44], 15
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+24], 0
	mov	eax, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+20]
	cmp	eax, 16
	jb	LBB24_46
# %bb.42:
	mov	ecx, dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB24_45
# %bb.43:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB24_11
# %bb.44:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB24_45:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB24_46:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+16], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+20], 15
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"], 0
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB24_11:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.12:
LBB24_3:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.4:
	.def	 "?dtor$5@?0???__FpaletteNames@@YAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???__FpaletteNames@@YAXXZ@4HA":
LBB24_5:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$13@?0???__FpaletteNames@@YAXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0???__FpaletteNames@@YAXXZ@4HA":
LBB24_13:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end9:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$??__FpaletteNames@@YAXXZ":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??__FpaletteNames@@YAXXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??__FpaletteNames@@YAXXZ":
	.long	-1                              # ToState
	.long	"?dtor$5@?0???__FpaletteNames@@YAXXZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$13@?0???__FpaletteNames@@YAXXZ@4HA" # Action
	.text
                                        # -- End function
	.def	 "??__Fchr2nib@@YAXXZ";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ??__Fchr2nib@@YAXXZ
"??__Fchr2nib@@YAXXZ":                  # @"??__Fchr2nib@@YAXXZ"
# %bb.0:
	mov	eax, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	dword ptr [eax + 4]
	push	offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@1@@Z"
	push	16
	push	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	ret
                                        # -- End function
	.def	 "?palettes_setup@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?palettes_setup@@YAXXZ"        # -- Begin function ?palettes_setup@@YAXXZ
	.p2align	4, 0x90
"?palettes_setup@@YAXXZ":               # @"?palettes_setup@@YAXXZ"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
	lea	edx, [ecx + eax]
	test	dl, 3
	jne	LBB26_3
# %bb.1:
	lea	edx, [ecx + 4]
	shr	edx, 2
	cmp	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], edx
	ja	LBB26_3
# %bb.2:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	push	1
	call	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_3:
	mov	edi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	lea	edx, [4*edi - 1]
	add	edi, 1073741823
	and	edx, eax
	lea	esi, [edx + ecx]
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], edx
	mov	eax, esi
	shr	eax, 2
	and	edi, eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	eax, dword ptr [eax + 4*edi]
	test	eax, eax
	jne	LBB26_5
# %bb.4:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ecx + 4*edi], eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	eax, dword ptr [eax + 4*edi]
LBB26_5:
	and	esi, 3
	lea	ebx, [edx + ecx + 1]
	mov	dword ptr [eax + 4*esi], offset _atari_8_bit_family_gtia_hex
	lea	eax, [ecx + 1]
	test	bl, 3
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], eax
	jne	LBB26_8
# %bb.6:
	add	ecx, 5
	shr	ecx, 2
	cmp	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], ecx
	ja	LBB26_8
# %bb.7:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	push	1
	call	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_8:
	mov	ebx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	lea	esi, [4*ebx - 1]
	add	ebx, 1073741823
	and	esi, edx
	lea	edi, [esi + eax]
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], esi
	mov	ecx, edi
	shr	ecx, 2
	and	ebx, ecx
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	ecx, dword ptr [ecx + 4*ebx]
	test	ecx, ecx
	jne	LBB26_10
# %bb.9:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ecx + 4*ebx], eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ecx, dword ptr [eax + 4*ebx]
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_10:
	and	edi, 3
	lea	edx, [esi + eax + 1]
	mov	dword ptr [ecx + 4*edi], offset _aurora_hex
	lea	ecx, [eax + 1]
	test	dl, 3
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], ecx
	jne	LBB26_13
# %bb.11:
	add	eax, 5
	shr	eax, 2
	cmp	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], eax
	ja	LBB26_13
# %bb.12:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	push	1
	call	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	mov	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_13:
	mov	edi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	lea	edx, [4*edi - 1]
	add	edi, 1073741823
	and	edx, esi
	lea	esi, [edx + ecx]
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], edx
	mov	eax, esi
	shr	eax, 2
	and	edi, eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	eax, dword ptr [eax + 4*edi]
	test	eax, eax
	jne	LBB26_15
# %bb.14:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ecx + 4*edi], eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	eax, dword ptr [eax + 4*edi]
LBB26_15:
	and	esi, 3
	lea	ebx, [edx + ecx + 1]
	mov	dword ptr [eax + 4*esi], offset _duel_hex
	lea	eax, [ecx + 1]
	test	bl, 3
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], eax
	jne	LBB26_18
# %bb.16:
	add	ecx, 5
	shr	ecx, 2
	cmp	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], ecx
	ja	LBB26_18
# %bb.17:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	push	1
	call	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_18:
	mov	ebx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	lea	esi, [4*ebx - 1]
	add	ebx, 1073741823
	and	esi, edx
	lea	edi, [esi + eax]
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], esi
	mov	ecx, edi
	shr	ecx, 2
	and	ebx, ecx
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	ecx, dword ptr [ecx + 4*ebx]
	test	ecx, ecx
	jne	LBB26_20
# %bb.19:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ecx + 4*ebx], eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ecx, dword ptr [eax + 4*ebx]
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_20:
	and	edi, 3
	lea	edx, [esi + eax + 1]
	mov	dword ptr [ecx + 4*edi], offset _hocus_pocus_hex
	lea	ecx, [eax + 1]
	test	dl, 3
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], ecx
	jne	LBB26_23
# %bb.21:
	add	eax, 5
	shr	eax, 2
	cmp	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], eax
	ja	LBB26_23
# %bb.22:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	push	1
	call	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	mov	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_23:
	mov	edi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	lea	edx, [4*edi - 1]
	add	edi, 1073741823
	and	edx, esi
	lea	esi, [edx + ecx]
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], edx
	mov	eax, esi
	shr	eax, 2
	and	edi, eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	eax, dword ptr [eax + 4*edi]
	test	eax, eax
	jne	LBB26_25
# %bb.24:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ecx + 4*edi], eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	eax, dword ptr [eax + 4*edi]
LBB26_25:
	and	esi, 3
	lea	ebx, [edx + ecx + 1]
	mov	dword ptr [eax + 4*esi], offset _sonic_robo_blast_2_v22_hex
	lea	eax, [ecx + 1]
	test	bl, 3
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], eax
	jne	LBB26_28
# %bb.26:
	add	ecx, 5
	shr	ecx, 2
	cmp	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], ecx
	ja	LBB26_28
# %bb.27:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	push	1
	call	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_28:
	mov	ebx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	lea	esi, [4*ebx - 1]
	add	ebx, 1073741823
	and	esi, edx
	lea	edi, [esi + eax]
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], esi
	mov	ecx, edi
	shr	ecx, 2
	and	ebx, ecx
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	ecx, dword ptr [ecx + 4*ebx]
	test	ecx, ecx
	jne	LBB26_30
# %bb.29:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ecx + 4*ebx], eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ecx, dword ptr [eax + 4*ebx]
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_30:
	and	edi, 3
	lea	edx, [esi + eax + 1]
	mov	dword ptr [ecx + 4*edi], offset _srb2_hex
	lea	ecx, [eax + 1]
	test	dl, 3
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], ecx
	jne	LBB26_33
# %bb.31:
	add	eax, 5
	shr	eax, 2
	cmp	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], eax
	ja	LBB26_33
# %bb.32:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	push	1
	call	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	mov	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_33:
	mov	edi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	lea	eax, [4*edi - 1]
	add	edi, 1073741823
	and	eax, esi
	lea	esi, [eax + ecx]
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], eax
	mov	edx, esi
	shr	edx, 2
	and	edi, edx
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	edx, dword ptr [edx + 4*edi]
	test	edx, edx
	jne	LBB26_35
# %bb.34:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ecx + 4*edi], eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
	mov	edx, dword ptr [eax + 4*edi]
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
LBB26_35:
	and	esi, 3
	lea	ebx, [eax + ecx + 1]
	mov	dword ptr [edx + 4*esi], offset _uzebox_hex
	lea	edx, [ecx + 1]
	test	bl, 3
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], edx
	jne	LBB26_38
# %bb.36:
	add	ecx, 5
	shr	ecx, 2
	cmp	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], ecx
	ja	LBB26_38
# %bb.37:
	mov	ecx, offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	push	1
	call	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
LBB26_38:
	mov	edi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	lea	esi, [4*edi - 1]
	add	edi, 1073741823
	and	esi, eax
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], esi
	add	esi, edx
	mov	eax, esi
	shr	eax, 2
	and	edi, eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	eax, dword ptr [eax + 4*edi]
	test	eax, eax
	jne	LBB26_40
# %bb.39:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ecx + 4*edi], eax
	mov	eax, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16]
	mov	eax, dword ptr [eax + 4*edi]
LBB26_40:
	and	esi, 3
	inc	edx
	xor	ebx, ebx
	mov	dword ptr [eax + 4*esi], offset _windows_95_256_colours_hex
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], edx
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_42
# %bb.41:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_47
	jmp	LBB26_46
LBB26_42:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_43:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 48
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_43
# %bb.44:
	xor	ebx, ebx
	cmp	dl, 47
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_47
LBB26_46:
	cmp	byte ptr [eax + 14], 49
	jb	LBB26_49
LBB26_47:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.48:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3145728
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_49:
	mov	byte ptr [eax + 15], 0
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_51
# %bb.50:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_56
	jmp	LBB26_55
LBB26_51:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_52:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 49
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_52
# %bb.53:
	xor	ebx, ebx
	cmp	dl, 48
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_56
LBB26_55:
	cmp	byte ptr [eax + 14], 50
	jb	LBB26_58
LBB26_56:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.57:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3211264
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_58:
	mov	byte ptr [eax + 15], 1
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_60
# %bb.59:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_65
	jmp	LBB26_64
LBB26_60:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_61:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 50
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_61
# %bb.62:
	xor	ebx, ebx
	cmp	dl, 49
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_65
LBB26_64:
	cmp	byte ptr [eax + 14], 51
	jb	LBB26_67
LBB26_65:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.66:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3276800
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_67:
	mov	byte ptr [eax + 15], 2
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_69
# %bb.68:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_74
	jmp	LBB26_73
LBB26_69:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_70:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 51
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_70
# %bb.71:
	xor	ebx, ebx
	cmp	dl, 50
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_74
LBB26_73:
	cmp	byte ptr [eax + 14], 52
	jb	LBB26_76
LBB26_74:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.75:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3342336
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_76:
	mov	byte ptr [eax + 15], 3
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_78
# %bb.77:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_83
	jmp	LBB26_82
LBB26_78:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_79:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 52
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_79
# %bb.80:
	xor	ebx, ebx
	cmp	dl, 51
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_83
LBB26_82:
	cmp	byte ptr [eax + 14], 53
	jb	LBB26_85
LBB26_83:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.84:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3407872
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_85:
	mov	byte ptr [eax + 15], 4
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_87
# %bb.86:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_92
	jmp	LBB26_91
LBB26_87:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_88:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 53
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_88
# %bb.89:
	xor	ebx, ebx
	cmp	dl, 52
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_92
LBB26_91:
	cmp	byte ptr [eax + 14], 54
	jb	LBB26_94
LBB26_92:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.93:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3473408
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_94:
	mov	byte ptr [eax + 15], 5
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_96
# %bb.95:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_101
	jmp	LBB26_100
LBB26_96:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_97:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 54
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_97
# %bb.98:
	xor	ebx, ebx
	cmp	dl, 53
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_101
LBB26_100:
	cmp	byte ptr [eax + 14], 55
	jb	LBB26_103
LBB26_101:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.102:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3538944
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_103:
	mov	byte ptr [eax + 15], 6
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_105
# %bb.104:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_110
	jmp	LBB26_109
LBB26_105:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_106:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 55
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_106
# %bb.107:
	xor	ebx, ebx
	cmp	dl, 54
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_110
LBB26_109:
	cmp	byte ptr [eax + 14], 56
	jb	LBB26_112
LBB26_110:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.111:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3604480
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_112:
	mov	byte ptr [eax + 15], 7
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_114
# %bb.113:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_119
	jmp	LBB26_118
LBB26_114:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_115:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 56
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_115
# %bb.116:
	xor	ebx, ebx
	cmp	dl, 55
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_119
LBB26_118:
	cmp	byte ptr [eax + 14], 57
	jb	LBB26_121
LBB26_119:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.120:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3670016
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_121:
	mov	byte ptr [eax + 15], 8
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_123
# %bb.122:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_128
	jmp	LBB26_127
LBB26_123:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_124:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 57
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_124
# %bb.125:
	xor	ebx, ebx
	cmp	dl, 56
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_128
LBB26_127:
	cmp	byte ptr [eax + 14], 58
	jb	LBB26_130
LBB26_128:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.129:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 3735552
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_130:
	mov	byte ptr [eax + 15], 9
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_132
# %bb.131:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_137
	jmp	LBB26_136
LBB26_132:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_133:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 65
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_133
# %bb.134:
	xor	ebx, ebx
	cmp	dl, 64
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_137
LBB26_136:
	cmp	byte ptr [eax + 14], 66
	jb	LBB26_139
LBB26_137:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.138:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 4259840
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_139:
	mov	byte ptr [eax + 15], 10
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_141
# %bb.140:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_146
	jmp	LBB26_145
LBB26_141:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_142:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 66
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_142
# %bb.143:
	xor	ebx, ebx
	cmp	dl, 65
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_146
LBB26_145:
	cmp	byte ptr [eax + 14], 67
	jb	LBB26_148
LBB26_146:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.147:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 4325376
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_148:
	mov	byte ptr [eax + 15], 11
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_150
# %bb.149:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_155
	jmp	LBB26_154
LBB26_150:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_151:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 67
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_151
# %bb.152:
	xor	ebx, ebx
	cmp	dl, 66
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_155
LBB26_154:
	cmp	byte ptr [eax + 14], 68
	jb	LBB26_157
LBB26_155:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.156:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 4390912
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_157:
	mov	byte ptr [eax + 15], 12
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_159
# %bb.158:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_164
	jmp	LBB26_163
LBB26_159:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_160:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 68
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_160
# %bb.161:
	xor	ebx, ebx
	cmp	dl, 67
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_164
LBB26_163:
	cmp	byte ptr [eax + 14], 69
	jb	LBB26_166
LBB26_164:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.165:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 4456448
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_166:
	mov	byte ptr [eax + 15], 13
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_168
# %bb.167:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_173
	jmp	LBB26_172
LBB26_168:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_169:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 69
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_169
# %bb.170:
	xor	ebx, ebx
	cmp	dl, 68
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_173
LBB26_172:
	cmp	byte ptr [eax + 14], 70
	jb	LBB26_175
LBB26_173:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.174:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 4521984
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_175:
	mov	byte ptr [eax + 15], 14
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_177
# %bb.176:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_182
	jmp	LBB26_181
LBB26_177:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_178:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 70
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_178
# %bb.179:
	xor	ebx, ebx
	cmp	dl, 69
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_182
LBB26_181:
	cmp	byte ptr [eax + 14], 71
	jb	LBB26_184
LBB26_182:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.183:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 4587520
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_184:
	mov	byte ptr [eax + 15], 15
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_186
# %bb.185:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_191
	jmp	LBB26_190
LBB26_186:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_187:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 97
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_187
# %bb.188:
	xor	ebx, ebx
	cmp	dl, 96
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_191
LBB26_190:
	cmp	byte ptr [eax + 14], 98
	jb	LBB26_193
LBB26_191:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.192:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 6356992
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_193:
	mov	byte ptr [eax + 15], 10
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_195
# %bb.194:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_200
	jmp	LBB26_199
LBB26_195:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_196:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 98
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_196
# %bb.197:
	xor	ebx, ebx
	cmp	dl, 97
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_200
LBB26_199:
	cmp	byte ptr [eax + 14], 99
	jb	LBB26_202
LBB26_200:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.201:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 6422528
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_202:
	mov	byte ptr [eax + 15], 11
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_204
# %bb.203:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_209
	jmp	LBB26_208
LBB26_204:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_205:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 99
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_205
# %bb.206:
	xor	ebx, ebx
	cmp	dl, 98
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_209
LBB26_208:
	cmp	byte ptr [eax + 14], 100
	jb	LBB26_211
LBB26_209:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.210:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 6488064
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_211:
	mov	byte ptr [eax + 15], 12
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_213
# %bb.212:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_218
	jmp	LBB26_217
LBB26_213:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_214:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 100
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_214
# %bb.215:
	xor	ebx, ebx
	cmp	dl, 99
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_218
LBB26_217:
	cmp	byte ptr [eax + 14], 101
	jb	LBB26_220
LBB26_218:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.219:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 6553600
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_220:
	mov	byte ptr [eax + 15], 13
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_222
# %bb.221:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_227
	jmp	LBB26_226
LBB26_222:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_223:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 101
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_223
# %bb.224:
	xor	ebx, ebx
	cmp	dl, 100
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_227
LBB26_226:
	cmp	byte ptr [eax + 14], 102
	jb	LBB26_229
LBB26_227:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.228:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 6619136
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	mov	esi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
LBB26_229:
	mov	byte ptr [eax + 15], 14
	xor	ebx, ebx
	mov	edi, dword ptr [esi + 4]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_231
# %bb.230:
	mov	eax, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_236
	jmp	LBB26_235
LBB26_231:
	mov	eax, esi
	.p2align	4, 0x90
LBB26_232:                              # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [edi + 14]
	xor	ebx, ebx
	mov	ecx, edi
	cmp	dl, 102
	setb	bl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*ebx]
	cmp	byte ptr [edi + 13], 0
	je	LBB26_232
# %bb.233:
	xor	ebx, ebx
	cmp	dl, 101
	mov	edi, ecx
	seta	bl
	cmp	byte ptr [eax + 13], 0
	jne	LBB26_236
LBB26_235:
	cmp	byte ptr [eax + 14], 103
	jb	LBB26_238
LBB26_236:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	je	LBB26_239
# %bb.237:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], esi
	mov	dword ptr [eax + 4], esi
	mov	dword ptr [eax + 8], esi
	mov	dword ptr [eax + 12], 6684672
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	ebx
	push	edi
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
LBB26_238:
	mov	byte ptr [eax + 15], 15
	pop	esi
	pop	edi
	pop	ebx
	ret
LBB26_239:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
                                        # -- End function
	.def	 "?read_palette_color@@YA?AUcolor@@E@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?read_palette_color@@YA?AUcolor@@E@Z" # -- Begin function ?read_palette_color@@YA?AUcolor@@E@Z
	.p2align	4, 0x90
"?read_palette_color@@YA?AUcolor@@E@Z": # @"?read_palette_color@@YA?AUcolor@@E@Z"
Lfunc_begin10:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 72
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?read_palette_color@@YA?AUcolor@@E@Z"
	lea	eax, [ebp - 24]
	movzx	edi, byte ptr [ebp + 8]
	mov	dword ptr [ebp - 36], 0         # 4-byte Folded Spill
	mov	ecx, dword ptr fs:[0]
	shl	edi, 3
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 52], edi       # 4-byte Spill
	movzx	esi, byte ptr ["?palette@@3EA"]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	add	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	dec	ecx
	mov	eax, esi
	and	esi, 3
	shr	eax, 2
	and	ecx, eax
	mov	eax, dword ptr [edx + 4*ecx]
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4*esi]
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	mov	eax, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	mov	cl, byte ptr [ebx + 13]
	mov	byte ptr [ebp - 60], cl         # 1-byte Spill
	test	cl, cl
	mov	ecx, ebx
	je	LBB27_1
# %bb.4:
	cmp	byte ptr [eax + 13], 0
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	jne	LBB27_7
	jmp	LBB27_5
LBB27_1:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, ebx
	mov	dword ptr [ebp - 64], edx       # 4-byte Spill
	mov	bh, byte ptr [eax + edi]
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	mov	edi, edx
	.p2align	4, 0x90
LBB27_2:                                # =>This Inner Loop Header: Depth=1
	mov	bl, byte ptr [edi + 14]
	xor	edx, edx
	mov	ecx, edi
	cmp	bl, bh
	setb	dl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*edx]
	cmp	byte ptr [edi + 13], 0
	je	LBB27_2
# %bb.3:
	xor	edx, edx
	cmp	bl, bh
	mov	edi, dword ptr [ebp - 52]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 64]       # 4-byte Reload
	setae	dl
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	byte ptr [eax + 13], 0
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	jne	LBB27_7
LBB27_5:
	mov	ecx, edi
	mov	edi, edx
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dl, byte ptr [edx + ecx]
	cmp	dl, byte ptr [eax + 14]
	jae	LBB27_6
LBB27_7:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	mov	dword ptr [ebp - 16], 0
	je	LBB27_8
# %bb.10:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.11:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	cl, byte ptr [ecx + edx]
	mov	byte ptr [eax + 14], cl
	mov	ecx, dword ptr [ebp - 56]       # 4-byte Reload
	mov	byte ptr [eax + 15], 0
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ecx
	mov	dword ptr [eax + 8], ecx
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	mov	word ptr [eax + 12], 0
	push	eax
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	movzx	esi, byte ptr ["?palette@@3EA"]
	mov	ebx, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	add	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	edi, dword ptr [ebx + 4]
	dec	ecx
	mov	dword ptr [ebp - 40], ebx       # 4-byte Spill
	mov	edx, esi
	and	esi, 3
	shr	edx, 2
	and	ecx, edx
	mov	dl, byte ptr [edi + 13]
	mov	byte ptr [ebp - 60], dl         # 1-byte Spill
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, ebx
	mov	ebx, edi
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
LBB27_12:
	mov	al, byte ptr [eax + 15]
	mov	dword ptr [ebp - 68], 0         # 4-byte Folded Spill
	mov	dword ptr [ebp - 48], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 56], edx       # 4-byte Spill
	mov	byte ptr [ebp - 70], al         # 1-byte Spill
	mov	eax, dword ptr [edi + 4*ecx]
	mov	eax, dword ptr [eax + 4*esi]
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	or	eax, 1
	cmp	byte ptr [ebp - 60], 0          # 1-byte Folded Reload
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	mov	eax, edx
	je	LBB27_13
# %bb.16:
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_19
	jmp	LBB27_17
LBB27_13:
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	edi, ebx
	mov	dword ptr [ebp - 76], esi       # 4-byte Spill
	mov	dword ptr [ebp - 64], edi       # 4-byte Spill
	mov	bh, byte ptr [eax + edx]
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	.p2align	4, 0x90
LBB27_14:                               # =>This Inner Loop Header: Depth=1
	mov	bl, byte ptr [edi + 14]
	xor	edx, edx
	mov	esi, edi
	cmp	bl, bh
	setb	dl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*edx]
	cmp	byte ptr [edi + 13], 0
	je	LBB27_14
# %bb.15:
	mov	dword ptr [ebp - 48], esi       # 4-byte Spill
	xor	edx, edx
	cmp	bl, bh
	mov	ebx, dword ptr [ebp - 64]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 76]       # 4-byte Reload
	setae	dl
	mov	dword ptr [ebp - 68], edx       # 4-byte Spill
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_19
LBB27_17:
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	edx, dword ptr [ebp - 44]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dl, byte ptr [edx + edi]
	cmp	dl, byte ptr [eax + 14]
	jae	LBB27_18
LBB27_19:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	mov	dword ptr [ebp - 16], 0
	je	LBB27_20
# %bb.22:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.23:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	cl, byte ptr [ecx + edx]
	mov	byte ptr [eax + 14], cl
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	byte ptr [eax + 15], 0
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ecx
	mov	dword ptr [eax + 8], ecx
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	mov	word ptr [eax + 12], 0
	push	eax
	push	dword ptr [ebp - 68]            # 4-byte Folded Reload
	push	dword ptr [ebp - 48]            # 4-byte Folded Reload
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	movzx	esi, byte ptr ["?palette@@3EA"]
	mov	edi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	add	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ebx, dword ptr [edi + 4]
	dec	ecx
	mov	dword ptr [ebp - 40], edi       # 4-byte Spill
	mov	edx, esi
	and	esi, 3
	shr	edx, 2
	and	ecx, edx
	mov	dl, byte ptr [ebx + 13]
	mov	byte ptr [ebp - 60], dl         # 1-byte Spill
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
LBB27_24:
	movzx	eax, byte ptr [eax + 15]
	mov	edx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	dword ptr [ebp - 76], esi       # 4-byte Spill
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 48], 0         # 4-byte Folded Spill
	mov	dword ptr [ebp - 56], edi       # 4-byte Spill
	mov	dword ptr [ebp - 84], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	or	edx, 2
	cmp	byte ptr [ebp - 60], 0          # 1-byte Folded Reload
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4*ecx]
	mov	ecx, ebx
	mov	esi, dword ptr [eax + 4*esi]
	mov	eax, edi
	je	LBB27_25
# %bb.28:
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_31
	jmp	LBB27_29
LBB27_25:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, ebx
	mov	dword ptr [ebp - 64], edi       # 4-byte Spill
	mov	bh, byte ptr [esi + eax]
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	.p2align	4, 0x90
LBB27_26:                               # =>This Inner Loop Header: Depth=1
	mov	bl, byte ptr [edi + 14]
	xor	edx, edx
	mov	ecx, edi
	cmp	bl, bh
	setb	dl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*edx]
	cmp	byte ptr [edi + 13], 0
	je	LBB27_26
# %bb.27:
	xor	edx, edx
	cmp	bl, bh
	mov	ebx, dword ptr [ebp - 64]       # 4-byte Reload
	setae	dl
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_31
LBB27_29:
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dl, byte ptr [esi + edx]
	cmp	dl, byte ptr [eax + 14]
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	jae	LBB27_30
LBB27_31:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	mov	dword ptr [ebp - 60], esi       # 4-byte Spill
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	je	LBB27_32
# %bb.34:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.35:
	mov	ecx, dword ptr [ebp - 60]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	cl, byte ptr [ecx + edx]
	mov	byte ptr [eax + 14], cl
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	byte ptr [eax + 15], 0
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ecx
	mov	dword ptr [eax + 8], ecx
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	mov	word ptr [eax + 12], 0
	push	eax
	push	dword ptr [ebp - 48]            # 4-byte Folded Reload
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	movzx	edi, byte ptr ["?palette@@3EA"]
	mov	ecx, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	mov	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	add	edi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ebx, dword ptr [ecx + 4]
	dec	esi
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	edx, edi
	and	edi, 3
	shr	edx, 2
	and	esi, edx
	mov	dl, byte ptr [ebx + 13]
	mov	byte ptr [ebp - 60], dl         # 1-byte Spill
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, ecx
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
LBB27_36:
	mov	al, byte ptr [eax + 15]
	or	ecx, 3
	cmp	byte ptr [ebp - 60], 0          # 1-byte Folded Reload
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	mov	dword ptr [ebp - 68], 0         # 4-byte Folded Spill
	mov	dword ptr [ebp - 56], edx       # 4-byte Spill
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	mov	ecx, ebx
	mov	byte ptr [ebp - 69], al         # 1-byte Spill
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4*esi]
	mov	esi, edi
	mov	eax, dword ptr [eax + 4*edi]
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	mov	eax, edx
	je	LBB27_37
# %bb.40:
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_43
	jmp	LBB27_41
LBB27_37:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	edi, ebx
	mov	dword ptr [ebp - 64], edi       # 4-byte Spill
	mov	bh, byte ptr [eax + ecx]
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	.p2align	4, 0x90
LBB27_38:                               # =>This Inner Loop Header: Depth=1
	mov	bl, byte ptr [edi + 14]
	xor	edx, edx
	mov	ecx, edi
	cmp	bl, bh
	setb	dl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*edx]
	cmp	byte ptr [edi + 13], 0
	je	LBB27_38
# %bb.39:
	xor	edx, edx
	cmp	bl, bh
	mov	ebx, dword ptr [ebp - 64]       # 4-byte Reload
	setae	dl
	mov	dword ptr [ebp - 68], edx       # 4-byte Spill
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_43
LBB27_41:
	mov	edi, esi
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 48]       # 4-byte Reload
	mov	dl, byte ptr [edx + esi]
	cmp	dl, byte ptr [eax + 14]
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	jae	LBB27_42
LBB27_43:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	je	LBB27_44
# %bb.46:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.47:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	cl, byte ptr [ecx + edx]
	mov	byte ptr [eax + 14], cl
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	byte ptr [eax + 15], 0
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ecx
	mov	dword ptr [eax + 8], ecx
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	mov	word ptr [eax + 12], 0
	push	eax
	push	dword ptr [ebp - 68]            # 4-byte Folded Reload
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	movzx	edi, byte ptr ["?palette@@3EA"]
	mov	ecx, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	mov	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	add	edi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ebx, dword ptr [ecx + 4]
	dec	esi
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	edx, edi
	and	edi, 3
	shr	edx, 2
	and	esi, edx
	mov	dl, byte ptr [ebx + 13]
	mov	byte ptr [ebp - 60], dl         # 1-byte Spill
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, ecx
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
LBB27_48:
	movzx	eax, byte ptr [eax + 15]
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	mov	dword ptr [ebp - 76], 0         # 4-byte Folded Spill
	mov	dword ptr [ebp - 68], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 56], edx       # 4-byte Spill
	mov	dword ptr [ebp - 80], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4*esi]
	mov	esi, edi
	mov	eax, dword ptr [eax + 4*edi]
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	mov	eax, ecx
	or	eax, 4
	cmp	byte ptr [ebp - 60], 0          # 1-byte Folded Reload
	mov	dword ptr [ebp - 48], eax       # 4-byte Spill
	mov	eax, edx
	je	LBB27_49
# %bb.52:
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_55
	jmp	LBB27_53
LBB27_49:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	edi, ebx
	mov	dword ptr [ebp - 64], edi       # 4-byte Spill
	mov	bh, byte ptr [eax + ecx]
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	.p2align	4, 0x90
LBB27_50:                               # =>This Inner Loop Header: Depth=1
	mov	bl, byte ptr [edi + 14]
	xor	edx, edx
	mov	ecx, edi
	cmp	bl, bh
	setb	dl
	cmovae	eax, edi
	mov	edi, dword ptr [edi + 8*edx]
	cmp	byte ptr [edi + 13], 0
	je	LBB27_50
# %bb.51:
	mov	dword ptr [ebp - 68], ecx       # 4-byte Spill
	xor	ecx, ecx
	cmp	bl, bh
	mov	ebx, dword ptr [ebp - 64]       # 4-byte Reload
	setae	cl
	mov	dword ptr [ebp - 76], ecx       # 4-byte Spill
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_55
LBB27_53:
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 48]       # 4-byte Reload
	mov	dl, byte ptr [edx + edi]
	mov	edi, dword ptr [ebp - 52]       # 4-byte Reload
	cmp	dl, byte ptr [eax + 14]
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	jae	LBB27_54
LBB27_55:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	mov	dword ptr [ebp - 16], 0
	je	LBB27_56
# %bb.58:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.59:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	cl, byte ptr [ecx + edx]
	mov	byte ptr [eax + 14], cl
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	byte ptr [eax + 15], 0
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ecx
	mov	dword ptr [eax + 8], ecx
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	mov	word ptr [eax + 12], 0
	push	eax
	push	dword ptr [ebp - 76]            # 4-byte Folded Reload
	push	dword ptr [ebp - 68]            # 4-byte Folded Reload
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	movzx	esi, byte ptr ["?palette@@3EA"]
	mov	edi, dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"]
	mov	ecx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8]
	add	esi, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12]
	mov	ebx, dword ptr [edi + 4]
	dec	ecx
	mov	dword ptr [ebp - 40], edi       # 4-byte Spill
	mov	dword ptr [ebp - 56], edi       # 4-byte Spill
	mov	edi, dword ptr [ebp - 52]       # 4-byte Reload
	mov	edx, esi
	and	esi, 3
	shr	edx, 2
	and	ecx, edx
	mov	dl, byte ptr [ebx + 13]
	mov	byte ptr [ebp - 60], dl         # 1-byte Spill
	mov	edx, dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4]
LBB27_60:
	mov	edx, dword ptr [edx + 4*ecx]
	mov	al, byte ptr [eax + 15]
	or	edi, 5
	cmp	byte ptr [ebp - 60], 0          # 1-byte Folded Reload
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	mov	byte ptr [ebp - 36], al         # 1-byte Spill
	mov	edx, dword ptr [edx + 4*esi]
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	je	LBB27_61
# %bb.64:
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_66
	jmp	LBB27_65
LBB27_61:
	mov	cl, byte ptr [edx + edi]
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	.p2align	4, 0x90
LBB27_62:                               # =>This Inner Loop Header: Depth=1
	movzx	edx, byte ptr [ebx + 14]
	mov	esi, ebx
	xor	ebx, ebx
	cmp	dl, cl
	setb	bl
	cmovae	eax, esi
	mov	ebx, dword ptr [esi + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_62
# %bb.63:
	xor	ebx, ebx
	cmp	dl, cl
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	setae	bl
	mov	dword ptr [ebp - 44], ebx       # 4-byte Spill
	mov	ebx, esi
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_66
LBB27_65:
	mov	cl, byte ptr [edx + edi]
	cmp	cl, byte ptr [eax + 14]
	jae	LBB27_71
LBB27_66:
	cmp	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 268435455
	mov	dword ptr [ebp - 64], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 52], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	je	LBB27_67
# %bb.69:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.70:
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	cl, byte ptr [edx + ecx]
	mov	byte ptr [eax + 14], cl
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	byte ptr [eax + 15], 0
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ecx
	mov	dword ptr [eax + 8], ecx
	mov	word ptr [eax + 12], 0
	mov	ecx, offset "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	push	eax
	push	dword ptr [ebp - 44]            # 4-byte Folded Reload
	push	dword ptr [ebp - 64]            # 4-byte Folded Reload
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
LBB27_71:
	mov	cl, byte ptr [ebp - 69]         # 1-byte Reload
	mov	esi, dword ptr [ebp - 80]       # 4-byte Reload
	mov	bl, byte ptr [ebp - 36]         # 1-byte Reload
	mov	edx, dword ptr [ebp - 84]       # 4-byte Reload
	movzx	eax, byte ptr [eax + 15]
	shl	cl, 4
	shl	bl, 4
	movzx	ecx, cl
	movzx	edi, bl
	or	esi, ecx
	mov	cl, byte ptr [ebp - 70]         # 1-byte Reload
	or	edi, eax
	mov	eax, dword ptr [ebp - 24]
	shl	esi, 8
	shl	edi, 16
	shl	cl, 4
	mov	dword ptr fs:[0], eax
	movzx	ecx, cl
	or	edx, ecx
	or	esi, edx
	or	esi, edi
	or	esi, -16777216
	mov	eax, esi
	add	esp, 72
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB27_6:
	mov	edx, dword ptr [ebp - 56]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	jmp	LBB27_12
LBB27_18:
	mov	edi, dword ptr [ebp - 56]       # 4-byte Reload
	jmp	LBB27_24
LBB27_30:
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp - 56]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 76]       # 4-byte Reload
	jmp	LBB27_36
LBB27_42:
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp - 56]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	jmp	LBB27_48
LBB27_54:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	jmp	LBB27_60
LBB27_8:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.9:
LBB27_20:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.21:
LBB27_32:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.33:
LBB27_44:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.45:
LBB27_56:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.57:
LBB27_67:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.68:
	.def	 "?catch$72@?0??read_palette_color@@YA?AUcolor@@E@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$72@?0??read_palette_color@@YA?AUcolor@@E@Z@4HA":
LBB27_72:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], 1
	push	offset "??_C@_0BP@LDKDOJOI@Index?5out?5of?5range?5for?5palette?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	push	1
	call	_exit
Lfunc_end10:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?read_palette_color@@YA?AUcolor@@E@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?read_palette_color@@YA?AUcolor@@E@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$?read_palette_color@@YA?AUcolor@@E@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?read_palette_color@@YA?AUcolor@@E@Z":
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
"$tryMap$?read_palette_color@@YA?AUcolor@@E@Z":
	.long	0                               # TryLow
	.long	0                               # TryHigh
	.long	1                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$?read_palette_color@@YA?AUcolor@@E@Z") # HandlerArray
"$handlerMap$0$?read_palette_color@@YA?AUcolor@@E@Z":
	.long	0                               # Adjectives
	.long	"??_R0?AVout_of_range@std@@@8"  # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$72@?0??read_palette_color@@YA?AUcolor@@E@Z@4HA" # Handler
	.text
                                        # -- End function
	.def	 "?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	ret
                                        # -- End function
	.def	 "?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	eax, dword ptr [esp + 24]
	mov	ebx, 268435455
	mov	ecx, dword ptr [eax + 76]
	add	ebx, dword ptr [eax + 72]
	mov	edx, dword ptr [eax + 68]
	lea	esi, [ecx + 1]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	edi, ebx
	mov	edi, dword ptr [edx + 4*edi]
	movzx	ebp, byte ptr [edi + esi]
	mov	esi, ecx
	mov	edi, ecx
	add	ecx, 2
	shr	esi, 4
	and	edi, 15
	and	esi, ebx
	mov	edx, dword ptr [edx + 4*esi]
	mov	esi, dword ptr [eax + 80]
	movzx	edx, byte ptr [edx + edi]
	mov	edi, esi
	shl	edx, 8
	cmp	esi, 1
	cmove	ecx, esi
	xor	ebx, ebx
	add	edi, -2
	cmove	ecx, ebx
	or	edx, ebp
	mov	dword ptr [eax + 80], edi
	mov	dword ptr [eax + 76], ecx
	je	LBB29_4
# %bb.1:
	add	esi, -3
	mov	ebp, edx
	.p2align	4, 0x90
LBB29_2:                                # =>This Inner Loop Header: Depth=1
	inc	ecx
	sub	esi, 1
	cmovb	ecx, ebx
	dec	ebp
	jne	LBB29_2
# %bb.3:
	sub	edi, edx
	mov	dword ptr [eax + 76], ecx
	mov	dword ptr [eax + 80], edi
LBB29_4:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [esp + 28]
	mov	ebp, 268435455
	mov	esi, dword ptr [eax + 76]
	add	ebp, dword ptr [eax + 72]
	mov	ebx, dword ptr [eax + 68]
	mov	ecx, esi
	mov	edx, esi
	shr	ecx, 4
	and	edx, 15
	and	ecx, ebp
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	eax, byte ptr [ecx + edx]
	lea	edx, [esi + 1]
	lea	ecx, [esi + 3]
	mov	edi, edx
	and	edx, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 2]
	add	esi, 4
	movzx	edx, byte ptr [edi + edx]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, ecx
	and	ecx, 15
	shr	eax, 4
	and	eax, ebp
	mov	ebp, 3
	mov	eax, dword ptr [ebx + 4*eax]
	mov	ebx, dword ptr [esp + 28]
	mov	ebx, dword ptr [ebx + 80]
	movzx	eax, byte ptr [eax + ecx]
	mov	ecx, dword ptr [esp + 28]
	cmp	ebx, 1
	cmovne	ebp, esi
	cmp	ebx, 2
	mov	esi, 1
	cmove	ebp, ebx
	cmp	ebx, 3
	cmovne	esi, ebp
	xor	ebp, ebp
	cmp	ebx, 4
	cmovne	ebp, esi
	shl	edx, 8
	shl	edi, 16
	shl	eax, 24
	add	ebx, -4
	add	edx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [ecx + 76], ebp
	mov	dword ptr [ecx + 80], ebx
	or	edx, edi
	or	edx, eax
	mov	dword ptr [ecx + 36], edx
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [esp + 28]
	mov	ebp, 268435455
	mov	esi, dword ptr [eax + 76]
	add	ebp, dword ptr [eax + 72]
	mov	ebx, dword ptr [eax + 68]
	lea	ecx, [esi + 3]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, ebp
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	eax, byte ptr [edx + ecx]
	lea	edx, [esi + 2]
	mov	edi, edx
	and	edx, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 1]
	movzx	edx, byte ptr [edi + edx]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, esi
	shr	eax, 4
	and	eax, ebp
	mov	ecx, dword ptr [ebx + 4*eax]
	mov	eax, dword ptr [esp + 28]
	mov	ebx, esi
	add	esi, 4
	and	ebx, 15
	mov	ebp, dword ptr [eax + 80]
	mov	eax, 3
	movzx	ecx, byte ptr [ecx + ebx]
	cmp	ebp, 1
	cmovne	eax, esi
	cmp	ebp, 2
	mov	esi, 1
	cmove	eax, ebp
	cmp	ebp, 3
	cmovne	esi, eax
	xor	eax, eax
	cmp	ebp, 4
	cmovne	eax, esi
	shl	edx, 8
	shl	edi, 16
	shl	ecx, 24
	add	ebp, -4
	add	edx, dword ptr [esp]            # 4-byte Folded Reload
	or	edx, edi
	or	edx, ecx
	mov	edx, dword ptr [esp + 28]
	mov	dword ptr [edx + 76], eax
	mov	dword ptr [edx + 80], ebp
	setne	byte ptr [edx + 84]
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_raster4_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_raster4_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_raster4_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_raster4_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_raster4_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [esp + 28]
	mov	ebp, 268435455
	mov	esi, dword ptr [eax + 76]
	add	ebp, dword ptr [eax + 72]
	mov	ebx, dword ptr [eax + 68]
	lea	ecx, [esi + 3]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, ebp
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	eax, byte ptr [edx + ecx]
	lea	edx, [esi + 2]
	mov	edi, edx
	and	edx, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 1]
	movzx	edx, byte ptr [edi + edx]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, esi
	shr	eax, 4
	and	eax, ebp
	mov	ecx, dword ptr [ebx + 4*eax]
	mov	eax, dword ptr [esp + 28]
	mov	ebx, esi
	add	esi, 4
	and	ebx, 15
	mov	ebp, dword ptr [eax + 80]
	mov	eax, 3
	movzx	ecx, byte ptr [ecx + ebx]
	cmp	ebp, 1
	cmovne	eax, esi
	cmp	ebp, 2
	mov	esi, 1
	cmove	eax, ebp
	cmp	ebp, 3
	cmovne	esi, eax
	xor	eax, eax
	cmp	ebp, 4
	cmovne	eax, esi
	shl	edx, 8
	shl	edi, 16
	shl	ecx, 24
	add	ebp, -4
	add	edx, dword ptr [esp]            # 4-byte Folded Reload
	or	edx, edi
	or	edx, ecx
	mov	edx, dword ptr [esp + 28]
	mov	dword ptr [edx + 76], eax
	mov	dword ptr [edx + 80], ebp
	setne	byte ptr [edx + 84]
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_raster3_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_raster3_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_raster3_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_raster3_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_raster3_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [esp + 28]
	mov	ebp, 268435455
	mov	esi, dword ptr [eax + 76]
	add	ebp, dword ptr [eax + 72]
	mov	ebx, dword ptr [eax + 68]
	lea	ecx, [esi + 3]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, ebp
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	eax, byte ptr [edx + ecx]
	lea	edx, [esi + 2]
	mov	edi, edx
	and	edx, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 1]
	movzx	edx, byte ptr [edi + edx]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, esi
	shr	eax, 4
	and	eax, ebp
	mov	ecx, dword ptr [ebx + 4*eax]
	mov	eax, dword ptr [esp + 28]
	mov	ebx, esi
	add	esi, 4
	and	ebx, 15
	mov	ebp, dword ptr [eax + 80]
	mov	eax, 3
	movzx	ecx, byte ptr [ecx + ebx]
	cmp	ebp, 1
	cmovne	eax, esi
	cmp	ebp, 2
	mov	esi, 1
	cmove	eax, ebp
	cmp	ebp, 3
	cmovne	esi, eax
	xor	eax, eax
	cmp	ebp, 4
	cmovne	eax, esi
	shl	edx, 8
	shl	edi, 16
	shl	ecx, 24
	add	ebp, -4
	add	edx, dword ptr [esp]            # 4-byte Folded Reload
	or	edx, edi
	or	edx, ecx
	mov	edx, dword ptr [esp + 28]
	mov	dword ptr [edx + 76], eax
	mov	dword ptr [edx + 80], ebp
	setne	byte ptr [edx + 84]
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_raster_set_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_raster_set_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_raster_set_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_raster_set_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_raster_set_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	edi
	push	esi
	mov	eax, dword ptr [esp + 16]
	mov	ecx, dword ptr [eax + 76]
	mov	edi, dword ptr [eax + 72]
	mov	esi, dword ptr [eax + 68]
	mov	edx, ecx
	dec	edi
	shr	edx, 4
	and	edi, edx
	mov	edx, ecx
	inc	ecx
	mov	esi, dword ptr [esi + 4*edi]
	and	edx, 15
	mov	dl, byte ptr [esi + edx]
	xor	esi, esi
	dec	dword ptr [eax + 80]
	cmovne	esi, ecx
	mov	dword ptr [eax + 76], esi
	mov	byte ptr ["?palette@@3EA"], dl
	cmp	byte ptr [eax + 84], 0
	je	LBB34_5
# %bb.1:
	push	offset "??_C@_0BB@OCFNGDLM@Set?5palette?5to?5?$CC?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	movzx	edx, byte ptr ["?palette@@3EA"]
	shl	edx, 3
	mov	ecx, dword ptr [edx + 2*edx + "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+16]
	cmp	dword ptr [edx + 2*edx + "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+20], 15
	jbe	LBB34_2
# %bb.3:
	mov	edx, dword ptr [edx + 2*edx + "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"]
	jmp	LBB34_4
LBB34_2:
	lea	edx, [edx + 2*edx + "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"]
LBB34_4:
	push	ecx
	push	edx
	push	eax
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
	push	offset "??_C@_01BJJEKLCA@?$CC?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
LBB34_5:
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
Lfunc_begin11:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 92
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	esi, dword ptr [ebp + 12]
	lea	eax, [ebp - 24]
	mov	edx, 268435455
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi + 76]
	mov	esi, dword ptr [esi + 72]
	add	esi, edx
	mov	edx, dword ptr [ebp + 12]
	lea	ecx, [eax + 3]
	mov	edi, ecx
	and	ecx, 15
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	shr	edi, 4
	and	edi, esi
	mov	edx, dword ptr [edx + 68]
	mov	edi, dword ptr [edx + 4*edi]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	movzx	ecx, byte ptr [edi + ecx]
	lea	edi, [eax + 2]
	mov	ebx, edi
	and	edi, 15
	shr	ebx, 4
	and	ebx, esi
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	movzx	ecx, byte ptr [ebx + edi]
	lea	edi, [eax + 1]
	mov	ebx, edi
	and	edi, 15
	shr	ebx, 4
	and	ebx, esi
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	mov	ecx, eax
	and	ecx, 15
	movzx	ebx, byte ptr [ebx + edi]
	mov	edi, eax
	add	eax, 4
	shr	edi, 4
	and	edi, esi
	mov	edi, dword ptr [edx + 4*edi]
	mov	edx, dword ptr [ebp + 12]
	movzx	ecx, byte ptr [edi + ecx]
	mov	edi, dword ptr [edx + 80]
	mov	edx, 3
	cmp	edi, 1
	mov	dword ptr [ebp - 52], edi       # 4-byte Spill
	cmove	eax, edx
	cmp	edi, 2
	mov	edx, 1
	cmove	eax, edi
	cmp	edi, 3
	cmove	eax, edx
	xor	edx, edx
	cmp	edi, 4
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 48]       # 4-byte Reload
	shl	ebx, 16
	shl	ecx, 24
	shl	edx, 8
	add	edx, dword ptr [ebp - 36]       # 4-byte Folded Reload
	or	edx, ebx
	lea	ebx, [edi - 4]
	or	edx, ecx
	mov	ecx, dword ptr [ebp + 12]
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [ecx + 76], eax
	mov	dword ptr [ecx + 80], ebx
	lea	ecx, [eax + 3]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, esi
	mov	edi, dword ptr [edx + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, esi
	mov	edi, dword ptr [edx + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	dword ptr [ebp - 56], ecx       # 4-byte Spill
	lea	ecx, [eax + 1]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, esi
	mov	edi, dword ptr [edx + 4*edi]
	mov	edx, 3
	movzx	ecx, byte ptr [edi + ecx]
	mov	edi, eax
	shr	edi, 4
	and	edi, esi
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	ecx, eax
	add	eax, 4
	and	ecx, 15
	cmp	ebx, 1
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	cmove	eax, edx
	cmp	ebx, 2
	mov	edx, 1
	cmove	eax, ebx
	cmp	ebx, 3
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	ebx, 4
	mov	edi, dword ptr [edx + 4*edi]
	mov	edx, 0
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 56]       # 4-byte Reload
	shl	esi, 16
	movzx	ecx, byte ptr [edi + ecx]
	lea	edi, [eax + 3]
	shl	edx, 8
	mov	ebx, edi
	and	edi, 15
	add	edx, dword ptr [ebp - 36]       # 4-byte Folded Reload
	shr	ebx, 4
	and	ebx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	shl	ecx, 24
	or	edx, esi
	mov	esi, dword ptr [ebp + 12]
	or	edx, ecx
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	dword ptr [ebp - 56], edx       # 4-byte Spill
	mov	dword ptr [esi + 76], eax
	lea	edx, [ecx - 8]
	mov	dword ptr [esi + 80], edx
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [esi + 4*ebx]
	movzx	ecx, byte ptr [ebx + edi]
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, ebx
	mov	edi, dword ptr [esi + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	lea	ecx, [eax + 1]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, ebx
	mov	edi, dword ptr [esi + 4*edi]
	mov	esi, eax
	and	esi, 15
	movzx	edi, byte ptr [edi + ecx]
	mov	ecx, eax
	add	eax, 4
	shr	ecx, 4
	and	ecx, ebx
	cmp	edx, 1
	mov	ebx, 3
	cmove	eax, ebx
	cmp	edx, 2
	mov	ebx, 1
	cmove	eax, edx
	cmp	edx, 3
	cmove	eax, ebx
	cmp	edx, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [edx + 4*ecx]
	mov	edx, 0
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 44]       # 4-byte Reload
	shl	edi, 16
	movzx	ecx, byte ptr [ecx + esi]
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	shl	edx, 8
	add	edx, dword ptr [ebp - 36]       # 4-byte Folded Reload
	shl	ecx, 24
	or	edx, edi
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	or	edx, ecx
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	dword ptr [ebp - 44], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp + 12]
	lea	ebx, [ecx - 12]
	lea	ecx, [eax + 3]
	mov	dword ptr [edx + 76], eax
	mov	dword ptr [edx + 80], ebx
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, esi
	mov	edx, dword ptr [edi + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, esi
	mov	esi, edi
	mov	edx, dword ptr [edi + 4*edx]
	movzx	edi, byte ptr [edx + ecx]
	lea	ecx, [eax + 1]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	mov	edx, dword ptr [esi + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, eax
	shr	edx, 4
	and	edx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	mov	edx, dword ptr [esi + 4*edx]
	mov	esi, eax
	add	eax, 4
	and	esi, 15
	cmp	ebx, 1
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, 3
	cmove	eax, edx
	cmp	ebx, 2
	mov	edx, 1
	cmove	eax, ebx
	cmp	ebx, 3
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	ebx, 4
	mov	ebx, dword ptr [ebp + 12]
	movzx	edx, byte ptr [edx + esi]
	mov	esi, 0
	cmove	eax, esi
	shl	edi, 8
	shl	ecx, 16
	mov	esi, dword ptr [ebp - 52]       # 4-byte Reload
	add	edi, dword ptr [ebp - 36]       # 4-byte Folded Reload
	mov	dword ptr [ebx + 76], eax
	mov	eax, dword ptr [ebp - 48]       # 4-byte Reload
	shl	edx, 24
	add	esi, -16
	or	edi, ecx
	add	dword ptr [ebp - 44], eax       # 4-byte Folded Spill
	mov	dword ptr [ebx + 80], esi
	or	edi, edx
	add	edi, dword ptr [ebp - 56]       # 4-byte Folded Reload
	mov	dword ptr [ebp - 52], edi       # 4-byte Spill
	jmp	LBB35_1
	.p2align	4, 0x90
LBB35_4:                                #   in Loop: Header=BB35_1 Depth=1
	inc	eax
LBB35_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	cmp	eax, dword ptr [ebp - 44]       # 4-byte Folded Reload
	jae	LBB35_44
# %bb.2:                                #   in Loop: Header=BB35_1 Depth=1
	mov	esi, dword ptr [ebp - 56]       # 4-byte Reload
	lea	ecx, [4*eax]
	mov	dword ptr [ebp - 48], eax       # 4-byte Spill
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	jmp	LBB35_3
LBB35_29:                               #   in Loop: Header=BB35_3 Depth=2
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB35_30:                               #   in Loop: Header=BB35_3 Depth=2
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB35_31:                               #   in Loop: Header=BB35_3 Depth=2
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 48]       # 4-byte Reload
	inc	esi
LBB35_3:                                #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	esi, dword ptr [ebp - 52]       # 4-byte Folded Reload
	jae	LBB35_4
# %bb.5:                                #   in Loop: Header=BB35_3 Depth=2
	mov	ebx, dword ptr [ebp + 12]
	mov	eax, dword ptr [ebx + 76]
	mov	edx, dword ptr [ebx + 72]
	mov	ecx, eax
	dec	edx
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [ebx + 68]
	mov	ecx, dword ptr [ecx + 4*edx]
	mov	edx, eax
	inc	eax
	and	edx, 15
	movzx	ecx, byte ptr [ecx + edx]
	dec	dword ptr [ebx + 80]
	mov	edx, 0
	cmove	eax, edx
	mov	dword ptr [ebx + 76], eax
	mov	dword ptr [ebp - 16], -1
	push	ecx
	call	"?read_palette_color@@YA?AUcolor@@E@Z"
	add	esp, 4
	mov	ecx, dword ptr [ebx + 4]
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	ebx, 268435455
	imul	ecx, dword ptr [ebp - 36]       # 4-byte Folded Reload
	mov	edx, dword ptr [eax + 12]
	mov	edi, dword ptr [eax + 8]
	lea	ecx, [ecx + 4*esi]
	add	edi, ebx
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	add	edx, ecx
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	esi, dword ptr [esi + 4*edi]
	mov	byte ptr [esi + edx], bl
	mov	edx, ecx
	or	edx, 1
	mov	edi, dword ptr [eax + 8]
	add	edx, dword ptr [eax + 12]
	dec	edi
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	esi, dword ptr [esi + 4*edi]
	mov	byte ptr [esi + edx], bh
	mov	esi, ecx
	or	ecx, 3
	or	esi, 2
	mov	edi, dword ptr [eax + 8]
	add	esi, dword ptr [eax + 12]
	dec	edi
	mov	edx, esi
	and	esi, 15
	shr	edx, 4
	and	edi, edx
	mov	edx, dword ptr [eax + 4]
	mov	edi, dword ptr [edx + 4*edi]
	mov	edx, ebx
	shr	edx, 16
	mov	byte ptr [edi + esi], dl
	add	ecx, dword ptr [eax + 12]
	mov	edi, dword ptr [eax + 8]
	mov	esi, ecx
	dec	edi
	and	ecx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	eax, dword ptr [ebp + 12]
	mov	esi, dword ptr [esi + 4*edi]
	mov	byte ptr [esi + ecx], -1
	cmp	byte ptr [eax + 84], 0
	je	LBB35_31
# %bb.6:                                #   in Loop: Header=BB35_3 Depth=2
	movzx	ecx, dl
	movzx	eax, bl
	movzx	edx, bh
	push	ecx
	push	edx
	push	eax
	lea	esi, [ebp - 104]
	push	esi
	call	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	add	esp, 16
	mov	eax, dword ptr [ebp - 88]
	cmp	dword ptr [ebp - 84], 15
	mov	ecx, esi
	jbe	LBB35_8
# %bb.7:                                #   in Loop: Header=BB35_3 Depth=2
	mov	ecx, dword ptr [ebp - 104]
LBB35_8:                                #   in Loop: Header=BB35_3 Depth=2
	mov	dword ptr [ebp - 16], 2
	push	eax
	push	ecx
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.9:                                #   in Loop: Header=BB35_3 Depth=2
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.10:                               #   in Loop: Header=BB35_3 Depth=2
	mov	ecx, eax
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.11:                               #   in Loop: Header=BB35_3 Depth=2
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.12:                               #   in Loop: Header=BB35_3 Depth=2
	mov	ecx, eax
	push	dword ptr [ebp - 48]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.13:                               #   in Loop: Header=BB35_3 Depth=2
	push	offset "??_C@_02MNMNLDAI@?$CJ?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.14:                               #   in Loop: Header=BB35_3 Depth=2
	mov	dword ptr [ebp - 60], 15
	mov	dword ptr [ebp - 64], 4
	mov	dword ptr [ebp - 80], 1831885595
	mov	byte ptr [ebp - 76], 0
	mov	dword ptr [ebp - 16], 3
	push	4
	lea	ecx, [ebp - 80]
	push	ecx
	push	eax
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.15:                               #   in Loop: Header=BB35_3 Depth=2
	mov	eax, dword ptr [ebp - 60]
	cmp	eax, 16
	jb	LBB35_23
# %bb.16:                               #   in Loop: Header=BB35_3 Depth=2
	mov	ecx, dword ptr [ebp - 80]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB35_22
# %bb.17:                               #   in Loop: Header=BB35_3 Depth=2
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB35_18
# %bb.21:                               #   in Loop: Header=BB35_3 Depth=2
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB35_22:                               #   in Loop: Header=BB35_3 Depth=2
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB35_23:                               #   in Loop: Header=BB35_3 Depth=2
	mov	eax, dword ptr [ebp - 84]
	cmp	eax, 16
	jb	LBB35_31
# %bb.24:                               #   in Loop: Header=BB35_3 Depth=2
	mov	ecx, dword ptr [ebp - 104]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB35_30
# %bb.25:                               #   in Loop: Header=BB35_3 Depth=2
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jb	LBB35_29
# %bb.26:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.27:
LBB35_44:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 92
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB35_18:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.19:
	.def	 "?dtor$20@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB35_20:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$28@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$28@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB35_28:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$32@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$32@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB35_32:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	eax, dword ptr [ebp - 60]
	cmp	eax, 16
	jb	LBB35_37
# %bb.33:
	mov	ecx, dword ptr [ebp - 80]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB35_36
# %bb.34:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB35_45
# %bb.35:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB35_36:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB35_37:
	mov	dword ptr [ebp - 64], 0
	mov	dword ptr [ebp - 60], 15
	mov	byte ptr [ebp - 80], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB35_45:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$38@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$38@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB35_38:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	eax, dword ptr [ebp - 84]
	cmp	eax, 16
	jb	LBB35_43
# %bb.39:
	mov	ecx, dword ptr [ebp - 104]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB35_42
# %bb.40:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB35_46
# %bb.41:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB35_42:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB35_43:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB35_46:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end11:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z":
	.long	429065506                       # MagicNumber
	.long	4                               # MaxState
	.long	("$stateUnwindMap$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z":
	.long	-1                              # ToState
	.long	"?dtor$20@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$28@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$38@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	2                               # ToState
	.long	"?dtor$32@?0??ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.globl	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z" # -- Begin function ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	.p2align	4, 0x90
"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z": # @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
Lfunc_begin12:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 64
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 40], esi
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + edx + 56]
	test	ecx, ecx
	je	LBB36_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
LBB36_2:
	cmp	dword ptr [esi + edx + 12], 0
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	je	LBB36_9
# %bb.3:
	xor	edi, edi
	mov	byte ptr [ebp - 36], 0
	jmp	LBB36_4
LBB36_9:
	mov	ecx, dword ptr [esi + edx + 60]
	test	ecx, ecx
	je	LBB36_11
# %bb.10:
	cmp	ecx, esi
	je	LBB36_11
# %bb.15:
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edi, edi
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [esi + ecx + 12], 0
	sete	byte ptr [ebp - 36]
	jne	LBB36_4
	jmp	LBB36_17
LBB36_11:
	mov	byte ptr [ebp - 36], 1
LBB36_17:
	mov	eax, dword ptr [eax + 4]
	mov	eax, dword ptr [esi + eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 64], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 68]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.18:
	mov	ecx, dword ptr [ebp - 64]
	mov	edi, dword ptr [ebp + 8]
	mov	esi, eax
	test	ecx, ecx
	je	LBB36_21
# %bb.19:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB36_21
# %bb.20:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB36_21:
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [ebx + eax]
	movsx	edx, byte ptr [ebx + eax + 64]
	mov	eax, dword ptr [ebx + eax + 56]
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 36]
	mov	dword ptr [ebp - 16], 5
	sub	esp, 24
	movsd	xmm0, qword ptr [ebp - 48]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 4], xmm0
	mov	dword ptr [esp + 12], ecx
	lea	ecx, [ebp - 76]
	mov	dword ptr [esp + 20], edi
	mov	dword ptr [esp + 16], edx
	mov	dword ptr [esp], ecx
	mov	ecx, esi
	call	eax
# %bb.22:
	movzx	edi, byte ptr [ebp - 76]
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
LBB36_4:
	mov	eax, dword ptr [esi]
	xor	ecx, ecx
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [esi + edx + 56], 0
	mov	eax, dword ptr [esi + edx + 12]
	sete	cl
	and	eax, 23
	shl	ecx, 2
	or	ecx, edi
	or	eax, ecx
	mov	dword ptr [esi + edx + 12], eax
	and	eax, dword ptr [esi + edx + 16]
	jne	LBB36_5
# %bb.33:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB36_35
# %bb.34:
	mov	ecx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB36_35:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB36_37
# %bb.36:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB36_37:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 64
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB36_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB36_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB36_7:
	test	al, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 68]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 68], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 68]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.32:
LBB36_31:                               # Block address taken
	add	ebp, 12
	xor	edi, edi
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB36_4
	.def	 "?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB36_12:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB36_14
# %bb.13:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB36_14:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB36_23:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 64]
	test	ecx, ecx
	je	LBB36_26
# %bb.24:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB36_26
# %bb.25:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB36_26:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB36_27:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB36_28
# %bb.30:
	mov	eax, offset LBB36_31
	add	esp, 24
	pop	ebp
	ret                                     # CATCHRET
LBB36_28:
	mov	dword ptr [ebp - 16], 6
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.29:
	.def	 "?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB36_38:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB36_39:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB36_40:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB36_42
# %bb.41:
	mov	ecx, dword ptr [ebp - 40]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB36_42:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB36_44
# %bb.43:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB36_44:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end12:
	.section	.xdata,"dr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.p2align	2
"L__ehtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z":
	.long	429065506                       # MagicNumber
	.long	7                               # MaxState
	.long	("$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z":
	.long	5                               # TryLow
	.long	5                               # TryHigh
	.long	6                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z") # HandlerArray
"$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Handler
	.section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
                                        # -- End function
	.def	 "?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z" # -- Begin function ?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z
	.p2align	4, 0x90
"?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z": # @"?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 20]
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_2
# %bb.1:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_7
	jmp	LBB37_6
LBB37_2:
	mov	edx, dword ptr ["?ext0101_noop_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB37_3:                                # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_3
# %bb.4:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_7
LBB37_6:
	mov	ecx, dword ptr ["?ext0101_noop_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB37_9
LBB37_7:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB37_55
# %bb.8:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_noop_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB37_9:
	mov	dword ptr [eax + 20], offset "?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_11
# %bb.10:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_16
	jmp	LBB37_15
LBB37_11:
	mov	edx, dword ptr ["?ext0101_noopex_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB37_12:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_12
# %bb.13:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_16
LBB37_15:
	mov	ecx, dword ptr ["?ext0101_noopex_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB37_18
LBB37_16:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB37_55
# %bb.17:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_noopex_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB37_18:
	mov	dword ptr [eax + 20], offset "?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_20
# %bb.19:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_25
	jmp	LBB37_24
LBB37_20:
	mov	edx, dword ptr ["?ext0101_setcolor_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB37_21:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_21
# %bb.22:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_25
LBB37_24:
	mov	ecx, dword ptr ["?ext0101_setcolor_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB37_27
LBB37_25:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB37_55
# %bb.26:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_setcolor_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB37_27:
	mov	dword ptr [eax + 20], offset "?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_29
# %bb.28:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_34
	jmp	LBB37_33
LBB37_29:
	mov	edx, dword ptr ["?ext0101_setdebug_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB37_30:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_30
# %bb.31:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_34
LBB37_33:
	mov	ecx, dword ptr ["?ext0101_setdebug_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB37_36
LBB37_34:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB37_55
# %bb.35:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_setdebug_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB37_36:
	mov	dword ptr [eax + 20], offset "?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_38
# %bb.37:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_43
	jmp	LBB37_42
LBB37_38:
	mov	edx, dword ptr ["?ext0101_raster_set_palette_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB37_39:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_39
# %bb.40:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_43
LBB37_42:
	mov	ecx, dword ptr ["?ext0101_raster_set_palette_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB37_45
LBB37_43:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB37_55
# %bb.44:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_raster_set_palette_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB37_45:
	mov	dword ptr [eax + 20], offset "?ext0101_raster_set_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_47
# %bb.46:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_52
	jmp	LBB37_51
LBB37_47:
	mov	edx, dword ptr ["?ext0101_raster_palette_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB37_48:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB37_48
# %bb.49:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB37_52
LBB37_51:
	mov	ecx, dword ptr ["?ext0101_raster_palette_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB37_54
LBB37_52:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB37_55
# %bb.53:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_raster_palette_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB37_54:
	mov	dword ptr [eax + 20], offset "?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB37_55:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
                                        # -- End function
	.def	 "?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	esi, dword ptr [esp + 40]
	mov	edi, 268435455
	mov	edx, dword ptr [esi + 76]
	mov	ebx, dword ptr [esi + 68]
	mov	esi, dword ptr [esi + 72]
	lea	eax, [edx + 3]
	add	esi, edi
	mov	dword ptr [esp], ebx            # 4-byte Spill
	mov	ecx, eax
	and	eax, 15
	mov	ebp, esi
	mov	dword ptr [esp + 12], esi       # 4-byte Spill
	shr	ecx, 4
	and	ecx, esi
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	eax, byte ptr [ecx + eax]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	lea	eax, [edx + 2]
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	ecx, esi
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	edi, byte ptr [ecx + eax]
	lea	eax, [edx + 1]
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	ecx, esi
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	eax, byte ptr [ecx + eax]
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	mov	eax, edx
	shr	eax, 4
	and	eax, esi
	mov	esi, edx
	add	edx, 4
	mov	eax, dword ptr [ebx + 4*eax]
	and	esi, 15
	movzx	esi, byte ptr [eax + esi]
	mov	eax, dword ptr [esp + 40]
	mov	ecx, dword ptr [eax + 80]
	mov	eax, 3
	cmp	ecx, 1
	lea	ebx, [ecx - 4]
	cmove	edx, eax
	cmp	ecx, 2
	mov	eax, 1
	cmove	edx, ecx
	cmp	ecx, 3
	cmove	edx, eax
	xor	eax, eax
	cmp	ecx, 4
	cmove	edx, eax
	shl	edi, 8
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	shl	esi, 24
	add	edi, dword ptr [esp + 4]        # 4-byte Folded Reload
	shl	eax, 16
	or	edi, eax
	mov	eax, dword ptr [esp + 40]
	or	edi, esi
	lea	esi, [edx + 3]
	mov	dword ptr [esp + 4], edi        # 4-byte Spill
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	mov	dword ptr [eax + 76], edx
	mov	dword ptr [eax + 80], ebx
	mov	eax, dword ptr [esp]            # 4-byte Reload
	and	edi, ebp
	mov	edi, dword ptr [eax + 4*edi]
	movzx	esi, byte ptr [edi + esi]
	mov	dword ptr [esp + 8], esi        # 4-byte Spill
	lea	esi, [edx + 2]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [eax + 4*edi]
	movzx	eax, byte ptr [edi + esi]
	lea	edi, [edx + 1]
	mov	esi, edi
	and	edi, 15
	shr	esi, 4
	and	esi, ebp
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [ebp + 4*esi]
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	movzx	esi, byte ptr [esi + edi]
	mov	edi, edx
	shr	edi, 4
	and	edi, dword ptr [esp + 12]       # 4-byte Folded Reload
	mov	edi, dword ptr [ebp + 4*edi]
	mov	ebp, edx
	add	edx, 4
	and	ebp, 15
	cmp	ebx, 1
	mov	dword ptr [esp], edi            # 4-byte Spill
	mov	edi, 3
	cmove	edx, edi
	cmp	ebx, 2
	mov	edi, 1
	cmove	edx, ebx
	cmp	ebx, 3
	cmove	edx, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	cmp	ebx, 4
	mov	ebx, 0
	cmove	edx, ebx
	shl	eax, 8
	add	ecx, -8
	shl	esi, 16
	add	eax, dword ptr [esp + 8]        # 4-byte Folded Reload
	movzx	ebx, byte ptr [edi + ebp]
	mov	edi, dword ptr [esp + 40]
	mov	ebp, dword ptr [esp + 36]
	or	eax, esi
	mov	dword ptr [edi + 76], edx
	shl	ebx, 24
	mov	dword ptr [edi + 80], ecx
	mov	edx, 268435455
	or	eax, ebx
	mov	ebx, dword ptr [edi + 4]
	add	edx, dword ptr [ebp + 8]
	mov	dword ptr [esp], eax            # 4-byte Spill
	imul	ebx, eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	eax, [4*eax]
	lea	esi, [eax + 4*ebx]
	add	esi, dword ptr [ebp + 12]
	mov	ecx, esi
	and	esi, 15
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [ebp + 4]
	mov	edi, dword ptr [ecx + 4*edx]
	mov	ecx, dword ptr [esp + 40]
	mov	edx, dword ptr [ecx + 36]
	mov	ecx, ebp
	mov	byte ptr [edi + esi], dl
	lea	esi, [eax + 4*ebx + 1]
	add	esi, dword ptr [ebp + 12]
	mov	ebp, dword ptr [ebp + 8]
	mov	edi, esi
	dec	ebp
	and	esi, 15
	shr	edi, 4
	and	ebp, edi
	mov	edi, dword ptr [ecx + 4]
	mov	edi, dword ptr [edi + 4*ebp]
	mov	byte ptr [edi + esi], dh
	lea	esi, [eax + 4*ebx + 2]
	lea	eax, [eax + 4*ebx + 3]
	mov	ebx, dword ptr [esp + 36]
	add	esi, dword ptr [ecx + 12]
	mov	ebp, dword ptr [ecx + 8]
	mov	edi, esi
	dec	ebp
	and	esi, 15
	shr	edi, 4
	and	ebp, edi
	mov	edi, dword ptr [ecx + 4]
	mov	ecx, edx
	shr	edx, 24
	shr	ecx, 16
	mov	edi, dword ptr [edi + 4*ebp]
	mov	byte ptr [edi + esi], cl
	add	eax, dword ptr [ebx + 12]
	mov	esi, dword ptr [ebx + 8]
	mov	ecx, eax
	dec	esi
	and	eax, 15
	shr	ecx, 4
	and	esi, ecx
	mov	ecx, dword ptr [ebx + 4]
	mov	ecx, dword ptr [ecx + 4*esi]
	mov	byte ptr [ecx + eax], dl
	mov	ecx, dword ptr [esp + 40]
	cmp	byte ptr [ecx + 84], 0
	je	LBB38_2
# %bb.1:
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	dword ptr [esp]                 # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01PKGAHCOL@?$CJ?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
LBB38_2:
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 52
	mov	ecx, dword ptr [esp + 76]
	mov	edx, 268435455
	mov	eax, dword ptr [ecx + 76]
	add	edx, dword ptr [ecx + 72]
	mov	ebp, dword ptr [ecx + 68]
	lea	esi, [eax + 3]
	mov	ecx, eax
	mov	dword ptr [esp + 28], ebp       # 4-byte Spill
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	edi, esi
	and	esi, 15
	and	ecx, 15
	shr	edi, 4
	and	edi, edx
	mov	edi, dword ptr [ebp + 4*edi]
	movzx	esi, byte ptr [edi + esi]
	lea	edi, [eax + 2]
	mov	ebx, edi
	and	edi, 15
	shr	ebx, 4
	and	ebx, edx
	mov	ebx, dword ptr [ebp + 4*ebx]
	mov	dword ptr [esp], esi            # 4-byte Spill
	movzx	esi, byte ptr [ebx + edi]
	lea	edi, [eax + 1]
	mov	ebx, edi
	and	edi, 15
	shr	ebx, 4
	and	ebx, edx
	mov	ebx, dword ptr [ebp + 4*ebx]
	movzx	edi, byte ptr [ebx + edi]
	mov	ebx, eax
	add	eax, 4
	shr	ebx, 4
	and	ebx, edx
	mov	ebx, dword ptr [ebp + 4*ebx]
	movzx	ebp, byte ptr [ebx + ecx]
	mov	ecx, dword ptr [esp + 76]
	mov	ebx, dword ptr [ecx + 80]
	mov	ecx, 3
	cmp	ebx, 1
	mov	dword ptr [esp + 8], ebx        # 4-byte Spill
	cmove	eax, ecx
	cmp	ebx, 2
	mov	ecx, 1
	cmove	eax, ebx
	cmp	ebx, 3
	cmove	eax, ecx
	xor	ecx, ecx
	cmp	ebx, 4
	cmove	eax, ecx
	shl	esi, 8
	shl	edi, 16
	shl	ebp, 24
	mov	ecx, dword ptr [esp + 76]
	add	esi, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [ecx + 76], eax
	or	esi, edi
	lea	edi, [eax + 3]
	or	esi, ebp
	mov	ebp, edi
	and	edi, 15
	mov	dword ptr [esp + 12], esi       # 4-byte Spill
	lea	esi, [ebx - 4]
	mov	ebx, dword ptr [esp + 28]       # 4-byte Reload
	shr	ebp, 4
	mov	dword ptr [ecx + 80], esi
	and	ebp, edx
	mov	ebp, dword ptr [ebx + 4*ebp]
	movzx	ecx, byte ptr [ebp + edi]
	lea	edi, [eax + 2]
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, edx
	mov	ebp, dword ptr [ebx + 4*ebp]
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	movzx	ecx, byte ptr [ebp + edi]
	lea	edi, [eax + 1]
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, edx
	mov	ebp, dword ptr [ebx + 4*ebp]
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	movzx	ecx, byte ptr [ebp + edi]
	mov	edi, eax
	mov	ebp, eax
	add	eax, 4
	shr	edi, 4
	and	ebp, 15
	and	edi, edx
	cmp	esi, 1
	mov	edx, dword ptr [esp + 76]
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	mov	ecx, 3
	cmove	eax, ecx
	cmp	esi, 2
	mov	ecx, 1
	cmove	eax, esi
	cmp	esi, 3
	cmove	eax, ecx
	cmp	esi, 4
	mov	esi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [esi + ebp]
	mov	dword ptr [esp + 40], ecx       # 4-byte Spill
	mov	ecx, 0
	cmove	eax, ecx
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	lea	esi, [eax + 3]
	mov	dword ptr [edx + 76], eax
	mov	ebp, esi
	and	esi, 15
	shr	ebp, 4
	lea	edi, [ecx - 8]
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [edx + 80], edi
	and	ebp, ecx
	mov	ebp, dword ptr [ebx + 4*ebp]
	movzx	edx, byte ptr [ebp + esi]
	lea	esi, [eax + 2]
	mov	ebp, esi
	and	esi, 15
	shr	ebp, 4
	and	ebp, ecx
	mov	ebp, dword ptr [ebx + 4*ebp]
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	edx, ecx
	lea	ecx, [eax + 1]
	movzx	ebp, byte ptr [ebp + esi]
	mov	esi, ecx
	and	ecx, 15
	shr	esi, 4
	and	esi, edx
	mov	esi, dword ptr [ebx + 4*esi]
	movzx	ecx, byte ptr [esi + ecx]
	mov	esi, 3
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	ecx, eax
	shr	ecx, 4
	and	ecx, edx
	mov	edx, eax
	add	eax, 4
	mov	ecx, dword ptr [ebx + 4*ecx]
	and	edx, 15
	cmp	edi, 1
	cmove	eax, esi
	cmp	edi, 2
	mov	esi, 1
	cmove	eax, edi
	cmp	edi, 3
	cmove	eax, esi
	cmp	edi, 4
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	movzx	ecx, byte ptr [ecx + edx]
	mov	edx, 0
	cmove	eax, edx
	shl	ebp, 8
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	add	ebp, dword ptr [esp]            # 4-byte Folded Reload
	shl	ecx, 24
	shl	edx, 16
	or	ebp, edx
	mov	edx, dword ptr [esp + 76]
	or	ebp, ecx
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edx + 76], eax
	lea	esi, [ecx - 12]
	lea	ecx, [eax + 3]
	mov	dword ptr [edx + 80], esi
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [esp], ecx            # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [esp + 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 1]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, eax
	and	edx, 15
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	mov	ecx, eax
	add	eax, 4
	shr	ecx, 4
	and	ecx, edi
	cmp	esi, 1
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	ecx, byte ptr [ecx + edx]
	mov	edx, 3
	cmove	eax, edx
	cmp	esi, 2
	mov	edx, 1
	cmove	eax, esi
	cmp	esi, 3
	cmove	eax, edx
	cmp	esi, 4
	mov	edx, 0
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	cmove	eax, edx
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	edx, dword ptr [esp + 76]
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	add	esi, -16
	mov	dword ptr [edx + 76], eax
	mov	dword ptr [edx + 80], esi
	lea	edx, [ebp + ecx]
	cmp	ecx, edx
	mov	dword ptr [esp + 48], edx       # 4-byte Spill
	jae	LBB39_10
# %bb.1:
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	shl	edx, 8
	shl	eax, 16
	shl	esi, 16
	add	edx, dword ptr [esp + 20]       # 4-byte Folded Reload
	or	edx, eax
	mov	eax, dword ptr [esp + 40]       # 4-byte Reload
	shl	eax, 24
	or	edx, eax
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	shl	eax, 8
	add	eax, dword ptr [esp]            # 4-byte Folded Reload
	or	esi, eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	shl	eax, 24
	or	eax, esi
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	add	eax, edx
	cmp	edx, eax
	jae	LBB39_11
# %bb.2:
	lea	eax, [4*edx]
	mov	dword ptr [esp + 24], edx       # 4-byte Spill
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	jmp	LBB39_3
	.p2align	4, 0x90
LBB39_13:                               #   in Loop: Header=BB39_11 Depth=1
	dec	ebp
	je	LBB39_10
LBB39_11:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esp + 76]
	cmp	byte ptr [eax + 84], 0
	je	LBB39_13
# %bb.12:                               #   in Loop: Header=BB39_11 Depth=1
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB39_13
	.p2align	4, 0x90
LBB39_9:                                #   in Loop: Header=BB39_3 Depth=1
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	inc	ecx
	cmp	ecx, dword ptr [esp + 48]       # 4-byte Folded Reload
	je	LBB39_10
LBB39_3:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_4 Depth 2
	lea	eax, [4*ecx]
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	mov	edi, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	jmp	LBB39_4
	.p2align	4, 0x90
LBB39_6:                                #   in Loop: Header=BB39_4 Depth=2
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	inc	edi
	add	edx, 4
	dec	eax
	je	LBB39_7
LBB39_4:                                #   Parent Loop BB39_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	mov	eax, dword ptr [esp + 76]
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	mov	edi, dword ptr [esp + 72]
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	ecx, dword ptr [eax + 4]
	mov	ebp, dword ptr [edi + 8]
	mov	esi, dword ptr [eax + 36]
	mov	eax, 268435455
	imul	ecx, edx
	mov	edx, dword ptr [edi + 12]
	add	ebp, eax
	mov	eax, esi
	add	ecx, dword ptr [esp + 28]       # 4-byte Folded Reload
	add	edx, ecx
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebp, ebx
	mov	ebx, dword ptr [edi + 4]
	mov	ebx, dword ptr [ebx + 4*ebp]
	mov	byte ptr [ebx + edx], al
	mov	edx, ecx
	or	edx, 1
	mov	ebp, dword ptr [edi + 8]
	add	edx, dword ptr [edi + 12]
	dec	ebp
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebp, ebx
	mov	ebx, dword ptr [edi + 4]
	mov	ebx, dword ptr [ebx + 4*ebp]
	mov	byte ptr [ebx + edx], ah
	mov	edx, ecx
	shr	eax, 16
	or	ecx, 3
	or	edx, 2
	mov	ebp, dword ptr [edi + 8]
	add	edx, dword ptr [edi + 12]
	dec	ebp
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebp, ebx
	mov	ebx, dword ptr [edi + 4]
	mov	ebx, dword ptr [ebx + 4*ebp]
	mov	byte ptr [ebx + edx], al
	add	ecx, dword ptr [edi + 12]
	mov	edx, dword ptr [edi + 8]
	mov	eax, ecx
	dec	edx
	and	ecx, 15
	shr	eax, 4
	and	edx, eax
	mov	eax, dword ptr [edi + 4]
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, esi
	shr	edx, 24
	mov	byte ptr [eax + ecx], dl
	mov	ecx, dword ptr [esp + 76]
	cmp	byte ptr [ecx + 84], 0
	je	LBB39_6
# %bb.5:                                #   in Loop: Header=BB39_4 Depth=2
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	edi
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01PKGAHCOL@?$CJ?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB39_6
	.p2align	4, 0x90
LBB39_7:                                #   in Loop: Header=BB39_3 Depth=1
	mov	eax, dword ptr [esp + 76]
	cmp	byte ptr [eax + 84], 0
	je	LBB39_9
# %bb.8:                                #   in Loop: Header=BB39_3 Depth=1
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB39_9
LBB39_10:
	add	esp, 52
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
Lfunc_begin13:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 124
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	ebx, dword ptr [ebp + 12]
	lea	eax, [ebp - 24]
	mov	edx, 268435455
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebx + 76]
	mov	edi, dword ptr [ebx + 72]
	mov	ebx, dword ptr [ebx + 68]
	lea	ecx, [eax + 3]
	add	edi, edx
	mov	dword ptr [ebp - 52], ebx       # 4-byte Spill
	mov	esi, ecx
	and	ecx, 15
	mov	edx, edi
	shr	esi, 4
	mov	dword ptr [ebp - 44], edx       # 4-byte Spill
	and	esi, edi
	mov	esi, dword ptr [ebx + 4*esi]
	movzx	ecx, byte ptr [esi + ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, edx
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	lea	ecx, [eax + 1]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, edx
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	esi, byte ptr [edi + ecx]
	mov	edi, eax
	mov	ecx, eax
	add	eax, 4
	shr	edi, 4
	and	ecx, 15
	and	edi, edx
	mov	edx, dword ptr [ebp + 12]
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	edi, dword ptr [edx + 80]
	mov	edx, 3
	cmp	edi, 1
	mov	dword ptr [ebp - 40], edi       # 4-byte Spill
	lea	ebx, [edi - 4]
	cmove	eax, edx
	cmp	edi, 2
	mov	edx, 1
	cmove	eax, edi
	cmp	edi, 3
	cmove	eax, edx
	xor	edx, edx
	cmp	edi, 4
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 48]       # 4-byte Reload
	shl	esi, 16
	shl	ecx, 24
	shl	edx, 8
	add	edx, dword ptr [ebp - 36]       # 4-byte Folded Reload
	or	edx, esi
	or	edx, ecx
	mov	ecx, dword ptr [ebp + 12]
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	dword ptr [ecx + 76], eax
	mov	dword ptr [ecx + 80], ebx
	lea	ecx, [eax + 3]
	mov	esi, ecx
	and	ecx, 15
	shr	esi, 4
	and	esi, edi
	mov	esi, dword ptr [edx + 4*esi]
	movzx	ecx, byte ptr [esi + ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	esi, ecx
	and	ecx, 15
	shr	esi, 4
	and	esi, edi
	mov	edi, edx
	mov	esi, dword ptr [edx + 4*esi]
	mov	edx, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	ecx, byte ptr [esi + ecx]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	lea	ecx, [eax + 1]
	mov	esi, ecx
	and	ecx, 15
	shr	esi, 4
	and	esi, edx
	mov	esi, dword ptr [edi + 4*esi]
	mov	edi, 3
	movzx	ecx, byte ptr [esi + ecx]
	mov	esi, eax
	and	esi, 15
	mov	dword ptr [ebp - 136], ecx      # 4-byte Spill
	mov	ecx, eax
	add	eax, 4
	shr	ecx, 4
	and	ecx, edx
	cmp	ebx, 1
	mov	edx, 0
	cmove	eax, edi
	cmp	ebx, 2
	mov	edi, 1
	cmove	eax, ebx
	cmp	ebx, 3
	cmove	eax, edi
	mov	edi, dword ptr [ebp - 52]       # 4-byte Reload
	cmp	ebx, 4
	mov	ebx, dword ptr [ebp - 44]       # 4-byte Reload
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [edi + 4*ecx]
	shl	edx, 8
	add	edx, dword ptr [ebp - 36]       # 4-byte Folded Reload
	movzx	ecx, byte ptr [ecx + esi]
	mov	esi, dword ptr [ebp - 136]      # 4-byte Reload
	shl	esi, 16
	shl	ecx, 24
	or	edx, esi
	or	edx, ecx
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp + 12]
	add	ecx, -8
	mov	dword ptr [edx + 76], eax
	mov	dword ptr [edx + 80], ecx
	lea	edx, [eax + 3]
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	esi, ebx
	mov	esi, dword ptr [edi + 4*esi]
	movzx	edx, byte ptr [esi + edx]
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	lea	edx, [eax + 2]
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	esi, ebx
	mov	esi, dword ptr [edi + 4*esi]
	movzx	edx, byte ptr [esi + edx]
	lea	esi, [eax + 1]
	mov	dword ptr [ebp - 56], edx       # 4-byte Spill
	mov	edx, esi
	and	esi, 15
	shr	edx, 4
	and	edx, ebx
	mov	edx, dword ptr [edi + 4*edx]
	movzx	edx, byte ptr [edx + esi]
	mov	esi, eax
	and	esi, 15
	mov	dword ptr [ebp - 136], edx      # 4-byte Spill
	mov	edx, eax
	add	eax, 4
	shr	edx, 4
	and	edx, ebx
	cmp	ecx, 1
	mov	ebx, 3
	mov	edx, dword ptr [edi + 4*edx]
	cmove	eax, ebx
	cmp	ecx, 2
	mov	ebx, 1
	mov	edi, dword ptr [ebp - 56]       # 4-byte Reload
	cmove	eax, ecx
	cmp	ecx, 3
	cmove	eax, ebx
	cmp	ecx, 4
	mov	ecx, 0
	mov	ebx, dword ptr [ebp - 136]      # 4-byte Reload
	cmove	eax, ecx
	movzx	ecx, byte ptr [edx + esi]
	mov	edx, dword ptr [ebp + 12]
	shl	edi, 8
	mov	esi, dword ptr [ebp - 48]       # 4-byte Reload
	add	edi, dword ptr [ebp - 36]       # 4-byte Folded Reload
	shl	ebx, 16
	mov	dword ptr [edx + 76], eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	shl	ecx, 24
	or	edi, ebx
	or	edi, ecx
	add	eax, -12
	mov	dword ptr [edx + 80], eax
	cmp	byte ptr [edx + 84], 0
	je	LBB40_3
# %bb.1:
	mov	eax, dword ptr ["?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
	mov	ecx, -3585
	mov	eax, dword ptr [eax + 4]
	and	ecx, dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20]
	or	ecx, 512
	mov	dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20], ecx
	mov	ecx, offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	push	esi
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01CLKCMJKC@?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01CLKCMJKC@?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	edi
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	eax, dword ptr [ebp + 12]
	cmp	byte ptr [eax + 84], 0
	je	LBB40_3
# %bb.2:
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	edx, esi
	mov	ecx, eax
	sub	edx, edi
	inc	edx
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, eax
	mov	edx, ebx
	sub	edx, edi
	inc	edx
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	lea	edx, [edi + esi]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	lea	edx, [edi + ebx]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02MNMNLDAI@?$CJ?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
LBB40_3:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	movq	xmm1, qword ptr [__real@4330000000000000] # xmm1 = mem[0],zero
	lea	eax, [edi + esi + 1]
	movd	xmm0, edi
	mov	edx, esi
	mov	dword ptr [ebp - 64], eax       # 4-byte Spill
	sub	edx, edi
	mov	eax, ecx
	por	xmm0, xmm1
	sub	eax, edi
	subsd	xmm0, xmm1
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	lea	eax, [edi + ecx + 1]
	lea	edi, [ebp - 116]
	movupd	xmmword ptr [ebp - 136], xmm0   # 16-byte Spill
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	mov	eax, esi
	jmp	LBB40_4
	.p2align	4, 0x90
LBB40_9:                                #   in Loop: Header=BB40_4 Depth=1
	mov	eax, dword ptr [ebp - 48]       # 4-byte Reload
	inc	edx
LBB40_4:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_6 Depth 2
	cmp	edx, dword ptr [ebp - 64]       # 4-byte Folded Reload
	jae	LBB40_53
# %bb.5:                                #   in Loop: Header=BB40_4 Depth=1
	mov	esi, edx
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	sub	esi, eax
	lea	eax, [4*edx]
	mov	dword ptr [ebp - 68], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	imul	esi, esi
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	jmp	LBB40_6
LBB40_38:                               #   in Loop: Header=BB40_6 Depth=2
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB40_39:                               #   in Loop: Header=BB40_6 Depth=2
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB40_40:                               #   in Loop: Header=BB40_6 Depth=2
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	inc	eax
LBB40_6:                                #   Parent Loop BB40_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	eax, dword ptr [ebp - 52]       # 4-byte Folded Reload
	jae	LBB40_7
# %bb.10:                               #   in Loop: Header=BB40_6 Depth=2
	mov	edx, eax
	sub	eax, ecx
	movq	xmm1, qword ptr [__real@4330000000000000] # xmm1 = mem[0],zero
	imul	eax, eax
	mov	dword ptr [ebp - 44], edx       # 4-byte Spill
	add	eax, dword ptr [ebp - 36]       # 4-byte Folded Reload
	movd	xmm0, eax
	mov	eax, dword ptr [ebp + 12]
	por	xmm0, xmm1
	subsd	xmm0, xmm1
	sqrtsd	xmm0, xmm0
	ucomisd	xmm0, qword ptr [ebp - 136]     # 16-byte Folded Reload
	jbe	LBB40_13
# %bb.11:                               #   in Loop: Header=BB40_6 Depth=2
	cmp	byte ptr [eax + 84], 0
	je	LBB40_40
# %bb.12:                               #   in Loop: Header=BB40_6 Depth=2
	mov	dword ptr [ebp - 16], -1
	push	119
	push	119
	push	221
	jmp	LBB40_15
	.p2align	4, 0x90
LBB40_13:                               #   in Loop: Header=BB40_6 Depth=2
	mov	ecx, dword ptr [eax + 36]
	mov	ebx, 268435455
	mov	dword ptr [ebp - 56], ecx       # 4-byte Spill
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [ebp - 68]       # 4-byte Reload
	imul	ecx, edx
	lea	ecx, [eax + 4*ecx]
	mov	eax, dword ptr [ebp + 8]
	mov	edx, dword ptr [eax + 12]
	mov	edi, dword ptr [eax + 8]
	add	edx, ecx
	add	edi, ebx
	mov	ebx, dword ptr [ebp - 56]       # 4-byte Reload
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	esi, dword ptr [esi + 4*edi]
	mov	byte ptr [esi + edx], bl
	mov	edx, ecx
	or	edx, 1
	mov	edi, dword ptr [eax + 8]
	add	edx, dword ptr [eax + 12]
	dec	edi
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	esi, dword ptr [esi + 4*edi]
	mov	byte ptr [esi + edx], bh
	mov	edx, ecx
	or	ecx, 3
	or	edx, 2
	mov	edi, dword ptr [eax + 8]
	add	edx, dword ptr [eax + 12]
	dec	edi
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	esi, dword ptr [esi + 4*edi]
	mov	edi, ebx
	shr	ebx, 16
	mov	byte ptr [esi + edx], bl
	add	ecx, dword ptr [eax + 12]
	mov	esi, dword ptr [eax + 8]
	mov	edx, ecx
	dec	esi
	and	ecx, 15
	shr	edx, 4
	and	esi, edx
	mov	edx, dword ptr [eax + 4]
	mov	eax, edi
	lea	edi, [ebp - 116]
	shr	eax, 24
	mov	edx, dword ptr [edx + 4*esi]
	mov	byte ptr [edx + ecx], al
	mov	ecx, dword ptr [ebp + 12]
	cmp	byte ptr [ecx + 84], 0
	je	LBB40_40
# %bb.14:                               #   in Loop: Header=BB40_6 Depth=2
	mov	dword ptr [ebp - 16], -1
	push	119
	push	221
	push	119
LBB40_15:                               #   in Loop: Header=BB40_6 Depth=2
	push	edi
	call	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	add	esp, 16
	mov	eax, dword ptr [ebp - 100]
	cmp	dword ptr [ebp - 96], 15
	mov	ecx, edi
	jbe	LBB40_17
# %bb.16:                               #   in Loop: Header=BB40_6 Depth=2
	mov	ecx, dword ptr [ebp - 116]
LBB40_17:                               #   in Loop: Header=BB40_6 Depth=2
	mov	dword ptr [ebp - 16], 2
	push	eax
	push	ecx
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.18:                               #   in Loop: Header=BB40_6 Depth=2
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.19:                               #   in Loop: Header=BB40_6 Depth=2
	mov	ecx, eax
	push	dword ptr [ebp - 40]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.20:                               #   in Loop: Header=BB40_6 Depth=2
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.21:                               #   in Loop: Header=BB40_6 Depth=2
	mov	ecx, eax
	push	dword ptr [ebp - 44]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.22:                               #   in Loop: Header=BB40_6 Depth=2
	push	offset "??_C@_01PKGAHCOL@?$CJ?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.23:                               #   in Loop: Header=BB40_6 Depth=2
	mov	dword ptr [ebp - 72], 15
	mov	dword ptr [ebp - 76], 4
	mov	dword ptr [ebp - 92], 1831885595
	mov	byte ptr [ebp - 88], 0
	mov	dword ptr [ebp - 16], 3
	push	4
	lea	ecx, [ebp - 92]
	push	ecx
	push	eax
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.24:                               #   in Loop: Header=BB40_6 Depth=2
	mov	eax, dword ptr [ebp - 72]
	lea	edi, [ebp - 116]
	cmp	eax, 16
	jb	LBB40_32
# %bb.25:                               #   in Loop: Header=BB40_6 Depth=2
	mov	ecx, dword ptr [ebp - 92]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB40_31
# %bb.26:                               #   in Loop: Header=BB40_6 Depth=2
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB40_27
# %bb.30:                               #   in Loop: Header=BB40_6 Depth=2
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB40_31:                               #   in Loop: Header=BB40_6 Depth=2
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB40_32:                               #   in Loop: Header=BB40_6 Depth=2
	mov	eax, dword ptr [ebp - 96]
	cmp	eax, 16
	jb	LBB40_40
# %bb.33:                               #   in Loop: Header=BB40_6 Depth=2
	mov	ecx, dword ptr [ebp - 116]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB40_39
# %bb.34:                               #   in Loop: Header=BB40_6 Depth=2
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jb	LBB40_38
	jmp	LBB40_35
	.p2align	4, 0x90
LBB40_7:                                #   in Loop: Header=BB40_4 Depth=1
	mov	eax, dword ptr [ebp + 12]
	cmp	byte ptr [eax + 84], 0
	je	LBB40_9
# %bb.8:                                #   in Loop: Header=BB40_4 Depth=1
	mov	dword ptr [ebp - 16], -1
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 8
	jmp	LBB40_9
LBB40_53:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 124
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB40_27:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.28:
LBB40_35:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.36:
	.def	 "?dtor$29@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$29@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB40_29:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$37@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$37@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB40_37:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$41@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$41@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB40_41:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	eax, dword ptr [ebp - 72]
	cmp	eax, 16
	jb	LBB40_46
# %bb.42:
	mov	ecx, dword ptr [ebp - 92]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB40_45
# %bb.43:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB40_54
# %bb.44:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB40_45:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB40_46:
	mov	dword ptr [ebp - 76], 0
	mov	dword ptr [ebp - 72], 15
	mov	byte ptr [ebp - 92], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB40_54:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$47@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$47@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB40_47:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	eax, dword ptr [ebp - 96]
	cmp	eax, 16
	jb	LBB40_52
# %bb.48:
	mov	ecx, dword ptr [ebp - 116]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB40_51
# %bb.49:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB40_55
# %bb.50:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB40_51:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB40_52:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB40_55:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end13:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z":
	.long	429065506                       # MagicNumber
	.long	4                               # MaxState
	.long	("$stateUnwindMap$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z":
	.long	-1                              # ToState
	.long	"?dtor$29@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$37@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$47@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	2                               # ToState
	.long	"?dtor$41@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 36
	mov	ecx, dword ptr [esp + 60]
	mov	eax, 268435455
	mov	edx, dword ptr [ecx + 76]
	mov	ebx, dword ptr [ecx + 72]
	mov	ebp, dword ptr [ecx + 68]
	lea	esi, [edx + 3]
	add	ebx, eax
	mov	dword ptr [esp + 8], ebp        # 4-byte Spill
	mov	edi, esi
	and	esi, 15
	mov	eax, ebx
	shr	edi, 4
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	and	edi, ebx
	mov	edi, dword ptr [ebp + 4*edi]
	movzx	ecx, byte ptr [edi + esi]
	lea	esi, [edx + 2]
	mov	edi, ebp
	mov	ebx, esi
	and	esi, 15
	shr	ebx, 4
	and	ebx, eax
	mov	ebx, dword ptr [ebp + 4*ebx]
	mov	dword ptr [esp], ecx            # 4-byte Spill
	movzx	ecx, byte ptr [ebx + esi]
	lea	esi, [edx + 1]
	mov	ebx, esi
	and	esi, 15
	shr	ebx, 4
	and	ebx, eax
	mov	ebx, dword ptr [ebp + 4*ebx]
	mov	ebp, edx
	and	ebp, 15
	movzx	ebx, byte ptr [ebx + esi]
	mov	esi, edx
	add	edx, 4
	shr	esi, 4
	and	esi, eax
	mov	eax, 3
	mov	esi, dword ptr [edi + 4*esi]
	mov	edi, dword ptr [esp + 60]
	movzx	ebp, byte ptr [esi + ebp]
	mov	esi, dword ptr [edi + 80]
	cmp	esi, 1
	mov	dword ptr [esp + 4], esi        # 4-byte Spill
	cmove	edx, eax
	cmp	esi, 2
	mov	eax, 1
	cmove	edx, esi
	cmp	esi, 3
	cmove	edx, eax
	xor	eax, eax
	cmp	esi, 4
	cmove	edx, eax
	shl	ecx, 8
	shl	ebx, 16
	shl	ebp, 24
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	add	ecx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [edi + 76], edx
	or	ecx, ebx
	lea	ebx, [esi - 4]
	or	ecx, ebp
	mov	dword ptr [edi + 80], ebx
	lea	edi, [edx + 3]
	mov	dword ptr [esp], ecx            # 4-byte Spill
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, ecx
	mov	ebp, dword ptr [eax + 4*ebp]
	movzx	esi, byte ptr [ebp + edi]
	lea	edi, [edx + 2]
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, ecx
	mov	ebp, dword ptr [eax + 4*ebp]
	mov	dword ptr [esp + 32], esi       # 4-byte Spill
	movzx	esi, byte ptr [ebp + edi]
	lea	edi, [edx + 1]
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, ecx
	mov	ebp, dword ptr [eax + 4*ebp]
	mov	dword ptr [esp + 28], esi       # 4-byte Spill
	movzx	esi, byte ptr [ebp + edi]
	mov	edi, edx
	mov	ebp, edx
	add	edx, 4
	shr	edi, 4
	and	ebp, 15
	and	edi, ecx
	cmp	ebx, 1
	mov	ecx, 3
	cmove	edx, ecx
	cmp	ebx, 2
	mov	ecx, 1
	mov	edi, dword ptr [eax + 4*edi]
	cmove	edx, ebx
	cmp	ebx, 3
	mov	dword ptr [esp + 24], esi       # 4-byte Spill
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmove	edx, ecx
	cmp	ebx, 4
	mov	ecx, 0
	cmove	edx, ecx
	mov	ecx, dword ptr [esp + 60]
	movzx	ebp, byte ptr [edi + ebp]
	mov	ebx, edx
	lea	eax, [esi - 8]
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	mov	dword ptr [ecx + 76], edx
	mov	dword ptr [ecx + 80], eax
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	lea	ecx, [edx + 3]
	add	edx, 2
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, eax
	mov	edi, dword ptr [esi + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	ecx, edx
	and	edx, 15
	shr	ecx, 4
	and	ecx, eax
	mov	ecx, dword ptr [esi + 4*ecx]
	movzx	edi, byte ptr [ecx + edx]
	lea	ecx, [ebx + 1]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, eax
	mov	edx, dword ptr [esi + 4*edx]
	shl	edi, 8
	add	edi, dword ptr [esp + 16]       # 4-byte Folded Reload
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, ebx
	shr	edx, 4
	and	edx, eax
	mov	eax, ebx
	add	ebx, 8
	mov	edx, dword ptr [esi + 4*edx]
	and	eax, 15
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	shl	ecx, 16
	or	edi, ecx
	mov	ecx, 6
	movzx	eax, byte ptr [edx + eax]
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	shl	eax, 24
	or	edi, eax
	cmp	edx, 1
	mov	eax, 7
	cmovne	eax, ebx
	cmp	edx, 2
	mov	ebx, dword ptr [esp + 60]
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	cmovne	ecx, eax
	cmp	edx, 3
	mov	eax, 5
	cmovne	eax, ecx
	cmp	edx, 4
	lea	ecx, [esi - 12]
	cmove	eax, edx
	cmp	ecx, 1
	mov	edx, 3
	cmove	eax, edx
	cmp	ecx, 2
	mov	edx, 1
	cmove	eax, ecx
	cmp	ecx, 3
	cmove	eax, edx
	cmp	ecx, 4
	mov	edx, 0
	cmove	eax, edx
	mov	edx, esi
	mov	esi, dword ptr [esp]            # 4-byte Reload
	add	edx, -16
	mov	dword ptr [ebx + 76], eax
	mov	dword ptr [ebx + 80], edx
	cmp	edi, esi
	jae	LBB41_1
LBB41_5:
	add	esp, 36
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB41_1:
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	shl	ebp, 24
	shl	eax, 8
	shl	ecx, 16
	add	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	or	ecx, eax
	or	ebp, ecx
	mov	ebx, ebp
	lea	edx, [4*ebp]
	lea	ebp, [4*esi]
	jmp	LBB41_2
	.p2align	4, 0x90
LBB41_4:                                #   in Loop: Header=BB41_2 Depth=1
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	inc	esi
	inc	ebx
	add	edx, 4
	add	ebp, 4
	cmp	esi, dword ptr [esp + 16]       # 4-byte Folded Reload
	ja	LBB41_5
LBB41_2:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esp + 60]
	mov	edi, dword ptr [esp + 56]
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	dword ptr [esp], esi            # 4-byte Spill
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	mov	ebx, ebp
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	mov	ecx, dword ptr [eax + 36]
	mov	esi, dword ptr [edi + 8]
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	mov	ecx, dword ptr [eax + 4]
	mov	eax, 268435455
	add	esi, eax
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	imul	ecx, edx
	mov	edx, dword ptr [edi + 12]
	add	edx, ecx
	add	edx, ebp
	mov	ebp, edx
	and	edx, 15
	shr	ebp, 4
	and	esi, ebp
	mov	ebp, dword ptr [edi + 4]
	mov	esi, dword ptr [ebp + 4*esi]
	mov	byte ptr [esi + edx], al
	mov	edx, dword ptr [edi + 12]
	mov	ebp, dword ptr [edi + 8]
	add	edx, ecx
	dec	ebp
	lea	edx, [ebx + edx + 1]
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	ebp, esi
	mov	esi, dword ptr [edi + 4]
	mov	esi, dword ptr [esi + 4*ebp]
	mov	byte ptr [esi + edx], ah
	mov	edx, dword ptr [edi + 12]
	mov	ebp, dword ptr [edi + 8]
	add	edx, ecx
	dec	ebp
	lea	edx, [ebx + edx + 2]
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	ebp, esi
	mov	esi, dword ptr [edi + 4]
	mov	esi, dword ptr [esi + 4*ebp]
	mov	ebp, eax
	shr	eax, 16
	mov	byte ptr [esi + edx], al
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	esi, dword ptr [esp]            # 4-byte Reload
	add	ecx, dword ptr [edi + 12]
	mov	edx, dword ptr [edi + 8]
	lea	eax, [eax + ecx + 3]
	dec	edx
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [edi + 4]
	mov	ecx, dword ptr [ecx + 4*edx]
	mov	edx, ebp
	shr	edx, 24
	mov	byte ptr [ecx + eax], dl
	mov	ecx, dword ptr [esp + 60]
	cmp	byte ptr [ecx + 84], 0
	je	LBB41_4
# %bb.3:                                #   in Loop: Header=BB41_2 Depth=1
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	esi
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	ebx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01PKGAHCOL@?$CJ?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB41_4
                                        # -- End function
	.def	 "?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z" # -- Begin function ?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z
	.p2align	4, 0x90
"?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z": # @"?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 20]
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB42_2
# %bb.1:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB42_7
	jmp	LBB42_6
LBB42_2:
	mov	edx, dword ptr ["?ext0102_pixel_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB42_3:                                # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB42_3
# %bb.4:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB42_7
LBB42_6:
	mov	ecx, dword ptr ["?ext0102_pixel_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB42_9
LBB42_7:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB42_37
# %bb.8:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0102_pixel_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB42_9:
	mov	dword ptr [eax + 20], offset "?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB42_11
# %bb.10:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB42_16
	jmp	LBB42_15
LBB42_11:
	mov	edx, dword ptr ["?ext0102_rect_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB42_12:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB42_12
# %bb.13:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB42_16
LBB42_15:
	mov	ecx, dword ptr ["?ext0102_rect_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB42_18
LBB42_16:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB42_37
# %bb.17:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0102_rect_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB42_18:
	mov	dword ptr [eax + 20], offset "?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB42_20
# %bb.19:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB42_25
	jmp	LBB42_24
LBB42_20:
	mov	edx, dword ptr ["?ext0102_circle_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB42_21:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB42_21
# %bb.22:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB42_25
LBB42_24:
	mov	ecx, dword ptr ["?ext0102_circle_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB42_27
LBB42_25:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB42_37
# %bb.26:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0102_circle_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB42_27:
	mov	dword ptr [eax + 20], offset "?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB42_29
# %bb.28:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB42_34
	jmp	LBB42_33
LBB42_29:
	mov	edx, dword ptr ["?ext0102_line_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB42_30:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB42_30
# %bb.31:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB42_34
LBB42_33:
	mov	ecx, dword ptr ["?ext0102_line_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB42_36
LBB42_34:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB42_37
# %bb.35:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0102_line_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB42_36:
	mov	dword ptr [eax + 20], offset "?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB42_37:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
                                        # -- End function
	.def	 _main;
	.scl	2;
	.type	32;
	.endef
	.globl	_main                           # -- Begin function main
	.p2align	4, 0x90
_main:                                  # @main
Lfunc_begin14:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -16
	sub	esp, 352
	mov	esi, esp
	mov	dword ptr [esi + 328], ebp
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [esi + 332], esp
	mov	dword ptr [esi + 344], -1
	mov	dword ptr [esi + 340], offset ___ehhandler$main
	lea	ecx, [esi + 336]
	mov	edx, dword ptr fs:[0]
	cmp	eax, 2
	mov	dword ptr [esi + 336], edx
	mov	dword ptr fs:[0], ecx
	mov	dword ptr [esi + 228], 15
	mov	dword ptr [esi + 224], 0
	mov	byte ptr [esi + 208], 0
	jl	LBB43_5
# %bb.1:
	mov	eax, dword ptr [ebp + 12]
	mov	ebx, dword ptr [eax + 4]
	push	ebx
	call	_strlen
	add	esp, 4
	mov	edi, eax
	cmp	eax, 15
	jbe	LBB43_2
# %bb.3:
	mov	dword ptr [esi + 344], 11
	sub	esp, 12
	mov	al, byte ptr [esi + 232]
	lea	ecx, [esi + 208]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], edi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB43_4
LBB43_2:
	mov	dword ptr [esi + 224], edi
	lea	eax, [esi + 208]
	push	edi
	push	ebx
	push	eax
	call	_memmove
	add	esp, 12
	mov	byte ptr [esi + edi + 208], 0
LBB43_4:
	mov	dword ptr [esi + 344], 11
LBB43_5:
	xorps	xmm0, xmm0
	mov	dword ptr [esi + 64], 0
	mov	dword ptr [esi + 344], 11
	movaps	xmmword ptr [esi + 48], xmm0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.6:
	lea	ecx, [esi + 48]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [esi + 48], eax
	mov	dword ptr [esi + 344], 12
	mov	dword ptr [eax], ecx
	lea	ecx, [esi + 116]
	call	"??0fileInfo@@QAE@XZ"
# %bb.7:
	mov	dword ptr [esi + 108], 0
	mov	dword ptr [esi + 252], 15
	mov	dword ptr [esi + 248], 4
	mov	dword ptr [esi + 232], 1094862674
	mov	byte ptr [esi + 236], 0
	mov	dword ptr [esi + 276], 15
	mov	dword ptr [esi + 272], 4
	mov	dword ptr [esi + 256], 1096176456
	mov	byte ptr [esi + 260], 0
	mov	dword ptr [esi + 300], 15
	mov	dword ptr [esi + 296], 3
	mov	dword ptr [esi + 280], 4343634
	mov	dword ptr [esi + 324], 15
	mov	dword ptr [esi + 320], 3
	mov	dword ptr [esi + 304], 5657416
	mov	dword ptr [esi + 112], 0
	mov	dword ptr [esi + 344], 13
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.8:
	xorps	xmm0, xmm0
	mov	dword ptr [eax], eax
	mov	dword ptr [eax + 4], eax
	mov	dword ptr [eax + 8], eax
	mov	word ptr [eax + 12], 257
	mov	dword ptr [esi + 108], eax
	mov	dword ptr [esi + 32], 0
	mov	dword ptr [esi + 344], 14
	movaps	xmmword ptr [esi + 16], xmm0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.9:
	lea	ecx, [esi + 16]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [esi + 16], eax
	mov	dword ptr [esi + 80], 0
	mov	dword ptr [esi + 344], 15
	mov	dword ptr [eax], ecx
	push	-11
	call	dword ptr [__imp__GetStdHandle@4]
# %bb.10:
	lea	ecx, [esi + 80]
	push	ecx
	push	eax
	call	dword ptr [__imp__GetConsoleMode@8]
# %bb.11:
	mov	eax, dword ptr [esi + 80]
	or	eax, 4
	mov	dword ptr [esi], eax            # 4-byte Spill
	mov	dword ptr [esi + 80], eax
	push	-11
	call	dword ptr [__imp__GetStdHandle@4]
# %bb.12:
	push	dword ptr [esi]                 # 4-byte Folded Reload
	push	eax
	call	dword ptr [__imp__SetConsoleMode@8]
# %bb.13:
	call	"?palettes_setup@@YAXXZ"
# %bb.14:
	cmp	dword ptr [esi + 224], 0
	je	LBB43_179
# %bb.15:
	cmp	dword ptr [esi + 228], 15
	jbe	LBB43_16
# %bb.17:
	mov	eax, dword ptr [esi + 208]
	jmp	LBB43_18
LBB43_179:
	push	offset "??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.180:
	mov	ecx, dword ptr [ebp + 12]
	push	dword ptr [ecx]
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.181:
	push	offset "??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB43_131
LBB43_16:
	lea	eax, [esi + 208]
LBB43_18:
	push	eax
	lea	eax, [esi + 80]
	push	eax
	call	"?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	add	esp, 8
# %bb.19:
	cmp	dword ptr [esi + 64], 0
	je	LBB43_21
# %bb.20:
	mov	dword ptr [esi + 60], 0
	mov	dword ptr [esi + 64], 0
LBB43_21:
	mov	eax, dword ptr [esi + 52]
	mov	edi, dword ptr [esi + 56]
	.p2align	4, 0x90
LBB43_22:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_23
# %bb.28:                               #   in Loop: Header=BB43_22 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_22
# %bb.29:                               #   in Loop: Header=BB43_22 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 52]
	jmp	LBB43_22
LBB43_23:
	test	eax, eax
	je	LBB43_33
# %bb.24:
	mov	ecx, dword ptr [esi + 56]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_32
# %bb.25:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_26
# %bb.31:
	add	ecx, 35
	mov	eax, edx
LBB43_32:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_33:
	mov	dword ptr [esi + 56], 0
	mov	dword ptr [esi + 52], 0
	mov	ecx, dword ptr [esi + 80]
	mov	eax, dword ptr [esi + 48]
	test	ecx, ecx
	mov	dword ptr [esi + 48], ecx
	mov	dword ptr [esi + 80], eax
	je	LBB43_35
# %bb.34:
	lea	edx, [esi + 48]
	mov	dword ptr [ecx], edx
LBB43_35:
	test	eax, eax
	je	LBB43_37
# %bb.36:
	lea	ecx, [esi + 80]
	mov	dword ptr [eax], ecx
LBB43_37:
	movups	xmm0, xmmword ptr [esi + 84]
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 92], 0
	mov	eax, dword ptr [esi + 80]
	mov	dword ptr [esi + 88], 0
	mov	dword ptr [esi + 84], 0
	mov	dword ptr [esi + 80], 0
	movups	xmmword ptr [esi + 52], xmm0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 60]
	mov	ecx, 268435455
	mov	edx, dword ptr [esi + 52]
	add	ecx, dword ptr [esi + 56]
	lea	edi, [eax + 3]
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	ebx, edi
	and	edi, 15
	mov	dword ptr [esi], ecx            # 4-byte Spill
	shr	ebx, 4
	and	ebx, ecx
	mov	ebx, dword ptr [edx + 4*ebx]
	movzx	ecx, byte ptr [ebx + edi]
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	ebx, ecx
	and	ecx, 15
	shr	ebx, 4
	and	ebx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	lea	edx, [eax + 1]
	movzx	ecx, byte ptr [ebx + ecx]
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebx, edi
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	shl	ecx, 8
	add	ecx, dword ptr [esi + 8]        # 4-byte Folded Reload
	mov	ebx, dword ptr [edi + 4*ebx]
	movzx	edx, byte ptr [ebx + edx]
	mov	ebx, eax
	shr	ebx, 4
	and	ebx, dword ptr [esi]            # 4-byte Folded Reload
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	edx, eax
	add	eax, 4
	and	edx, 15
	mov	ebx, dword ptr [edi + 4*ebx]
	movzx	edx, byte ptr [ebx + edx]
	mov	ebx, dword ptr [esi + 12]       # 4-byte Reload
	shl	ebx, 16
	shl	edx, 24
	or	ecx, ebx
	mov	ebx, dword ptr [esi]            # 4-byte Reload
	or	ecx, edx
	mov	edx, dword ptr [esi + 64]
	mov	dword ptr [esi + 116], ecx
	lea	ecx, [edx - 4]
	cmp	edx, 1
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	dword ptr [esi + 64], ecx
	mov	ecx, 3
	cmove	eax, ecx
	cmp	edx, 2
	mov	ecx, 1
	cmove	eax, edx
	cmp	edx, 3
	cmove	eax, ecx
	xor	ecx, ecx
	cmp	edx, 4
	cmove	eax, ecx
	lea	ecx, [eax + 3]
	mov	dword ptr [esi + 60], eax
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, ebx
	mov	edx, dword ptr [edi + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, ebx
	mov	edx, dword ptr [edi + 4*edx]
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	movzx	ecx, byte ptr [edx + ecx]
	lea	edx, [eax + 1]
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebx, dword ptr [esi]            # 4-byte Folded Reload
	shl	ecx, 8
	add	ecx, dword ptr [esi + 8]        # 4-byte Folded Reload
	mov	ebx, dword ptr [edi + 4*ebx]
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	movzx	edx, byte ptr [ebx + edx]
	mov	ebx, eax
	shr	ebx, 4
	and	ebx, dword ptr [esi]            # 4-byte Folded Reload
	mov	dword ptr [esi + 44], edx       # 4-byte Spill
	mov	edx, eax
	and	edx, 15
	mov	ebx, dword ptr [edi + 4*ebx]
	mov	edi, dword ptr [esi + 44]       # 4-byte Reload
	movzx	edx, byte ptr [ebx + edx]
	shl	edi, 16
	mov	ebx, eax
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	or	ecx, edi
	add	ebx, 4
	mov	edi, dword ptr [esi]            # 4-byte Reload
	shl	edx, 24
	or	ecx, edx
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	dword ptr [esi + 120], ecx
	lea	ecx, [edx - 8]
	cmp	edx, 5
	mov	dword ptr [esi + 64], ecx
	mov	ecx, 3
	cmove	ebx, ecx
	cmp	edx, 6
	mov	ecx, 2
	cmove	ebx, ecx
	cmp	edx, 7
	mov	ecx, 1
	cmove	ebx, ecx
	cmp	edx, 8
	mov	ecx, 0
	cmove	ebx, ecx
	lea	ecx, [ebx + 3]
	mov	dword ptr [esi + 60], ebx
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	mov	edx, dword ptr [eax + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	lea	ecx, [ebx + 2]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	lea	edi, [ebx + 1]
	mov	edx, dword ptr [eax + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, edi
	and	edi, 15
	shr	edx, 4
	and	edx, dword ptr [esi]            # 4-byte Folded Reload
	shl	ecx, 8
	add	ecx, dword ptr [esi + 8]        # 4-byte Folded Reload
	mov	edx, dword ptr [eax + 4*edx]
	movzx	edx, byte ptr [edx + edi]
	mov	edi, ebx
	shr	edi, 4
	and	edi, dword ptr [esi]            # 4-byte Folded Reload
	shl	edx, 16
	or	ecx, edx
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [eax + 4*edi]
	mov	eax, ebx
	add	ebx, 5
	and	eax, 15
	movzx	eax, byte ptr [edi + eax]
	mov	edi, 2
	shl	eax, 24
	or	ecx, eax
	cmp	edx, 9
	mov	eax, 3
	mov	dword ptr [esi + 124], ecx
	mov	ecx, 4
	cmovne	ecx, ebx
	cmp	edx, 10
	mov	ebx, 1
	cmove	ecx, eax
	cmp	edx, 11
	cmove	ecx, edi
	cmp	edx, 12
	mov	edi, 0
	cmove	ecx, ebx
	cmp	edx, 13
	cmove	ecx, edi
	add	edx, -13
	mov	dword ptr [esi + 60], ecx
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	dword ptr [esi + 64], edx
	jmp	LBB43_38
	.p2align	4, 0x90
LBB43_46:                               #   in Loop: Header=BB43_38 Depth=1
	mov	ecx, dword ptr [esi + 8]        # 4-byte Reload
	and	edx, 15
	movzx	ecx, byte ptr [edi + ecx]
	mov	byte ptr [eax + edx], cl
	inc	dword ptr [esi + 144]
	mov	edx, 0
	mov	ecx, dword ptr [esi + 60]
	mov	eax, dword ptr [esi + 64]
	inc	ecx
	dec	eax
	cmove	ecx, edx
	mov	dword ptr [esi + 64], eax
	mov	dword ptr [esi + 12], eax       # 4-byte Spill
	mov	dword ptr [esi + 60], ecx
LBB43_38:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 56]
	mov	edi, dword ptr [esi + 52]
	mov	ebx, ecx
	shr	ebx, 4
	lea	edx, [eax + 268435455]
	mov	dword ptr [esi], edi            # 4-byte Spill
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	and	ebx, edx
	mov	eax, edx
	mov	edx, ecx
	mov	edi, dword ptr [edi + 4*ebx]
	and	edx, 15
	mov	dword ptr [esi + 8], edx        # 4-byte Spill
	cmp	byte ptr [edi + edx], 0
	je	LBB43_47
# %bb.39:                               #   in Loop: Header=BB43_38 Depth=1
	mov	ecx, dword ptr [esi + 140]
	mov	eax, dword ptr [esi + 144]
	lea	edx, [eax + ecx]
	test	dl, 15
	jne	LBB43_43
# %bb.40:                               #   in Loop: Header=BB43_38 Depth=1
	lea	edx, [eax + 16]
	shr	edx, 4
	cmp	dword ptr [esi + 136], edx
	ja	LBB43_43
# %bb.41:                               #   in Loop: Header=BB43_38 Depth=1
	mov	dword ptr [esi], edi            # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 128]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.42:                               #   in Loop: Header=BB43_38 Depth=1
	mov	ecx, dword ptr [esi + 140]
	mov	eax, dword ptr [esi + 144]
	mov	edi, dword ptr [esi]            # 4-byte Reload
	.p2align	4, 0x90
LBB43_43:                               #   in Loop: Header=BB43_38 Depth=1
	mov	ebx, dword ptr [esi + 136]
	mov	edx, ebx
	add	ebx, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 132]
	mov	dword ptr [esi + 140], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	ebx, eax
	mov	eax, dword ptr [ecx + 4*ebx]
	test	eax, eax
	jne	LBB43_46
# %bb.44:                               #   in Loop: Header=BB43_38 Depth=1
	mov	dword ptr [esi + 12], ebx       # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi], edi            # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.45:                               #   in Loop: Header=BB43_38 Depth=1
	mov	ecx, dword ptr [esi + 132]
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 132]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
	jmp	LBB43_46
LBB43_47:
	mov	ebx, dword ptr [esi + 12]       # 4-byte Reload
	inc	ecx
	xor	edi, edi
	mov	edx, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [esi + 44], eax       # 4-byte Spill
	dec	ebx
	cmove	ecx, edi
	mov	dword ptr [esi + 64], ebx
	mov	ebx, ecx
	mov	dword ptr [esi + 60], ecx
	mov	edi, ecx
	shr	ebx, 4
	and	edi, 15
	and	ebx, eax
	lea	eax, [ecx + 1]
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	bl, byte ptr [ebx + edi]
	mov	edi, dword ptr [esi + 44]       # 4-byte Reload
	mov	byte ptr [esi + 148], bl
	mov	ebx, eax
	and	eax, 15
	shr	ebx, 4
	and	ebx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	bl, byte ptr [ebx + eax]
	lea	eax, [ecx + 2]
	mov	byte ptr [esi + 149], bl
	mov	ebx, eax
	and	eax, 15
	shr	ebx, 4
	and	ebx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	bl, byte ptr [ebx + eax]
	lea	eax, [ecx + 3]
	add	ecx, 4
	mov	byte ptr [esi + 150], bl
	mov	ebx, eax
	and	eax, 15
	shr	ebx, 4
	and	ebx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	bl, byte ptr [ebx + eax]
	cmp	edx, 2
	mov	eax, dword ptr [esi]            # 4-byte Reload
	mov	byte ptr [esi + 151], bl
	mov	ebx, 3
	cmovne	ebx, ecx
	mov	ecx, edx
	cmp	edx, 3
	mov	edx, 2
	cmovne	edx, ebx
	cmp	ecx, 4
	mov	ebx, 1
	cmovne	ebx, edx
	cmp	ecx, 5
	mov	edx, 0
	cmove	ebx, edx
	lea	edx, [ecx - 5]
	mov	dword ptr [esi + 64], edx
	mov	edx, ebx
	mov	dword ptr [esi + 60], ebx
	shr	edx, 4
	and	edx, edi
	mov	edi, ebx
	inc	ebx
	mov	edx, dword ptr [eax + 4*edx]
	and	edi, 15
	cmp	ecx, 6
	mov	dl, byte ptr [edx + edi]
	mov	byte ptr [esi + 156], dl
	mov	edx, 0
	cmove	ebx, edx
	mov	dword ptr [esi + 60], ebx
	inc	ebx
	add	ecx, -7
	jmp	LBB43_48
	.p2align	4, 0x90
LBB43_54:                               #   in Loop: Header=BB43_48 Depth=1
	mov	dword ptr [esi + 12], edi       # 4-byte Spill
LBB43_57:                               #   in Loop: Header=BB43_48 Depth=1
	mov	edx, dword ptr [esi + 60]
	mov	eax, dword ptr [esi + 56]
	mov	ebx, dword ptr [esi + 52]
	mov	dword ptr [esi + 172], ecx
	inc	dword ptr [esi + 176]
	mov	edi, edx
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	add	eax, 268435455
	mov	dword ptr [esi], ebx            # 4-byte Spill
	shr	edi, 4
	mov	dword ptr [esi + 44], eax       # 4-byte Spill
	and	edi, eax
	mov	eax, ecx
	mov	ecx, edx
	inc	edx
	mov	edi, dword ptr [ebx + 4*edi]
	and	ecx, 15
	mov	ebx, edx
	and	eax, 7
	movzx	ecx, byte ptr [edi + ecx]
	mov	edi, dword ptr [esi + 8]        # 4-byte Reload
	mov	byte ptr [esi + 104], cl        # 1-byte Spill
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [ecx + 4*edi]
	mov	ecx, edx
	movzx	edx, byte ptr [esi + 104]       # 1-byte Folded Reload
	shr	ecx, 4
	and	ecx, dword ptr [esi + 44]       # 4-byte Folded Reload
	mov	byte ptr [edi + 2*eax], dl
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	edx, ebx
	and	edx, 15
	mov	ecx, dword ptr [edi + 4*ecx]
	movzx	ecx, byte ptr [ecx + edx]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	byte ptr [edx + 2*eax + 1], cl
	mov	edx, 0
	mov	ecx, dword ptr [esi + 64]
	cmp	ecx, 1
	cmove	ebx, edx
	mov	dword ptr [esi + 60], ebx
	inc	ebx
	add	ecx, -2
LBB43_48:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	cmove	ebx, edx
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [esi + 64], ecx
	mov	edx, ebx
	mov	dword ptr [esi + 60], ebx
	shr	edx, 4
	dec	eax
	and	eax, edx
	mov	edx, ebx
	mov	eax, dword ptr [edi + 4*eax]
	and	edx, 15
	cmp	byte ptr [eax + edx], 0
	je	LBB43_58
# %bb.49:                               #   in Loop: Header=BB43_48 Depth=1
	mov	eax, dword ptr [esi + 172]
	test	al, 7
	jne	LBB43_53
# %bb.50:                               #   in Loop: Header=BB43_48 Depth=1
	mov	ecx, dword ptr [esi + 176]
	add	ecx, 8
	shr	ecx, 3
	cmp	dword ptr [esi + 168], ecx
	ja	LBB43_53
# %bb.51:                               #   in Loop: Header=BB43_48 Depth=1
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 160]
	push	1
	call	"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
# %bb.52:                               #   in Loop: Header=BB43_48 Depth=1
	mov	eax, dword ptr [esi + 172]
	.p2align	4, 0x90
LBB43_53:                               #   in Loop: Header=BB43_48 Depth=1
	mov	edx, dword ptr [esi + 168]
	mov	edi, dword ptr [esi + 164]
	lea	ecx, [8*edx - 1]
	and	ecx, eax
	lea	eax, [8*edx]
	mov	dword ptr [esi + 172], ecx
	cmove	ecx, eax
	add	edx, 536870911
	dec	ecx
	mov	eax, ecx
	shr	eax, 3
	and	edx, eax
	cmp	dword ptr [edi + 4*edx], 0
	mov	dword ptr [esi + 8], edx        # 4-byte Spill
	jne	LBB43_54
# %bb.55:                               #   in Loop: Header=BB43_48 Depth=1
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	mov	dword ptr [esi], ecx            # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.56:                               #   in Loop: Header=BB43_48 Depth=1
	mov	ecx, dword ptr [esi + 164]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	ecx, dword ptr [esi + 168]
	mov	eax, dword ptr [esi + 164]
	dec	ecx
	mov	dword ptr [esi + 12], eax       # 4-byte Spill
	and	ecx, dword ptr [esi + 4]        # 4-byte Folded Reload
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	jmp	LBB43_57
LBB43_58:
	inc	ebx
	xor	eax, eax
	dec	ecx
	xorps	xmm0, xmm0
	mov	dword ptr [esi + 44], esp       # 4-byte Spill
	mov	dword ptr [esi + 4], 0          # 4-byte Folded Spill
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 344], 15
	cmove	ebx, eax
	mov	dword ptr [esi + 64], ecx
	mov	dword ptr [esi + 12], ecx       # 4-byte Spill
	movaps	xmmword ptr [esi + 80], xmm0
	mov	dword ptr [esi + 60], ebx
	mov	dword ptr [esi], ebx            # 4-byte Spill
	mov	eax, dword ptr [esi + 48]
	mov	dword ptr [esi + 8], eax        # 4-byte Spill
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.59:
	mov	ecx, eax
	lea	eax, [esi + 80]
	mov	dword ptr [ecx], eax
	mov	eax, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [esi + 80], ecx
	mov	dword ptr [esi + 104], ecx      # 4-byte Spill
	test	eax, eax
	je	LBB43_60
# %bb.61:
	mov	eax, dword ptr [eax]
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [esi]            # 4-byte Reload
	test	eax, eax
	je	LBB43_63
# %bb.62:
	mov	eax, dword ptr [eax]
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
LBB43_63:
	test	ecx, ecx
	jne	LBB43_64
	jmp	LBB43_67
LBB43_60:
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [esi]            # 4-byte Reload
	test	ecx, ecx
	je	LBB43_67
LBB43_64:
	add	ecx, edi
	mov	dword ptr [esi + 12], ecx       # 4-byte Spill
	.p2align	4, 0x90
LBB43_65:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	mov	ecx, edi
	mov	dword ptr [esi], edi            # 4-byte Spill
	and	edi, 15
	shr	ecx, 4
	mov	eax, dword ptr [eax]
	mov	edx, dword ptr [eax + 4]
	mov	eax, dword ptr [eax + 8]
	dec	eax
	and	eax, ecx
	lea	ecx, [esi + 80]
	add	edi, dword ptr [edx + 4*eax]
	mov	dword ptr [esi + 344], 17
	push	edi
	call	"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z"
# %bb.66:                               #   in Loop: Header=BB43_65 Depth=1
	mov	eax, dword ptr [esi]            # 4-byte Reload
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	inc	eax
	cmp	eax, ecx
	mov	edi, eax
	jne	LBB43_65
LBB43_67:
	mov	esp, dword ptr [esi + 44]       # 4-byte Reload
	cmp	dword ptr [esi + 196], 0
	je	LBB43_69
# %bb.68:
	mov	dword ptr [esi + 192], 0
	mov	dword ptr [esi + 196], 0
LBB43_69:
	mov	eax, dword ptr [esi + 184]
	mov	edi, dword ptr [esi + 188]
	.p2align	4, 0x90
LBB43_70:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_86
# %bb.71:                               #   in Loop: Header=BB43_70 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_70
# %bb.72:                               #   in Loop: Header=BB43_70 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 184]
	jmp	LBB43_70
LBB43_86:
	test	eax, eax
	je	LBB43_94
# %bb.87:
	mov	ecx, dword ptr [esi + 188]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_93
# %bb.88:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_89
# %bb.92:
	add	ecx, 35
	mov	eax, edx
LBB43_93:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_94:
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 184], 0
	mov	ecx, dword ptr [esi + 80]
	mov	eax, dword ptr [esi + 180]
	test	ecx, ecx
	mov	dword ptr [esi + 180], ecx
	mov	dword ptr [esi + 80], eax
	je	LBB43_96
# %bb.95:
	lea	edx, [esi + 180]
	mov	dword ptr [ecx], edx
LBB43_96:
	test	eax, eax
	je	LBB43_98
# %bb.97:
	lea	ecx, [esi + 80]
	mov	dword ptr [eax], ecx
	mov	dword ptr [esi + 344], 15
LBB43_98:
	movups	xmm0, xmmword ptr [esi + 84]
	mov	dword ptr [esi + 96], 0
	mov	eax, dword ptr [esi + 80]
	movups	xmmword ptr [esi + 184], xmm0
	xorps	xmm0, xmm0
	movaps	xmmword ptr [esi + 80], xmm0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [esi + 344], 15
	push	offset "??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.99:
	push	offset "??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.100:
	mov	ecx, eax
	push	dword ptr [esi + 116]
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.101:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.102:
	push	offset "??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.103:
	mov	ecx, eax
	push	dword ptr [esi + 120]
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.104:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.105:
	push	offset "??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.106:
	mov	ecx, eax
	push	dword ptr [esi + 124]
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.107:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.108:
	push	offset "??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.109:
	mov	eax, dword ptr [esi + 128]
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 140]
	mov	edi, eax
	add	eax, dword ptr [esi + 144]
	cmp	edi, eax
	je	LBB43_111
	.p2align	4, 0x90
LBB43_121:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	mov	ecx, edi
	mov	dword ptr [esi], edi            # 4-byte Spill
	shr	ecx, 4
	mov	eax, dword ptr [eax]
	mov	edx, dword ptr [eax + 8]
	mov	eax, dword ptr [eax + 4]
	dec	edx
	and	edx, ecx
	mov	ecx, edi
	mov	eax, dword ptr [eax + 4*edx]
	and	ecx, 15
	movsx	eax, byte ptr [eax + ecx]
	push	eax
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	add	esp, 8
# %bb.122:                              #   in Loop: Header=BB43_121 Depth=1
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	eax, dword ptr [esi + 140]
	inc	edi
	add	eax, dword ptr [esi + 144]
	cmp	edi, eax
	jne	LBB43_121
LBB43_111:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.112:
	push	offset "??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.113:
	mov	ecx, dword ptr [eax]
	mov	edx, -3585
	mov	ecx, dword ptr [ecx + 4]
	and	edx, dword ptr [eax + ecx + 20]
	or	edx, 2048
	mov	dword ptr [eax + ecx + 20], edx
	mov	ecx, eax
	movzx	edx, byte ptr [esi + 148]
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.114:
	movzx	edx, byte ptr [esi + 149]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.115:
	movzx	edx, byte ptr [esi + 150]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.116:
	movzx	edx, byte ptr [esi + 151]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.117:
	mov	ecx, dword ptr [eax]
	mov	edx, -3585
	mov	ecx, dword ptr [ecx + 4]
	and	edx, dword ptr [eax + ecx + 20]
	or	edx, 512
	mov	dword ptr [eax + ecx + 20], edx
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.118:
	push	offset "??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.119:
	movzx	ecx, byte ptr [esi + 156]
	lea	edx, [ecx + 2*ecx]
	mov	ecx, dword ptr [esi + 8*edx + 248]
	cmp	dword ptr [esi + 8*edx + 252], 15
	jbe	LBB43_120
# %bb.123:
	mov	edx, dword ptr [esi + 8*edx + 232]
	jmp	LBB43_124
LBB43_120:
	lea	edx, [esi + 8*edx + 232]
LBB43_124:
	push	ecx
	push	edx
	push	eax
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.125:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.126:
	push	offset "??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.127:
	mov	eax, dword ptr [esi + 160]
	xor	ecx, ecx
	mov	dword ptr [esi + 8], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 172]
	mov	edi, eax
	jmp	LBB43_128
	.p2align	4, 0x90
LBB43_175:                              #   in Loop: Header=BB43_128 Depth=1
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	mov	eax, edx
LBB43_178:                              #   in Loop: Header=BB43_128 Depth=1
	cmp	eax, ecx
	mov	ecx, dword ptr [esi + 204]      # 4-byte Reload
	mov	eax, 1
	mov	edi, dword ptr [esi + 104]      # 4-byte Reload
	movzx	ecx, cl
	cmove	ecx, eax
	mov	eax, dword ptr [esi + 172]
	inc	edi
LBB43_128:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_142 Depth 2
                                        #     Child Loop BB43_174 Depth 2
	add	eax, dword ptr [esi + 176]
	cmp	edi, eax
	je	LBB43_129
# %bb.137:                              #   in Loop: Header=BB43_128 Depth=1
	mov	eax, dword ptr ["?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
	mov	dword ptr [esi + 204], ecx      # 4-byte Spill
	mov	edx, -3585
	mov	dword ptr [esi + 104], edi      # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20]
	and	ecx, edx
	mov	edx, edi
	and	edi, 7
	or	ecx, 2048
	shr	edx, 3
	mov	dword ptr [esi + 44], edi       # 4-byte Spill
	mov	dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20], ecx
	mov	eax, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	eax, dword ptr [eax]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [eax + 8]
	dec	eax
	and	eax, edx
	mov	edx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+12]
	mov	eax, dword ptr [ecx + 4*eax]
	mov	ecx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+16]
	movzx	eax, word ptr [eax + 2*edi]
	mov	edi, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"]
	mov	dword ptr [esi], ecx            # 4-byte Spill
	test	edi, edi
	je	LBB43_138
# %bb.139:                              #   in Loop: Header=BB43_128 Depth=1
	mov	ebx, dword ptr [edi]
	cmp	dword ptr [esi], 0              # 4-byte Folded Reload
	jne	LBB43_141
	jmp	LBB43_144
	.p2align	4, 0x90
LBB43_138:                              #   in Loop: Header=BB43_128 Depth=1
	xor	ebx, ebx
	cmp	dword ptr [esi], 0              # 4-byte Folded Reload
	je	LBB43_144
LBB43_141:                              #   in Loop: Header=BB43_128 Depth=1
	mov	edi, dword ptr [ebx + 8]
	shl	eax, 16
	mov	ebx, dword ptr [ebx + 4]
	add	dword ptr [esi], edx            # 4-byte Folded Spill
	bswap	eax
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	mov	eax, 536870911
	add	edi, eax
	.p2align	4, 0x90
LBB43_142:                              #   Parent Loop BB43_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, edx
	mov	eax, edx
	shr	ecx, 3
	and	eax, 7
	and	ecx, edi
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	eax, word ptr [ecx + 2*eax]
	cmp	dword ptr [esi + 4], eax        # 4-byte Folded Reload
	je	LBB43_145
# %bb.143:                              #   in Loop: Header=BB43_142 Depth=2
	inc	edx
	cmp	edx, dword ptr [esi]            # 4-byte Folded Reload
	jne	LBB43_142
	jmp	LBB43_144
	.p2align	4, 0x90
LBB43_145:                              #   in Loop: Header=BB43_128 Depth=1
	cmp	edx, dword ptr [esi]            # 4-byte Folded Reload
	mov	dword ptr [esi + 344], 15
	jne	LBB43_146
	.p2align	4, 0x90
LBB43_144:                              #   in Loop: Header=BB43_128 Depth=1
	mov	dword ptr [esi + 344], 15
	push	119
	push	119
	push	221
	lea	eax, [esi + 80]
	push	eax
	call	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	add	esp, 16
LBB43_147:                              #   in Loop: Header=BB43_128 Depth=1
	mov	eax, dword ptr [esi + 96]
	cmp	dword ptr [esi + 100], 15
	lea	ecx, [esi + 80]
	jbe	LBB43_149
# %bb.148:                              #   in Loop: Header=BB43_128 Depth=1
	mov	ecx, dword ptr [esi + 80]
LBB43_149:                              #   in Loop: Header=BB43_128 Depth=1
	mov	dword ptr [esi + 344], 16
	push	eax
	push	ecx
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.150:                              #   in Loop: Header=BB43_128 Depth=1
	mov	ecx, dword ptr [esi + 8]        # 4-byte Reload
	mov	ecx, dword ptr [ecx]
	mov	edx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [ecx + 8]
	dec	ecx
	and	ecx, dword ptr [esi + 12]       # 4-byte Folded Reload
	mov	ecx, dword ptr [edx + 4*ecx]
	mov	edx, dword ptr [esi + 44]       # 4-byte Reload
	movzx	edx, word ptr [ecx + 2*edx]
	mov	ecx, eax
	shl	edx, 16
	bswap	edx
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.151:                              #   in Loop: Header=BB43_128 Depth=1
	push	offset "??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.152:                              #   in Loop: Header=BB43_128 Depth=1
	mov	eax, dword ptr [esi + 100]
	mov	ebx, dword ptr [esi + 104]      # 4-byte Reload
	cmp	eax, 16
	jb	LBB43_160
# %bb.153:                              #   in Loop: Header=BB43_128 Depth=1
	mov	ecx, dword ptr [esi + 80]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB43_159
# %bb.154:                              #   in Loop: Header=BB43_128 Depth=1
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB43_155
# %bb.158:                              #   in Loop: Header=BB43_128 Depth=1
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB43_159:                              #   in Loop: Header=BB43_128 Depth=1
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_160:                              #   in Loop: Header=BB43_128 Depth=1
	mov	eax, dword ptr [esi + 172]
	mov	ecx, dword ptr [esi + 176]
	lea	eax, [eax + ecx - 1]
	cmp	eax, ebx
	jne	LBB43_161
# %bb.168:                              #   in Loop: Header=BB43_128 Depth=1
	mov	dword ptr [esi + 344], 15
	push	offset "??_C@_03NIEPJMFE@?5?$HN?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB43_169
	.p2align	4, 0x90
LBB43_161:                              #   in Loop: Header=BB43_128 Depth=1
	mov	dword ptr [esi + 344], 15
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
LBB43_169:                              #   in Loop: Header=BB43_128 Depth=1
	mov	eax, dword ptr [esi + 8]        # 4-byte Reload
	mov	edx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+12]
	mov	eax, dword ptr [eax]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [eax + 8]
	dec	eax
	and	eax, dword ptr [esi + 12]       # 4-byte Folded Reload
	mov	eax, dword ptr [ecx + 4*eax]
	mov	ecx, dword ptr [esi + 44]       # 4-byte Reload
	movzx	edi, word ptr [eax + 2*ecx]
	mov	ecx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"]
	mov	eax, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+16]
	test	ecx, ecx
	je	LBB43_170
# %bb.171:                              #   in Loop: Header=BB43_128 Depth=1
	mov	ebx, dword ptr [ecx]
	lea	ecx, [eax + edx]
	test	eax, eax
	mov	eax, ecx
	jne	LBB43_173
	jmp	LBB43_178
	.p2align	4, 0x90
LBB43_170:                              #   in Loop: Header=BB43_128 Depth=1
	xor	ebx, ebx
	lea	ecx, [eax + edx]
	test	eax, eax
	mov	eax, ecx
	je	LBB43_178
LBB43_173:                              #   in Loop: Header=BB43_128 Depth=1
	mov	dword ptr [esi], ecx            # 4-byte Spill
	mov	ecx, dword ptr [ebx + 8]
	mov	ebx, dword ptr [ebx + 4]
	shl	edi, 16
	mov	eax, 536870911
	bswap	edi
	mov	dword ptr [esi + 4], edi        # 4-byte Spill
	add	ecx, eax
	.p2align	4, 0x90
LBB43_174:                              #   Parent Loop BB43_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, edx
	mov	edi, edx
	shr	eax, 3
	and	edi, 7
	and	eax, ecx
	mov	eax, dword ptr [ebx + 4*eax]
	movzx	eax, word ptr [eax + 2*edi]
	cmp	dword ptr [esi + 4], eax        # 4-byte Folded Reload
	je	LBB43_175
# %bb.176:                              #   in Loop: Header=BB43_174 Depth=2
	inc	edx
	cmp	edx, dword ptr [esi]            # 4-byte Folded Reload
	jne	LBB43_174
# %bb.177:                              #   in Loop: Header=BB43_128 Depth=1
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	mov	eax, ecx
	jmp	LBB43_178
LBB43_146:                              #   in Loop: Header=BB43_128 Depth=1
	push	119
	push	221
	push	119
	lea	eax, [esi + 80]
	push	eax
	call	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	add	esp, 16
	jmp	LBB43_147
LBB43_129:
	test	cl, 1
	mov	dword ptr [esi + 344], 15
	jne	LBB43_130
# %bb.182:
	lea	eax, [esi + 108]
	push	eax
	call	"?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z"
	add	esp, 4
# %bb.183:
	lea	eax, [esi + 108]
	push	eax
	call	"?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z"
	add	esp, 4
# %bb.184:
	xor	ecx, ecx
	jmp	LBB43_185
	.p2align	4, 0x90
LBB43_188:                              #   in Loop: Header=BB43_185 Depth=1
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	inc	ecx
LBB43_185:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_187 Depth 2
	mov	eax, dword ptr [esi + 120]
	mov	dword ptr [esi + 12], ecx       # 4-byte Spill
	cmp	ecx, eax
	jae	LBB43_189
# %bb.186:                              #   in Loop: Header=BB43_185 Depth=1
	xor	eax, eax
	jmp	LBB43_187
	.p2align	4, 0x90
LBB43_221:                              #   in Loop: Header=BB43_187 Depth=2
	and	edx, 15
	mov	byte ptr [eax + edx], 0
	mov	eax, dword ptr [esi]            # 4-byte Reload
	inc	dword ptr [esi + 32]
	inc	eax
LBB43_187:                              #   Parent Loop BB43_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	eax, dword ptr [esi + 124]
	mov	dword ptr [esi], eax            # 4-byte Spill
	jae	LBB43_188
# %bb.193:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	lea	edx, [eax + ecx]
	test	dl, 15
	jne	LBB43_197
# %bb.194:                              #   in Loop: Header=BB43_187 Depth=2
	lea	edx, [eax + 16]
	shr	edx, 4
	cmp	dword ptr [esi + 24], edx
	ja	LBB43_197
# %bb.195:                              #   in Loop: Header=BB43_187 Depth=2
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 16]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.196:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	.p2align	4, 0x90
LBB43_197:                              #   in Loop: Header=BB43_187 Depth=2
	mov	edi, dword ptr [esi + 24]
	mov	edx, edi
	add	edi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	dword ptr [esi + 28], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	edi, eax
	mov	eax, dword ptr [ecx + 4*edi]
	test	eax, eax
	jne	LBB43_200
# %bb.198:                              #   in Loop: Header=BB43_187 Depth=2
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.199:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 20]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
LBB43_200:                              #   in Loop: Header=BB43_187 Depth=2
	and	edx, 15
	mov	byte ptr [eax + edx], 0
	mov	edx, dword ptr [esi + 32]
	mov	ecx, dword ptr [esi + 28]
	lea	ebx, [ecx + edx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 32], eax
	jne	LBB43_204
# %bb.201:                              #   in Loop: Header=BB43_187 Depth=2
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 24], edx
	ja	LBB43_204
# %bb.202:                              #   in Loop: Header=BB43_187 Depth=2
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 16]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.203:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	.p2align	4, 0x90
LBB43_204:                              #   in Loop: Header=BB43_187 Depth=2
	mov	edi, dword ptr [esi + 24]
	mov	edx, edi
	add	edi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	dword ptr [esi + 28], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	edi, eax
	mov	eax, dword ptr [ecx + 4*edi]
	test	eax, eax
	jne	LBB43_207
# %bb.205:                              #   in Loop: Header=BB43_187 Depth=2
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.206:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 20]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
LBB43_207:                              #   in Loop: Header=BB43_187 Depth=2
	and	edx, 15
	mov	byte ptr [eax + edx], 0
	mov	edx, dword ptr [esi + 32]
	mov	ecx, dword ptr [esi + 28]
	lea	ebx, [ecx + edx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 32], eax
	jne	LBB43_211
# %bb.208:                              #   in Loop: Header=BB43_187 Depth=2
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 24], edx
	ja	LBB43_211
# %bb.209:                              #   in Loop: Header=BB43_187 Depth=2
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 16]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.210:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	.p2align	4, 0x90
LBB43_211:                              #   in Loop: Header=BB43_187 Depth=2
	mov	edi, dword ptr [esi + 24]
	mov	edx, edi
	add	edi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	dword ptr [esi + 28], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	edi, eax
	mov	eax, dword ptr [ecx + 4*edi]
	test	eax, eax
	jne	LBB43_214
# %bb.212:                              #   in Loop: Header=BB43_187 Depth=2
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.213:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 20]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
LBB43_214:                              #   in Loop: Header=BB43_187 Depth=2
	and	edx, 15
	mov	byte ptr [eax + edx], 0
	mov	edx, dword ptr [esi + 32]
	mov	ecx, dword ptr [esi + 28]
	lea	ebx, [ecx + edx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 32], eax
	jne	LBB43_218
# %bb.215:                              #   in Loop: Header=BB43_187 Depth=2
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 24], edx
	ja	LBB43_218
# %bb.216:                              #   in Loop: Header=BB43_187 Depth=2
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 16]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.217:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	.p2align	4, 0x90
LBB43_218:                              #   in Loop: Header=BB43_187 Depth=2
	mov	edi, dword ptr [esi + 24]
	mov	edx, edi
	add	edi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	dword ptr [esi + 28], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	edi, eax
	mov	eax, dword ptr [ecx + 4*edi]
	test	eax, eax
	jne	LBB43_221
# %bb.219:                              #   in Loop: Header=BB43_187 Depth=2
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.220:                              #   in Loop: Header=BB43_187 Depth=2
	mov	ecx, dword ptr [esi + 20]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
	jmp	LBB43_221
LBB43_130:
	push	offset "??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB43_131
LBB43_189:
	test	eax, eax
	je	LBB43_225
# %bb.190:
	mov	ebx, dword ptr [esi + 124]
	xor	ecx, ecx
	jmp	LBB43_191
	.p2align	4, 0x90
LBB43_192:                              #   in Loop: Header=BB43_191 Depth=1
	xor	ebx, ebx
LBB43_224:                              #   in Loop: Header=BB43_191 Depth=1
	mov	ecx, dword ptr [esi + 8]        # 4-byte Reload
	inc	ecx
	cmp	ecx, eax
	jae	LBB43_225
LBB43_191:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_223 Depth 2
	test	ebx, ebx
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	je	LBB43_192
# %bb.222:                              #   in Loop: Header=BB43_191 Depth=1
	lea	ecx, [4*ecx]
	mov	dword ptr [esi], ecx            # 4-byte Spill
	xor	ecx, ecx
	.p2align	4, 0x90
LBB43_223:                              #   Parent Loop BB43_191 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lea	ebx, [4*ecx]
	mov	dword ptr [esi + 4], ecx        # 4-byte Spill
	mov	ecx, dword ptr [esi + 28]
	mov	edx, dword ptr [esi + 24]
	mov	edi, 268435455
	imul	eax, ebx
	add	ecx, dword ptr [esi]            # 4-byte Folded Reload
	add	edx, edi
	mov	edi, 268435455
	add	ecx, eax
	mov	eax, ecx
	and	ecx, 15
	shr	eax, 4
	and	edx, eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	movzx	edx, byte ptr [esi + 148]
	mov	byte ptr [eax + ecx], dl
	mov	eax, dword ptr [esi + 120]
	mov	edx, dword ptr [esi + 24]
	imul	eax, ebx
	add	edx, edi
	mov	edi, 268435455
	add	eax, dword ptr [esi]            # 4-byte Folded Reload
	or	eax, 1
	add	eax, dword ptr [esi + 28]
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	ecx, dword ptr [ecx + 4*edx]
	movzx	edx, byte ptr [esi + 149]
	mov	byte ptr [ecx + eax], dl
	mov	eax, dword ptr [esi + 120]
	mov	edx, dword ptr [esi + 24]
	imul	eax, ebx
	add	edx, edi
	mov	edi, 268435455
	add	eax, dword ptr [esi]            # 4-byte Folded Reload
	or	eax, 2
	add	eax, dword ptr [esi + 28]
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	ecx, dword ptr [ecx + 4*edx]
	movzx	edx, byte ptr [esi + 150]
	mov	byte ptr [ecx + eax], dl
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
	imul	ebx, dword ptr [esi + 120]
	mov	ecx, dword ptr [esi + 24]
	inc	edx
	add	ebx, dword ptr [esi]            # 4-byte Folded Reload
	add	ecx, edi
	or	ebx, 3
	add	ebx, dword ptr [esi + 28]
	mov	eax, ebx
	and	ebx, 15
	shr	eax, 4
	and	ecx, eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*ecx]
	movzx	ecx, byte ptr [esi + 151]
	mov	byte ptr [eax + ebx], cl
	mov	ecx, edx
	mov	ebx, dword ptr [esi + 124]
	mov	eax, dword ptr [esi + 120]
	cmp	edx, ebx
	jb	LBB43_223
	jmp	LBB43_224
	.p2align	4, 0x90
LBB43_227:                              #   in Loop: Header=BB43_225 Depth=1
	inc	edi
	xor	ecx, ecx
	dec	eax
	cmovne	ecx, edi
	mov	dword ptr [esi + 196], eax
	mov	dword ptr [esi + 192], ecx
LBB43_225:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_234 Depth 2
	mov	eax, dword ptr [esi + 196]
	test	eax, eax
	je	LBB43_244
# %bb.226:                              #   in Loop: Header=BB43_225 Depth=1
	mov	edi, dword ptr [esi + 192]
	mov	ecx, 268435455
	mov	edx, dword ptr [esi + 184]
	add	ecx, dword ptr [esi + 188]
	mov	ebx, edi
	mov	dword ptr [esi + 8], edx        # 4-byte Spill
	shr	ebx, 4
	mov	dword ptr [esi + 4], ecx        # 4-byte Spill
	and	ebx, ecx
	mov	ecx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	and	ecx, 15
	movzx	ecx, byte ptr [ebx + ecx]
	cmp	ecx, 255
	je	LBB43_227
# %bb.228:                              #   in Loop: Header=BB43_225 Depth=1
	mov	dword ptr [esi + 12], ecx       # 4-byte Spill
	lea	ecx, [edi + 3]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	ebx, ecx
	and	ecx, 15
	shr	ebx, 4
	and	ebx, dword ptr [esi + 4]        # 4-byte Folded Reload
	mov	ebx, dword ptr [edx + 4*ebx]
	movzx	ecx, byte ptr [ebx + ecx]
	mov	dword ptr [esi + 44], ecx       # 4-byte Spill
	lea	ecx, [edi + 2]
	mov	ebx, ecx
	and	ecx, 15
	shr	ebx, 4
	and	ebx, dword ptr [esi + 4]        # 4-byte Folded Reload
	mov	ebx, dword ptr [edx + 4*ebx]
	movzx	ecx, byte ptr [ebx + ecx]
	mov	dword ptr [esi], ecx            # 4-byte Spill
	lea	ecx, [edi + 1]
	add	edi, 4
	mov	ebx, ecx
	and	ecx, 15
	shr	ebx, 4
	and	ebx, dword ptr [esi + 4]        # 4-byte Folded Reload
	cmp	eax, 1
	mov	edx, dword ptr [edx + 4*ebx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, 1
	mov	dword ptr [esi + 4], ecx        # 4-byte Spill
	mov	ecx, 3
	cmovne	ecx, edi
	cmp	eax, 2
	cmove	ecx, eax
	cmp	eax, 3
	cmovne	edx, ecx
	xor	ecx, ecx
	cmp	eax, 4
	cmovne	ecx, edx
	add	eax, -4
	mov	dword ptr [esi + 192], ecx
	mov	dword ptr [esi + 196], eax
	mov	eax, dword ptr ["?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
	mov	ecx, -3585
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + 344], 15
	and	ecx, dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20]
	or	ecx, 2048
	mov	dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20], ecx
	push	offset "??_C@_0O@HFECNAJH@Instruction?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.229:                              #   in Loop: Header=BB43_225 Depth=1
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edx, dword ptr [esi]            # 4-byte Reload
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	shl	ecx, 24
	shl	edx, 8
	shl	edi, 16
	add	ecx, dword ptr [esi + 44]       # 4-byte Folded Reload
	or	edx, ecx
	mov	ecx, eax
	or	edx, edi
	mov	dword ptr [esi], edx            # 4-byte Spill
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.230:                              #   in Loop: Header=BB43_225 Depth=1
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.231:                              #   in Loop: Header=BB43_225 Depth=1
	mov	eax, dword ptr [esi + 108]
	xor	edx, edx
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	cmp	byte ptr [ebx + 13], 0
	je	LBB43_233
# %bb.232:                              #   in Loop: Header=BB43_225 Depth=1
	mov	edi, dword ptr [esi]            # 4-byte Reload
	cmp	byte ptr [eax + 13], 0
	jne	LBB43_238
	jmp	LBB43_237
	.p2align	4, 0x90
LBB43_233:                              #   in Loop: Header=BB43_225 Depth=1
	mov	edi, dword ptr [esi]            # 4-byte Reload
	.p2align	4, 0x90
LBB43_234:                              #   Parent Loop BB43_225 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edx, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	edx, edi
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB43_234
# %bb.235:                              #   in Loop: Header=BB43_225 Depth=1
	cmp	edx, edi
	mov	edx, 0
	mov	ebx, ecx
	setae	dl
	cmp	byte ptr [eax + 13], 0
	jne	LBB43_238
LBB43_237:                              #   in Loop: Header=BB43_225 Depth=1
	cmp	edi, dword ptr [eax + 16]
	jae	LBB43_243
LBB43_238:                              #   in Loop: Header=BB43_225 Depth=1
	cmp	dword ptr [esi + 112], 178956970
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	dword ptr [esi + 8], ebx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	je	LBB43_239
# %bb.241:                              #   in Loop: Header=BB43_225 Depth=1
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.242:                              #   in Loop: Header=BB43_225 Depth=1
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [eax + 16], ecx
	mov	ecx, dword ptr [esi + 4]        # 4-byte Reload
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ecx
	mov	dword ptr [eax + 8], ecx
	mov	word ptr [eax + 12], 0
	lea	ecx, [esi + 108]
	push	eax
	push	dword ptr [esi + 12]            # 4-byte Folded Reload
	push	dword ptr [esi + 8]             # 4-byte Folded Reload
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB43_243:                              #   in Loop: Header=BB43_225 Depth=1
	mov	eax, dword ptr [eax + 20]
	lea	ecx, [esi + 116]
	mov	dword ptr [esi + 344], 15
	push	ecx
	lea	ecx, [esi + 16]
	push	ecx
	call	eax
	add	esp, 8
	jmp	LBB43_225
LBB43_244:
	mov	edx, dword ptr [esi + 224]
	mov	eax, edx
	and	eax, -4
	cmp	eax, 2147483644
	je	LBB43_245
# %bb.247:
	mov	eax, dword ptr [esi + 120]
	mov	ecx, dword ptr [esi + 208]
	lea	ebx, [edx + 4]
	lea	edi, [esi + 80]
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 100], 0
	mov	dword ptr [esi], 15             # 4-byte Folded Spill
	cmp	ebx, 16
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 124]
	mov	dword ptr [esi + 8], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 228]
	jb	LBB43_257
# %bb.248:
	mov	dword ptr [esi + 44], ecx       # 4-byte Spill
	mov	ecx, ebx
	mov	dword ptr [esi + 204], eax      # 4-byte Spill
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	dword ptr [esi + 104], ebx      # 4-byte Spill
	or	ecx, 15
	js	LBB43_249
# %bb.250:
	cmp	ecx, 22
	mov	edi, 22
	mov	dword ptr [esi + 344], 15
	cmova	edi, ecx
	lea	eax, [edi + 1]
	cmp	edi, 4095
	jb	LBB43_254
# %bb.251:
	mov	dword ptr [esi], ecx            # 4-byte Spill
	jmp	LBB43_252
LBB43_249:
	mov	dword ptr [esi], 2147483647     # 4-byte Folded Spill
	mov	eax, -2147483648
LBB43_252:
	add	eax, 35
	mov	dword ptr [esi + 344], 15
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.253:
	mov	edi, eax
	add	edi, 35
	and	edi, -32
	mov	dword ptr [edi - 4], eax
	jmp	LBB43_256
LBB43_254:
	mov	dword ptr [esi], edi            # 4-byte Spill
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.255:
	mov	edi, eax
LBB43_256:
	mov	ebx, dword ptr [esi + 104]      # 4-byte Reload
	mov	eax, dword ptr [esi + 204]      # 4-byte Reload
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 44]       # 4-byte Reload
	mov	dword ptr [esi + 80], edi
LBB43_257:
	cmp	eax, 15
	lea	eax, [esi + 208]
	mov	dword ptr [esi + 96], ebx
	cmova	eax, ecx
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [esi + 100], ecx
	push	edx
	push	eax
	push	edi
	mov	ebx, edx
	call	_memcpy
	add	esp, 12
	mov	dword ptr [edi + ebx], 1735290926
	mov	byte ptr [edi + ebx + 4], 0
	lea	ecx, [esi + 80]
	cmp	dword ptr [esi + 100], 15
	jbe	LBB43_259
# %bb.258:
	mov	ecx, dword ptr [esi + 80]
LBB43_259:
	mov	dword ptr [esi + 344], 18
	push	dword ptr [esi + 8]             # 4-byte Folded Reload
	push	dword ptr [esi + 4]             # 4-byte Folded Reload
	lea	eax, [esi + 16]
	push	eax
	push	ecx
	call	"?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	add	esp, 16
# %bb.260:
	mov	eax, dword ptr [esi + 100]
	cmp	eax, 16
	jb	LBB43_131
# %bb.261:
	mov	ecx, dword ptr [esi + 80]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB43_267
# %bb.262:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB43_263
# %bb.266:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB43_267:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_131:
	cmp	dword ptr [esi + 32], 0
	je	LBB43_133
# %bb.132:
	mov	dword ptr [esi + 28], 0
	mov	dword ptr [esi + 32], 0
LBB43_133:
	mov	eax, dword ptr [esi + 20]
	mov	edi, dword ptr [esi + 24]
	.p2align	4, 0x90
LBB43_134:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_274
# %bb.135:                              #   in Loop: Header=BB43_134 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_134
# %bb.136:                              #   in Loop: Header=BB43_134 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 20]
	jmp	LBB43_134
LBB43_274:
	test	eax, eax
	je	LBB43_282
# %bb.275:
	mov	ecx, dword ptr [esi + 24]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_281
# %bb.276:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_277
# %bb.280:
	add	ecx, 35
	mov	eax, edx
LBB43_281:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_282:
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 20], 0
	mov	eax, dword ptr [esi + 16]
	mov	dword ptr [esi + 16], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 108]
	lea	ecx, [esi + 108]
	push	dword ptr [eax + 4]
	push	ecx
	call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
	push	24
	push	dword ptr [esi + 108]
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 324]
	cmp	eax, 15
	jbe	LBB43_304
# %bb.283:
	mov	ecx, dword ptr [esi + 304]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB43_303
# %bb.284:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB43_285
# %bb.302:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB43_303:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_304:
	mov	dword ptr [esi + 320], 0
	mov	dword ptr [esi + 324], 15
	mov	byte ptr [esi + 304], 0
	mov	eax, dword ptr [esi + 300]
	cmp	eax, 15
	jbe	LBB43_309
# %bb.305:
	mov	ecx, dword ptr [esi + 280]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_308
# %bb.306:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB43_285
# %bb.307:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_308:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_309:
	mov	dword ptr [esi + 296], 0
	mov	dword ptr [esi + 300], 15
	mov	byte ptr [esi + 280], 0
	mov	eax, dword ptr [esi + 276]
	cmp	eax, 16
	jb	LBB43_314
# %bb.310:
	mov	ecx, dword ptr [esi + 256]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_313
# %bb.311:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB43_285
# %bb.312:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_313:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_314:
	mov	dword ptr [esi + 272], 0
	mov	dword ptr [esi + 276], 15
	mov	byte ptr [esi + 256], 0
	mov	eax, dword ptr [esi + 252]
	cmp	eax, 16
	jb	LBB43_319
# %bb.315:
	mov	ecx, dword ptr [esi + 232]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_318
# %bb.316:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB43_285
# %bb.317:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_318:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_319:
	cmp	dword ptr [esi + 196], 0
	je	LBB43_321
# %bb.320:
	mov	dword ptr [esi + 192], 0
	mov	dword ptr [esi + 196], 0
LBB43_321:
	mov	eax, dword ptr [esi + 184]
	mov	edi, dword ptr [esi + 188]
	.p2align	4, 0x90
LBB43_322:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_323
# %bb.328:                              #   in Loop: Header=BB43_322 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_322
# %bb.329:                              #   in Loop: Header=BB43_322 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 184]
	jmp	LBB43_322
LBB43_323:
	test	eax, eax
	je	LBB43_333
# %bb.324:
	mov	ecx, dword ptr [esi + 188]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_332
# %bb.325:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_326
# %bb.331:
	add	ecx, 35
	mov	eax, edx
LBB43_332:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_333:
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 184], 0
	mov	eax, dword ptr [esi + 180]
	mov	dword ptr [esi + 180], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 176], 0
	je	LBB43_335
# %bb.334:
	mov	dword ptr [esi + 172], 0
	mov	dword ptr [esi + 176], 0
LBB43_335:
	mov	eax, dword ptr [esi + 164]
	mov	edi, dword ptr [esi + 168]
	.p2align	4, 0x90
LBB43_336:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_337
# %bb.342:                              #   in Loop: Header=BB43_336 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_336
# %bb.343:                              #   in Loop: Header=BB43_336 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 164]
	jmp	LBB43_336
LBB43_337:
	test	eax, eax
	je	LBB43_347
# %bb.338:
	mov	ecx, dword ptr [esi + 168]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_346
# %bb.339:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_340
# %bb.345:
	add	ecx, 35
	mov	eax, edx
LBB43_346:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_347:
	mov	dword ptr [esi + 168], 0
	mov	dword ptr [esi + 164], 0
	mov	eax, dword ptr [esi + 160]
	mov	dword ptr [esi + 160], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 144], 0
	je	LBB43_349
# %bb.348:
	mov	dword ptr [esi + 140], 0
	mov	dword ptr [esi + 144], 0
LBB43_349:
	mov	eax, dword ptr [esi + 132]
	mov	edi, dword ptr [esi + 136]
	.p2align	4, 0x90
LBB43_350:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_351
# %bb.356:                              #   in Loop: Header=BB43_350 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_350
# %bb.357:                              #   in Loop: Header=BB43_350 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 132]
	jmp	LBB43_350
LBB43_351:
	test	eax, eax
	je	LBB43_361
# %bb.352:
	mov	ecx, dword ptr [esi + 136]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_360
# %bb.353:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_354
# %bb.359:
	add	ecx, 35
	mov	eax, edx
LBB43_360:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_361:
	mov	dword ptr [esi + 136], 0
	mov	dword ptr [esi + 132], 0
	mov	eax, dword ptr [esi + 128]
	mov	dword ptr [esi + 128], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 64], 0
	je	LBB43_363
# %bb.362:
	mov	dword ptr [esi + 60], 0
	mov	dword ptr [esi + 64], 0
LBB43_363:
	mov	eax, dword ptr [esi + 52]
	mov	edi, dword ptr [esi + 56]
	.p2align	4, 0x90
LBB43_364:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_365
# %bb.370:                              #   in Loop: Header=BB43_364 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_364
# %bb.371:                              #   in Loop: Header=BB43_364 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 52]
	jmp	LBB43_364
LBB43_365:
	test	eax, eax
	je	LBB43_375
# %bb.366:
	mov	ecx, dword ptr [esi + 56]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_374
# %bb.367:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_368
# %bb.373:
	add	ecx, 35
	mov	eax, edx
LBB43_374:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_375:
	mov	dword ptr [esi + 56], 0
	mov	dword ptr [esi + 52], 0
	mov	eax, dword ptr [esi + 48]
	mov	dword ptr [esi + 48], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 228]
	cmp	eax, 16
	jb	LBB43_383
# %bb.376:
	mov	ecx, dword ptr [esi + 208]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB43_382
# %bb.377:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB43_378
# %bb.381:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB43_382:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_383:
	mov	eax, dword ptr [esi + 336]
	mov	dword ptr fs:[0], eax
	xor	eax, eax
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB43_155:
	mov	dword ptr [esi + 344], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.156:
LBB43_239:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.240:
LBB43_285:
	mov	dword ptr [esi + 344], 5
	call	__invalid_parameter_noinfo_noreturn
# %bb.286:
LBB43_277:
	mov	dword ptr [esi + 344], 4
	call	__invalid_parameter_noinfo_noreturn
# %bb.278:
LBB43_326:
	mov	dword ptr [esi + 344], 6
	call	__invalid_parameter_noinfo_noreturn
# %bb.327:
LBB43_340:
	mov	dword ptr [esi + 344], 7
	call	__invalid_parameter_noinfo_noreturn
# %bb.341:
LBB43_354:
	mov	dword ptr [esi + 344], 8
	call	__invalid_parameter_noinfo_noreturn
# %bb.355:
LBB43_368:
	mov	dword ptr [esi + 344], 9
	call	__invalid_parameter_noinfo_noreturn
# %bb.369:
LBB43_245:
	mov	dword ptr [esi + 344], 15
	call	"?_Xlen_string@std@@YAXXZ"
# %bb.246:
LBB43_378:
	mov	dword ptr [esi + 344], 10
	call	__invalid_parameter_noinfo_noreturn
# %bb.379:
LBB43_26:
	mov	dword ptr [esi + 344], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.27:
LBB43_89:
	mov	dword ptr [esi + 344], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.90:
LBB43_263:
	mov	dword ptr [esi + 344], 3
	call	__invalid_parameter_noinfo_noreturn
# %bb.264:
	.def	 "?dtor$30@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$30@?0?main@4HA":
LBB43_30:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$73@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$73@?0?main@4HA":
LBB43_73:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	cmp	dword ptr [esi + 96], 0
	je	LBB43_75
# %bb.74:
	mov	dword ptr [esi + 92], 0
	mov	dword ptr [esi + 96], 0
LBB43_75:
	mov	eax, dword ptr [esi + 84]
	mov	edi, dword ptr [esi + 88]
LBB43_76:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_77
# %bb.81:                               #   in Loop: Header=BB43_76 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_76
# %bb.82:                               #   in Loop: Header=BB43_76 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 84]
	jmp	LBB43_76
LBB43_77:
	test	eax, eax
	je	LBB43_85
# %bb.78:
	mov	ecx, dword ptr [esi + 88]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_84
# %bb.79:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_80
# %bb.83:
	add	ecx, 35
	mov	eax, edx
LBB43_84:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_85:
	mov	dword ptr [esi + 88], 0
	mov	dword ptr [esi + 84], 0
	push	8
	push	dword ptr [esi + 104]           # 4-byte Folded Reload
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB43_80:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$91@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$91@?0?main@4HA":
LBB43_91:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$157@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$157@?0?main@4HA":
LBB43_157:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$162@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$162@?0?main@4HA":
LBB43_162:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 100]
	cmp	eax, 16
	jb	LBB43_167
# %bb.163:
	mov	ecx, dword ptr [esi + 80]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_166
# %bb.164:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB43_457
# %bb.165:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_166:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_167:
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 100], 15
	mov	byte ptr [esi + 80], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB43_457:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$265@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$265@?0?main@4HA":
LBB43_265:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$268@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$268@?0?main@4HA":
LBB43_268:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 100]
	cmp	eax, 16
	jb	LBB43_273
# %bb.269:
	mov	ecx, dword ptr [esi + 80]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_272
# %bb.270:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB43_458
# %bb.271:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_272:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_273:
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 100], 15
	mov	byte ptr [esi + 80], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB43_458:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$279@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$279@?0?main@4HA":
LBB43_279:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$287@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$287@?0?main@4HA":
LBB43_287:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	cmp	dword ptr [esi + 32], 0
	je	LBB43_289
# %bb.288:
	mov	dword ptr [esi + 28], 0
	mov	dword ptr [esi + 32], 0
LBB43_289:
	mov	eax, dword ptr [esi + 20]
	mov	edi, dword ptr [esi + 24]
LBB43_290:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_291
# %bb.295:                              #   in Loop: Header=BB43_290 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_290
# %bb.296:                              #   in Loop: Header=BB43_290 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 20]
	jmp	LBB43_290
LBB43_291:
	test	eax, eax
	je	LBB43_299
# %bb.292:
	mov	ecx, dword ptr [esi + 24]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_298
# %bb.293:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_294
# %bb.297:
	add	ecx, 35
	mov	eax, edx
LBB43_298:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_299:
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 20], 0
	mov	eax, dword ptr [esi + 16]
	mov	dword ptr [esi + 16], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB43_294:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$300@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$300@?0?main@4HA":
LBB43_300:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 108]
	lea	ecx, [esi + 108]
	push	dword ptr [eax + 4]
	push	ecx
	call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
	push	24
	push	dword ptr [esi + 108]
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$301@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$301@?0?main@4HA":
LBB43_301:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$330@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$330@?0?main@4HA":
LBB43_330:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$344@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$344@?0?main@4HA":
LBB43_344:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$358@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$358@?0?main@4HA":
LBB43_358:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$372@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$372@?0?main@4HA":
LBB43_372:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$380@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$380@?0?main@4HA":
LBB43_380:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$384@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$384@?0?main@4HA":
LBB43_384:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 324]
	cmp	eax, 15
	jbe	LBB43_389
# %bb.385:
	mov	ecx, dword ptr [esi + 304]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_388
# %bb.386:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB43_459
# %bb.387:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_388:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_389:
	mov	dword ptr [esi + 320], 0
	mov	dword ptr [esi + 324], 15
	mov	byte ptr [esi + 304], 0
	mov	eax, dword ptr [esi + 300]
	cmp	eax, 15
	jbe	LBB43_394
# %bb.390:
	mov	ecx, dword ptr [esi + 280]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_393
# %bb.391:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB43_459
# %bb.392:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_393:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_394:
	mov	dword ptr [esi + 296], 0
	mov	dword ptr [esi + 300], 15
	mov	byte ptr [esi + 280], 0
	mov	eax, dword ptr [esi + 276]
	cmp	eax, 16
	jb	LBB43_399
# %bb.395:
	mov	ecx, dword ptr [esi + 256]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_398
# %bb.396:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB43_459
# %bb.397:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_398:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_399:
	mov	dword ptr [esi + 272], 0
	mov	dword ptr [esi + 276], 15
	mov	byte ptr [esi + 256], 0
	mov	eax, dword ptr [esi + 252]
	cmp	eax, 16
	jb	LBB43_404
# %bb.400:
	mov	ecx, dword ptr [esi + 232]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_403
# %bb.401:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB43_459
# %bb.402:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_403:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_404:
	cmp	dword ptr [esi + 196], 0
	je	LBB43_406
# %bb.405:
	mov	dword ptr [esi + 192], 0
	mov	dword ptr [esi + 196], 0
LBB43_406:
	mov	eax, dword ptr [esi + 184]
	mov	edi, dword ptr [esi + 188]
LBB43_407:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_408
# %bb.419:                              #   in Loop: Header=BB43_407 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_407
# %bb.420:                              #   in Loop: Header=BB43_407 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 184]
	jmp	LBB43_407
LBB43_408:
	test	eax, eax
	je	LBB43_413
# %bb.409:
	mov	ecx, dword ptr [esi + 188]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_412
# %bb.410:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_459
# %bb.411:
	add	ecx, 35
	mov	eax, edx
LBB43_412:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_413:
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 184], 0
	mov	eax, dword ptr [esi + 180]
	mov	dword ptr [esi + 180], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 176], 0
	je	LBB43_415
# %bb.414:
	mov	dword ptr [esi + 172], 0
	mov	dword ptr [esi + 176], 0
LBB43_415:
	mov	eax, dword ptr [esi + 164]
	mov	edi, dword ptr [esi + 168]
LBB43_416:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_421
# %bb.417:                              #   in Loop: Header=BB43_416 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_416
# %bb.418:                              #   in Loop: Header=BB43_416 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 164]
	jmp	LBB43_416
LBB43_421:
	test	eax, eax
	je	LBB43_426
# %bb.422:
	mov	ecx, dword ptr [esi + 168]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_425
# %bb.423:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_459
# %bb.424:
	add	ecx, 35
	mov	eax, edx
LBB43_425:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_426:
	mov	dword ptr [esi + 168], 0
	mov	dword ptr [esi + 164], 0
	mov	eax, dword ptr [esi + 160]
	mov	dword ptr [esi + 160], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 144], 0
	je	LBB43_428
# %bb.427:
	mov	dword ptr [esi + 140], 0
	mov	dword ptr [esi + 144], 0
LBB43_428:
	mov	eax, dword ptr [esi + 132]
	mov	edi, dword ptr [esi + 136]
LBB43_429:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_430
# %bb.436:                              #   in Loop: Header=BB43_429 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_429
# %bb.437:                              #   in Loop: Header=BB43_429 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 132]
	jmp	LBB43_429
LBB43_430:
	test	eax, eax
	je	LBB43_435
# %bb.431:
	mov	ecx, dword ptr [esi + 136]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_434
# %bb.432:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_459
# %bb.433:
	add	ecx, 35
	mov	eax, edx
LBB43_434:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_435:
	mov	dword ptr [esi + 136], 0
	mov	dword ptr [esi + 132], 0
	mov	eax, dword ptr [esi + 128]
	mov	dword ptr [esi + 128], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB43_459:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$438@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$438@?0?main@4HA":
LBB43_438:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	cmp	dword ptr [esi + 64], 0
	je	LBB43_440
# %bb.439:
	mov	dword ptr [esi + 60], 0
	mov	dword ptr [esi + 64], 0
LBB43_440:
	mov	eax, dword ptr [esi + 52]
	mov	edi, dword ptr [esi + 56]
LBB43_441:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB43_442
# %bb.446:                              #   in Loop: Header=BB43_441 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB43_441
# %bb.447:                              #   in Loop: Header=BB43_441 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 52]
	jmp	LBB43_441
LBB43_442:
	test	eax, eax
	je	LBB43_450
# %bb.443:
	mov	ecx, dword ptr [esi + 56]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB43_449
# %bb.444:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB43_445
# %bb.448:
	add	ecx, 35
	mov	eax, edx
LBB43_449:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_450:
	mov	dword ptr [esi + 56], 0
	mov	dword ptr [esi + 52], 0
	mov	eax, dword ptr [esi + 48]
	mov	dword ptr [esi + 48], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB43_445:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$451@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$451@?0?main@4HA":
LBB43_451:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 228]
	cmp	eax, 16
	jb	LBB43_456
# %bb.452:
	mov	ecx, dword ptr [esi + 208]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB43_455
# %bb.453:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB43_460
# %bb.454:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB43_455:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB43_456:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB43_460:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end14:
	.section	.xdata,"dr"
	.p2align	2
L__ehtable$main:
	.long	429065506                       # MagicNumber
	.long	19                              # MaxState
	.long	($stateUnwindMap$main)          # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
$stateUnwindMap$main:
	.long	-1                              # ToState
	.long	"?dtor$30@?0?main@4HA"          # Action
	.long	-1                              # ToState
	.long	"?dtor$91@?0?main@4HA"          # Action
	.long	-1                              # ToState
	.long	"?dtor$157@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$265@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$279@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$301@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$330@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$344@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$358@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$372@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$380@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$451@?0?main@4HA"         # Action
	.long	11                              # ToState
	.long	"?dtor$438@?0?main@4HA"         # Action
	.long	12                              # ToState
	.long	"?dtor$384@?0?main@4HA"         # Action
	.long	13                              # ToState
	.long	"?dtor$300@?0?main@4HA"         # Action
	.long	14                              # ToState
	.long	"?dtor$287@?0?main@4HA"         # Action
	.long	15                              # ToState
	.long	"?dtor$162@?0?main@4HA"         # Action
	.long	15                              # ToState
	.long	"?dtor$73@?0?main@4HA"          # Action
	.long	15                              # ToState
	.long	"?dtor$268@?0?main@4HA"         # Action
	.text
                                        # -- End function
	.def	 "??0fileInfo@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fileInfo@@QAE@XZ"
	.globl	"??0fileInfo@@QAE@XZ"           # -- Begin function ??0fileInfo@@QAE@XZ
	.p2align	4, 0x90
"??0fileInfo@@QAE@XZ":                  # @"??0fileInfo@@QAE@XZ"
Lfunc_begin15:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 28
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0fileInfo@@QAE@XZ"
	mov	edi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	lea	esi, [edi + 12]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [edi + 16], 0
	mov	dword ptr [edi + 12], 0
	mov	dword ptr [edi + 24], 0
	mov	dword ptr [edi + 20], 0
	mov	dword ptr [edi + 28], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [edi + 12], eax
	mov	dword ptr [eax], esi
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	mov	dword ptr [edi + 48], 0
	mov	dword ptr [edi + 44], 0
	mov	dword ptr [edi + 56], 0
	mov	dword ptr [edi + 52], 0
	mov	dword ptr [edi + 60], 0
	mov	dword ptr [edi + 36], 0
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.1:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax + 4], 0
	lea	edx, [ecx + 44]
	mov	dword ptr [ecx + 44], eax
	mov	dword ptr [eax], edx
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	mov	dword ptr [ecx + 68], 0
	mov	dword ptr [ecx + 64], 0
	mov	dword ptr [ecx + 76], 0
	mov	dword ptr [ecx + 72], 0
	mov	dword ptr [ecx + 80], 0
	mov	dword ptr [ebp - 16], 1
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.2:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax + 4], 0
	lea	ecx, [edx + 64]
	mov	dword ptr [edx + 64], eax
	mov	dword ptr [eax], ecx
	mov	byte ptr [edx + 84], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edx
	add	esp, 28
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$3@?0???0fileInfo@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???0fileInfo@@QAE@XZ@4HA":
LBB44_3:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, esi
	call	"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	mov	eax, dword ptr [esi]
	mov	dword ptr [esi], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$4@?0???0fileInfo@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0fileInfo@@QAE@XZ@4HA":
LBB44_4:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, esi
	call	"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	mov	eax, dword ptr [esi]
	mov	dword ptr [esi], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end15:
	.section	.xdata,"dr",associative,"??0fileInfo@@QAE@XZ"
	.p2align	2
"L__ehtable$??0fileInfo@@QAE@XZ":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??0fileInfo@@QAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0fileInfo@@QAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???0fileInfo@@QAE@XZ@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$3@?0???0fileInfo@@QAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??0fileInfo@@QAE@XZ"
                                        # -- End function
	.def	 "??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ"
	.globl	"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ
	.p2align	4, 0x90
"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
	mov	dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"], 0
	ret
                                        # -- End function
	.def	 "??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
	.globl	"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
	.p2align	4, 0x90
"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
	mov	dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"], 0
	ret
                                        # -- End function
	.def	 "??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
	.globl	"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
	.p2align	4, 0x90
"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
	mov	dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"], 0
	ret
                                        # -- End function
	.def	 "??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.globl	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z" # -- Begin function ??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z
	.p2align	4, 0x90
"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z": # @"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
Lfunc_begin16:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 24
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	js	LBB48_18
# %bb.1:
	mov	ebx, dword ptr [esi + 20]
	mov	ecx, edx
	mov	eax, -2147483648
	mov	dword ptr [ebp - 32], 2147483647 # 4-byte Folded Spill
	or	ecx, 15
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	js	LBB48_5
# %bb.2:
	mov	edx, ebx
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, ebx
	jb	LBB48_5
# %bb.3:
	add	edx, ebx
	cmp	ecx, edx
	cmovae	edx, ecx
	lea	eax, [edx + 1]
	cmp	eax, 4096
	jb	LBB48_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	jae	LBB48_19
LBB48_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB48_9:
	mov	ebx, dword ptr [ebp + 8]
	mov	eax, dword ptr [ebp + 16]
	mov	dword ptr [esi + 16], ebx
	mov	dword ptr [esi + 20], edx
	push	ebx
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12
	mov	byte ptr [edi + ebx], 0
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	ebx, 16
	jb	LBB48_17
# %bb.10:
	mov	eax, dword ptr [esi]
	lea	ecx, [ebx + 1]
	cmp	ecx, 4096
	jb	LBB48_16
# %bb.11:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB48_12
# %bb.15:
	add	ebx, 36
	mov	eax, edx
	mov	ecx, ebx
LBB48_16:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB48_17:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 24
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB48_6:
	test	eax, eax
	je	LBB48_7
# %bb.8:
	push	eax
	mov	edi, edx
	call	"??2@YAPAXI@Z"
	mov	edx, edi
	add	esp, 4
	mov	edi, eax
	jmp	LBB48_9
LBB48_7:
	xor	edi, edi
	mov	edx, -1
	jmp	LBB48_9
LBB48_18:
	call	"?_Xlen_string@std@@YAXXZ"
LBB48_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB48_19:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z@4HA":
LBB48_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end16:
	.section	.xdata,"dr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
                                        # -- End function
	.def	 "?_Xlen_string@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen_string@std@@YAXXZ"
	.globl	"?_Xlen_string@std@@YAXXZ"      # -- Begin function ?_Xlen_string@std@@YAXXZ
	.p2align	4, 0x90
"?_Xlen_string@std@@YAXXZ":             # @"?_Xlen_string@std@@YAXXZ"
# %bb.0:
	push	offset "??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "?_Throw_bad_array_new_length@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Throw_bad_array_new_length@std@@YAXXZ"
	.globl	"?_Throw_bad_array_new_length@std@@YAXXZ" # -- Begin function ?_Throw_bad_array_new_length@std@@YAXXZ
	.p2align	4, 0x90
"?_Throw_bad_array_new_length@std@@YAXXZ": # @"?_Throw_bad_array_new_length@std@@YAXXZ"
# %bb.0:
	sub	esp, 12
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 4], offset "??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
	mov	dword ptr [esp], offset "??_7bad_array_new_length@std@@6B@"
	mov	eax, esp
	push	offset "__TI3?AVbad_array_new_length@std@@"
	push	eax
	call	__CxxThrowException@8
                                        # -- End function
	.def	 "??0bad_array_new_length@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.globl	"??0bad_array_new_length@std@@QAE@ABV01@@Z" # -- Begin function ??0bad_array_new_length@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0bad_array_new_length@std@@QAE@ABV01@@Z": # @"??0bad_array_new_length@std@@QAE@ABV01@@Z"
Lfunc_begin17:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7bad_array_new_length@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA":
LBB51_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end17:
	.section	.xdata,"dr",associative,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0bad_array_new_length@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0bad_array_new_length@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0bad_array_new_length@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0bad_alloc@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.globl	"??0bad_alloc@std@@QAE@ABV01@@Z" # -- Begin function ??0bad_alloc@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0bad_alloc@std@@QAE@ABV01@@Z":       # @"??0bad_alloc@std@@QAE@ABV01@@Z"
Lfunc_begin18:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7bad_alloc@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA":
LBB52_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end18:
	.section	.xdata,"dr",associative,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0bad_alloc@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0bad_alloc@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0bad_alloc@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0bad_alloc@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0exception@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QAE@ABV01@@Z"
	.globl	"??0exception@std@@QAE@ABV01@@Z" # -- Begin function ??0exception@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0exception@std@@QAE@ABV01@@Z":       # @"??0exception@std@@QAE@ABV01@@Z"
Lfunc_begin19:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA":
LBB53_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end19:
	.section	.xdata,"dr",associative,"??0exception@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0exception@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0exception@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0exception@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0exception@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??1exception@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1exception@std@@UAE@XZ"
	.globl	"??1exception@std@@UAE@XZ"      # -- Begin function ??1exception@std@@UAE@XZ
	.p2align	4, 0x90
"??1exception@std@@UAE@XZ":             # @"??1exception@std@@UAE@XZ"
Lfunc_begin20:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1exception@std@@UAE@XZ"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	add	ecx, 4
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$2@?0???1exception@std@@UAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???1exception@std@@UAE@XZ@4HA":
LBB54_2:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end20:
	.section	.xdata,"dr",associative,"??1exception@std@@UAE@XZ"
	.p2align	2
"L__ehtable$??1exception@std@@UAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1exception@std@@UAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1exception@std@@UAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???1exception@std@@UAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1exception@std@@UAE@XZ"
                                        # -- End function
	.def	 "??_Gbad_array_new_length@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.globl	"??_Gbad_array_new_length@std@@UAEPAXI@Z" # -- Begin function ??_Gbad_array_new_length@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gbad_array_new_length@std@@UAEPAXI@Z": # @"??_Gbad_array_new_length@std@@UAEPAXI@Z"
Lfunc_begin21:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB55_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB55_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA":
LBB55_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end21:
	.section	.xdata,"dr",associative,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gbad_array_new_length@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gbad_array_new_length@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gbad_array_new_length@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "?what@exception@std@@UBEPBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@exception@std@@UBEPBDXZ"
	.globl	"?what@exception@std@@UBEPBDXZ" # -- Begin function ?what@exception@std@@UBEPBDXZ
	.p2align	4, 0x90
"?what@exception@std@@UBEPBDXZ":        # @"?what@exception@std@@UBEPBDXZ"
# %bb.0:
	mov	ecx, dword ptr [ecx + 4]
	mov	eax, offset "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	test	ecx, ecx
	cmovne	eax, ecx
	ret
                                        # -- End function
	.def	 "??_Gbad_alloc@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.globl	"??_Gbad_alloc@std@@UAEPAXI@Z"  # -- Begin function ??_Gbad_alloc@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gbad_alloc@std@@UAEPAXI@Z":         # @"??_Gbad_alloc@std@@UAEPAXI@Z"
Lfunc_begin22:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB57_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB57_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA":
LBB57_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end22:
	.section	.xdata,"dr",associative,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gbad_alloc@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gbad_alloc@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gbad_alloc@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??_Gexception@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gexception@std@@UAEPAXI@Z"
	.globl	"??_Gexception@std@@UAEPAXI@Z"  # -- Begin function ??_Gexception@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gexception@std@@UAEPAXI@Z":         # @"??_Gexception@std@@UAEPAXI@Z"
Lfunc_begin23:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB58_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB58_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA":
LBB58_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end23:
	.section	.xdata,"dr",associative,"??_Gexception@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gexception@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gexception@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gexception@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gexception@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.globl	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ" # -- Begin function ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	.p2align	4, 0x90
"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ": # @"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
Lfunc_begin24:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [esi], offset "??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	cmp	dword ptr [esi + 76], 0
	je	LBB59_3
# %bb.1:
	mov	eax, dword ptr [esi + 12]
	lea	ecx, [esi + 60]
	cmp	dword ptr [eax], ecx
	je	LBB59_2
LBB59_3:
	cmp	byte ptr [esi + 72], 0
	je	LBB59_19
LBB59_4:
	cmp	dword ptr [esi + 76], 0
	je	LBB59_18
# %bb.5:
	cmp	dword ptr [esi + 56], 0
	je	LBB59_17
# %bb.6:
	cmp	byte ptr [esi + 61], 0
	je	LBB59_17
# %bb.7:
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	ecx, esi
	push	-1
	call	dword ptr ["??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"+12]
# %bb.8:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	je	LBB59_17
# %bb.9:
	mov	ecx, dword ptr [esi + 56]
	lea	edx, [esi + 64]
	lea	eax, [ebp - 36]
	lea	edi, [ebp - 36]
	lea	ebx, [ebp - 68]
	mov	esi, dword ptr [ecx]
	push	edi
	push	eax
	push	ebx
	push	edx
	call	dword ptr [esi + 32]
# %bb.10:
	cmp	eax, 3
	je	LBB59_16
# %bb.11:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, 1
	lea	ecx, [ebp - 68]
	je	LBB59_14
# %bb.12:
	test	eax, eax
	jne	LBB59_17
# %bb.13:
	mov	byte ptr [esi + 61], 0
LBB59_14:
	mov	eax, dword ptr [ebp - 36]
	sub	eax, ecx
	je	LBB59_17
# %bb.15:
	push	dword ptr [esi + 76]
	push	eax
	push	1
	push	ecx
	call	_fwrite
	add	esp, 16
	jmp	LBB59_17
LBB59_2:
	mov	ecx, dword ptr [esi + 80]
	mov	edx, dword ptr [esi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [esi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [esi + 44]
	mov	dword ptr [eax], edx
	cmp	byte ptr [esi + 72], 0
	jne	LBB59_4
	jmp	LBB59_19
LBB59_16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	byte ptr [esi + 61], 0
LBB59_17:
	push	dword ptr [esi + 76]
	call	_fclose
	add	esp, 4
LBB59_18:
	lea	eax, [esi + 4]
	mov	byte ptr [esi + 72], 0
	mov	byte ptr [esi + 61], 0
	mov	dword ptr [esi + 12], eax
	lea	eax, [esi + 8]
	mov	dword ptr [esi + 16], eax
	lea	eax, [esi + 20]
	mov	dword ptr [esi + 28], eax
	lea	eax, [esi + 24]
	mov	dword ptr [esi + 32], eax
	lea	eax, [esi + 36]
	mov	dword ptr [esi + 44], eax
	lea	eax, [esi + 40]
	mov	dword ptr [esi + 48], eax
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 40], 0
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 36], 0
	mov	dword ptr [esi + 76], 0
	mov	eax, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"]
	mov	ecx, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"+4]
	mov	dword ptr [esi + 68], ecx
	mov	dword ptr [esi + 64], eax
	mov	dword ptr [esi + 56], 0
LBB59_19:
	mov	dword ptr [esi], offset "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	mov	esi, dword ptr [esi + 52]
	test	esi, esi
	je	LBB59_24
# %bb.20:
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB59_23
# %bb.21:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB59_23
# %bb.22:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB59_23:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB59_24:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$25@?0???1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$25@?0???1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ@4HA":
LBB59_25:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	call	"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	call	___std_terminate
Lfunc_end24:
	.section	.xdata,"dr",associative,"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.p2align	2
"L__ehtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$25@?0???1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
                                        # -- End function
	.def	 "??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.globl	"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z" # -- Begin function ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	.p2align	4, 0x90
"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z": # @"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
Lfunc_begin25:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	sub	esi, dword ptr [esi - 4]
	mov	eax, dword ptr [esi - 112]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + eax - 112], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [esi - 112]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [esi + eax - 116], ecx
	lea	ecx, [esi - 96]
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	mov	dword ptr [esi], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	push	esi
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	add	esi, -112
	cmp	dword ptr [ebp + 8], 0
	je	LBB60_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB60_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA":
LBB60_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end25:
	.section	.xdata,"dr",associative,"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.p2align	2
"L__ehtable$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
                                        # -- End function
	.def	 "??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.globl	"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ" # -- Begin function ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	.p2align	4, 0x90
"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ": # @"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
# %bb.0:
	push	esi
	mov	dword ptr [ecx], offset "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	mov	esi, dword ptr [ecx + 52]
	test	esi, esi
	je	LBB61_5
# %bb.1:
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB61_4
# %bb.2:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB61_4
# %bb.3:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB61_4:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB61_5:
	pop	esi
	ret
                                        # -- End function
	.def	 "??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.globl	"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z" # -- Begin function ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z": # @"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
# %bb.0:
	push	esi
	mov	esi, ecx
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	cmp	dword ptr [esp + 8], 0
	je	LBB62_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB62_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.globl	"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ" # -- Begin function ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	.p2align	4, 0x90
"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ": # @"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
# %bb.0:
	mov	eax, dword ptr [ecx + 76]
	test	eax, eax
	je	LBB63_2
# %bb.1:
	push	eax
	call	__lock_file
	add	esp, 4
LBB63_2:
	ret
                                        # -- End function
	.def	 "?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.globl	"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ" # -- Begin function ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	.p2align	4, 0x90
"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ": # @"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
# %bb.0:
	mov	eax, dword ptr [ecx + 76]
	test	eax, eax
	je	LBB64_2
# %bb.1:
	push	eax
	call	__unlock_file
	add	esp, 4
LBB64_2:
	ret
                                        # -- End function
	.def	 "?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.globl	"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z" # -- Begin function ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	.p2align	4, 0x90
"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z": # @"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 44
	mov	ebx, dword ptr [esp + 64]
	cmp	ebx, -1
	je	LBB65_1
# %bb.2:
	mov	eax, dword ptr [ecx + 32]
	mov	esi, ecx
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB65_5
# %bb.3:
	mov	edx, dword ptr [esi + 48]
	mov	edi, dword ptr [edx]
	test	edi, edi
	jle	LBB65_5
# %bb.4:
	dec	edi
	lea	esi, [ecx + 1]
	mov	dword ptr [edx], edi
	mov	dword ptr [eax], esi
	mov	byte ptr [ecx], bl
	jmp	LBB65_19
LBB65_5:
	cmp	dword ptr [esi + 76], 0
	je	LBB65_6
# %bb.7:
	mov	eax, dword ptr [esi + 12]
	lea	ecx, [esi + 60]
	cmp	dword ptr [eax], ecx
	je	LBB65_8
# %bb.9:
	mov	ecx, dword ptr [esi + 56]
	test	ecx, ecx
	je	LBB65_10
LBB65_11:
	mov	byte ptr [esp + 3], bl
	lea	edi, [esi + 64]
	lea	edx, [esp + 4]
	lea	eax, [esp + 12]
	mov	ebp, dword ptr [ecx]
	push	edx
	lea	edx, [esp + 48]
	push	edx
	push	eax
	lea	eax, [esp + 20]
	push	eax
	lea	eax, [esp + 20]
	push	eax
	lea	eax, [esp + 23]
	push	eax
	push	edi
	call	dword ptr [ebp + 28]
	mov	edi, -1
	cmp	eax, 2
	jae	LBB65_12
# %bb.14:
	mov	ebp, dword ptr [esp + 4]
	lea	eax, [esp + 12]
	sub	ebp, eax
	je	LBB65_16
# %bb.15:
	push	dword ptr [esi + 76]
	push	ebp
	push	1
	push	eax
	call	_fwrite
	add	esp, 16
	cmp	ebp, eax
	jne	LBB65_18
LBB65_16:
	mov	byte ptr [esi + 61], 1
	lea	eax, [esp + 3]
	cmp	dword ptr [esp + 8], eax
	mov	eax, -1
	jmp	LBB65_17
LBB65_1:
	xor	ebx, ebx
	jmp	LBB65_19
LBB65_6:
	mov	ebx, -1
	jmp	LBB65_19
LBB65_8:
	mov	ecx, dword ptr [esi + 80]
	mov	edx, dword ptr [esi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [esi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [esi + 44]
	mov	dword ptr [eax], edx
	mov	ecx, dword ptr [esi + 56]
	test	ecx, ecx
	jne	LBB65_11
LBB65_10:
	movsx	eax, bl
	push	dword ptr [esi + 76]
	push	eax
	call	_fputc
	add	esp, 8
	cmp	eax, -1
	cmovne	eax, ebx
	jmp	LBB65_20
LBB65_12:
	cmp	eax, 3
	jne	LBB65_18
# %bb.13:
	movsx	eax, byte ptr [esp + 3]
	push	dword ptr [esi + 76]
	push	eax
	call	_fputc
	add	esp, 8
	cmp	eax, -1
LBB65_17:
	cmove	ebx, eax
	mov	edi, ebx
LBB65_18:
	mov	ebx, edi
LBB65_19:
	mov	eax, ebx
LBB65_20:
	add	esp, 44
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
                                        # -- End function
	.def	 "?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.globl	"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z" # -- Begin function ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	.p2align	4, 0x90
"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z": # @"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	eax, dword ptr [ecx + 28]
	mov	esi, ecx
	mov	ebx, dword ptr [esp + 16]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB66_6
# %bb.1:
	mov	edx, dword ptr [esi + 12]
	cmp	dword ptr [edx], ecx
	jae	LBB66_6
# %bb.2:
	cmp	ebx, -1
	je	LBB66_3
# %bb.4:
	movzx	edx, byte ptr [ecx - 1]
	cmp	edx, ebx
	je	LBB66_5
LBB66_6:
	cmp	ebx, -1
	mov	edi, -1
	je	LBB66_16
# %bb.7:
	mov	edx, dword ptr [esi + 76]
	test	edx, edx
	je	LBB66_16
# %bb.8:
	cmp	dword ptr [esi + 56], 0
	je	LBB66_9
# %bb.11:
	lea	edx, [esi + 60]
	cmp	ecx, edx
	je	LBB66_16
LBB66_12:
	mov	byte ptr [esi + 60], bl
	mov	ecx, dword ptr [esi + 12]
	mov	edi, dword ptr [ecx]
	cmp	edi, edx
	je	LBB66_14
# %bb.13:
	mov	dword ptr [esi + 80], edi
	mov	eax, dword ptr [eax]
	mov	edi, dword ptr [esi + 44]
	add	eax, dword ptr [edi]
	mov	dword ptr [esi + 84], eax
LBB66_14:
	mov	dword ptr [ecx], edx
	mov	eax, dword ptr [esi + 28]
	mov	dword ptr [eax], edx
	mov	eax, dword ptr [esi + 44]
	mov	dword ptr [eax], 1
	jmp	LBB66_15
LBB66_9:
	movzx	eax, bl
	push	edx
	push	eax
	call	_ungetc
	add	esp, 8
	cmp	eax, -1
	jne	LBB66_15
# %bb.10:
	mov	eax, dword ptr [esi + 28]
	mov	ecx, dword ptr [eax]
	lea	edx, [esi + 60]
	cmp	ecx, edx
	jne	LBB66_12
	jmp	LBB66_16
LBB66_3:
	xor	ebx, ebx
LBB66_5:
	mov	edx, dword ptr [esi + 44]
	dec	ecx
	inc	dword ptr [edx]
	mov	dword ptr [eax], ecx
LBB66_15:
	mov	edi, ebx
LBB66_16:
	mov	eax, edi
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ"
	.globl	"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ" # -- Begin function ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	.p2align	4, 0x90
"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ": # @"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ"
# %bb.0:
	xor	eax, eax
	xor	edx, edx
	ret
                                        # -- End function
	.def	 "?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	push	edi
	push	esi
	mov	eax, dword ptr [ecx + 28]
	mov	esi, ecx
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB68_3
# %bb.1:
	mov	ecx, dword ptr [esi + 44]
	cmp	dword ptr [ecx], 0
	jle	LBB68_3
# %bb.2:
	movzx	edi, byte ptr [eax]
	mov	eax, edi
	pop	esi
	pop	edi
	ret
LBB68_3:
	mov	eax, dword ptr [esi]
	mov	ecx, esi
	call	dword ptr [eax + 28]
	cmp	eax, -1
	je	LBB68_4
# %bb.5:
	mov	edi, eax
	mov	eax, dword ptr [esi]
	mov	ecx, esi
	push	edi
	call	dword ptr [eax + 16]
	mov	eax, edi
	pop	esi
	pop	edi
	ret
LBB68_4:
	mov	edi, -1
	mov	eax, edi
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
Lfunc_begin26:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 60
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	mov	edi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [edi + 28]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB69_3
# %bb.1:
	mov	edx, dword ptr [edi + 44]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jle	LBB69_3
# %bb.2:
	dec	esi
	mov	dword ptr [edx], esi
	lea	esi, [ecx + 1]
	mov	dword ptr [eax], esi
	movzx	esi, byte ptr [ecx]
	jmp	LBB69_43
LBB69_3:
	cmp	dword ptr [edi + 76], 0
	je	LBB69_23
# %bb.4:
	mov	eax, dword ptr [edi + 12]
	lea	ecx, [edi + 60]
	cmp	dword ptr [eax], ecx
	je	LBB69_24
# %bb.5:
	cmp	dword ptr [edi + 56], 0
	je	LBB69_25
LBB69_6:
	mov	dword ptr [ebp - 36], 15
	mov	dword ptr [ebp - 40], 0
	mov	byte ptr [ebp - 56], 0
	push	dword ptr [edi + 76]
	call	_fgetc
	add	esp, 4
	cmp	eax, -1
	je	LBB69_29
# %bb.7:
	lea	ecx, [edi + 64]
	mov	dword ptr [ebp - 64], edi       # 4-byte Spill
	mov	dword ptr [ebp - 72], ecx       # 4-byte Spill
	jmp	LBB69_11
	.p2align	4, 0x90
LBB69_8:                                #   in Loop: Header=BB69_11 Depth=1
	mov	ecx, dword ptr [ebp - 40]
	lea	edx, [ebp - 56]
LBB69_9:                                #   in Loop: Header=BB69_11 Depth=1
	sub	eax, edx
	cmp	ecx, eax
	cmovb	eax, ecx
	sub	ecx, eax
	add	eax, edx
	mov	dword ptr [ebp - 40], ecx
	inc	ecx
	push	ecx
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	push	dword ptr [edi + 76]
	call	_fgetc
	add	esp, 4
	cmp	eax, -1
	je	LBB69_29
LBB69_11:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [ebp - 40]
	mov	edx, dword ptr [ebp - 36]
	cmp	ecx, edx
	jae	LBB69_15
# %bb.12:                               #   in Loop: Header=BB69_11 Depth=1
	lea	esi, [ecx + 1]
	cmp	edx, 15
	lea	edx, [ebp - 56]
	mov	dword ptr [ebp - 40], esi
	jbe	LBB69_14
# %bb.13:                               #   in Loop: Header=BB69_11 Depth=1
	mov	edx, dword ptr [ebp - 56]
LBB69_14:                               #   in Loop: Header=BB69_11 Depth=1
	mov	byte ptr [edx + ecx], al
	mov	byte ptr [edx + ecx + 1], 0
	mov	dword ptr [ebp - 16], 0
	jmp	LBB69_16
	.p2align	4, 0x90
LBB69_15:                               #   in Loop: Header=BB69_11 Depth=1
	mov	dword ptr [ebp - 16], 0
	sub	esp, 12
	movzx	ecx, byte ptr [ebp - 68]
	movsx	eax, al
	mov	byte ptr [esp + 4], cl
	lea	ecx, [ebp - 56]
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [esp], 1
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	mov	edi, dword ptr [ebp - 64]       # 4-byte Reload
LBB69_16:                               #   in Loop: Header=BB69_11 Depth=1
	mov	ecx, dword ptr [edi + 56]
	cmp	dword ptr [ebp - 36], 15
	lea	eax, [ebp - 56]
	jbe	LBB69_18
# %bb.17:                               #   in Loop: Header=BB69_11 Depth=1
	mov	eax, dword ptr [ebp - 56]
LBB69_18:                               #   in Loop: Header=BB69_11 Depth=1
	mov	edx, dword ptr [ebp - 40]
	mov	esi, dword ptr [ecx]
	lea	edi, [ebp - 68]
	add	edx, eax
	push	edi
	lea	edi, [ebp - 28]
	push	edi
	lea	edi, [ebp - 29]
	push	edi
	lea	edi, [ebp - 60]
	push	edi
	push	edx
	push	eax
	push	dword ptr [ebp - 72]            # 4-byte Folded Reload
	call	dword ptr [esi + 24]
	mov	edi, dword ptr [ebp - 64]       # 4-byte Reload
# %bb.19:                               #   in Loop: Header=BB69_11 Depth=1
	cmp	eax, 2
	jae	LBB69_26
# %bb.20:                               #   in Loop: Header=BB69_11 Depth=1
	lea	eax, [ebp - 29]
	cmp	dword ptr [ebp - 68], eax
	jne	LBB69_30
# %bb.21:                               #   in Loop: Header=BB69_11 Depth=1
	mov	eax, dword ptr [ebp - 60]
	cmp	dword ptr [ebp - 36], 15
	jbe	LBB69_8
# %bb.22:                               #   in Loop: Header=BB69_11 Depth=1
	mov	edx, dword ptr [ebp - 56]
	mov	ecx, dword ptr [ebp - 40]
	jmp	LBB69_9
LBB69_23:
	mov	esi, -1
	jmp	LBB69_43
LBB69_24:
	mov	ecx, dword ptr [edi + 80]
	mov	edx, dword ptr [edi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [edi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [edi + 44]
	mov	dword ptr [eax], edx
	cmp	dword ptr [edi + 56], 0
	jne	LBB69_6
LBB69_25:
	push	dword ptr [edi + 76]
	call	_fgetc
	add	esp, 4
	mov	edx, dword ptr [ebp - 24]
	cmp	eax, -1
	movzx	ecx, al
	cmovne	eax, ecx
	mov	dword ptr fs:[0], edx
	jmp	LBB69_44
LBB69_26:
	cmp	eax, 3
	jne	LBB69_29
# %bb.27:
	cmp	dword ptr [ebp - 36], 15
	jbe	LBB69_37
# %bb.28:
	mov	eax, dword ptr [ebp - 56]
	jmp	LBB69_38
LBB69_29:
	mov	esi, -1
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jae	LBB69_39
	jmp	LBB69_43
LBB69_30:
	cmp	dword ptr [ebp - 36], 15
	jbe	LBB69_32
# %bb.31:
	mov	esi, dword ptr [ebp - 56]
	jmp	LBB69_33
LBB69_32:
	lea	esi, [ebp - 56]
LBB69_33:
	add	esi, dword ptr [ebp - 40]
	mov	eax, dword ptr [ebp - 60]
	sub	esi, eax
	test	esi, esi
	jle	LBB69_36
# %bb.34:
	movsx	eax, byte ptr [esi + eax - 1]
	push	dword ptr [edi + 76]
	push	eax
	call	_ungetc
	add	esp, 8
	cmp	esi, 1
	je	LBB69_36
	.p2align	4, 0x90
LBB69_35:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebp - 60]
	movsx	eax, byte ptr [eax + esi - 2]
	push	dword ptr [edi + 76]
	push	eax
	call	_ungetc
	add	esp, 8
	dec	esi
	cmp	esi, 1
	jg	LBB69_35
LBB69_36:
	movzx	esi, byte ptr [ebp - 29]
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jae	LBB69_39
	jmp	LBB69_43
LBB69_37:
	lea	eax, [ebp - 56]
LBB69_38:
	movsx	esi, byte ptr [eax]
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jb	LBB69_43
LBB69_39:
	mov	ecx, dword ptr [ebp - 56]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB69_42
# %bb.40:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB69_45
# %bb.41:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB69_42:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB69_43:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
LBB69_44:
	add	esp, 60
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB69_45:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.46:
	.def	 "?dtor$47@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$47@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA":
LBB69_47:
	push	ebp
	sub	esp, 28
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$48@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$48@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA":
LBB69_48:
	push	ebp
	sub	esp, 28
	add	ebp, 12
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jb	LBB69_53
# %bb.49:
	mov	ecx, dword ptr [ebp - 56]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB69_52
# %bb.50:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB69_54
# %bb.51:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB69_52:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB69_53:
	add	esp, 28
	pop	ebp
	ret                                     # CLEANUPRET
LBB69_54:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end26:
	.section	.xdata,"dr",associative,"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.p2align	2
"L__ehtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ":
	.long	-1                              # ToState
	.long	"?dtor$48@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$47@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA" # Action
	.section	.text,"xr",discard,"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
                                        # -- End function
	.def	 "?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
	.globl	"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z" # -- Begin function ?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	.p2align	4, 0x90
"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z": # @"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	edi, dword ptr [esp + 36]
	mov	ebx, dword ptr [esp + 32]
	cmp	ebx, 1
	mov	eax, edi
	sbb	eax, 0
	jl	LBB70_1
# %bb.2:
	mov	edx, dword ptr [esp + 28]
	cmp	dword ptr [ecx + 56], 0
	mov	ebp, ecx
	je	LBB70_11
# %bb.3:
	mov	esi, ebx
	mov	dword ptr [esp + 4], ebp        # 4-byte Spill
	jmp	LBB70_4
	.p2align	4, 0x90
LBB70_6:                                #   in Loop: Header=BB70_4 Depth=1
	mov	ebp, ebx
	sar	ebp, 31
	cmp	ebx, esi
	mov	ecx, ebp
	sbb	ecx, edi
	cmovge	ebp, edi
	cmovge	ebx, esi
	push	ebx
	push	eax
	push	edx
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	call	_memcpy
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	add	esp, 12
	add	edx, ebx
	sub	esi, ebx
	sbb	edi, ebp
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, dword ptr [ebp + 44]
	sub	dword ptr [eax], ebx
	mov	eax, dword ptr [ebp + 28]
	add	dword ptr [eax], ebx
LBB70_9:                                #   in Loop: Header=BB70_4 Depth=1
	mov	eax, esi
	neg	eax
	mov	eax, 0
	sbb	eax, edi
	jge	LBB70_10
LBB70_4:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebp + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB70_7
# %bb.5:                                #   in Loop: Header=BB70_4 Depth=1
	mov	ecx, dword ptr [ebp + 44]
	mov	ebx, dword ptr [ecx]
	test	ebx, ebx
	jg	LBB70_6
LBB70_7:                                #   in Loop: Header=BB70_4 Depth=1
	mov	eax, dword ptr [ebp]
	mov	ecx, ebp
	mov	ebx, edx
	call	dword ptr [eax + 28]
	cmp	eax, -1
	je	LBB70_10
# %bb.8:                                #   in Loop: Header=BB70_4 Depth=1
	mov	edx, ebx
	mov	byte ptr [ebx], al
	inc	edx
	add	esi, -1
	adc	edi, -1
	jmp	LBB70_9
LBB70_10:
	mov	ebx, dword ptr [esp + 32]
	mov	eax, dword ptr [esp + 36]
	sub	ebx, esi
	sbb	eax, edi
	mov	edi, eax
	jmp	LBB70_27
LBB70_1:
	xor	ebx, ebx
	xor	edi, edi
	jmp	LBB70_27
LBB70_11:
	mov	eax, dword ptr [ebp + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB70_12
# %bb.13:
	mov	ecx, dword ptr [ebp + 44]
	mov	edi, dword ptr [ecx]
	test	edi, edi
	je	LBB70_14
# %bb.15:
	cmp	edi, ebx
	cmovae	edi, ebx
	push	edi
	push	eax
	push	edx
	mov	esi, edx
	call	_memcpy
	mov	edx, esi
	add	esp, 12
	mov	eax, dword ptr [ebp + 44]
	mov	esi, ebx
	add	edx, edi
	sub	esi, edi
	sub	dword ptr [eax], edi
	mov	eax, dword ptr [ebp + 28]
	add	dword ptr [eax], edi
	jmp	LBB70_16
LBB70_12:
	mov	esi, ebx
	cmp	dword ptr [ebp + 76], 0
	jne	LBB70_18
	jmp	LBB70_26
LBB70_14:
	mov	esi, ebx
LBB70_16:
	mov	edi, dword ptr [esp + 36]
	cmp	dword ptr [ebp + 76], 0
	je	LBB70_26
LBB70_18:
	mov	eax, dword ptr [ebp + 12]
	lea	ecx, [ebp + 60]
	cmp	dword ptr [eax], ecx
	jne	LBB70_20
# %bb.19:
	mov	ecx, dword ptr [ebp + 80]
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	edx, dword ptr [ebp + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [ebp + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [ebp + 44]
	mov	dword ptr [eax], edx
	mov	edx, dword ptr [esp]            # 4-byte Reload
	.p2align	4, 0x90
LBB70_20:                               # =>This Inner Loop Header: Depth=1
	cmp	esi, 4096
	jb	LBB70_22
# %bb.21:                               #   in Loop: Header=BB70_20 Depth=1
	push	dword ptr [ebp + 76]
	push	4095
	push	1
	push	edx
	mov	ebx, edx
	call	_fread
	mov	edx, ebx
	add	esp, 16
	add	edx, eax
	sub	esi, eax
	cmp	eax, 4095
	je	LBB70_20
	jmp	LBB70_25
LBB70_22:
	test	esi, esi
	je	LBB70_23
# %bb.24:
	push	dword ptr [ebp + 76]
	push	esi
	push	1
	push	edx
	call	_fread
	add	esp, 16
	sub	esi, eax
	jmp	LBB70_25
LBB70_23:
	xor	esi, esi
LBB70_25:
	mov	ebx, dword ptr [esp + 32]
LBB70_26:
	sub	ebx, esi
	sbb	edi, 0
LBB70_27:
	mov	eax, ebx
	mov	edx, edi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
	.globl	"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z" # -- Begin function ?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	.p2align	4, 0x90
"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z": # @"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	esi, dword ptr [esp + 40]
	mov	edi, dword ptr [esp + 36]
	mov	ebx, dword ptr [esp + 32]
	cmp	dword ptr [ecx + 56], 0
	je	LBB71_9
# %bb.1:
	cmp	edi, 1
	mov	eax, esi
	mov	edx, edi
	sbb	eax, 0
	jl	LBB71_20
# %bb.2:
	mov	dword ptr [esp], ecx            # 4-byte Spill
	mov	edx, dword ptr [esp + 36]
	mov	esi, dword ptr [esp + 40]
	mov	edi, dword ptr [esp]            # 4-byte Reload
	jmp	LBB71_5
	.p2align	4, 0x90
LBB71_3:                                #   in Loop: Header=BB71_5 Depth=1
	mov	edi, ebx
	mov	ebx, ebp
	sar	ebx, 31
	cmp	ebp, edx
	mov	ecx, ebx
	sbb	ecx, esi
	cmovge	ebx, esi
	cmovge	ebp, edx
	push	ebp
	push	edi
	push	eax
	mov	dword ptr [esp + 16], esi       # 4-byte Spill
	mov	esi, edx
	call	_memcpy
	mov	edx, esi
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	edi, ebp
	sub	edx, ebp
	sbb	esi, ebx
	mov	ebx, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [edi + 48]
	sub	dword ptr [eax], ebp
	mov	eax, dword ptr [edi + 32]
	add	dword ptr [eax], ebp
LBB71_4:                                #   in Loop: Header=BB71_5 Depth=1
	mov	eax, edx
	neg	eax
	mov	eax, 0
	sbb	eax, esi
	jge	LBB71_20
LBB71_5:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [edi + 32]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB71_7
# %bb.6:                                #   in Loop: Header=BB71_5 Depth=1
	mov	ecx, dword ptr [edi + 48]
	mov	ebp, dword ptr [ecx]
	test	ebp, ebp
	jg	LBB71_3
LBB71_7:                                #   in Loop: Header=BB71_5 Depth=1
	movzx	eax, byte ptr [ebx]
	mov	ebp, edx
	mov	edx, dword ptr [edi]
	mov	ecx, edi
	push	eax
	call	dword ptr [edx + 12]
	cmp	eax, -1
	je	LBB71_13
# %bb.8:                                #   in Loop: Header=BB71_5 Depth=1
	mov	edx, ebp
	inc	ebx
	add	edx, -1
	adc	esi, -1
	jmp	LBB71_4
LBB71_9:
	mov	eax, dword ptr [ecx + 32]
	mov	ebp, ecx
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB71_15
# %bb.10:
	cmp	edi, 1
	mov	ecx, esi
	sbb	ecx, 0
	jl	LBB71_15
# %bb.11:
	mov	ecx, dword ptr [ebp + 48]
	mov	ebx, ebp
	mov	ebp, dword ptr [ecx]
	test	ebp, ebp
	jle	LBB71_14
# %bb.12:
	mov	edx, ebp
	mov	ecx, esi
	sar	edx, 31
	cmp	edi, ebp
	sbb	ecx, edx
	cmovl	edx, esi
	cmovl	ebp, edi
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	push	ebp
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	mov	ebx, dword ptr [esp + 36]
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	add	ebx, ebp
	sub	edi, ebp
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	sbb	esi, dword ptr [esp + 8]        # 4-byte Folded Reload
	mov	eax, dword ptr [ecx + 48]
	sub	dword ptr [eax], ebp
	mov	eax, dword ptr [ecx + 32]
	add	dword ptr [eax], ebp
	mov	ebp, ecx
	jmp	LBB71_15
LBB71_13:
	mov	edx, ebp
	jmp	LBB71_20
LBB71_14:
	mov	ebp, ebx
LBB71_15:
	cmp	edi, 1
	mov	eax, esi
	mov	ecx, edi
	sbb	eax, 0
	jl	LBB71_19
# %bb.16:
	mov	eax, dword ptr [ebp + 76]
	test	eax, eax
	je	LBB71_19
# %bb.17:
	push	eax
	mov	edi, esi
	mov	esi, ecx
	push	ecx
	push	1
	push	dword ptr [esp + 16]            # 4-byte Folded Reload
	call	_fwrite
	mov	edx, esi
	mov	esi, edi
	add	esp, 16
	sub	edx, eax
	sbb	esi, 0
	jmp	LBB71_20
LBB71_19:
	mov	edx, ecx
LBB71_20:
	mov	eax, dword ptr [esp + 36]
	sub	eax, edx
	mov	edx, dword ptr [esp + 40]
	sbb	edx, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
	.globl	"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z" # -- Begin function ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	.p2align	4, 0x90
"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z": # @"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 56
	mov	esi, dword ptr [ebp + 8]
	mov	edx, dword ptr [ebp + 16]
	mov	ebx, dword ptr [ebp + 12]
	cmp	dword ptr [ebp + 20], 1
	mov	edi, ecx
	lea	ecx, [ecx + 60]
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	jne	LBB72_3
# %bb.1:
	mov	eax, dword ptr [edi + 28]
	cmp	dword ptr [eax], ecx
	jne	LBB72_3
# %bb.2:
	xor	eax, eax
	cmp	dword ptr [edi + 56], 0
	sete	al
	sub	ebx, eax
	sbb	edx, 0
LBB72_3:
	cmp	dword ptr [edi + 76], 0
	je	LBB72_18
# %bb.4:
	cmp	dword ptr [edi + 56], 0
	je	LBB72_14
# %bb.5:
	cmp	byte ptr [edi + 61], 0
	je	LBB72_14
# %bb.6:
	mov	eax, dword ptr [edi]
	mov	ecx, edi
	push	-1
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	call	dword ptr [eax + 12]
	cmp	eax, -1
	je	LBB72_18
# %bb.7:
	mov	ecx, dword ptr [edi + 56]
	lea	edx, [edi + 64]
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esp + 12]
	push	eax
	lea	eax, [esp + 52]
	push	eax
	lea	eax, [esp + 24]
	push	eax
	push	edx
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	call	dword ptr [eax + 32]
	cmp	eax, 3
	je	LBB72_23
# %bb.8:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	cmp	eax, 1
	lea	ecx, [esp + 16]
	je	LBB72_11
# %bb.9:
	test	eax, eax
	jne	LBB72_18
# %bb.10:
	mov	byte ptr [edi + 61], 0
LBB72_11:
	mov	eax, dword ptr [esp + 12]
	sub	eax, ecx
	je	LBB72_13
# %bb.12:
	push	dword ptr [edi + 76]
	push	eax
	push	1
	push	ecx
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	call	_fwrite
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	add	esp, 16
	cmp	dword ptr [esp], eax            # 4-byte Folded Reload
	jne	LBB72_18
LBB72_13:
	cmp	byte ptr [edi + 61], 0
	jne	LBB72_18
	jmp	LBB72_14
LBB72_23:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	byte ptr [edi + 61], 0
LBB72_14:
	cmp	dword ptr [ebp + 20], 1
	jne	LBB72_16
# %bb.15:
	mov	eax, ebx
	or	eax, edx
	je	LBB72_17
LBB72_16:
	push	dword ptr [ebp + 20]
	push	edx
	push	ebx
	push	dword ptr [edi + 76]
	call	__fseeki64
	add	esp, 16
	test	eax, eax
	jne	LBB72_18
LBB72_17:
	lea	eax, [esp + 16]
	push	eax
	push	dword ptr [edi + 76]
	call	_fgetpos
	add	esp, 8
	test	eax, eax
	je	LBB72_19
LBB72_18:
	mov	dword ptr [esi + 4], -1
	mov	dword ptr [esi], -1
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 16], 0
LBB72_22:
	mov	eax, esi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	20
LBB72_19:
	mov	eax, dword ptr [edi + 12]
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [eax], ecx
	jne	LBB72_21
# %bb.20:
	mov	ecx, dword ptr [edi + 80]
	mov	edx, dword ptr [edi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [edi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [edi + 44]
	mov	dword ptr [eax], edx
LBB72_21:
	mov	edx, dword ptr [edi + 64]
	mov	eax, dword ptr [esp + 16]
	mov	edi, dword ptr [edi + 68]
	mov	ecx, dword ptr [esp + 20]
	mov	dword ptr [esi], eax
	mov	dword ptr [esi + 4], ecx
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], edx
	mov	dword ptr [esi + 20], edi
	jmp	LBB72_22
                                        # -- End function
	.def	 "?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
	.globl	"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z" # -- Begin function ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	.p2align	4, 0x90
"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z": # @"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 64
	mov	eax, dword ptr [ebp + 20]
	mov	edi, ecx
	mov	ecx, dword ptr [ebp + 24]
	mov	edx, dword ptr [ebp + 32]
	mov	esi, dword ptr [ebp + 8]
	mov	ebx, dword ptr [ebp + 28]
	add	eax, dword ptr [ebp + 12]
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	adc	ecx, dword ptr [ebp + 16]
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [esp + 12], ecx
	cmp	dword ptr [edi + 76], 0
	je	LBB73_12
# %bb.1:
	cmp	dword ptr [edi + 56], 0
	je	LBB73_11
# %bb.2:
	cmp	byte ptr [edi + 61], 0
	je	LBB73_11
# %bb.3:
	mov	eax, dword ptr [edi]
	mov	ecx, edi
	push	-1
	call	dword ptr [eax + 12]
	cmp	eax, -1
	je	LBB73_12
# %bb.4:
	mov	ecx, dword ptr [edi + 56]
	lea	edx, [edi + 64]
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	lea	eax, [esp + 24]
	push	eax
	lea	eax, [esp + 64]
	push	eax
	lea	eax, [esp + 36]
	push	eax
	push	edx
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	call	dword ptr [eax + 32]
	cmp	eax, 3
	je	LBB73_17
# %bb.5:
	cmp	eax, 1
	lea	ecx, [esp + 28]
	je	LBB73_8
# %bb.6:
	test	eax, eax
	jne	LBB73_12
# %bb.7:
	mov	byte ptr [edi + 61], 0
LBB73_8:
	mov	eax, dword ptr [esp + 24]
	sub	eax, ecx
	je	LBB73_10
# %bb.9:
	push	dword ptr [edi + 76]
	push	eax
	push	1
	push	ecx
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	call	_fwrite
	add	esp, 16
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	jne	LBB73_12
LBB73_10:
	cmp	byte ptr [edi + 61], 0
	jne	LBB73_12
	jmp	LBB73_11
LBB73_17:
	mov	byte ptr [edi + 61], 0
LBB73_11:
	lea	eax, [esp + 8]
	push	eax
	push	dword ptr [edi + 76]
	call	_fsetpos
	add	esp, 8
	test	eax, eax
	je	LBB73_13
LBB73_12:
	mov	dword ptr [esi + 4], -1
	mov	dword ptr [esi], -1
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 16], 0
LBB73_16:
	mov	eax, esi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	32
LBB73_13:
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [edi + 64], ebx
	lea	ecx, [edi + 60]
	mov	dword ptr [edi + 68], edx
	mov	eax, dword ptr [edi + 12]
	cmp	dword ptr [eax], ecx
	jne	LBB73_15
# %bb.14:
	mov	ecx, dword ptr [edi + 80]
	mov	edx, dword ptr [edi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [edi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [edi + 44]
	mov	dword ptr [eax], edx
	mov	ebx, dword ptr [edi + 64]
	mov	edx, dword ptr [edi + 68]
LBB73_15:
	mov	eax, dword ptr [esp + 8]
	mov	ecx, dword ptr [esp + 12]
	mov	dword ptr [esi], eax
	mov	dword ptr [esi + 4], ecx
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], ebx
	mov	dword ptr [esi + 20], edx
	jmp	LBB73_16
                                        # -- End function
	.def	 "?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z"
	.globl	"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z" # -- Begin function ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	.p2align	4, 0x90
"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z": # @"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	eax, dword ptr [ecx + 76]
	xor	edi, edi
	test	eax, eax
	je	LBB74_5
# %bb.1:
	mov	edx, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 40]
	mov	ebx, dword ptr [esp + 32]
	mov	esi, ecx
	xor	ecx, ecx
	or	ebp, edx
	or	ebp, ebx
	sete	cl
	shl	ecx, 2
	push	edx
	push	ecx
	push	ebx
	push	eax
	call	_setvbuf
	add	esp, 16
	test	eax, eax
	jne	LBB74_5
# %bb.2:
	mov	edi, dword ptr [esi + 76]
	lea	eax, [esi + 4]
	lea	ecx, [esi + 8]
	mov	byte ptr [esi + 72], 1
	mov	byte ptr [esi + 61], 0
	lea	edx, [esi + 20]
	mov	dword ptr [esi + 12], eax
	mov	dword ptr [esi + 16], ecx
	lea	ecx, [esi + 24]
	mov	dword ptr [esi + 28], edx
	lea	edx, [esi + 36]
	mov	dword ptr [esi + 32], ecx
	lea	ecx, [esi + 40]
	mov	dword ptr [esi + 44], edx
	mov	dword ptr [esi + 48], ecx
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 40], 0
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 36], 0
	test	edi, edi
	je	LBB74_4
# %bb.3:
	mov	eax, esp
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp], 0
	lea	ecx, [esp + 4]
	lea	edx, [esp + 8]
	push	eax
	push	ecx
	push	edx
	push	edi
	call	__get_stream_buffer_pointers
	add	esp, 16
	mov	eax, dword ptr [esp]
	mov	ecx, dword ptr [esp + 4]
	mov	edx, dword ptr [esp + 8]
	mov	dword ptr [esi + 12], edx
	mov	dword ptr [esi + 16], edx
	mov	dword ptr [esi + 28], ecx
	mov	dword ptr [esi + 32], ecx
	mov	dword ptr [esi + 44], eax
	mov	dword ptr [esi + 48], eax
LBB74_4:
	mov	dword ptr [esi + 76], edi
	mov	edi, esi
	mov	eax, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"]
	mov	ecx, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"+4]
	mov	dword ptr [esi + 68], ecx
	mov	dword ptr [esi + 64], eax
	mov	dword ptr [esi + 56], 0
LBB74_5:
	mov	eax, edi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	push	esi
	cmp	dword ptr [ecx + 76], 0
	je	LBB75_3
# %bb.1:
	mov	eax, dword ptr [ecx]
	mov	esi, ecx
	push	-1
	call	dword ptr [eax + 12]
	cmp	eax, -1
	je	LBB75_3
# %bb.2:
	push	dword ptr [esi + 76]
	call	_fflush
	add	esp, 4
	sar	eax, 31
	pop	esi
	ret
LBB75_3:
	xor	eax, eax
	pop	esi
	ret
                                        # -- End function
	.def	 "?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"
	.globl	"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z" # -- Begin function ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
	.p2align	4, 0x90
"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z": # @"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"
# %bb.0:
	push	edi
	push	esi
	mov	esi, ecx
	push	dword ptr [esp + 12]
	call	"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	add	esp, 4
	mov	edi, eax
	mov	eax, dword ptr [eax]
	mov	ecx, edi
	call	dword ptr [eax + 12]
	test	al, al
	je	LBB76_2
# %bb.1:
	mov	dword ptr [esi + 56], 0
	pop	esi
	pop	edi
	ret	4
LBB76_2:
	lea	eax, [esi + 4]
	lea	ecx, [esi + 8]
	mov	dword ptr [esi + 56], edi
	lea	edx, [esi + 20]
	mov	dword ptr [esi + 12], eax
	mov	dword ptr [esi + 16], ecx
	lea	ecx, [esi + 24]
	mov	dword ptr [esi + 28], edx
	lea	edx, [esi + 36]
	mov	dword ptr [esi + 32], ecx
	lea	ecx, [esi + 40]
	mov	dword ptr [esi + 44], edx
	mov	dword ptr [esi + 48], ecx
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 40], 0
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 36], 0
	pop	esi
	pop	edi
	ret	4
                                        # -- End function
	.def	 "??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.globl	"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z" # -- Begin function ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z": # @"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	dword ptr [ecx], offset "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	mov	edi, dword ptr [esp + 16]
	mov	esi, ecx
	mov	ebx, dword ptr [ecx + 52]
	test	ebx, ebx
	je	LBB77_5
# %bb.1:
	mov	ecx, dword ptr [ebx + 4]
	test	ecx, ecx
	je	LBB77_4
# %bb.2:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB77_4
# %bb.3:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB77_4:
	push	ebx
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB77_5:
	test	edi, edi
	je	LBB77_7
# %bb.6:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB77_7:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.globl	"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ" # -- Begin function ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	.p2align	4, 0x90
"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ": # @"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
# %bb.0:
	ret
                                        # -- End function
	.def	 "?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.globl	"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ" # -- Begin function ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	.p2align	4, 0x90
"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ": # @"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
# %bb.0:
	ret
                                        # -- End function
	.def	 "?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.globl	"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z" # -- Begin function ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	.p2align	4, 0x90
"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z": # @"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
# %bb.0:
	mov	eax, -1
	ret	4
                                        # -- End function
	.def	 "?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.globl	"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z" # -- Begin function ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	.p2align	4, 0x90
"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z": # @"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
# %bb.0:
	mov	eax, -1
	ret	4
                                        # -- End function
	.def	 "?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	mov	eax, -1
	ret
                                        # -- End function
	.def	 "?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	push	esi
	mov	eax, dword ptr [ecx]
	mov	esi, ecx
	call	dword ptr [eax + 24]
	cmp	eax, -1
	je	LBB83_1
# %bb.2:
	mov	eax, dword ptr [esi + 44]
	dec	dword ptr [eax]
	mov	eax, dword ptr [esi + 28]
	mov	ecx, dword ptr [eax]
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	eax, byte ptr [ecx]
	pop	esi
	ret
LBB83_1:
	mov	eax, -1
	pop	esi
	ret
                                        # -- End function
	.def	 "?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
	.globl	"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z" # -- Begin function ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	.p2align	4, 0x90
"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z": # @"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	esi, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 32]
	cmp	ebp, 1
	mov	eax, esi
	sbb	eax, 0
	jl	LBB84_8
# %bb.1:
	mov	edx, dword ptr [esp + 28]
	mov	ebp, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 36]
	mov	ebx, ecx
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jmp	LBB84_2
	.p2align	4, 0x90
LBB84_4:                                #   in Loop: Header=BB84_2 Depth=1
	mov	ebx, edi
	sar	ebx, 31
	cmp	edi, ebp
	mov	ecx, ebx
	sbb	ecx, esi
	cmovge	ebx, esi
	cmovge	edi, ebp
	push	edi
	push	eax
	push	edx
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	call	_memcpy
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	edx, edi
	sub	ebp, edi
	sbb	esi, ebx
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [ebx + 44]
	sub	dword ptr [eax], edi
	mov	eax, dword ptr [ebx + 28]
	add	dword ptr [eax], edi
LBB84_7:                                #   in Loop: Header=BB84_2 Depth=1
	mov	eax, ebp
	neg	eax
	mov	eax, 0
	sbb	eax, esi
	jge	LBB84_8
LBB84_2:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB84_5
# %bb.3:                                #   in Loop: Header=BB84_2 Depth=1
	mov	ecx, dword ptr [ebx + 44]
	mov	edi, dword ptr [ecx]
	test	edi, edi
	jg	LBB84_4
LBB84_5:                                #   in Loop: Header=BB84_2 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	edi, edx
	call	dword ptr [eax + 28]
	cmp	eax, -1
	je	LBB84_8
# %bb.6:                                #   in Loop: Header=BB84_2 Depth=1
	mov	edx, edi
	mov	byte ptr [edi], al
	inc	edx
	add	ebp, -1
	adc	esi, -1
	jmp	LBB84_7
LBB84_8:
	mov	eax, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 36]
	sub	eax, ebp
	sbb	edx, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
	.globl	"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z" # -- Begin function ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	.p2align	4, 0x90
"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z": # @"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	esi, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 32]
	cmp	ebp, 1
	mov	eax, esi
	sbb	eax, 0
	jl	LBB85_8
# %bb.1:
	mov	edx, dword ptr [esp + 28]
	mov	ebp, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 36]
	mov	ebx, ecx
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jmp	LBB85_2
	.p2align	4, 0x90
LBB85_4:                                #   in Loop: Header=BB85_2 Depth=1
	mov	ebx, edi
	sar	ebx, 31
	cmp	edi, ebp
	mov	ecx, ebx
	sbb	ecx, esi
	cmovge	ebx, esi
	cmovge	edi, ebp
	push	edi
	push	edx
	push	eax
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	call	_memcpy
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	edx, edi
	sub	ebp, edi
	sbb	esi, ebx
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [ebx + 48]
	sub	dword ptr [eax], edi
	mov	eax, dword ptr [ebx + 32]
	add	dword ptr [eax], edi
LBB85_7:                                #   in Loop: Header=BB85_2 Depth=1
	mov	eax, ebp
	neg	eax
	mov	eax, 0
	sbb	eax, esi
	jge	LBB85_8
LBB85_2:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB85_5
# %bb.3:                                #   in Loop: Header=BB85_2 Depth=1
	mov	ecx, dword ptr [ebx + 48]
	mov	edi, dword ptr [ecx]
	test	edi, edi
	jg	LBB85_4
LBB85_5:                                #   in Loop: Header=BB85_2 Depth=1
	movzx	eax, byte ptr [edx]
	mov	edi, edx
	mov	edx, dword ptr [ebx]
	mov	ecx, ebx
	push	eax
	call	dword ptr [edx + 12]
	cmp	eax, -1
	je	LBB85_8
# %bb.6:                                #   in Loop: Header=BB85_2 Depth=1
	inc	edi
	add	ebp, -1
	adc	esi, -1
	mov	edx, edi
	jmp	LBB85_7
LBB85_8:
	mov	eax, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 36]
	sub	eax, ebp
	sbb	edx, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
	.globl	"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z" # -- Begin function ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	.p2align	4, 0x90
"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z": # @"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	dword ptr [eax + 4], -1
	mov	dword ptr [eax], -1
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	ret	20
                                        # -- End function
	.def	 "?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
	.globl	"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z" # -- Begin function ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	.p2align	4, 0x90
"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z": # @"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	dword ptr [eax + 4], -1
	mov	dword ptr [eax], -1
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	ret	32
                                        # -- End function
	.def	 "?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z"
	.globl	"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z" # -- Begin function ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	.p2align	4, 0x90
"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z": # @"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z"
# %bb.0:
	mov	eax, ecx
	ret	12
                                        # -- End function
	.def	 "?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	xor	eax, eax
	ret
                                        # -- End function
	.def	 "?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"
	.globl	"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z" # -- Begin function ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
	.p2align	4, 0x90
"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z": # @"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"
# %bb.0:
	ret	4
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
Lfunc_begin27:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	lea	eax, [ebp - 24]
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], 2147483647 # 4-byte Folded Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	edx, dword ptr [ecx + 16]
	sub	eax, edx
	cmp	eax, esi
	jb	LBB91_19
# %bb.1:
	mov	ebx, dword ptr [ecx + 20]
	add	esi, edx
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	mov	ecx, esi
	or	ecx, 15
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	js	LBB91_5
# %bb.2:
	mov	edx, ebx
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, ebx
	jb	LBB91_5
# %bb.3:
	add	edx, dword ptr [ebp - 32]       # 4-byte Folded Reload
	cmp	ecx, edx
	mov	ebx, edx
	cmovae	ebx, ecx
	lea	eax, [ebx + 1]
	cmp	eax, 4096
	jb	LBB91_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	jae	LBB91_20
LBB91_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB91_9:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	ecx, 16
	mov	dword ptr [eax + 16], esi
	mov	dword ptr [eax + 20], ebx
	jb	LBB91_17
# %bb.10:
	mov	esi, dword ptr [eax]
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	push	ebx
	push	esi
	push	edi
	call	_memcpy
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
	mov	al, byte ptr [ebp + 16]
	mov	byte ptr [edi + ebx], al
	lea	eax, [edx + 1]
	mov	byte ptr [edi + ebx + 1], 0
	cmp	eax, 4096
	jb	LBB91_16
# %bb.11:
	mov	ecx, dword ptr [esi - 4]
	add	esi, -4
	sub	esi, ecx
	cmp	esi, 32
	jae	LBB91_12
# %bb.15:
	add	edx, 36
	mov	esi, ecx
	mov	eax, edx
LBB91_16:
	push	eax
	push	esi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	jmp	LBB91_18
LBB91_17:
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	push	ebx
	push	eax
	push	edi
	mov	esi, eax
	call	_memcpy
	add	esp, 12
	mov	al, byte ptr [ebp + 16]
	mov	byte ptr [edi + ebx], al
	mov	byte ptr [edi + ebx + 1], 0
LBB91_18:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB91_6:
	test	eax, eax
	je	LBB91_7
# %bb.8:
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edi, eax
	jmp	LBB91_9
LBB91_7:
	xor	edi, edi
	mov	ebx, -1
	jmp	LBB91_9
LBB91_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB91_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB91_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z@4HA":
LBB91_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end27:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
                                        # -- End function
	.def	 "?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
	.globl	"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ" # -- Begin function ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
	.p2align	4, 0x90
"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ": # @"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
# %bb.0:
	push	offset "??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"
	call	"?_Xout_of_range@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.globl	"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z" # -- Begin function ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
	.p2align	4, 0x90
"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z": # @"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
Lfunc_begin28:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	lea	ecx, [ebp - 36]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	mov	edx, dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"]
	mov	edi, dword ptr ["?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B"]
	test	edx, edx
	je	LBB93_1
# %bb.4:
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + 12], edx
	ja	LBB93_5
	jmp	LBB93_6
LBB93_1:
	lea	ecx, [ebp - 92]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	cmp	dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"], 0
	jne	LBB93_3
# %bb.2:
	mov	eax, dword ptr ["?_Id_cnt@id@locale@std@@0HA"]
	inc	eax
	mov	dword ptr ["?_Id_cnt@id@locale@std@@0HA"], eax
	mov	dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"], eax
LBB93_3:
	lea	ecx, [ebp - 92]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	edx, dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"]
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + 12], edx
	jbe	LBB93_6
LBB93_5:
	mov	ecx, dword ptr [eax + 8]
	mov	esi, dword ptr [ecx + 4*edx]
	test	esi, esi
	jne	LBB93_18
LBB93_6:
	cmp	byte ptr [eax + 20], 0
	je	LBB93_10
# %bb.7:
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"
# %bb.8:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	dword ptr [eax + 12], ecx
	jbe	LBB93_10
# %bb.9:
	mov	eax, dword ptr [eax + 8]
	mov	esi, dword ptr [eax + 4*ecx]
	test	esi, esi
	jne	LBB93_18
LBB93_10:
	test	edi, edi
	mov	esi, edi
	jne	LBB93_18
# %bb.11:
	mov	dword ptr [ebp - 16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.12:
	mov	ecx, eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	test	eax, eax
	je	LBB93_13
# %bb.14:
	mov	ecx, dword ptr [eax + 24]
	add	eax, 28
	test	ecx, ecx
	cmovne	eax, ecx
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 92]
	push	eax
	call	"??0_Locinfo@std@@QAE@PBD@Z"
	jmp	LBB93_16
LBB93_13:
	mov	eax, offset "??_C@_00CNPNBAHC@?$AA@"
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 92]
	push	eax
	call	"??0_Locinfo@std@@QAE@PBD@Z"
LBB93_16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [ebp - 92]
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi], offset "??_7?$codecvt@DDU_Mbstatet@@@std@@6B@"
	call	"??1_Locinfo@std@@QAE@XZ"
	mov	dword ptr [ebp - 16], 2
	push	esi
	call	"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"
	add	esp, 4
# %bb.17:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [esi]
	mov	ecx, esi
	call	dword ptr [eax + 4]
	mov	dword ptr ["?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B"], esi
LBB93_18:
	lea	ecx, [ebp - 36]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$19@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA":
LBB93_19:
	push	ebp
	push	eax
	add	ebp, 12
	lea	ecx, [ebp - 36]
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$20@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA":
LBB93_20:
	push	ebp
	push	eax
	add	ebp, 12
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??3@YAXPAX@Z"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$21@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA":
LBB93_21:
	push	ebp
	push	eax
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	push	1
	call	dword ptr [eax]
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end28:
	.section	.xdata,"dr",associative,"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.p2align	2
"L__ehtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z":
	.long	-1                              # ToState
	.long	"?dtor$19@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$20@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$21@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
                                        # -- End function
	.def	 "?_Throw_bad_cast@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Throw_bad_cast@std@@YAXXZ"
	.globl	"?_Throw_bad_cast@std@@YAXXZ"   # -- Begin function ?_Throw_bad_cast@std@@YAXXZ
	.p2align	4, 0x90
"?_Throw_bad_cast@std@@YAXXZ":          # @"?_Throw_bad_cast@std@@YAXXZ"
# %bb.0:
	sub	esp, 12
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 4], offset "??_C@_08EPJLHIJG@bad?5cast?$AA@"
	mov	dword ptr [esp], offset "??_7bad_cast@std@@6B@"
	mov	eax, esp
	push	offset "__TI2?AVbad_cast@std@@"
	push	eax
	call	__CxxThrowException@8
                                        # -- End function
	.def	 "??0_Locinfo@std@@QAE@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0_Locinfo@std@@QAE@PBD@Z"
	.globl	"??0_Locinfo@std@@QAE@PBD@Z"    # -- Begin function ??0_Locinfo@std@@QAE@PBD@Z
	.p2align	4, 0x90
"??0_Locinfo@std@@QAE@PBD@Z":           # @"??0_Locinfo@std@@QAE@PBD@Z"
Lfunc_begin29:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0_Locinfo@std@@QAE@PBD@Z"
	mov	edi, ecx
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	ecx, edi
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	test	esi, esi
	mov	dword ptr [edi + 4], 0
	mov	byte ptr [edi + 8], 0
	mov	dword ptr [edi + 12], 0
	mov	byte ptr [edi + 16], 0
	mov	dword ptr [edi + 20], 0
	mov	word ptr [edi + 24], 0
	mov	dword ptr [edi + 28], 0
	mov	word ptr [edi + 32], 0
	mov	dword ptr [edi + 36], 0
	mov	byte ptr [edi + 40], 0
	mov	dword ptr [edi + 44], 0
	mov	byte ptr [edi + 48], 0
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	je	LBB95_3
# %bb.1:
	mov	dword ptr [ebp - 16], 0
	push	esi
	push	edi
	call	"?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z"
	add	esp, 8
# %bb.2:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB95_3:
	mov	dword ptr [ebp - 16], 0
	push	offset "??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"
	call	"?_Xruntime_error@std@@YAXPBD@Z"
	add	esp, 4
# %bb.4:
	.def	 "?dtor$5@?0???0_Locinfo@std@@QAE@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0_Locinfo@std@@QAE@PBD@Z@4HA":
LBB95_5:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	esi, eax
	mov	eax, dword ptr [eax + 44]
	test	eax, eax
	je	LBB95_7
# %bb.6:
	push	eax
	call	_free
	add	esp, 4
LBB95_7:
	mov	dword ptr [esi + 44], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 36]
	test	eax, eax
	je	LBB95_9
# %bb.8:
	push	eax
	call	_free
	add	esp, 4
LBB95_9:
	mov	dword ptr [esi + 36], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 28]
	test	eax, eax
	je	LBB95_11
# %bb.10:
	push	eax
	call	_free
	add	esp, 4
LBB95_11:
	mov	dword ptr [esi + 28], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 20]
	test	eax, eax
	je	LBB95_13
# %bb.12:
	push	eax
	call	_free
	add	esp, 4
LBB95_13:
	mov	dword ptr [esi + 20], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 12]
	test	eax, eax
	je	LBB95_15
# %bb.14:
	push	eax
	call	_free
	add	esp, 4
LBB95_15:
	mov	dword ptr [esi + 12], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 4]
	test	eax, eax
	je	LBB95_17
# %bb.16:
	push	eax
	call	_free
	add	esp, 4
LBB95_17:
	mov	ecx, esi
	mov	dword ptr [esi + 4], 0
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end29:
	.section	.xdata,"dr",associative,"??0_Locinfo@std@@QAE@PBD@Z"
	.p2align	2
"L__ehtable$??0_Locinfo@std@@QAE@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0_Locinfo@std@@QAE@PBD@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0_Locinfo@std@@QAE@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$5@?0???0_Locinfo@std@@QAE@PBD@Z@4HA" # Action
	.section	.text,"xr",discard,"??0_Locinfo@std@@QAE@PBD@Z"
                                        # -- End function
	.def	 "??1_Locinfo@std@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1_Locinfo@std@@QAE@XZ"
	.globl	"??1_Locinfo@std@@QAE@XZ"       # -- Begin function ??1_Locinfo@std@@QAE@XZ
	.p2align	4, 0x90
"??1_Locinfo@std@@QAE@XZ":              # @"??1_Locinfo@std@@QAE@XZ"
Lfunc_begin30:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1_Locinfo@std@@QAE@XZ"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	"?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [esi + 44]
	test	eax, eax
	je	LBB96_3
# %bb.2:
	push	eax
	call	_free
	add	esp, 4
LBB96_3:
	mov	dword ptr [esi + 44], 0
	mov	eax, dword ptr [esi + 36]
	test	eax, eax
	je	LBB96_5
# %bb.4:
	push	eax
	call	_free
	add	esp, 4
LBB96_5:
	mov	dword ptr [esi + 36], 0
	mov	eax, dword ptr [esi + 28]
	test	eax, eax
	je	LBB96_7
# %bb.6:
	push	eax
	call	_free
	add	esp, 4
LBB96_7:
	mov	dword ptr [esi + 28], 0
	mov	eax, dword ptr [esi + 20]
	test	eax, eax
	je	LBB96_9
# %bb.8:
	push	eax
	call	_free
	add	esp, 4
LBB96_9:
	mov	dword ptr [esi + 20], 0
	mov	eax, dword ptr [esi + 12]
	test	eax, eax
	je	LBB96_11
# %bb.10:
	push	eax
	call	_free
	add	esp, 4
LBB96_11:
	mov	dword ptr [esi + 12], 0
	mov	eax, dword ptr [esi + 4]
	test	eax, eax
	je	LBB96_13
# %bb.12:
	push	eax
	call	_free
	add	esp, 4
LBB96_13:
	mov	ecx, esi
	mov	dword ptr [esi + 4], 0
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$14@?0???1_Locinfo@std@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???1_Locinfo@std@@QAE@XZ@4HA":
LBB96_14:
	push	ebp
	push	eax
	add	ebp, 12
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [esi + 44]
	call	"??1?$_Yarn@D@std@@QAE@XZ"
	lea	ecx, [esi + 36]
	call	"??1?$_Yarn@D@std@@QAE@XZ"
	lea	ecx, [esi + 28]
	call	"??1?$_Yarn@_W@std@@QAE@XZ"
	lea	ecx, [esi + 20]
	call	"??1?$_Yarn@_W@std@@QAE@XZ"
	lea	ecx, [esi + 12]
	call	"??1?$_Yarn@D@std@@QAE@XZ"
	lea	ecx, [esi + 4]
	call	"??1?$_Yarn@D@std@@QAE@XZ"
	mov	ecx, esi
	call	"??1_Lockit@std@@QAE@XZ"
	call	___std_terminate
Lfunc_end30:
	.section	.xdata,"dr",associative,"??1_Locinfo@std@@QAE@XZ"
	.p2align	2
"L__ehtable$??1_Locinfo@std@@QAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1_Locinfo@std@@QAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1_Locinfo@std@@QAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???1_Locinfo@std@@QAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1_Locinfo@std@@QAE@XZ"
                                        # -- End function
	.def	 "??1?$_Yarn@D@std@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$_Yarn@D@std@@QAE@XZ"
	.globl	"??1?$_Yarn@D@std@@QAE@XZ"      # -- Begin function ??1?$_Yarn@D@std@@QAE@XZ
	.p2align	4, 0x90
"??1?$_Yarn@D@std@@QAE@XZ":             # @"??1?$_Yarn@D@std@@QAE@XZ"
# %bb.0:
	push	esi
	mov	eax, dword ptr [ecx]
	mov	esi, ecx
	test	eax, eax
	je	LBB97_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB97_2:
	mov	dword ptr [esi], 0
	pop	esi
	ret
                                        # -- End function
	.def	 "??1?$_Yarn@_W@std@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$_Yarn@_W@std@@QAE@XZ"
	.globl	"??1?$_Yarn@_W@std@@QAE@XZ"     # -- Begin function ??1?$_Yarn@_W@std@@QAE@XZ
	.p2align	4, 0x90
"??1?$_Yarn@_W@std@@QAE@XZ":            # @"??1?$_Yarn@_W@std@@QAE@XZ"
# %bb.0:
	push	esi
	mov	eax, dword ptr [ecx]
	mov	esi, ecx
	test	eax, eax
	je	LBB98_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB98_2:
	mov	dword ptr [esi], 0
	pop	esi
	ret
                                        # -- End function
	.def	 "??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z"
	.globl	"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z" # -- Begin function ??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z": # @"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB99_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB99_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?_Incref@facet@locale@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Incref@facet@locale@std@@UAEXXZ"
	.globl	"?_Incref@facet@locale@std@@UAEXXZ" # -- Begin function ?_Incref@facet@locale@std@@UAEXXZ
	.p2align	4, 0x90
"?_Incref@facet@locale@std@@UAEXXZ":    # @"?_Incref@facet@locale@std@@UAEXXZ"
# %bb.0:
	lock		inc	dword ptr [ecx + 4]
	ret
                                        # -- End function
	.def	 "?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.globl	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ" # -- Begin function ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	.p2align	4, 0x90
"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ": # @"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
# %bb.0:
	xor	eax, eax
	lock		dec	dword ptr [ecx + 4]
	cmove	eax, ecx
	ret
                                        # -- End function
	.def	 "?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ"
	.globl	"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ" # -- Begin function ?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ
	.p2align	4, 0x90
"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ": # @"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ"
# %bb.0:
	mov	al, 1
	ret
                                        # -- End function
	.def	 "?do_max_length@codecvt_base@std@@MBEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_max_length@codecvt_base@std@@MBEHXZ"
	.globl	"?do_max_length@codecvt_base@std@@MBEHXZ" # -- Begin function ?do_max_length@codecvt_base@std@@MBEHXZ
	.p2align	4, 0x90
"?do_max_length@codecvt_base@std@@MBEHXZ": # @"?do_max_length@codecvt_base@std@@MBEHXZ"
# %bb.0:
	mov	eax, 1
	ret
                                        # -- End function
	.def	 "?do_encoding@codecvt_base@std@@MBEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_encoding@codecvt_base@std@@MBEHXZ"
	.globl	"?do_encoding@codecvt_base@std@@MBEHXZ" # -- Begin function ?do_encoding@codecvt_base@std@@MBEHXZ
	.p2align	4, 0x90
"?do_encoding@codecvt_base@std@@MBEHXZ": # @"?do_encoding@codecvt_base@std@@MBEHXZ"
# %bb.0:
	mov	eax, 1
	ret
                                        # -- End function
	.def	 "?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
	.globl	"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z" # -- Begin function ?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
	.p2align	4, 0x90
"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z": # @"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 24]
	mov	ecx, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 12]
	mov	esi, dword ptr [esp + 20]
	mov	dword ptr [esi], edx
	mov	dword ptr [ecx], eax
	mov	eax, 3
	pop	esi
	ret	28
                                        # -- End function
	.def	 "?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
	.globl	"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z" # -- Begin function ?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
	.p2align	4, 0x90
"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z": # @"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 24]
	mov	ecx, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 12]
	mov	esi, dword ptr [esp + 20]
	mov	dword ptr [esi], edx
	mov	dword ptr [ecx], eax
	mov	eax, 3
	pop	esi
	ret	28
                                        # -- End function
	.def	 "?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z"
	.globl	"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z" # -- Begin function ?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
	.p2align	4, 0x90
"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z": # @"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 8]
	mov	ecx, dword ptr [esp + 16]
	mov	dword ptr [ecx], eax
	mov	eax, 3
	ret	16
                                        # -- End function
	.def	 "?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z"
	.globl	"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z" # -- Begin function ?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
	.p2align	4, 0x90
"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z": # @"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 12]
	mov	ecx, dword ptr [esp + 16]
	sub	eax, dword ptr [esp + 8]
	cmp	eax, ecx
	cmovae	eax, ecx
	ret	16
                                        # -- End function
	.def	 "??_Gcodecvt_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gcodecvt_base@std@@UAEPAXI@Z"
	.globl	"??_Gcodecvt_base@std@@UAEPAXI@Z" # -- Begin function ??_Gcodecvt_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gcodecvt_base@std@@UAEPAXI@Z":      # @"??_Gcodecvt_base@std@@UAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB109_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB109_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?do_always_noconv@codecvt_base@std@@MBE_NXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_always_noconv@codecvt_base@std@@MBE_NXZ"
	.globl	"?do_always_noconv@codecvt_base@std@@MBE_NXZ" # -- Begin function ?do_always_noconv@codecvt_base@std@@MBE_NXZ
	.p2align	4, 0x90
"?do_always_noconv@codecvt_base@std@@MBE_NXZ": # @"?do_always_noconv@codecvt_base@std@@MBE_NXZ"
# %bb.0:
	xor	eax, eax
	ret
                                        # -- End function
	.def	 "??_Gfacet@locale@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gfacet@locale@std@@MAEPAXI@Z"
	.globl	"??_Gfacet@locale@std@@MAEPAXI@Z" # -- Begin function ??_Gfacet@locale@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_Gfacet@locale@std@@MAEPAXI@Z":      # @"??_Gfacet@locale@std@@MAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB111_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB111_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "??_G_Facet_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G_Facet_base@std@@UAEPAXI@Z"
	.globl	"??_G_Facet_base@std@@UAEPAXI@Z" # -- Begin function ??_G_Facet_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G_Facet_base@std@@UAEPAXI@Z":       # @"??_G_Facet_base@std@@UAEPAXI@Z"
# %bb.0:
	ud2
                                        # -- End function
	.def	 "??0bad_cast@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_cast@std@@QAE@ABV01@@Z"
	.globl	"??0bad_cast@std@@QAE@ABV01@@Z" # -- Begin function ??0bad_cast@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0bad_cast@std@@QAE@ABV01@@Z":        # @"??0bad_cast@std@@QAE@ABV01@@Z"
Lfunc_begin31:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7bad_cast@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0bad_cast@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_cast@std@@QAE@ABV01@@Z@4HA":
LBB113_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end31:
	.section	.xdata,"dr",associative,"??0bad_cast@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0bad_cast@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0bad_cast@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0bad_cast@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0bad_cast@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0bad_cast@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??_Gbad_cast@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_cast@std@@UAEPAXI@Z"
	.globl	"??_Gbad_cast@std@@UAEPAXI@Z"   # -- Begin function ??_Gbad_cast@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gbad_cast@std@@UAEPAXI@Z":          # @"??_Gbad_cast@std@@UAEPAXI@Z"
Lfunc_begin32:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB114_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB114_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gbad_cast@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_cast@std@@UAEPAXI@Z@4HA":
LBB114_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end32:
	.section	.xdata,"dr",associative,"??_Gbad_cast@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gbad_cast@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gbad_cast@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gbad_cast@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gbad_cast@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gbad_cast@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??_Gios_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gios_base@std@@UAEPAXI@Z"
	.globl	"??_Gios_base@std@@UAEPAXI@Z"   # -- Begin function ??_Gios_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gios_base@std@@UAEPAXI@Z":          # @"??_Gios_base@std@@UAEPAXI@Z"
Lfunc_begin33:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gios_base@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB115_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB115_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gios_base@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gios_base@std@@UAEPAXI@Z@4HA":
LBB115_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end33:
	.section	.xdata,"dr",associative,"??_Gios_base@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gios_base@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gios_base@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gios_base@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gios_base@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gios_base@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@1@@Z"
	.globl	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@1@@Z" # -- Begin function ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@1@@Z
	.p2align	4, 0x90
"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@1@@Z": # @"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@1@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebx, dword ptr [esp + 24]
	cmp	byte ptr [ebx + 13], 0
	jne	LBB116_3
# %bb.1:
	mov	edi, dword ptr [esp + 20]
	mov	esi, ecx
	.p2align	4, 0x90
LBB116_2:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, esi
	push	dword ptr [ebx + 8]
	push	edi
	call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@1@@Z"
	mov	ebp, dword ptr [ebx]
	push	16
	push	ebx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	byte ptr [ebp + 13], 0
	mov	ebx, ebp
	je	LBB116_2
LBB116_3:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
                                        # -- End function
	.def	 "?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.globl	"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ" # -- Begin function ?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ
	.p2align	4, 0x90
"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ": # @"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
Lfunc_begin34:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [esi + 16], 0
	je	LBB117_2
# %bb.1:
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], 0
LBB117_2:
	mov	eax, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	.p2align	4, 0x90
LBB117_3:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB117_4
# %bb.9:                                #   in Loop: Header=BB117_3 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB117_3
# %bb.10:                               #   in Loop: Header=BB117_3 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 4]
	jmp	LBB117_3
LBB117_4:
	test	eax, eax
	je	LBB117_14
# %bb.5:
	mov	ecx, dword ptr [esi + 8]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB117_13
# %bb.6:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB117_7
# %bb.12:
	add	ecx, 35
	mov	eax, edx
LBB117_13:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB117_14:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB117_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$11@?0??_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ@4HA":
LBB117_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end34:
	.section	.xdata,"dr",associative,"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.p2align	2
"L__ehtable$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ@4HA" # Action
	.section	.text,"xr",discard,"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
                                        # -- End function
	.def	 "??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
	.globl	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z" # -- Begin function ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z
	.p2align	4, 0x90
"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z": # @"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebx, dword ptr [esp + 24]
	cmp	byte ptr [ebx + 13], 0
	jne	LBB118_3
# %bb.1:
	mov	edi, dword ptr [esp + 20]
	mov	esi, ecx
	.p2align	4, 0x90
LBB118_2:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, esi
	push	dword ptr [ebx + 8]
	push	edi
	call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
	mov	ebp, dword ptr [ebx]
	push	24
	push	ebx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	byte ptr [ebp + 13], 0
	mov	ebx, ebp
	je	LBB118_2
LBB118_3:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
Lfunc_begin35:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	mov	ebx, ecx
	lea	eax, [ebp - 24]
	mov	esi, dword ptr [ebp + 8]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	ecx, dword ptr [ebx + 16]
	sub	eax, ecx
	cmp	eax, esi
	jb	LBB119_19
# %bb.1:
	mov	edi, dword ptr [ebx + 20]
	add	esi, ecx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	dword ptr [ebp - 32], 2147483647 # 4-byte Folded Spill
	mov	ecx, esi
	or	ecx, 15
	js	LBB119_5
# %bb.2:
	mov	edx, edi
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	esi, edi
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, esi
	mov	edi, esi
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	jb	LBB119_5
# %bb.3:
	add	edx, edi
	cmp	ecx, edx
	cmovae	edx, ecx
	lea	eax, [edx + 1]
	cmp	eax, 4096
	jb	LBB119_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	jae	LBB119_20
LBB119_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
LBB119_9:
	mov	dword ptr [ebx + 16], esi
	mov	esi, dword ptr [ebp + 16]
	cmp	edi, 16
	mov	dword ptr [ebx + 20], edx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	jb	LBB119_17
# %bb.10:
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	mov	edi, dword ptr [ebx]
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	push	esi
	push	edi
	push	ecx
	mov	ebx, ecx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp + 24]
	add	ebx, esi
	push	eax
	push	dword ptr [ebp + 20]
	push	ebx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	ebx, dword ptr [ebp + 24]
	sub	eax, esi
	add	esi, edi
	inc	eax
	push	eax
	push	esi
	push	ebx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	edx, eax
	inc	eax
	cmp	eax, 4096
	jb	LBB119_16
# %bb.11:
	mov	ecx, dword ptr [edi - 4]
	add	edi, -4
	sub	edi, ecx
	cmp	edi, 32
	jae	LBB119_12
# %bb.15:
	mov	eax, edx
	mov	edi, ecx
	add	eax, 36
LBB119_16:
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	push	eax
	push	edi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB119_18
LBB119_17:
	push	esi
	push	ebx
	push	ecx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	lea	edi, [eax + esi]
	mov	eax, dword ptr [ebp + 24]
	push	eax
	push	dword ptr [ebp + 20]
	push	edi
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	edi, dword ptr [ebp + 24]
	sub	eax, esi
	add	esi, ebx
	inc	eax
	push	eax
	push	esi
	push	edi
	call	_memcpy
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
LBB119_18:
	mov	dword ptr [ebx], eax
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, ebx
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	20
LBB119_6:
	test	eax, eax
	je	LBB119_7
# %bb.8:
	push	eax
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	call	"??2@YAPAXI@Z"
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 4
	mov	ecx, eax
	jmp	LBB119_9
LBB119_7:
	xor	ecx, ecx
	mov	edx, -1
	jmp	LBB119_9
LBB119_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB119_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB119_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z@4HA":
LBB119_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end35:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
Lfunc_begin36:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], 2147483647 # 4-byte Folded Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	ebx, dword ptr [ecx + 16]
	sub	eax, ebx
	cmp	eax, edi
	jb	LBB120_19
# %bb.1:
	mov	esi, dword ptr [ecx + 20]
	add	edi, ebx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	ecx, edi
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	or	ecx, 15
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	js	LBB120_5
# %bb.2:
	mov	edx, esi
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, esi
	jb	LBB120_5
# %bb.3:
	add	edx, dword ptr [ebp - 32]       # 4-byte Folded Reload
	cmp	ecx, edx
	mov	esi, edx
	cmovae	esi, ecx
	lea	eax, [esi + 1]
	cmp	eax, 4096
	jb	LBB120_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	jae	LBB120_20
LBB120_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB120_9:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	edx, 16
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], esi
	jb	LBB120_17
# %bb.10:
	mov	esi, dword ptr [eax]
	push	ebx
	push	esi
	push	edi
	call	_memcpy
	add	esp, 12
	mov	ecx, dword ptr [ebp + 20]
	lea	eax, [edi + ebx]
	push	ecx
	push	dword ptr [ebp + 16]
	push	eax
	call	_memcpy
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
	add	ebx, dword ptr [ebp + 20]
	lea	eax, [edx + 1]
	cmp	eax, 4096
	mov	byte ptr [edi + ebx], 0
	jb	LBB120_16
# %bb.11:
	mov	ecx, dword ptr [esi - 4]
	add	esi, -4
	sub	esi, ecx
	cmp	esi, 32
	jae	LBB120_12
# %bb.15:
	add	edx, 36
	mov	esi, ecx
	mov	eax, edx
LBB120_16:
	push	eax
	push	esi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB120_18
LBB120_17:
	push	ebx
	push	eax
	push	edi
	mov	esi, eax
	call	_memcpy
	add	esp, 12
	mov	ecx, dword ptr [ebp + 20]
	lea	eax, [edi + ebx]
	push	ecx
	push	dword ptr [ebp + 16]
	push	eax
	call	_memcpy
	add	esp, 12
	add	ebx, dword ptr [ebp + 20]
	mov	byte ptr [edi + ebx], 0
LBB120_18:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	16
LBB120_6:
	test	eax, eax
	je	LBB120_7
# %bb.8:
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edi, eax
	jmp	LBB120_9
LBB120_7:
	xor	edi, edi
	mov	esi, -1
	jmp	LBB120_9
LBB120_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB120_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB120_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z@4HA":
LBB120_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end36:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
                                        # -- End function
	.def	 "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z"
	.globl	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z" # -- Begin function ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
	.p2align	4, 0x90
"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z": # @"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	ebx, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 40]
	mov	dword ptr [ecx + 16], 0
	mov	dword ptr [ecx + 20], 0
	mov	esi, ecx
	mov	eax, dword ptr [ebx + 20]
	mov	edx, dword ptr [ebx + 16]
	mov	edi, dword ptr [ebp + 16]
	mov	ecx, eax
	sub	ecx, edx
	cmp	edi, ecx
	mov	ecx, dword ptr [ebp + 20]
	lea	ebp, [edi + edx]
	mov	dword ptr [esp], ebp            # 4-byte Spill
	ja	LBB121_7
# %bb.1:
	cmp	ecx, eax
	ja	LBB121_7
# %bb.2:
	movsd	xmm0, qword ptr [ebx + 16]      # xmm0 = mem[0],zero
	mov	eax, esi
	movsd	qword ptr [esi + 16], xmm0
	movsd	xmm0, qword ptr [ebx]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [ebx + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [esi + 8], xmm1
	movsd	qword ptr [esi], xmm0
	mov	dword ptr [ebx + 16], 0
	mov	dword ptr [ebx + 20], 15
	mov	byte ptr [ebx], 0
	cmp	dword ptr [esi + 20], 16
	jb	LBB121_4
# %bb.3:
	mov	eax, dword ptr [esi]
LBB121_4:
	mov	ecx, dword ptr [esp + 40]
	inc	edi
	cmp	dword ptr [ecx + 20], 15
	jbe	LBB121_6
# %bb.5:
	mov	ecx, dword ptr [ecx]
LBB121_6:
	add	eax, edx
	push	edi
	push	ecx
	push	eax
	jmp	LBB121_11
LBB121_7:
	sub	ecx, edi
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	cmp	edx, ecx
	jbe	LBB121_8
# %bb.12:
	mov	eax, 2147483647
	sub	eax, edx
	cmp	eax, edi
	jb	LBB121_25
# %bb.13:
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	or	ecx, 15
	js	LBB121_14
# %bb.15:
	cmp	ecx, 22
	mov	ebp, 22
	cmova	ebp, ecx
	lea	eax, [ebp + 1]
	cmp	ebp, 4095
	jb	LBB121_18
# %bb.16:
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	jmp	LBB121_17
LBB121_8:
	mov	eax, dword ptr [esp + 40]
	inc	edi
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [esi + 16], xmm0
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [esi + 8], xmm1
	movsd	qword ptr [esi], xmm0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 15
	mov	byte ptr [eax], 0
	mov	ebp, dword ptr [esi]
	lea	eax, [ebp + edx]
	push	edi
	push	ebp
	push	eax
	call	_memmove
	add	esp, 12
	cmp	dword ptr [ebx + 20], 15
	jbe	LBB121_10
# %bb.9:
	mov	ebx, dword ptr [ebx]
LBB121_10:
	push	dword ptr [esp + 8]             # 4-byte Folded Reload
	push	ebx
	push	ebp
LBB121_11:
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esi + 16], eax
	jmp	LBB121_24
LBB121_14:
	mov	dword ptr [esp + 4], 2147483647 # 4-byte Folded Spill
	mov	eax, -2147483648
LBB121_17:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ebp, [eax + 35]
	and	ebp, -32
	mov	dword ptr [ebp - 4], eax
	jmp	LBB121_19
LBB121_18:
	mov	dword ptr [esp + 4], ebp        # 4-byte Spill
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ebp, eax
LBB121_19:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esi], ebp
	mov	dword ptr [esi + 16], eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esi + 20], eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [ebx + 20], 15
	jbe	LBB121_21
# %bb.20:
	mov	ebx, dword ptr [ebx]
LBB121_21:
	push	eax
	push	ebx
	push	ebp
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [esp + 40]
	inc	edi
	cmp	dword ptr [eax + 20], 15
	jbe	LBB121_23
# %bb.22:
	mov	eax, dword ptr [eax]
LBB121_23:
	add	ebp, dword ptr [esp + 8]        # 4-byte Folded Reload
	push	edi
	push	eax
	push	ebp
	call	_memcpy
	add	esp, 12
LBB121_24:
	mov	eax, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB121_25:
	call	"?_Xlen_string@std@@YAXXZ"
                                        # -- End function
	.def	 "??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z"
	.globl	"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z" # -- Begin function ??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z
	.p2align	4, 0x90
"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z": # @"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, ecx
	mov	eax, dword ptr [ecx + 12]
	mov	ecx, dword ptr [ecx + 16]
	lea	edx, [ecx + eax]
	test	dl, 7
	jne	LBB122_3
# %bb.1:
	lea	edx, [ecx + 8]
	shr	edx, 3
	cmp	dword ptr [esi + 8], edx
	ja	LBB122_3
# %bb.2:
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	mov	eax, dword ptr [esi + 12]
	mov	ecx, dword ptr [esi + 16]
LBB122_3:
	mov	ebp, dword ptr [esi + 8]
	mov	edi, dword ptr [esi + 4]
	mov	edx, dword ptr [esp + 24]
	lea	ebx, [8*ebp - 1]
	add	ebp, 536870911
	and	ebx, eax
	mov	dword ptr [esi + 12], ebx
	add	ebx, ecx
	mov	eax, ebx
	shr	eax, 3
	and	ebp, eax
	mov	eax, edi
	mov	edi, dword ptr [edi + 4*ebp]
	test	edi, edi
	je	LBB122_5
# %bb.4:
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	eax, ebx
	jmp	LBB122_6
LBB122_5:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	ecx, dword ptr [esi + 16]
	mov	edi, dword ptr [eax + 4*ebp]
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	eax, dword ptr [esi + 12]
	mov	ebp, dword ptr [esi + 8]
	add	eax, ecx
	dec	ebp
	mov	edx, eax
	shr	edx, 3
	and	ebp, edx
	mov	edx, dword ptr [esp + 24]
LBB122_6:
	movzx	edx, word ptr [edx]
	and	ebx, 7
	and	eax, 7
	inc	ecx
	add	eax, eax
	mov	word ptr [edi + 2*ebx], dx
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esi + 16], ecx
	add	eax, dword ptr [edx + 4*ebp]
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
                                        # -- End function
	.def	 "?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.globl	"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z" # -- Begin function ?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z
	.p2align	4, 0x90
"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z": # @"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
Lfunc_begin37:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 1
	mov	edx, dword ptr [ecx + 8]
	test	edx, edx
	cmovne	eax, edx
	cmp	eax, 8
	jb	LBB123_3
	.p2align	4, 0x90
LBB123_2:
	mov	ebx, eax
	sub	ebx, edx
	cmp	ebx, edi
	jae	LBB123_5
LBB123_3:                               # =>This Inner Loop Header: Depth=1
	mov	esi, 268435455
	sub	esi, eax
	cmp	esi, eax
	jb	LBB123_22
# %bb.4:                                #   in Loop: Header=BB123_3 Depth=1
	add	eax, eax
	cmp	eax, 8
	jae	LBB123_2
	jmp	LBB123_3
LBB123_5:
	cmp	eax, 1073741824
	jae	LBB123_23
# %bb.6:
	mov	edi, dword ptr [ecx + 12]
	lea	edx, [4*eax]
	cmp	eax, 1024
	jb	LBB123_9
# %bb.7:
	cmp	eax, 1073741816
	mov	dword ptr [ebp - 16], -1
	jae	LBB123_24
# %bb.8:
	mov	esi, ecx
	add	edx, 35
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
	jmp	LBB123_10
LBB123_9:
	mov	esi, ecx
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
LBB123_10:
	shr	edi, 3
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [esi + 4]
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	lea	edx, [ecx + 4*edi]
	mov	ecx, dword ptr [esi + 8]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*edi]
	sub	esi, eax
	push	esi
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	mov	ecx, ebx
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	sub	ecx, edi
	mov	eax, dword ptr [eax + 4]
	jae	LBB123_11
# %bb.12:
	lea	ecx, [4*ebx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*ebx]
	sub	esi, eax
	push	esi
	push	eax
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
	call	_memmove
	add	esp, 12
	add	esi, edi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	push	esi
	jmp	LBB123_13
LBB123_11:
	mov	edi, ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [4*ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
	lea	eax, [esi + 4*eax]
	push	edi
	push	0
	push	eax
	call	_memset
	add	esp, 12
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
LBB123_13:
	call	_memset
	add	esp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB123_21
# %bb.14:
	mov	eax, dword ptr [esi + 8]
	shl	eax, 2
	cmp	eax, 4096
	jb	LBB123_20
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB123_16
# %bb.19:
	add	eax, 35
	mov	ecx, edx
LBB123_20:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB123_21:
	mov	dword ptr [esi + 4], edi
	add	dword ptr [esi + 8], ebx
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB123_22:
	mov	dword ptr [ebp - 16], -1
	call	"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ"
LBB123_23:
	mov	dword ptr [ebp - 16], -1
LBB123_24:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB123_16:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.17:
	.def	 "?dtor$18@?0??_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z@4HA":
LBB123_18:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end37:
	.section	.xdata,"dr",associative,"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.p2align	2
"L__ehtable$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
                                        # -- End function
	.def	 "?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ"
	.globl	"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ" # -- Begin function ?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ
	.p2align	4, 0x90
"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ": # @"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ"
# %bb.0:
	push	offset "??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.globl	"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ" # -- Begin function ?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ
	.p2align	4, 0x90
"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ": # @"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
Lfunc_begin38:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [esi + 16], 0
	je	LBB125_2
# %bb.1:
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], 0
LBB125_2:
	mov	eax, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	.p2align	4, 0x90
LBB125_3:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB125_4
# %bb.9:                                #   in Loop: Header=BB125_3 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB125_3
# %bb.10:                               #   in Loop: Header=BB125_3 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 4]
	jmp	LBB125_3
LBB125_4:
	test	eax, eax
	je	LBB125_14
# %bb.5:
	mov	ecx, dword ptr [esi + 8]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB125_13
# %bb.6:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB125_7
# %bb.12:
	add	ecx, 35
	mov	eax, edx
LBB125_13:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB125_14:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB125_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$11@?0??_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ@4HA":
LBB125_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end38:
	.section	.xdata,"dr",associative,"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.p2align	2
"L__ehtable$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ@4HA" # Action
	.section	.text,"xr",discard,"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
                                        # -- End function
	.def	 "?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.globl	"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z" # -- Begin function ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	.p2align	4, 0x90
"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z": # @"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
Lfunc_begin39:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 60
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	mov	ebx, ecx
	lea	eax, [ebp - 24]
	xor	edi, edi
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [ebx + 76], 0
	je	LBB126_1
LBB126_9:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 60
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB126_1:
	push	dword ptr [ebp + 16]
	push	dword ptr [ebp + 12]
	push	dword ptr [ebp + 8]
	call	"?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z"
	add	esp, 12
	test	eax, eax
	je	LBB126_9
# %bb.2:
	mov	esi, eax
	lea	eax, [ebx + 4]
	mov	byte ptr [ebx + 72], 1
	mov	byte ptr [ebx + 61], 0
	lea	ecx, [ebp - 48]
	lea	edi, [ebp - 40]
	mov	dword ptr [ebp - 72], eax       # 4-byte Spill
	mov	dword ptr [ebx + 12], eax
	lea	eax, [ebx + 8]
	mov	dword ptr [ebp - 68], eax       # 4-byte Spill
	mov	dword ptr [ebx + 16], eax
	lea	eax, [ebx + 20]
	mov	dword ptr [ebp - 64], eax       # 4-byte Spill
	mov	dword ptr [ebx + 28], eax
	lea	eax, [ebx + 24]
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	mov	dword ptr [ebx + 32], eax
	lea	eax, [ebx + 36]
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	mov	dword ptr [ebx + 44], eax
	lea	eax, [ebx + 40]
	mov	dword ptr [ebx + 48], eax
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	lea	eax, [ebp - 44]
	mov	dword ptr [ebx + 8], 0
	mov	dword ptr [ebx + 24], 0
	mov	dword ptr [ebx + 40], 0
	mov	dword ptr [ebx + 4], 0
	mov	dword ptr [ebx + 20], 0
	mov	dword ptr [ebx + 36], 0
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], 0
	push	eax
	push	ecx
	push	edi
	push	esi
	call	__get_stream_buffer_pointers
	add	esp, 16
	mov	eax, dword ptr [ebp - 44]
	mov	ecx, dword ptr [ebp - 48]
	mov	edx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	dword ptr [ebx + 12], edx
	mov	dword ptr [ebx + 16], edx
	mov	dword ptr [ebx + 28], ecx
	mov	dword ptr [ebx + 32], ecx
	mov	dword ptr [ebx + 44], eax
	mov	dword ptr [ebx + 48], eax
	mov	dword ptr [ebx + 76], esi
	mov	eax, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"]
	mov	ecx, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"+4]
	mov	dword ptr [ebx + 68], ecx
	mov	dword ptr [ebx + 64], eax
	mov	dword ptr [ebx + 56], 0
	mov	eax, dword ptr [ebx + 52]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 36], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	dword ptr [ebp - 16], 0
	push	edi
	call	"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.3:
	mov	esi, eax
	mov	eax, dword ptr [eax]
	mov	ecx, esi
	call	dword ptr [eax + 12]
	test	al, al
	je	LBB126_5
# %bb.4:
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [edi + 56], 0
	mov	ecx, dword ptr [ebp - 36]
	test	ecx, ecx
	jne	LBB126_7
	jmp	LBB126_9
LBB126_5:
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 72]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 68]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 64]       # 4-byte Reload
	mov	dword ptr [edi + 56], esi
	mov	dword ptr [edi + 12], eax
	mov	dword ptr [edi + 16], ecx
	mov	ecx, dword ptr [ebp - 60]       # 4-byte Reload
	mov	dword ptr [edi + 28], edx
	mov	edx, dword ptr [ebp - 56]       # 4-byte Reload
	mov	dword ptr [edi + 32], ecx
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	dword ptr [edi + 44], edx
	mov	dword ptr [edi + 48], ecx
	mov	dword ptr [edi + 8], 0
	mov	dword ptr [edi + 24], 0
	mov	dword ptr [edi + 40], 0
	mov	dword ptr [edi + 4], 0
	mov	dword ptr [edi + 20], 0
	mov	dword ptr [edi + 36], 0
	mov	ecx, dword ptr [ebp - 36]
	test	ecx, ecx
	je	LBB126_9
LBB126_7:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB126_9
# %bb.8:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
	jmp	LBB126_9
	.def	 "?dtor$10@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$10@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z@4HA":
LBB126_10:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 36]
	test	ecx, ecx
	je	LBB126_13
# %bb.11:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB126_13
# %bb.12:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB126_13:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end39:
	.section	.xdata,"dr",associative,"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.p2align	2
"L__ehtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z":
	.long	-1                              # ToState
	.long	"?dtor$10@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z@4HA" # Action
	.section	.text,"xr",discard,"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
                                        # -- End function
	.def	 "??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.globl	"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z" # -- Begin function ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z": # @"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
Lfunc_begin40:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB127_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB127_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z@4HA":
LBB127_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end40:
	.section	.xdata,"dr",associative,"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@00000201000000000000000000000000 # -- Begin function ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
	.section	.rdata,"dr",discard,__xmm@00000201000000000000000000000000
	.p2align	4
__xmm@00000201000000000000000000000000:
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	513                             # 0x201
	.section	.text,"xr",discard,"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.globl	"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.p2align	4, 0x90
"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z": # @"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
Lfunc_begin41:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 52
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	movaps	xmm0, xmmword ptr [__xmm@00000201000000000000000000000000] # xmm0 = [0,0,0,513]
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx + 48], 0
	mov	dword ptr [ecx + 28], 0
	mov	dword ptr [ecx + 24], 6
	movups	xmmword ptr [ecx + 8], xmm0
	mov	dword ptr [ecx + 36], 0
	mov	dword ptr [ecx + 32], 0
	mov	dword ptr [ecx + 44], 0
	mov	dword ptr [ecx + 40], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	push	1
	call	"?_Init@locale@std@@CAPAV_Locimp@12@_N@Z"
	add	esp, 4
# %bb.1:
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [esi + 4], eax
	mov	dword ptr [edx + 48], esi
	mov	dword ptr [edx + 56], ecx
	mov	dword ptr [edx + 60], 0
	mov	dword ptr [ebp - 60], eax
	mov	ecx, eax
	mov	edx, dword ptr [eax]
	call	dword ptr [edx + 4]
	lea	eax, [ebp - 64]
	mov	dword ptr [ebp - 16], 1
	push	eax
	call	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.2:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	32
	call	dword ptr [edx + 32]
# %bb.3:
	mov	ecx, dword ptr [ebp - 60]
	mov	ebx, eax
	test	ecx, ecx
	je	LBB128_6
# %bb.4:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB128_6
# %bb.5:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB128_6:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	byte ptr [edx + 64], bl
	cmp	dword ptr [edx + 56], 0
	jne	LBB128_15
# %bb.7:
	mov	eax, dword ptr [edx + 12]
	and	eax, 19
	or	eax, 4
	mov	dword ptr [edx + 12], eax
	mov	ecx, dword ptr [edx + 16]
	and	eax, ecx
	jne	LBB128_8
LBB128_15:
	cmp	byte ptr [ebp + 12], 0
	je	LBB128_17
# %bb.16:
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"?_Addstd@ios_base@std@@SAXPAV12@@Z"
	add	esp, 4
LBB128_17:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 52
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
LBB128_8:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB128_10
# %bb.9:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB128_10:
	test	al, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	lea	esi, [ebp - 64]
	mov	dword ptr [ebp - 44], 1
	mov	dword ptr [ebp - 40], offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	mov	dword ptr [ebp - 16], -1
	cmove	edx, eax
	test	cl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	mov	ecx, esi
	cmove	eax, edx
	lea	edx, [ebp - 44]
	push	edx
	push	eax
	call	"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	push	esi
	call	__CxxThrowException@8
	.def	 "?dtor$11@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA":
LBB128_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 60]
	test	ecx, ecx
	je	LBB128_14
# %bb.12:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB128_14
# %bb.13:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB128_14:
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$18@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA":
LBB128_18:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end41:
	.section	.xdata,"dr",associative,"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.p2align	2
"L__ehtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$11@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA" # Action
	.section	.text,"xr",discard,"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
                                        # -- End function
	.def	 "??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.globl	"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z" # -- Begin function ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	.p2align	4, 0x90
"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z": # @"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
Lfunc_begin42:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	sub	ecx, dword ptr [ecx - 4]
	mov	dword ptr [ecx], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	push	ecx
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	add	esi, -24
	cmp	dword ptr [ebp + 8], 0
	je	LBB129_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB129_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA":
LBB129_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end42:
	.section	.xdata,"dr",associative,"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.p2align	2
"L__ehtable$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
                                        # -- End function
	.def	 "??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
	.globl	"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z" # -- Begin function ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	.p2align	4, 0x90
"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z": # @"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 12]
	mov	esi, ecx
	push	dword ptr [esp + 8]
	push	dword ptr [eax + 4]
	push	dword ptr [eax]
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	mov	dword ptr [esi], offset "??_7failure@ios_base@std@@6B@"
	mov	eax, esi
	pop	esi
	ret	8
                                        # -- End function
	.def	 "??0failure@ios_base@std@@QAE@ABV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0failure@ios_base@std@@QAE@ABV012@@Z"
	.globl	"??0failure@ios_base@std@@QAE@ABV012@@Z" # -- Begin function ??0failure@ios_base@std@@QAE@ABV012@@Z
	.p2align	4, 0x90
"??0failure@ios_base@std@@QAE@ABV012@@Z": # @"??0failure@ios_base@std@@QAE@ABV012@@Z"
Lfunc_begin43:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	lea	ecx, [esi + 4]
	mov	dword ptr [ebp - 16], 0
	push	eax
	push	ecx
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [eax], offset "??_7_System_error@std@@6B@"
	mov	edx, dword ptr [ecx + 12]
	mov	ecx, dword ptr [ecx + 16]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 12], edx
	mov	dword ptr [eax], offset "??_7failure@ios_base@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0failure@ios_base@std@@QAE@ABV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0failure@ios_base@std@@QAE@ABV012@@Z@4HA":
LBB131_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end43:
	.section	.xdata,"dr",associative,"??0failure@ios_base@std@@QAE@ABV012@@Z"
	.p2align	2
"L__ehtable$??0failure@ios_base@std@@QAE@ABV012@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0failure@ios_base@std@@QAE@ABV012@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0failure@ios_base@std@@QAE@ABV012@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0failure@ios_base@std@@QAE@ABV012@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0failure@ios_base@std@@QAE@ABV012@@Z"
                                        # -- End function
	.def	 "??0system_error@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0system_error@std@@QAE@ABV01@@Z"
	.globl	"??0system_error@std@@QAE@ABV01@@Z" # -- Begin function ??0system_error@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0system_error@std@@QAE@ABV01@@Z":    # @"??0system_error@std@@QAE@ABV01@@Z"
Lfunc_begin44:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0system_error@std@@QAE@ABV01@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	lea	ecx, [esi + 4]
	mov	dword ptr [ebp - 16], 0
	push	eax
	push	ecx
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [eax], offset "??_7_System_error@std@@6B@"
	mov	edx, dword ptr [ecx + 12]
	mov	ecx, dword ptr [ecx + 16]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 12], edx
	mov	dword ptr [eax], offset "??_7system_error@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0system_error@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0system_error@std@@QAE@ABV01@@Z@4HA":
LBB132_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end44:
	.section	.xdata,"dr",associative,"??0system_error@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0system_error@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0system_error@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0system_error@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0system_error@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0system_error@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0_System_error@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0_System_error@std@@QAE@ABV01@@Z"
	.globl	"??0_System_error@std@@QAE@ABV01@@Z" # -- Begin function ??0_System_error@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0_System_error@std@@QAE@ABV01@@Z":   # @"??0_System_error@std@@QAE@ABV01@@Z"
Lfunc_begin45:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0_System_error@std@@QAE@ABV01@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	lea	ecx, [esi + 4]
	mov	dword ptr [ebp - 16], 0
	push	eax
	push	ecx
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [eax], offset "??_7_System_error@std@@6B@"
	movsd	xmm0, qword ptr [ecx + 12]      # xmm0 = mem[0],zero
	movsd	qword ptr [eax + 12], xmm0
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0_System_error@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0_System_error@std@@QAE@ABV01@@Z@4HA":
LBB133_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end45:
	.section	.xdata,"dr",associative,"??0_System_error@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0_System_error@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0_System_error@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0_System_error@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0_System_error@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0_System_error@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0runtime_error@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0runtime_error@std@@QAE@ABV01@@Z"
	.globl	"??0runtime_error@std@@QAE@ABV01@@Z" # -- Begin function ??0runtime_error@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0runtime_error@std@@QAE@ABV01@@Z":   # @"??0runtime_error@std@@QAE@ABV01@@Z"
Lfunc_begin46:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7runtime_error@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0runtime_error@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0runtime_error@std@@QAE@ABV01@@Z@4HA":
LBB134_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end46:
	.section	.xdata,"dr",associative,"??0runtime_error@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0runtime_error@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0runtime_error@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0runtime_error@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0runtime_error@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0runtime_error@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??_G_Iostream_error_category2@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G_Iostream_error_category2@std@@UAEPAXI@Z"
	.globl	"??_G_Iostream_error_category2@std@@UAEPAXI@Z" # -- Begin function ??_G_Iostream_error_category2@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G_Iostream_error_category2@std@@UAEPAXI@Z": # @"??_G_Iostream_error_category2@std@@UAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB135_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB135_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?name@_Iostream_error_category2@std@@UBEPBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?name@_Iostream_error_category2@std@@UBEPBDXZ"
	.globl	"?name@_Iostream_error_category2@std@@UBEPBDXZ" # -- Begin function ?name@_Iostream_error_category2@std@@UBEPBDXZ
	.p2align	4, 0x90
"?name@_Iostream_error_category2@std@@UBEPBDXZ": # @"?name@_Iostream_error_category2@std@@UBEPBDXZ"
# %bb.0:
	mov	eax, offset "??_C@_08LLGCOLLL@iostream?$AA@"
	ret
                                        # -- End function
	.def	 "?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
	.globl	"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z" # -- Begin function ?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	.p2align	4, 0x90
"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z": # @"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	eax, dword ptr [esp + 40]
	mov	esi, dword ptr [esp + 36]
	cmp	eax, 1
	jne	LBB137_2
# %bb.1:
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	mov	al, byte ptr [esp + 12]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], offset "?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
	mov	dword ptr [esp], 21
	jmp	LBB137_5
LBB137_2:
	mov	dword ptr [esp], eax
	call	"?_Syserror_map@std@@YAPBDH@Z"
	mov	edi, eax
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	mov	dword ptr [esp], eax
	call	_strlen
	mov	ebx, eax
	cmp	eax, 15
	jbe	LBB137_3
# %bb.4:
	mov	al, byte ptr [esp + 16]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], ebx
LBB137_5:
	mov	ecx, esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	sub	esp, 12
	jmp	LBB137_6
LBB137_3:
	mov	dword ptr [esi + 16], ebx
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], esi
	call	_memmove
	mov	byte ptr [esi + ebx], 0
LBB137_6:
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	ret	8
                                        # -- End function
	.def	 "?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z"
	.globl	"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z" # -- Begin function ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	.p2align	4, 0x90
"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z": # @"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	edx, dword ptr [esp + 8]
	mov	dword ptr [eax], edx
	mov	dword ptr [eax + 4], ecx
	ret	8
                                        # -- End function
	.def	 "?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z"
	.globl	"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z" # -- Begin function ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	.p2align	4, 0x90
"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z": # @"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	ecx, dword ptr [ecx + 4]
	mov	edx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	xor	ecx, dword ptr [eax + 4]
	xor	edx, dword ptr [esp + 8]
	or	edx, ecx
	sete	al
	ret	8
                                        # -- End function
	.def	 "?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z"
	.globl	"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z" # -- Begin function ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
	.p2align	4, 0x90
"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z": # @"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z"
# %bb.0:
	push	esi
	sub	esp, 8
	mov	esi, dword ptr [esp + 20]
	mov	eax, dword ptr [ecx]
	mov	edx, esp
	push	dword ptr [esp + 16]
	push	edx
	call	dword ptr [eax + 12]
	mov	ecx, dword ptr [esp + 4]
	mov	eax, dword ptr [esp]
	mov	edx, dword ptr [esi + 4]
	mov	ecx, dword ptr [ecx + 4]
	xor	eax, dword ptr [esi]
	xor	ecx, dword ptr [edx + 4]
	or	eax, ecx
	sete	al
	add	esp, 8
	pop	esi
	ret	8
                                        # -- End function
	.def	 "??0system_error@std@@QAE@Verror_code@1@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.globl	"??0system_error@std@@QAE@Verror_code@1@PBD@Z" # -- Begin function ??0system_error@std@@QAE@Verror_code@1@PBD@Z
	.p2align	4, 0x90
"??0system_error@std@@QAE@Verror_code@1@PBD@Z": # @"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
Lfunc_begin47:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 48
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	mov	edi, dword ptr [ebp + 16]
	mov	ebx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	mov	eax, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], eax
	lea	eax, [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 40], 15
	mov	dword ptr [ebp - 44], 0
	mov	byte ptr [ebp - 60], 0
	push	edi
	call	_strlen
	add	esp, 4
	mov	esi, eax
	cmp	eax, 15
	jbe	LBB141_1
# %bb.2:
	sub	esp, 12
	mov	al, byte ptr [ebp - 32]
	lea	ecx, [ebp - 60]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB141_3
LBB141_1:
	mov	dword ptr [ebp - 44], esi
	lea	eax, [ebp - 60]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 60], 0
LBB141_3:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	lea	eax, [ebp - 60]
	mov	dword ptr [ebp - 16], 1
	push	eax
	push	dword ptr [ebp + 12]
	push	ebx
	call	"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
# %bb.4:
	mov	eax, dword ptr [ebp - 40]
	cmp	eax, 16
	jb	LBB141_12
# %bb.5:
	mov	ecx, dword ptr [ebp - 60]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB141_11
# %bb.6:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB141_7
# %bb.10:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB141_11:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB141_12:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7system_error@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 48
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB141_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$9@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA":
LBB141_9:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$13@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA":
LBB141_13:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	cmp	eax, 16
	jb	LBB141_18
# %bb.14:
	mov	ecx, dword ptr [ebp - 60]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB141_17
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB141_19
# %bb.16:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB141_17:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB141_18:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
LBB141_19:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end47:
	.section	.xdata,"dr",associative,"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.p2align	2
"L__ehtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??0system_error@std@@QAE@Verror_code@1@PBD@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0system_error@std@@QAE@Verror_code@1@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$9@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$13@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA" # Action
	.section	.text,"xr",discard,"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
                                        # -- End function
	.def	 "??_Gfailure@ios_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.globl	"??_Gfailure@ios_base@std@@UAEPAXI@Z" # -- Begin function ??_Gfailure@ios_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gfailure@ios_base@std@@UAEPAXI@Z":  # @"??_Gfailure@ios_base@std@@UAEPAXI@Z"
Lfunc_begin48:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB142_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB142_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gfailure@ios_base@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gfailure@ios_base@std@@UAEPAXI@Z@4HA":
LBB142_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end48:
	.section	.xdata,"dr",associative,"??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gfailure@ios_base@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gfailure@ios_base@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gfailure@ios_base@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gfailure@ios_base@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gfailure@ios_base@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.globl	"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z" # -- Begin function ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	.p2align	4, 0x90
"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z": # @"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
Lfunc_begin49:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 64
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	mov	esi, dword ptr [ebp + 16]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 44], esp       # 4-byte Spill
	mov	eax, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], eax
	lea	eax, [ebp - 24]
	mov	dword ptr fs:[0], eax
	push	eax
	sub	esp, 32
	mov	edi, esp
	mov	dword ptr [edi + 28], 0
	mov	dword ptr [edi + 32], 0
	mov	eax, dword ptr [esi + 16]
	cmp	dword ptr [esi + 20], 15
	jbe	LBB143_2
# %bb.1:
	mov	esi, dword ptr [esi]
LBB143_2:
	mov	ebx, edi
	add	ebx, 12
	cmp	eax, 15
	ja	LBB143_4
# %bb.3:
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [esi + 8]       # xmm1 = mem[0],zero
	mov	ecx, 15
	movsd	qword ptr [ebx + 8], xmm1
	movsd	qword ptr [ebx], xmm0
	jmp	LBB143_8
LBB143_4:
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	or	eax, 15
	mov	ecx, 2147483647
	cmp	eax, 2147483647
	cmovb	ecx, eax
	cmp	ecx, 4095
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	jb	LBB143_6
# %bb.5:
	lea	eax, [ecx + 36]
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
	add	eax, 35
	and	eax, -32
	mov	dword ptr [eax - 4], ecx
	jmp	LBB143_7
LBB143_6:
	lea	eax, [ecx + 1]
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
LBB143_7:
	mov	dword ptr [ebx], eax
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	lea	ecx, [ebx + 1]
	push	ecx
	push	esi
	push	eax
	call	_memcpy
	mov	eax, ebx
	add	esp, 12
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
LBB143_8:
	mov	dword ptr [edi + 28], eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [edi + 32], ecx
	lea	esi, [ebp - 76]
	mov	dword ptr [edi + 4], eax
	mov	eax, dword ptr [ebp + 12]
	mov	dword ptr [edi + 8], eax
	mov	dword ptr [edi], esi
	call	"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	add	esp, 36
	mov	esp, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	dword ptr [ebp - 56], 15
	jbe	LBB143_10
# %bb.9:
	mov	esi, dword ptr [ebp - 76]
LBB143_10:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 52], esi
	mov	byte ptr [ebp - 48], 1
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 52]
	push	eax
	push	ecx
	call	___std_exception_copy
	add	esp, 8
# %bb.11:
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [edi], offset "??_7runtime_error@std@@6B@"
	mov	eax, dword ptr [ebp - 56]
	cmp	eax, 16
	jb	LBB143_19
# %bb.12:
	mov	ecx, dword ptr [ebp - 76]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB143_18
# %bb.13:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB143_14
# %bb.17:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB143_18:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB143_19:
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [edi], offset "??_7_System_error@std@@6B@"
	mov	dword ptr [edi + 12], eax
	mov	eax, dword ptr [ebp + 12]
	mov	dword ptr [edi + 16], eax
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB143_14:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.15:
	.def	 "?dtor$16@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA":
LBB143_16:
	push	ebp
	sub	esp, 36
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$20@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA":
LBB143_20:
	push	ebp
	sub	esp, 36
	add	ebp, 12
	call	___std_terminate
Lfunc_end49:
	.section	.xdata,"dr",associative,"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.p2align	2
"L__ehtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z":
	.long	-1                              # ToState
	.long	"?dtor$20@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$16@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
                                        # -- End function
	.def	 "??_Gsystem_error@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gsystem_error@std@@UAEPAXI@Z"
	.globl	"??_Gsystem_error@std@@UAEPAXI@Z" # -- Begin function ??_Gsystem_error@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gsystem_error@std@@UAEPAXI@Z":      # @"??_Gsystem_error@std@@UAEPAXI@Z"
Lfunc_begin50:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB144_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB144_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gsystem_error@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gsystem_error@std@@UAEPAXI@Z@4HA":
LBB144_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end50:
	.section	.xdata,"dr",associative,"??_Gsystem_error@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gsystem_error@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gsystem_error@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gsystem_error@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gsystem_error@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gsystem_error@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.globl	"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z" # -- Begin function ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	.p2align	4, 0x90
"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z": # @"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
Lfunc_begin51:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 48
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	lea	eax, [ebp - 24]
	lea	esi, [ebp + 8]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp + 36]
	test	eax, eax
	je	LBB145_7
# %bb.1:
	mov	ecx, dword ptr [esi + 32]
	mov	edx, ecx
	sub	edx, eax
	cmp	edx, 2
	jae	LBB145_2
# %bb.5:
	mov	dword ptr [ebp - 16], 1
	sub	esp, 16
	mov	al, byte ptr [ebp - 56]
	lea	ecx, [ebp + 20]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 12], 2
	mov	dword ptr [esp + 8], offset "??_C@_02LMMGGCAJ@?3?5?$AA@"
	mov	dword ptr [esp], 2
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	jmp	LBB145_6
LBB145_2:
	lea	edx, [eax + 2]
	cmp	ecx, 16
	lea	ecx, [ebp + 20]
	mov	dword ptr [esi + 28], edx
	jb	LBB145_4
# %bb.3:
	lea	ecx, [ebp + 20]
	mov	ecx, dword ptr [ecx]
LBB145_4:
	mov	word ptr [ecx + eax], 8250
	mov	byte ptr [ecx + eax + 2], 0
LBB145_6:
	lea	esi, [ebp + 8]
	mov	dword ptr [ebp - 16], 1
LBB145_7:
	mov	ecx, dword ptr [esi + 8]
	mov	eax, dword ptr [esi + 4]
	lea	esi, [ebp - 56]
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 8]
	mov	dword ptr [ebp - 16], 1
	push	eax
	push	esi
	call	edx
# %bb.8:
	mov	eax, dword ptr [ebp - 40]
	cmp	dword ptr [ebp - 36], 15
	lea	ebx, [ebp - 56]
	jbe	LBB145_10
# %bb.9:
	mov	ebx, dword ptr [ebp - 56]
LBB145_10:
	lea	edi, [ebp + 8]
	mov	edx, dword ptr [edi + 32]
	mov	ecx, dword ptr [edi + 28]
	mov	esi, edx
	sub	esi, ecx
	cmp	esi, eax
	jae	LBB145_11
# %bb.14:
	mov	dword ptr [ebp - 16], 2
	sub	esp, 16
	mov	cl, byte ptr [ebp - 32]
	mov	byte ptr [esp + 4], cl
	lea	ecx, [ebp + 20]
	mov	dword ptr [esp + 12], eax
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], eax
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
# %bb.15:
	mov	eax, dword ptr [ebp - 36]
	lea	edi, [ebp + 8]
	cmp	eax, 16
	jae	LBB145_16
	jmp	LBB145_23
LBB145_11:
	lea	esi, [ecx + eax]
	cmp	edx, 16
	mov	dword ptr [edi + 28], esi
	lea	edi, [ebp + 20]
	jb	LBB145_13
# %bb.12:
	lea	edx, [ebp + 20]
	mov	edi, dword ptr [edx]
LBB145_13:
	add	ecx, edi
	push	eax
	push	ebx
	push	ecx
	call	_memmove
	add	esp, 12
	mov	byte ptr [edi + esi], 0
	mov	eax, dword ptr [ebp - 36]
	lea	edi, [ebp + 8]
	cmp	eax, 16
	jb	LBB145_23
LBB145_16:
	mov	ecx, dword ptr [ebp - 56]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB145_22
# %bb.17:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB145_18
# %bb.21:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB145_22:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB145_23:
	mov	ecx, dword ptr [ebp - 60]       # 4-byte Reload
	lea	eax, [ebp + 20]
	mov	dword ptr [ecx + 16], 0
	mov	dword ptr [ecx + 20], 0
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ecx + 16], xmm0
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [ecx + 8], xmm1
	movsd	qword ptr [ecx], xmm0
	mov	dword ptr [edi + 28], 0
	mov	dword ptr [edi + 32], 15
	mov	byte ptr [edi + 12], 0
	mov	ecx, dword ptr [ebp - 24]
	mov	eax, dword ptr [edi]
	mov	dword ptr fs:[0], ecx
	add	esp, 48
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB145_18:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.19:
	.def	 "?dtor$20@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA":
LBB145_20:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$24@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$24@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA":
LBB145_24:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jb	LBB145_29
# %bb.25:
	mov	ecx, dword ptr [ebp - 56]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB145_28
# %bb.26:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB145_36
# %bb.27:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB145_28:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB145_29:
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 15
	mov	byte ptr [ebp - 56], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB145_36:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$30@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$30@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA":
LBB145_30:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	lea	eax, [ebp + 8]
	mov	eax, dword ptr [eax + 32]
	cmp	eax, 16
	jb	LBB145_35
# %bb.31:
	lea	ecx, [ebp + 20]
	lea	esi, [eax + 1]
	mov	ecx, dword ptr [ecx]
	cmp	esi, 4096
	jb	LBB145_34
# %bb.32:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB145_37
# %bb.33:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB145_34:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB145_35:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB145_37:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end51:
	.section	.xdata,"dr",associative,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.p2align	2
"L__ehtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z":
	.long	-1                              # ToState
	.long	"?dtor$20@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$30@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA" # Action
	.long	1                               # ToState
	.long	"?dtor$24@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
                                        # -- End function
	.def	 "??_G_System_error@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G_System_error@std@@UAEPAXI@Z"
	.globl	"??_G_System_error@std@@UAEPAXI@Z" # -- Begin function ??_G_System_error@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G_System_error@std@@UAEPAXI@Z":     # @"??_G_System_error@std@@UAEPAXI@Z"
Lfunc_begin52:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_G_System_error@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB146_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB146_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_G_System_error@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_G_System_error@std@@UAEPAXI@Z@4HA":
LBB146_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end52:
	.section	.xdata,"dr",associative,"??_G_System_error@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_G_System_error@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_G_System_error@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_G_System_error@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_G_System_error@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_G_System_error@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??_Gruntime_error@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gruntime_error@std@@UAEPAXI@Z"
	.globl	"??_Gruntime_error@std@@UAEPAXI@Z" # -- Begin function ??_Gruntime_error@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gruntime_error@std@@UAEPAXI@Z":     # @"??_Gruntime_error@std@@UAEPAXI@Z"
Lfunc_begin53:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB147_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB147_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gruntime_error@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gruntime_error@std@@UAEPAXI@Z@4HA":
LBB147_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end53:
	.section	.xdata,"dr",associative,"??_Gruntime_error@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gruntime_error@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gruntime_error@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gruntime_error@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gruntime_error@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gruntime_error@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.globl	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z" # -- Begin function ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	.p2align	4, 0x90
"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z": # @"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
Lfunc_begin54:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	lea	ecx, [ebp - 40]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	mov	edx, dword ptr ["?id@?$ctype@D@std@@2V0locale@2@A"]
	mov	eax, dword ptr ["?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B"]
	test	edx, edx
	mov	dword ptr [ebp - 36], eax
	je	LBB148_1
# %bb.4:
	mov	eax, dword ptr [edi + 4]
	cmp	dword ptr [eax + 12], edx
	ja	LBB148_5
	jmp	LBB148_6
LBB148_1:
	lea	ecx, [ebp - 44]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	cmp	dword ptr ["?id@?$ctype@D@std@@2V0locale@2@A"], 0
	jne	LBB148_3
# %bb.2:
	mov	eax, dword ptr ["?_Id_cnt@id@locale@std@@0HA"]
	inc	eax
	mov	dword ptr ["?_Id_cnt@id@locale@std@@0HA"], eax
	mov	dword ptr ["?id@?$ctype@D@std@@2V0locale@2@A"], eax
LBB148_3:
	lea	ecx, [ebp - 44]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	edx, dword ptr ["?id@?$ctype@D@std@@2V0locale@2@A"]
	mov	eax, dword ptr [edi + 4]
	cmp	dword ptr [eax + 12], edx
	jbe	LBB148_6
LBB148_5:
	mov	ecx, dword ptr [eax + 8]
	mov	esi, dword ptr [ecx + 4*edx]
	test	esi, esi
	jne	LBB148_17
LBB148_6:
	cmp	byte ptr [eax + 20], 0
	je	LBB148_10
# %bb.7:
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"
# %bb.8:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	cmp	dword ptr [eax + 12], ecx
	jbe	LBB148_10
# %bb.9:
	mov	eax, dword ptr [eax + 8]
	mov	esi, dword ptr [eax + 4*ecx]
	test	esi, esi
	jne	LBB148_17
LBB148_10:
	mov	esi, dword ptr [ebp - 36]
	test	esi, esi
	jne	LBB148_17
# %bb.11:
	lea	eax, [ebp - 36]
	mov	dword ptr [ebp - 16], 0
	push	edi
	push	eax
	call	"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	add	esp, 8
# %bb.12:
	cmp	eax, -1
	je	LBB148_13
# %bb.15:
	mov	eax, dword ptr [ebp - 36]
	mov	dword ptr [ebp - 16], 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	push	eax
	call	"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"
	add	esp, 4
# %bb.16:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	esi, dword ptr [ebp - 36]
	mov	dword ptr ["?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B"], esi
LBB148_17:
	lea	ecx, [ebp - 40]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB148_13:
	call	"?_Throw_bad_cast@std@@YAXXZ"
# %bb.14:
	.def	 "?dtor$18@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA":
LBB148_18:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	cmp	dword ptr [ebp - 32], 0         # 4-byte Folded Reload
	je	LBB148_20
# %bb.19:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	push	1
	call	dword ptr [eax]
LBB148_20:
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$21@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA":
LBB148_21:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end54:
	.section	.xdata,"dr",associative,"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.p2align	2
"L__ehtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z":
	.long	-1                              # ToState
	.long	"?dtor$21@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$18@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
                                        # -- End function
	.def	 "?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.globl	"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z" # -- Begin function ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	.p2align	4, 0x90
"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z": # @"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
Lfunc_begin55:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 88
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB149_8
# %bb.1:
	cmp	dword ptr [edx], 0
	jne	LBB149_8
# %bb.2:
	mov	esi, dword ptr [ebp + 12]
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [esi + 4]
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	test	edx, edx
	je	LBB149_3
# %bb.4:
	mov	ecx, dword ptr [edx + 24]
	add	edx, 28
	test	ecx, ecx
	cmovne	edx, ecx
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 100]
	push	edx
	call	"??0_Locinfo@std@@QAE@PBD@Z"
	jmp	LBB149_6
LBB149_3:
	mov	edx, offset "??_C@_00CNPNBAHC@?$AA@"
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 100]
	push	edx
	call	"??0_Locinfo@std@@QAE@PBD@Z"
LBB149_6:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [ebp - 16], 1
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], offset "??_7?$ctype@D@std@@6B@"
	lea	eax, [ebp - 48]
	push	eax
	call	__Getctype
	add	esp, 4
# %bb.7:
	movsd	xmm0, qword ptr [ebp - 48]      # xmm0 = mem[0],zero
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	movsd	xmm1, qword ptr [ebp - 40]      # xmm1 = mem[0],zero
	mov	eax, dword ptr [ebp + 8]
	movsd	qword ptr [ecx + 16], xmm1
	movsd	qword ptr [ecx + 8], xmm0
	mov	dword ptr [eax], ecx
	lea	ecx, [ebp - 100]
	call	"??1_Locinfo@std@@QAE@XZ"
LBB149_8:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, 2
	add	esp, 88
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$9@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA":
LBB149_9:
	push	ebp
	push	eax
	add	ebp, 12
	lea	ecx, [ebp - 100]
	call	"??1_Locinfo@std@@QAE@XZ"
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$10@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$10@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA":
LBB149_10:
	push	ebp
	push	eax
	add	ebp, 12
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??3@YAXPAX@Z"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end55:
	.section	.xdata,"dr",associative,"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.p2align	2
"L__ehtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z":
	.long	-1                              # ToState
	.long	"?dtor$10@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$9@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
                                        # -- End function
	.def	 "??_G?$ctype@D@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$ctype@D@std@@MAEPAXI@Z"
	.globl	"??_G?$ctype@D@std@@MAEPAXI@Z"  # -- Begin function ??_G?$ctype@D@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_G?$ctype@D@std@@MAEPAXI@Z":         # @"??_G?$ctype@D@std@@MAEPAXI@Z"
# %bb.0:
	push	edi
	push	esi
	mov	dword ptr [ecx], offset "??_7?$ctype@D@std@@6B@"
	mov	edi, dword ptr [esp + 12]
	mov	esi, ecx
	cmp	dword ptr [ecx + 16], 0
	jle	LBB150_2
# %bb.1:
	push	dword ptr [esi + 12]
	call	_free
LBB150_5:
	add	esp, 4
	jmp	LBB150_6
LBB150_2:
	js	LBB150_3
LBB150_6:
	push	dword ptr [esi + 20]
	call	_free
	add	esp, 4
	test	edi, edi
	je	LBB150_8
# %bb.7:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB150_8:
	mov	eax, esi
	pop	esi
	pop	edi
	ret	4
LBB150_3:
	mov	eax, dword ptr [esi + 12]
	test	eax, eax
	je	LBB150_6
# %bb.4:
	push	eax
	call	"??_V@YAXPAX@Z"
	jmp	LBB150_5
                                        # -- End function
	.def	 "?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z"
	.globl	"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z" # -- Begin function ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	.p2align	4, 0x90
"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z": # @"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	ebx, dword ptr [esp + 20]
	mov	esi, dword ptr [esp + 16]
	cmp	esi, ebx
	je	LBB151_4
# %bb.1:
	mov	edi, ecx
	add	edi, 8
	.p2align	4, 0x90
LBB151_2:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi]
	push	edi
	push	eax
	call	__Tolower
	add	esp, 8
	mov	byte ptr [esi], al
	inc	esi
	cmp	ebx, esi
	jne	LBB151_2
# %bb.3:
	mov	esi, ebx
LBB151_4:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	ret	8
                                        # -- End function
	.def	 "?do_tolower@?$ctype@D@std@@MBEDD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_tolower@?$ctype@D@std@@MBEDD@Z"
	.globl	"?do_tolower@?$ctype@D@std@@MBEDD@Z" # -- Begin function ?do_tolower@?$ctype@D@std@@MBEDD@Z
	.p2align	4, 0x90
"?do_tolower@?$ctype@D@std@@MBEDD@Z":   # @"?do_tolower@?$ctype@D@std@@MBEDD@Z"
# %bb.0:
	movzx	eax, byte ptr [esp + 4]
	add	ecx, 8
	push	ecx
	push	eax
	call	__Tolower
	add	esp, 8
                                        # kill: def $al killed $al killed $eax
	ret	4
                                        # -- End function
	.def	 "?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z"
	.globl	"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z" # -- Begin function ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	.p2align	4, 0x90
"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z": # @"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	ebx, dword ptr [esp + 20]
	mov	esi, dword ptr [esp + 16]
	cmp	esi, ebx
	je	LBB153_4
# %bb.1:
	mov	edi, ecx
	add	edi, 8
	.p2align	4, 0x90
LBB153_2:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi]
	push	edi
	push	eax
	call	__Toupper
	add	esp, 8
	mov	byte ptr [esi], al
	inc	esi
	cmp	ebx, esi
	jne	LBB153_2
# %bb.3:
	mov	esi, ebx
LBB153_4:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	ret	8
                                        # -- End function
	.def	 "?do_toupper@?$ctype@D@std@@MBEDD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_toupper@?$ctype@D@std@@MBEDD@Z"
	.globl	"?do_toupper@?$ctype@D@std@@MBEDD@Z" # -- Begin function ?do_toupper@?$ctype@D@std@@MBEDD@Z
	.p2align	4, 0x90
"?do_toupper@?$ctype@D@std@@MBEDD@Z":   # @"?do_toupper@?$ctype@D@std@@MBEDD@Z"
# %bb.0:
	movzx	eax, byte ptr [esp + 4]
	add	ecx, 8
	push	ecx
	push	eax
	call	__Toupper
	add	esp, 8
                                        # kill: def $al killed $al killed $eax
	ret	4
                                        # -- End function
	.def	 "?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z"
	.globl	"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z" # -- Begin function ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	.p2align	4, 0x90
"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z": # @"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z"
# %bb.0:
	push	esi
	mov	esi, dword ptr [esp + 12]
	mov	eax, dword ptr [esp + 8]
	mov	ecx, esi
	sub	ecx, eax
	push	ecx
	push	eax
	push	dword ptr [esp + 24]
	call	_memcpy
	add	esp, 12
	mov	eax, esi
	pop	esi
	ret	12
                                        # -- End function
	.def	 "?do_widen@?$ctype@D@std@@MBEDD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_widen@?$ctype@D@std@@MBEDD@Z"
	.globl	"?do_widen@?$ctype@D@std@@MBEDD@Z" # -- Begin function ?do_widen@?$ctype@D@std@@MBEDD@Z
	.p2align	4, 0x90
"?do_widen@?$ctype@D@std@@MBEDD@Z":     # @"?do_widen@?$ctype@D@std@@MBEDD@Z"
# %bb.0:
	mov	al, byte ptr [esp + 4]
	ret	4
                                        # -- End function
	.def	 "?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z"
	.globl	"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z" # -- Begin function ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	.p2align	4, 0x90
"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z": # @"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z"
# %bb.0:
	push	esi
	mov	esi, dword ptr [esp + 12]
	mov	eax, dword ptr [esp + 8]
	mov	ecx, esi
	sub	ecx, eax
	push	ecx
	push	eax
	push	dword ptr [esp + 28]
	call	_memcpy
	add	esp, 12
	mov	eax, esi
	pop	esi
	ret	16
                                        # -- End function
	.def	 "?do_narrow@?$ctype@D@std@@MBEDDD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_narrow@?$ctype@D@std@@MBEDDD@Z"
	.globl	"?do_narrow@?$ctype@D@std@@MBEDDD@Z" # -- Begin function ?do_narrow@?$ctype@D@std@@MBEDDD@Z
	.p2align	4, 0x90
"?do_narrow@?$ctype@D@std@@MBEDDD@Z":   # @"?do_narrow@?$ctype@D@std@@MBEDDD@Z"
# %bb.0:
	mov	al, byte ptr [esp + 4]
	ret	8
                                        # -- End function
	.def	 "??_Gctype_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gctype_base@std@@UAEPAXI@Z"
	.globl	"??_Gctype_base@std@@UAEPAXI@Z" # -- Begin function ??_Gctype_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gctype_base@std@@UAEPAXI@Z":        # @"??_Gctype_base@std@@UAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB159_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB159_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.globl	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z" # -- Begin function ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
	.p2align	4, 0x90
"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z": # @"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
Lfunc_begin56:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [esi + ecx + 12]
	test	eax, eax
	je	LBB160_3
# %bb.1:
	xor	edx, edx
	cmp	dword ptr [esi + ecx + 56], 0
	sete	dl
	and	eax, 21
	shl	edx, 2
	or	eax, edx
	or	eax, 2
	mov	dword ptr [esi + ecx + 12], eax
	mov	ecx, dword ptr [esi + ecx + 16]
	and	eax, ecx
	jne	LBB160_31
# %bb.2:
	xor	eax, eax
	jmp	LBB160_30
LBB160_3:
	mov	ecx, dword ptr [esi + ecx + 60]
	mov	bl, byte ptr [ebp + 8]
	test	ecx, ecx
	je	LBB160_5
# %bb.4:
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
LBB160_5:
	test	bl, bl
	jne	LBB160_29
# %bb.6:
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	test	byte ptr [esi + eax + 20], 1
	je	LBB160_29
# %bb.7:
	mov	eax, dword ptr [esi + eax + 48]
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 64], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 68]
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	add	esp, 4
	mov	dword ptr [ebp - 48], eax       # 4-byte Spill
# %bb.8:
	mov	ecx, dword ptr [ebp - 64]
	test	ecx, ecx
	je	LBB160_11
# %bb.9:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB160_11
# %bb.10:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB160_11:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	mov	eax, dword ptr [ecx + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB160_14
# %bb.12:
	mov	edx, dword ptr [ecx + 44]
	cmp	dword ptr [edx], 0
	jle	LBB160_14
# %bb.13:
	movzx	eax, byte ptr [eax]
	jmp	LBB160_16
LBB160_14:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 24]
	mov	dword ptr [ebp - 16], 1
	call	eax
	jmp	LBB160_16
	.p2align	4, 0x90
LBB160_15:                              #   in Loop: Header=BB160_16 Depth=1
	dec	esi
	lea	ecx, [edi + 1]
	mov	dword ptr [edx], esi
	mov	dword ptr [eax], ecx
	movzx	eax, byte ptr [edi + 1]
LBB160_16:                              # =>This Inner Loop Header: Depth=1
	cmp	eax, -1
	je	LBB160_28
# %bb.17:                               #   in Loop: Header=BB160_16 Depth=1
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	eax, al
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ecx + 12]
	test	byte ptr [ecx + 2*eax], 72
	je	LBB160_29
# %bb.18:                               #   in Loop: Header=BB160_16 Depth=1
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	mov	eax, dword ptr [ecx + 28]
	mov	edi, dword ptr [eax]
	test	edi, edi
	je	LBB160_22
# %bb.19:                               #   in Loop: Header=BB160_16 Depth=1
	mov	edx, dword ptr [ecx + 44]
	mov	esi, dword ptr [edx]
	cmp	esi, 2
	jge	LBB160_15
# %bb.20:                               #   in Loop: Header=BB160_16 Depth=1
	cmp	esi, 1
	jne	LBB160_22
# %bb.21:                               #   in Loop: Header=BB160_16 Depth=1
	inc	edi
	mov	dword ptr [edx], 0
	mov	dword ptr [eax], edi
	jmp	LBB160_24
	.p2align	4, 0x90
LBB160_22:                              #   in Loop: Header=BB160_16 Depth=1
	mov	eax, dword ptr [ecx]
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 28]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
# %bb.23:                               #   in Loop: Header=BB160_16 Depth=1
	mov	edx, eax
	mov	eax, -1
	cmp	edx, -1
	je	LBB160_16
LBB160_24:                              #   in Loop: Header=BB160_16 Depth=1
	mov	eax, dword ptr [ecx + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB160_27
# %bb.25:                               #   in Loop: Header=BB160_16 Depth=1
	mov	edx, dword ptr [ecx + 44]
	cmp	dword ptr [edx], 0
	jle	LBB160_27
# %bb.26:                               #   in Loop: Header=BB160_16 Depth=1
	movzx	eax, byte ptr [eax]
	jmp	LBB160_16
	.p2align	4, 0x90
LBB160_27:                              #   in Loop: Header=BB160_16 Depth=1
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 24]
	mov	dword ptr [ebp - 16], 1
	call	eax
	jmp	LBB160_16
LBB160_28:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	xor	ecx, ecx
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [esi + edx + 56], 0
	mov	eax, dword ptr [esi + edx + 12]
	sete	cl
	and	eax, 20
	shl	ecx, 2
	or	eax, ecx
	or	eax, 3
	mov	dword ptr [esi + edx + 12], eax
	mov	ecx, dword ptr [esi + edx + 16]
	and	eax, ecx
	jne	LBB160_36
LBB160_29:
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	cmp	dword ptr [esi + eax + 12], 0
	sete	al
LBB160_30:
	mov	ecx, dword ptr [ebp - 24]
                                        # kill: def $al killed $al killed $eax
	mov	dword ptr fs:[0], ecx
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB160_31:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB160_33
# %bb.32:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB160_33:
	test	cl, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 40], 1
	mov	dword ptr [ebp - 36], offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
LBB160_34:
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	eax, edx
	lea	edx, [ebp - 40]
	lea	esi, [ebp - 68]
	mov	ecx, esi
	push	edx
	push	eax
	call	"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	push	esi
	call	__CxxThrowException@8
LBB160_36:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB160_38
# %bb.37:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], -1
LBB160_38:
	test	cl, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 40], 1
	mov	dword ptr [ebp - 36], offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	mov	dword ptr [ebp - 16], -1
	jmp	LBB160_34
LBB160_46:                              # Block address taken
	add	ebp, 12
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB160_29
	.def	 "?dtor$39@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$39@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA":
LBB160_39:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 64]
	test	ecx, ecx
	je	LBB160_42
# %bb.40:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB160_42
# %bb.41:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB160_42:
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$43@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$43@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA":
LBB160_43:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB160_45
# %bb.44:
	mov	eax, offset LBB160_46
	add	esp, 8
	pop	ebp
	ret                                     # CATCHRET
LBB160_45:
	mov	dword ptr [ebp - 16], 2
	push	0
	push	0
	call	__CxxThrowException@8
Lfunc_end56:
	.section	.xdata,"dr",associative,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.p2align	2
"L__ehtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z":
	.long	-1                              # ToState
	.long	"?dtor$39@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA" # Action
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
"$tryMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z":
	.long	1                               # TryLow
	.long	1                               # TryHigh
	.long	2                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z") # HandlerArray
"$handlerMap$0$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$43@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA" # Handler
	.section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
                                        # -- End function
	.def	 "?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.globl	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ" # -- Begin function ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	.p2align	4, 0x90
"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ": # @"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
Lfunc_begin57:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 52
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	edi, dword ptr [esi + eax + 56]
	test	edi, edi
	je	LBB161_7
# %bb.1:
	mov	dword ptr [ebp - 40], esi
	mov	ecx, edi
	mov	eax, dword ptr [edi]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [esi]
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	cmp	dword ptr [esi + eax + 12], 0
	je	LBB161_8
# %bb.2:
	mov	byte ptr [ebp - 36], 0
	jmp	LBB161_3
LBB161_8:
	mov	ecx, dword ptr [esi + eax + 60]
	test	ecx, ecx
	je	LBB161_10
# %bb.9:
	cmp	ecx, esi
	je	LBB161_10
# %bb.14:
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.15:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	cmp	dword ptr [esi + eax + 12], 0
	sete	byte ptr [ebp - 36]
	jne	LBB161_3
	jmp	LBB161_16
LBB161_10:
	mov	byte ptr [ebp - 36], 1
LBB161_16:
	mov	eax, dword ptr [edi]
	mov	ecx, edi
	mov	eax, dword ptr [eax + 52]
	mov	dword ptr [ebp - 16], 3
	call	eax
# %bb.17:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB161_3
# %bb.18:
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [esi + ecx + 12]
	and	eax, 19
	or	eax, 4
	mov	dword ptr [esi + ecx + 12], eax
	mov	ecx, dword ptr [esi + ecx + 16]
	and	eax, ecx
	jne	LBB161_19
LBB161_3:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB161_5
# %bb.4:
	mov	ecx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB161_5:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB161_7
# %bb.6:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB161_7:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 52
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB161_19:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB161_21
# %bb.20:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB161_21:
	test	al, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	cmove	edx, eax
	test	cl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 64]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.22:
	mov	dword ptr [ebp - 64], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 64]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.23:
	.def	 "?dtor$11@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA":
LBB161_11:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB161_13
# %bb.12:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB161_13:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$24@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$24@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA":
LBB161_24:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$25@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$25@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA":
LBB161_25:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$26@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$26@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA":
LBB161_26:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB161_28
# %bb.27:
	mov	ecx, dword ptr [ebp - 40]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB161_28:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB161_30
# %bb.29:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB161_30:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end57:
	.section	.xdata,"dr",associative,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.p2align	2
"L__ehtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ":
	.long	429065506                       # MagicNumber
	.long	4                               # MaxState
	.long	("$stateUnwindMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$24@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$25@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$26@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA" # Action
	.section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
                                        # -- End function
	.def	 "??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.globl	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ" # -- Begin function ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	.p2align	4, 0x90
"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ": # @"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
Lfunc_begin58:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ecx]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB162_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 0
	call	eax
LBB162_2:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ@4HA":
LBB162_3:
	push	ebp
	add	ebp, 12
	call	___std_terminate
Lfunc_end58:
	.section	.xdata,"dr",associative,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.p2align	2
"L__ehtable$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
                                        # -- End function
	.def	 "?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.globl	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ" # -- Begin function ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	.p2align	4, 0x90
"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ": # @"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
Lfunc_begin59:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 40
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	cmp	dword ptr [ecx + eax + 12], 0
	jne	LBB163_12
# %bb.1:
	test	byte ptr [ecx + eax + 20], 2
	je	LBB163_12
# %bb.2:
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ecx + eax + 56]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 52]
	mov	dword ptr [ebp - 16], 0
	call	eax
# %bb.3:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB163_12
# %bb.4:
	mov	eax, dword ptr [edx]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [edx + ecx + 12]
	and	eax, 19
	or	eax, 4
	mov	dword ptr [edx + ecx + 12], eax
	mov	ecx, dword ptr [edx + ecx + 16]
	and	eax, ecx
	jne	LBB163_5
LBB163_12:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 40
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB163_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB163_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB163_7:
	test	al, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	cmove	edx, eax
	test	cl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 52]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 52], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 52]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.9:
LBB163_11:                              # Block address taken
	add	ebp, 12
	jmp	LBB163_12
	.def	 "?catch$10@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$10@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ@4HA":
LBB163_10:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, offset LBB163_11
	mov	dword ptr [ebp - 28], esp
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
Lfunc_end59:
	.section	.xdata,"dr",associative,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.p2align	2
"L__ehtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ":
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
"$tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ":
	.long	0                               # TryLow
	.long	0                               # TryHigh
	.long	1                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ") # HandlerArray
"$handlerMap$0$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$10@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ@4HA" # Handler
	.section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
                                        # -- End function
	.def	 "?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.globl	"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ" # -- Begin function ?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ
	.p2align	4, 0x90
"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ": # @"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
Lfunc_begin60:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [esi + 16], 0
	je	LBB164_2
# %bb.1:
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], 0
LBB164_2:
	mov	eax, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	.p2align	4, 0x90
LBB164_3:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB164_4
# %bb.9:                                #   in Loop: Header=BB164_3 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB164_3
# %bb.10:                               #   in Loop: Header=BB164_3 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 4]
	jmp	LBB164_3
LBB164_4:
	test	eax, eax
	je	LBB164_14
# %bb.5:
	mov	ecx, dword ptr [esi + 8]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB164_13
# %bb.6:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB164_7
# %bb.12:
	add	ecx, 35
	mov	eax, edx
LBB164_13:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB164_14:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB164_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$11@?0??_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ@4HA":
LBB164_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end60:
	.section	.xdata,"dr",associative,"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.p2align	2
"L__ehtable$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ@4HA" # Action
	.section	.text,"xr",discard,"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
                                        # -- End function
	.def	 "??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.globl	"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z" # -- Begin function ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z
	.p2align	4, 0x90
"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z": # @"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
Lfunc_begin61:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 36
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	test	ecx, ecx
	je	LBB165_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
LBB165_2:
	mov	dword ptr [ebp - 16], 0
	mov	ecx, esi
	push	0
	call	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
# %bb.3:
	mov	ebx, dword ptr [ebp + 8]
	xor	esi, esi
	test	al, al
	je	LBB165_19
# %bb.4:
	mov	eax, dword ptr [ebx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ebx + eax + 56]
	mov	eax, dword ptr [ecx + 28]
	mov	edx, dword ptr [eax]
	test	edx, edx
	je	LBB165_16
# %bb.5:
	mov	esi, dword ptr [ecx + 44]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jle	LBB165_16
# %bb.6:
	dec	edi
	lea	ecx, [edx + 1]
	mov	dword ptr [esi], edi
	mov	dword ptr [eax], ecx
	movzx	eax, byte ptr [edx]
	jmp	LBB165_7
LBB165_16:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 28]
	mov	dword ptr [ebp - 16], 3
	call	eax
# %bb.17:
	mov	ebx, dword ptr [ebp + 8]
	cmp	eax, -1
	je	LBB165_18
LBB165_7:
	mov	ecx, dword ptr [ebp + 12]
	xor	esi, esi
	mov	byte ptr [ecx], al
	jmp	LBB165_19
LBB165_18:
	mov	esi, 3
LBB165_19:
	mov	eax, dword ptr [ebx]
	xor	ecx, ecx
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [ebx + edx + 56], 0
	mov	eax, dword ptr [ebx + edx + 12]
	sete	cl
	and	eax, 23
	shl	ecx, 2
	or	ecx, esi
	or	eax, ecx
	mov	dword ptr [ebx + edx + 12], eax
	and	eax, dword ptr [ebx + edx + 16]
	jne	LBB165_20
# %bb.25:
	mov	eax, dword ptr [ebx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ebx + eax + 56]
	test	ecx, ecx
	je	LBB165_27
# %bb.26:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	ebx, dword ptr [ebp + 8]
LBB165_27:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, ebx
	add	esp, 36
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB165_20:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB165_22
# %bb.21:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 2
LBB165_22:
	test	al, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 2
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 48]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.23:
	mov	dword ptr [ebp - 48], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 48]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.24:
LBB165_15:                              # Block address taken
	add	ebp, 12
	xor	esi, esi
	mov	ebx, dword ptr [ebp + 8]
	jmp	LBB165_19
	.def	 "?dtor$8@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA":
LBB165_8:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	ecx, dword ptr [ebp + 8]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB165_10
# %bb.9:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB165_10:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$11@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$11@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA":
LBB165_11:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB165_12
# %bb.14:
	mov	eax, offset LBB165_15
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
LBB165_12:
	mov	dword ptr [ebp - 16], 4
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.13:
	.def	 "?dtor$28@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$28@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA":
LBB165_28:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	ecx, dword ptr [ebp + 8]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB165_30
# %bb.29:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB165_30:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$31@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$31@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA":
LBB165_31:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end61:
	.section	.xdata,"dr",associative,"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.p2align	2
"L__ehtable$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z":
	.long	429065506                       # MagicNumber
	.long	5                               # MaxState
	.long	("$stateUnwindMap$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z":
	.long	-1                              # ToState
	.long	"?dtor$8@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$31@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$28@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA" # Action
	.long	2                               # ToState
	.long	0                               # Action
	.long	2                               # ToState
	.long	0                               # Action
"$tryMap$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z":
	.long	3                               # TryLow
	.long	3                               # TryHigh
	.long	4                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z") # HandlerArray
"$handlerMap$0$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$11@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
                                        # -- End function
	.def	 "??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z"
	.globl	"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z" # -- Begin function ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z
	.p2align	4, 0x90
"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z": # @"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	ecx, dword ptr [esp + 56]
	mov	esi, dword ptr [esp + 52]
	mov	ebx, dword ptr [esp + 64]
	lea	edx, [esp + 52]
	mov	dword ptr [esp + 12], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	test	ecx, ecx
	je	LBB166_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
LBB166_2:
	mov	ecx, dword ptr [edx + 16]
	mov	ebp, dword ptr [edx + 24]
	test	ecx, ecx
	je	LBB166_4
# %bb.3:
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
LBB166_4:
	mov	ecx, dword ptr [edx + 28]
	mov	edi, dword ptr [edx + 36]
	test	ecx, ecx
	je	LBB166_7
# %bb.5:
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	cmp	ebx, ebp
	jne	LBB166_8
LBB166_6:
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [edx + 28]
	test	eax, eax
	jne	LBB166_23
	jmp	LBB166_29
LBB166_7:
	mov	dword ptr [esp + 4], 0          # 4-byte Folded Spill
	cmp	ebx, ebp
	je	LBB166_6
LBB166_8:
	mov	eax, edi
	sub	eax, ebp
	jne	LBB166_12
# %bb.9:
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [edx + 4]
	test	eax, eax
	je	LBB166_28
# %bb.10:
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB166_27
# %bb.11:
	mov	eax, dword ptr [eax]
	mov	edi, ebx
	mov	dword ptr [esi], eax
	jmp	LBB166_29
LBB166_12:
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	lea	edi, [ebp - 1]
	mov	ecx, ebx
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	dword ptr [esp + 28], esi       # 4-byte Spill
	mov	dword ptr [esp + 20], ebp       # 4-byte Spill
	mov	dword ptr [esp], ebx            # 4-byte Spill
	.p2align	4, 0x90
LBB166_13:                              # =>This Inner Loop Header: Depth=1
	cmp	edi, ecx
	je	LBB166_15
# %bb.14:                               #   in Loop: Header=BB166_13 Depth=1
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	mov	edx, edi
	shr	edx, 4
	mov	esi, dword ptr [eax + 8]
	mov	ebp, dword ptr [eax + 4]
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebx, dword ptr [eax + 4]
	mov	eax, dword ptr [eax + 8]
	dec	esi
	and	esi, edx
	mov	edx, edi
	mov	esi, dword ptr [ebp + 4*esi]
	mov	ebp, ecx
	and	edx, 15
	shr	ebp, 4
	dec	eax
	and	eax, ebp
	mov	ebp, ecx
	inc	ecx
	mov	eax, dword ptr [ebx + 4*eax]
	and	ebp, 15
	movzx	ebx, byte ptr [esi + edx]
	cmp	edi, ecx
	lea	edi, [edi - 1]
	mov	bh, byte ptr [eax + ebp]
	mov	byte ptr [eax + ebp], bl
	mov	byte ptr [esi + edx], bh
	jne	LBB166_13
LBB166_15:
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 20]       # 4-byte Reload
	lea	edx, [eax - 1]
	.p2align	4, 0x90
LBB166_16:                              # =>This Inner Loop Header: Depth=1
	cmp	edx, ebp
	je	LBB166_18
# %bb.17:                               #   in Loop: Header=BB166_16 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	eax, edx
	shr	eax, 4
	mov	ecx, dword ptr [esi + 4]
	mov	esi, dword ptr [esi + 8]
	mov	edi, dword ptr [ebx + 4]
	mov	ebx, dword ptr [ebx + 8]
	dec	esi
	dec	ebx
	and	esi, eax
	mov	eax, edx
	mov	ecx, dword ptr [ecx + 4*esi]
	mov	esi, ebp
	and	eax, 15
	shr	esi, 4
	and	ebx, esi
	mov	esi, ebp
	inc	ebp
	mov	edi, dword ptr [edi + 4*ebx]
	and	esi, 15
	cmp	edx, ebp
	lea	edx, [edx - 1]
	mov	bh, byte ptr [ecx + eax]
	mov	bl, byte ptr [edi + esi]
	mov	byte ptr [edi + esi], bh
	mov	byte ptr [ecx + eax], bl
	jne	LBB166_16
LBB166_18:
	mov	ebp, dword ptr [esp + 16]       # 4-byte Reload
	cmp	dword ptr [esp], ebp            # 4-byte Folded Reload
	je	LBB166_22
# %bb.19:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	dec	ebp
	.p2align	4, 0x90
LBB166_20:                              # =>This Inner Loop Header: Depth=1
	cmp	ebp, eax
	je	LBB166_22
# %bb.21:                               #   in Loop: Header=BB166_20 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, ebp
	shr	ecx, 4
	mov	edx, dword ptr [esi + 4]
	mov	esi, dword ptr [esi + 8]
	mov	edi, dword ptr [ebx + 4]
	mov	ebx, dword ptr [ebx + 8]
	dec	esi
	dec	ebx
	and	esi, ecx
	mov	ecx, ebp
	mov	edx, dword ptr [edx + 4*esi]
	mov	esi, eax
	and	ecx, 15
	shr	esi, 4
	and	ebx, esi
	mov	esi, eax
	inc	eax
	mov	edi, dword ptr [edi + 4*ebx]
	and	esi, 15
	cmp	ebp, eax
	lea	ebp, [ebp - 1]
	mov	bh, byte ptr [edx + ecx]
	mov	bl, byte ptr [edi + esi]
	mov	byte ptr [edi + esi], bh
	mov	byte ptr [edx + ecx], bl
	jne	LBB166_20
LBB166_22:
	mov	edi, dword ptr [esp + 24]       # 4-byte Reload
	mov	esi, dword ptr [esp + 28]       # 4-byte Reload
	lea	edx, [esp + 52]
	add	edi, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [edx + 12], edi
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [edx + 4]
	test	eax, eax
	je	LBB166_29
LBB166_23:
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB166_25
# %bb.24:
	mov	eax, dword ptr [eax]
	mov	dword ptr [esi], eax
	jmp	LBB166_29
LBB166_25:
	mov	dword ptr [esi], 0
	jmp	LBB166_29
LBB166_27:
	mov	dword ptr [esi], 0
LBB166_28:
	mov	edi, ebx
LBB166_29:
	mov	dword ptr [esi + 8], edi
	mov	eax, dword ptr [edx]
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.globl	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z" # -- Begin function ?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z
	.p2align	4, 0x90
"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z": # @"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
Lfunc_begin62:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 1
	mov	edx, dword ptr [ecx + 8]
	test	edx, edx
	cmovne	eax, edx
	cmp	eax, 8
	jb	LBB167_3
	.p2align	4, 0x90
LBB167_2:
	mov	ebx, eax
	sub	ebx, edx
	cmp	ebx, edi
	jae	LBB167_5
LBB167_3:                               # =>This Inner Loop Header: Depth=1
	mov	esi, 134217727
	sub	esi, eax
	cmp	esi, eax
	jb	LBB167_22
# %bb.4:                                #   in Loop: Header=BB167_3 Depth=1
	add	eax, eax
	cmp	eax, 8
	jae	LBB167_2
	jmp	LBB167_3
LBB167_5:
	cmp	eax, 1073741824
	jae	LBB167_23
# %bb.6:
	mov	edi, dword ptr [ecx + 12]
	lea	edx, [4*eax]
	cmp	eax, 1024
	jb	LBB167_9
# %bb.7:
	cmp	eax, 1073741816
	mov	dword ptr [ebp - 16], -1
	jae	LBB167_24
# %bb.8:
	mov	esi, ecx
	add	edx, 35
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
	jmp	LBB167_10
LBB167_9:
	mov	esi, ecx
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
LBB167_10:
	shr	edi, 4
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [esi + 4]
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	lea	edx, [ecx + 4*edi]
	mov	ecx, dword ptr [esi + 8]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*edi]
	sub	esi, eax
	push	esi
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	mov	ecx, ebx
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	sub	ecx, edi
	mov	eax, dword ptr [eax + 4]
	jae	LBB167_11
# %bb.12:
	lea	ecx, [4*ebx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*ebx]
	sub	esi, eax
	push	esi
	push	eax
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
	call	_memmove
	add	esp, 12
	add	esi, edi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	push	esi
	jmp	LBB167_13
LBB167_11:
	mov	edi, ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [4*ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
	lea	eax, [esi + 4*eax]
	push	edi
	push	0
	push	eax
	call	_memset
	add	esp, 12
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
LBB167_13:
	call	_memset
	add	esp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB167_21
# %bb.14:
	mov	eax, dword ptr [esi + 8]
	shl	eax, 2
	cmp	eax, 4096
	jb	LBB167_20
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB167_16
# %bb.19:
	add	eax, 35
	mov	ecx, edx
LBB167_20:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB167_21:
	mov	dword ptr [esi + 4], edi
	add	dword ptr [esi + 8], ebx
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB167_22:
	mov	dword ptr [ebp - 16], -1
	call	"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ"
LBB167_23:
	mov	dword ptr [ebp - 16], -1
LBB167_24:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB167_16:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.17:
	.def	 "?dtor$18@?0??_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z@4HA":
LBB167_18:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end62:
	.section	.xdata,"dr",associative,"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.p2align	2
"L__ehtable$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
                                        # -- End function
	.def	 "?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ"
	.globl	"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ" # -- Begin function ?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ
	.p2align	4, 0x90
"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ": # @"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ"
# %bb.0:
	push	offset "??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
	.globl	"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
	.p2align	4, 0x90
"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ": # @"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
# %bb.0:
	push	offset "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.globl	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z" # -- Begin function ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	.p2align	4, 0x90
"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z": # @"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
Lfunc_begin63:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	lea	ecx, [ebp - 36]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	mov	edx, dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"]
	mov	edi, dword ptr ["?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B"]
	test	edx, edx
	je	LBB170_1
# %bb.4:
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + 12], edx
	ja	LBB170_5
	jmp	LBB170_6
LBB170_1:
	lea	ecx, [ebp - 92]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	cmp	dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"], 0
	jne	LBB170_3
# %bb.2:
	mov	eax, dword ptr ["?_Id_cnt@id@locale@std@@0HA"]
	inc	eax
	mov	dword ptr ["?_Id_cnt@id@locale@std@@0HA"], eax
	mov	dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"], eax
LBB170_3:
	lea	ecx, [ebp - 92]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	edx, dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"]
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + 12], edx
	jbe	LBB170_6
LBB170_5:
	mov	ecx, dword ptr [eax + 8]
	mov	esi, dword ptr [ecx + 4*edx]
	test	esi, esi
	jne	LBB170_18
LBB170_6:
	cmp	byte ptr [eax + 20], 0
	je	LBB170_10
# %bb.7:
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"
# %bb.8:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	dword ptr [eax + 12], ecx
	jbe	LBB170_10
# %bb.9:
	mov	eax, dword ptr [eax + 8]
	mov	esi, dword ptr [eax + 4*ecx]
	test	esi, esi
	jne	LBB170_18
LBB170_10:
	test	edi, edi
	mov	esi, edi
	jne	LBB170_18
# %bb.11:
	mov	dword ptr [ebp - 16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.12:
	mov	ecx, eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	test	eax, eax
	je	LBB170_13
# %bb.14:
	mov	ecx, dword ptr [eax + 24]
	add	eax, 28
	test	ecx, ecx
	cmovne	eax, ecx
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 92]
	push	eax
	call	"??0_Locinfo@std@@QAE@PBD@Z"
	jmp	LBB170_16
LBB170_13:
	mov	eax, offset "??_C@_00CNPNBAHC@?$AA@"
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 92]
	push	eax
	call	"??0_Locinfo@std@@QAE@PBD@Z"
LBB170_16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [ebp - 92]
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi], offset "??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	call	"??1_Locinfo@std@@QAE@XZ"
	mov	dword ptr [ebp - 16], 2
	push	esi
	call	"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"
	add	esp, 4
# %bb.17:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [esi]
	mov	ecx, esi
	call	dword ptr [eax + 4]
	mov	dword ptr ["?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B"], esi
LBB170_18:
	lea	ecx, [ebp - 36]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$19@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA":
LBB170_19:
	push	ebp
	push	eax
	add	ebp, 12
	lea	ecx, [ebp - 36]
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$20@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA":
LBB170_20:
	push	ebp
	push	eax
	add	ebp, 12
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??3@YAXPAX@Z"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$21@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA":
LBB170_21:
	push	ebp
	push	eax
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	push	1
	call	dword ptr [eax]
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end63:
	.section	.xdata,"dr",associative,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.p2align	2
"L__ehtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z":
	.long	-1                              # ToState
	.long	"?dtor$19@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$20@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$21@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
                                        # -- End function
	.def	 "??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z"
	.globl	"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z" # -- Begin function ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z": # @"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB171_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB171_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 72
	mov	edi, dword ptr [esp + 92]
	movsx	ebp, byte ptr [esp + 108]
	mov	esi, ecx
	lea	ebx, [esp + 8]
	push	dword ptr [esp + 112]
	push	offset "??_C@_02BBAHNLBA@?$CFp?$AA@"
	push	64
	push	ebx
	call	_sprintf_s
	add	esp, 16
	mov	ecx, dword ptr [esp + 96]
	mov	edx, dword ptr [esp + 100]
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 32]      # xmm0 = mem[0],zero
	mov	ecx, dword ptr [esp + 136]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 24], ebx
	mov	dword ptr [esp + 20], ebp
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], esi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 72
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	24
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@7fffffffffffffff7fffffffffffffff # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	.section	.rdata,"dr",discard,__xmm@7fffffffffffffff7fffffffffffffff
	.p2align	4
__xmm@7fffffffffffffff7fffffffffffffff:
	.quad	0x7fffffffffffffff              # double NaN
	.quad	0x7fffffffffffffff              # double NaN
	.globl	__real@4202a05f20000000
	.section	.rdata,"dr",discard,__real@4202a05f20000000
	.p2align	3
__real@4202a05f20000000:
	.quad	0x4202a05f20000000              # double 1.0E+10
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
Lfunc_begin64:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 100
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	mov	dword ptr [ebp - 72], ecx       # 4-byte Spill
	mov	ebx, dword ptr [ebp + 20]
	lea	eax, [ebp - 24]
	mov	edi, 6
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	movapd	xmm0, xmmword ptr [__xmm@7fffffffffffffff7fffffffffffffff] # xmm0 = [NaN,NaN]
	mov	ecx, dword ptr fs:[0]
	andpd	xmm0, xmm1
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 32], 15
	mov	dword ptr [ebp - 36], 0
	mov	byte ptr [ebp - 52], 0
	mov	ecx, 12288
	and	ecx, dword ptr [ebx + 20]
	mov	edx, dword ptr [ebx + 24]
	cmp	ecx, 8192
	mov	esi, edx
	cmove	edi, edx
	xor	eax, eax
	neg	esi
	mov	esi, 0
	sbb	esi, dword ptr [ebx + 28]
	cmovl	edi, edx
	ucomisd	xmm0, qword ptr [__real@4202a05f20000000]
	jbe	LBB173_1
# %bb.2:
	cmp	ecx, 8192
	mov	esi, edi
	jne	LBB173_4
# %bb.3:
	lea	eax, [ebp - 56]
	movsd	qword ptr [esp], xmm1
	mov	dword ptr [esp + 8], eax
	call	_frexp
	fstp	st(0)
	mov	eax, dword ptr [ebp - 56]
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	mov	ecx, eax
	neg	ecx
	cmovl	ecx, eax
	imul	eax, ecx, 30103
	mov	ecx, 175921861
	shr	eax, 5
	mul	ecx
	mov	eax, dword ptr [ebp - 36]
	mov	esi, edx
	shr	esi, 7
	add	esi, edi
LBB173_4:
	add	esi, 50
	mov	ecx, esi
	sub	ecx, eax
	jbe	LBB173_5
LBB173_9:
	mov	edx, dword ptr [ebp - 32]
	mov	dword ptr [ebp - 68], edi       # 4-byte Spill
	mov	edi, edx
	sub	edi, eax
	cmp	edi, ecx
	jae	LBB173_10
# %bb.14:
	mov	dword ptr [ebp - 16], 1
	mov	al, byte ptr [ebp - 56]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ecx
	mov	dword ptr [esp], ecx
	lea	ecx, [ebp - 52]
	mov	dword ptr [esp + 12], 0
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	sub	esp, 16
	mov	ebx, dword ptr [ebp + 20]
	jmp	LBB173_15
LBB173_1:
	mov	esi, edi
	add	esi, 50
	mov	ecx, esi
	sub	ecx, eax
	ja	LBB173_9
LBB173_5:
	cmp	dword ptr [ebp - 32], 15
	jbe	LBB173_6
# %bb.7:
	mov	eax, dword ptr [ebp - 52]
	jmp	LBB173_8
LBB173_10:
	cmp	edx, 15
	mov	dword ptr [ebp - 36], esi
	jbe	LBB173_11
# %bb.12:
	mov	edi, dword ptr [ebp - 52]
	jmp	LBB173_13
LBB173_6:
	lea	eax, [ebp - 52]
LBB173_8:
	mov	dword ptr [ebp - 36], esi
	mov	byte ptr [eax + esi], 0
	mov	ecx, dword ptr [ebx + 20]
	mov	byte ptr [ebp - 64], 37
	test	cl, 32
	jne	LBB173_18
LBB173_17:
	lea	eax, [ebp - 63]
	test	cl, 16
	jne	LBB173_20
	jmp	LBB173_21
LBB173_11:
	lea	edi, [ebp - 52]
LBB173_13:
	add	eax, edi
	mov	dword ptr [esp + 8], ecx
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp], eax
	call	_memset
	mov	byte ptr [edi + esi], 0
LBB173_15:
	mov	edi, dword ptr [ebp - 68]       # 4-byte Reload
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	mov	ecx, dword ptr [ebx + 20]
	mov	byte ptr [ebp - 64], 37
	test	cl, 32
	je	LBB173_17
LBB173_18:
	lea	eax, [ebp - 62]
	mov	byte ptr [ebp - 63], 43
	test	cl, 16
	je	LBB173_21
LBB173_20:
	mov	byte ptr [eax], 35
	inc	eax
LBB173_21:
	mov	edx, ecx
	mov	word ptr [eax], 10798
	mov	byte ptr [eax + 2], 76
	and	edx, 12288
	test	cl, 4
	jne	LBB173_22
# %bb.24:
	mov	cl, 102
	cmp	edx, 8192
	je	LBB173_27
# %bb.25:
	cmp	edx, 4096
	setne	cl
	add	cl, cl
	or	cl, 101
	cmp	edx, 12288
	movzx	edx, cl
	mov	ecx, 97
	jmp	LBB173_26
LBB173_22:
	mov	cl, 102
	cmp	edx, 8192
	je	LBB173_27
# %bb.23:
	cmp	edx, 4096
	setne	cl
	add	cl, cl
	or	cl, 69
	cmp	edx, 12288
	movzx	edx, cl
	mov	ecx, 65
LBB173_26:
	cmovne	ecx, edx
	mov	dword ptr [ebp - 16], 1
LBB173_27:
	mov	byte ptr [eax + 3], cl
	mov	byte ptr [eax + 4], 0
	mov	eax, dword ptr [ebp - 36]
	cmp	dword ptr [ebp - 32], 15
	jbe	LBB173_28
# %bb.29:
	mov	ecx, dword ptr [ebp - 52]
	jmp	LBB173_30
LBB173_28:
	lea	ecx, [ebp - 52]
LBB173_30:
	lea	edx, [ebp - 64]
	mov	dword ptr [ebp - 16], 1
	movsd	qword ptr [esp + 16], xmm1
	mov	dword ptr [esp + 12], edi
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], ecx
	mov	dword ptr [esp + 8], edx
	call	_sprintf_s
	mov	edi, dword ptr [ebp + 20]
# %bb.31:
	mov	ebx, dword ptr [ebp + 8]
	mov	cl, byte ptr [ebp + 24]
	cmp	dword ptr [ebp - 32], 15
	lea	esi, [ebp + 12]
	jbe	LBB173_32
# %bb.33:
	mov	edx, dword ptr [ebp - 52]
	jmp	LBB173_34
LBB173_32:
	lea	edx, [ebp - 52]
LBB173_34:
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 80], xmm0
	movsd	xmm0, qword ptr [ebp - 80]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 24], edx
	movsx	edx, cl
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 16], edi
	mov	dword ptr [esp + 4], ebx
	mov	ecx, dword ptr [ebp - 72]       # 4-byte Reload
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp], ecx
	call	"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
# %bb.35:
	mov	eax, dword ptr [ebp - 32]
	mov	edi, dword ptr [ebp + 8]
	cmp	eax, 16
	jb	LBB173_43
# %bb.36:
	mov	ecx, dword ptr [ebp - 52]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB173_42
# %bb.37:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB173_38
# %bb.41:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB173_42:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB173_43:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 100
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	28
LBB173_38:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.39:
	.def	 "?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA":
LBB173_40:
	push	ebp
	sub	esp, 32
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA":
LBB173_44:
	push	ebp
	sub	esp, 32
	add	ebp, 12
	mov	eax, dword ptr [ebp - 32]
	cmp	eax, 16
	jb	LBB173_49
# %bb.45:
	mov	ecx, dword ptr [ebp - 52]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB173_48
# %bb.46:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB173_50
# %bb.47:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB173_48:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB173_49:
	add	esp, 32
	pop	ebp
	ret                                     # CLEANUPRET
LBB173_50:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end64:
	.section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.p2align	2
"L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z":
	.long	-1                              # ToState
	.long	"?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA" # Action
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
Lfunc_begin65:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 100
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	mov	dword ptr [ebp - 72], ecx       # 4-byte Spill
	mov	ebx, dword ptr [ebp + 20]
	lea	eax, [ebp - 24]
	mov	edi, 6
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	movapd	xmm0, xmmword ptr [__xmm@7fffffffffffffff7fffffffffffffff] # xmm0 = [NaN,NaN]
	mov	ecx, dword ptr fs:[0]
	andpd	xmm0, xmm1
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 32], 15
	mov	dword ptr [ebp - 36], 0
	mov	byte ptr [ebp - 52], 0
	mov	ecx, 12288
	and	ecx, dword ptr [ebx + 20]
	mov	edx, dword ptr [ebx + 24]
	cmp	ecx, 8192
	mov	esi, edx
	cmove	edi, edx
	xor	eax, eax
	neg	esi
	mov	esi, 0
	sbb	esi, dword ptr [ebx + 28]
	cmovl	edi, edx
	ucomisd	xmm0, qword ptr [__real@4202a05f20000000]
	jbe	LBB174_1
# %bb.2:
	cmp	ecx, 8192
	mov	esi, edi
	jne	LBB174_4
# %bb.3:
	lea	eax, [ebp - 56]
	movsd	qword ptr [esp], xmm1
	mov	dword ptr [esp + 8], eax
	call	_frexp
	fstp	st(0)
	mov	eax, dword ptr [ebp - 56]
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	mov	ecx, eax
	neg	ecx
	cmovl	ecx, eax
	imul	eax, ecx, 30103
	mov	ecx, 175921861
	shr	eax, 5
	mul	ecx
	mov	eax, dword ptr [ebp - 36]
	mov	esi, edx
	shr	esi, 7
	add	esi, edi
LBB174_4:
	add	esi, 50
	mov	ecx, esi
	sub	ecx, eax
	jbe	LBB174_5
LBB174_9:
	mov	edx, dword ptr [ebp - 32]
	mov	dword ptr [ebp - 68], edi       # 4-byte Spill
	mov	edi, edx
	sub	edi, eax
	cmp	edi, ecx
	jae	LBB174_10
# %bb.14:
	mov	dword ptr [ebp - 16], 1
	mov	al, byte ptr [ebp - 56]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ecx
	mov	dword ptr [esp], ecx
	lea	ecx, [ebp - 52]
	mov	dword ptr [esp + 12], 0
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	sub	esp, 16
	mov	ebx, dword ptr [ebp + 20]
	jmp	LBB174_15
LBB174_1:
	mov	esi, edi
	add	esi, 50
	mov	ecx, esi
	sub	ecx, eax
	ja	LBB174_9
LBB174_5:
	cmp	dword ptr [ebp - 32], 15
	jbe	LBB174_6
# %bb.7:
	mov	eax, dword ptr [ebp - 52]
	jmp	LBB174_8
LBB174_10:
	cmp	edx, 15
	mov	dword ptr [ebp - 36], esi
	jbe	LBB174_11
# %bb.12:
	mov	edi, dword ptr [ebp - 52]
	jmp	LBB174_13
LBB174_6:
	lea	eax, [ebp - 52]
LBB174_8:
	mov	dword ptr [ebp - 36], esi
	mov	byte ptr [eax + esi], 0
	mov	edx, dword ptr [ebx + 20]
	mov	byte ptr [ebp - 64], 37
	test	dl, 32
	jne	LBB174_18
LBB174_17:
	lea	eax, [ebp - 63]
	test	dl, 16
	jne	LBB174_20
	jmp	LBB174_21
LBB174_11:
	lea	edi, [ebp - 52]
LBB174_13:
	add	eax, edi
	mov	dword ptr [esp + 8], ecx
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp], eax
	call	_memset
	mov	byte ptr [edi + esi], 0
LBB174_15:
	mov	edi, dword ptr [ebp - 68]       # 4-byte Reload
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	mov	edx, dword ptr [ebx + 20]
	mov	byte ptr [ebp - 64], 37
	test	dl, 32
	je	LBB174_17
LBB174_18:
	lea	eax, [ebp - 62]
	mov	byte ptr [ebp - 63], 43
	test	dl, 16
	je	LBB174_21
LBB174_20:
	mov	byte ptr [eax], 35
	inc	eax
LBB174_21:
	mov	ecx, edx
	mov	word ptr [eax], 10798
	and	ecx, 12288
	test	dl, 4
	jne	LBB174_22
# %bb.24:
	mov	dl, 102
	cmp	ecx, 8192
	je	LBB174_27
# %bb.25:
	cmp	ecx, 4096
	setne	dl
	add	dl, dl
	or	dl, 101
	cmp	ecx, 12288
	movzx	ecx, dl
	mov	edx, 97
	jmp	LBB174_26
LBB174_22:
	mov	dl, 102
	cmp	ecx, 8192
	je	LBB174_27
# %bb.23:
	cmp	ecx, 4096
	setne	dl
	add	dl, dl
	or	dl, 69
	cmp	ecx, 12288
	movzx	ecx, dl
	mov	edx, 65
LBB174_26:
	cmovne	edx, ecx
	mov	dword ptr [ebp - 16], 1
LBB174_27:
	mov	byte ptr [eax + 2], dl
	mov	byte ptr [eax + 3], 0
	mov	eax, dword ptr [ebp - 36]
	cmp	dword ptr [ebp - 32], 15
	jbe	LBB174_28
# %bb.29:
	mov	ecx, dword ptr [ebp - 52]
	jmp	LBB174_30
LBB174_28:
	lea	ecx, [ebp - 52]
LBB174_30:
	lea	edx, [ebp - 64]
	mov	dword ptr [ebp - 16], 1
	movsd	qword ptr [esp + 16], xmm1
	mov	dword ptr [esp + 12], edi
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], ecx
	mov	dword ptr [esp + 8], edx
	call	_sprintf_s
	mov	edi, dword ptr [ebp + 20]
# %bb.31:
	mov	ebx, dword ptr [ebp + 8]
	mov	cl, byte ptr [ebp + 24]
	cmp	dword ptr [ebp - 32], 15
	lea	esi, [ebp + 12]
	jbe	LBB174_32
# %bb.33:
	mov	edx, dword ptr [ebp - 52]
	jmp	LBB174_34
LBB174_32:
	lea	edx, [ebp - 52]
LBB174_34:
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 80], xmm0
	movsd	xmm0, qword ptr [ebp - 80]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 24], edx
	movsx	edx, cl
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 16], edi
	mov	dword ptr [esp + 4], ebx
	mov	ecx, dword ptr [ebp - 72]       # 4-byte Reload
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp], ecx
	call	"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
# %bb.35:
	mov	eax, dword ptr [ebp - 32]
	mov	edi, dword ptr [ebp + 8]
	cmp	eax, 16
	jb	LBB174_43
# %bb.36:
	mov	ecx, dword ptr [ebp - 52]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB174_42
# %bb.37:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB174_38
# %bb.41:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB174_42:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB174_43:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 100
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	28
LBB174_38:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.39:
	.def	 "?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA":
LBB174_40:
	push	ebp
	sub	esp, 32
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA":
LBB174_44:
	push	ebp
	sub	esp, 32
	add	ebp, 12
	mov	eax, dword ptr [ebp - 32]
	cmp	eax, 16
	jb	LBB174_49
# %bb.45:
	mov	ecx, dword ptr [ebp - 52]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB174_48
# %bb.46:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB174_50
# %bb.47:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB174_48:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB174_49:
	add	esp, 32
	pop	ebp
	ret                                     # CLEANUPRET
LBB174_50:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end65:
	.section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.p2align	2
"L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z":
	.long	-1                              # ToState
	.long	"?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA" # Action
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	eax, dword ptr [esp + 112]
	mov	esi, ecx
	mov	edx, dword ptr [eax + 20]
	mov	byte ptr [esp], 37
	test	dl, 32
	jne	LBB175_2
# %bb.1:
	lea	eax, [esp + 1]
	test	dl, 8
	jne	LBB175_4
	jmp	LBB175_5
LBB175_2:
	lea	eax, [esp + 2]
	mov	byte ptr [esp + 1], 43
	test	dl, 8
	je	LBB175_5
LBB175_4:
	mov	byte ptr [eax], 35
	inc	eax
LBB175_5:
	mov	ebx, dword ptr [esp + 124]
	mov	ebp, dword ptr [esp + 120]
	mov	ecx, edx
	mov	word ptr [eax], 13897
	mov	byte ptr [eax + 2], 52
	and	ecx, 3584
	cmp	ecx, 1024
	je	LBB175_6
# %bb.7:
	cmp	ecx, 2048
	jne	LBB175_8
# %bb.9:
	test	dl, 4
	sete	cl
	shl	cl, 5
	or	cl, 88
	jmp	LBB175_10
LBB175_6:
	mov	cl, 111
	jmp	LBB175_10
LBB175_8:
	mov	cl, 117
LBB175_10:
	mov	byte ptr [eax + 3], cl
	mov	byte ptr [eax + 4], 0
	mov	eax, esp
	lea	edi, [esp + 16]
	push	ebx
	push	ebp
	push	eax
	push	64
	push	edi
	call	_sprintf_s
	add	esp, 20
	lea	ecx, [esp + 104]
	movsd	xmm0, qword ptr [ecx]           # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 40]      # xmm0 = mem[0],zero
	movsx	edx, byte ptr [esp + 148]
	mov	ecx, dword ptr [esp + 144]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 24], edi
	mov	edi, dword ptr [esp + 132]
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp], esi
	mov	dword ptr [esp + 4], edi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	28
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	eax, dword ptr [esp + 112]
	mov	esi, ecx
	mov	edx, dword ptr [eax + 20]
	mov	byte ptr [esp], 37
	test	dl, 32
	jne	LBB176_2
# %bb.1:
	lea	eax, [esp + 1]
	test	dl, 8
	jne	LBB176_4
	jmp	LBB176_5
LBB176_2:
	lea	eax, [esp + 2]
	mov	byte ptr [esp + 1], 43
	test	dl, 8
	je	LBB176_5
LBB176_4:
	mov	byte ptr [eax], 35
	inc	eax
LBB176_5:
	mov	ebx, dword ptr [esp + 124]
	mov	ebp, dword ptr [esp + 120]
	mov	ecx, edx
	mov	word ptr [eax], 13897
	mov	byte ptr [eax + 2], 52
	and	ecx, 3584
	cmp	ecx, 1024
	je	LBB176_6
# %bb.7:
	cmp	ecx, 2048
	jne	LBB176_8
# %bb.9:
	test	dl, 4
	sete	cl
	shl	cl, 5
	or	cl, 88
	jmp	LBB176_10
LBB176_6:
	mov	cl, 111
	jmp	LBB176_10
LBB176_8:
	mov	cl, 100
LBB176_10:
	mov	byte ptr [eax + 3], cl
	mov	byte ptr [eax + 4], 0
	mov	eax, esp
	lea	edi, [esp + 16]
	push	ebx
	push	ebp
	push	eax
	push	64
	push	edi
	call	_sprintf_s
	add	esp, 20
	lea	ecx, [esp + 104]
	movsd	xmm0, qword ptr [ecx]           # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 40]      # xmm0 = mem[0],zero
	movsx	edx, byte ptr [esp + 148]
	mov	ecx, dword ptr [esp + 144]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 24], edi
	mov	edi, dword ptr [esp + 132]
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp], esi
	mov	dword ptr [esp + 4], edi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	28
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	eax, dword ptr [esp + 112]
	mov	esi, ecx
	mov	ebx, dword ptr [eax + 20]
	mov	byte ptr [esp + 2], 37
	test	bl, 32
	jne	LBB177_2
# %bb.1:
	lea	eax, [esp + 3]
	mov	edi, dword ptr [esp + 100]
	test	bl, 8
	jne	LBB177_4
	jmp	LBB177_5
LBB177_2:
	lea	eax, [esp + 4]
	mov	byte ptr [esp + 3], 43
	mov	edi, dword ptr [esp + 100]
	test	bl, 8
	je	LBB177_5
LBB177_4:
	mov	byte ptr [eax], 35
	inc	eax
LBB177_5:
	mov	edx, dword ptr [esp + 120]
	mov	ecx, ebx
	lea	ebp, [esp + 104]
	mov	byte ptr [eax], 108
	and	ecx, 3584
	cmp	ecx, 1024
	je	LBB177_6
# %bb.7:
	cmp	ecx, 2048
	jne	LBB177_8
# %bb.9:
	test	bl, 4
	sete	cl
	shl	cl, 5
	or	cl, 88
	jmp	LBB177_10
LBB177_6:
	mov	cl, 111
	jmp	LBB177_10
LBB177_8:
	mov	cl, 117
LBB177_10:
	mov	byte ptr [eax + 1], cl
	mov	byte ptr [eax + 2], 0
	lea	eax, [esp + 2]
	lea	ebx, [esp + 16]
	push	edx
	push	eax
	push	64
	push	ebx
	call	_sprintf_s
	add	esp, 16
	movsd	xmm0, qword ptr [ebp]           # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 40]      # xmm0 = mem[0],zero
	movsx	edx, byte ptr [esp + 148]
	mov	ecx, dword ptr [esp + 144]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 24], ebx
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], esi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	24
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	eax, dword ptr [esp + 112]
	mov	esi, ecx
	mov	ebx, dword ptr [eax + 20]
	mov	byte ptr [esp + 2], 37
	test	bl, 32
	jne	LBB178_2
# %bb.1:
	lea	eax, [esp + 3]
	mov	edi, dword ptr [esp + 100]
	test	bl, 8
	jne	LBB178_4
	jmp	LBB178_5
LBB178_2:
	lea	eax, [esp + 4]
	mov	byte ptr [esp + 3], 43
	mov	edi, dword ptr [esp + 100]
	test	bl, 8
	je	LBB178_5
LBB178_4:
	mov	byte ptr [eax], 35
	inc	eax
LBB178_5:
	mov	edx, dword ptr [esp + 120]
	mov	ecx, ebx
	lea	ebp, [esp + 104]
	mov	byte ptr [eax], 108
	and	ecx, 3584
	cmp	ecx, 1024
	je	LBB178_6
# %bb.7:
	cmp	ecx, 2048
	jne	LBB178_8
# %bb.9:
	test	bl, 4
	sete	cl
	shl	cl, 5
	or	cl, 88
	jmp	LBB178_10
LBB178_6:
	mov	cl, 111
	jmp	LBB178_10
LBB178_8:
	mov	cl, 100
LBB178_10:
	mov	byte ptr [eax + 1], cl
	mov	byte ptr [eax + 2], 0
	lea	eax, [esp + 2]
	lea	ebx, [esp + 16]
	push	edx
	push	eax
	push	64
	push	ebx
	call	_sprintf_s
	add	esp, 16
	movsd	xmm0, qword ptr [ebp]           # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 40]      # xmm0 = mem[0],zero
	movsx	edx, byte ptr [esp + 148]
	mov	ecx, dword ptr [esp + 144]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 24], ebx
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], esi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	24
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
Lfunc_begin66:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 96
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	mov	edx, dword ptr [ebp + 20]
	mov	esi, dword ptr [ebp + 8]
	mov	eax, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], eax
	lea	eax, [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edx
	lea	edx, [ebp + 12]
	test	byte ptr [eax + 21], 64
	jne	LBB179_2
# %bb.1:
	movsd	xmm0, qword ptr [edx]           # xmm0 = mem[0],zero
	mov	edi, eax
	movzx	eax, byte ptr [ebp + 28]
	movsd	qword ptr [ebp - 108], xmm0
	mov	edx, dword ptr [ecx]
	sub	esp, 24
	movsd	xmm0, qword ptr [ebp - 108]     # xmm0 = mem[0],zero
	movsx	ebx, byte ptr [ebp + 24]
	movsd	qword ptr [esp + 4], xmm0
	mov	dword ptr [esp + 20], eax
	mov	dword ptr [esp + 16], ebx
	mov	dword ptr [esp + 12], edi
	mov	dword ptr [esp], esi
	call	dword ptr [edx + 36]
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	jmp	LBB179_47
LBB179_2:
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 68], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 72]
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.3:
	mov	ecx, dword ptr [ebp - 68]
	mov	bl, byte ptr [ebp + 28]
	mov	esi, eax
	test	ecx, ecx
	je	LBB179_6
# %bb.4:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB179_6
# %bb.5:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB179_6:
	test	bl, bl
	mov	dword ptr [ebp - 52], 15
	mov	dword ptr [ebp - 56], 0
	mov	byte ptr [ebp - 72], 0
	je	LBB179_8
# %bb.7:
	mov	eax, dword ptr [esi]
	lea	edx, [ebp - 100]
	mov	ecx, esi
	mov	eax, dword ptr [eax + 28]
	mov	dword ptr [ebp - 16], 2
	push	edx
	call	eax
	jmp	LBB179_9
LBB179_8:
	mov	eax, dword ptr [esi]
	lea	edx, [ebp - 100]
	mov	ecx, esi
	mov	eax, dword ptr [eax + 24]
	mov	dword ptr [ebp - 16], 2
	push	edx
	call	eax
LBB179_9:
	movsd	xmm0, qword ptr [ebp - 84]      # xmm0 = mem[0],zero
	movsd	xmm2, qword ptr [ebp - 100]     # xmm2 = mem[0],zero
	movsd	xmm1, qword ptr [ebp - 92]      # xmm1 = mem[0],zero
	mov	edx, dword ptr [ebp + 20]
	xor	ecx, ecx
	movsd	qword ptr [ebp - 56], xmm0
	movsd	qword ptr [ebp - 64], xmm1
	movsd	qword ptr [ebp - 72], xmm2
	mov	eax, dword ptr [edx + 32]
	mov	edi, dword ptr [ebp - 56]
	mov	esi, eax
	mov	dword ptr [ebp - 76], edi       # 4-byte Spill
	sub	esi, edi
	cmovb	esi, ecx
	cmp	eax, 1
	mov	eax, dword ptr [edx + 36]
	sbb	eax, 0
	mov	eax, 448
	cmovl	esi, ecx
	and	eax, dword ptr [edx + 20]
	lea	edx, [ebp + 12]
	mov	ebx, dword ptr [edx + 4]
	mov	ecx, dword ptr [edx]
	cmp	eax, 64
	mov	dword ptr [ebp - 48], ebx       # 4-byte Spill
	jne	LBB179_11
# %bb.10:
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	jmp	LBB179_21
LBB179_11:
	mov	eax, ecx
	test	esi, esi
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	je	LBB179_20
# %bb.12:
	test	ebx, ebx
	je	LBB179_19
# %bb.13:
	movzx	eax, byte ptr [ebp + 24]
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	jmp	LBB179_15
	.p2align	4, 0x90
LBB179_14:                              #   in Loop: Header=BB179_15 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 24]
	mov	byte ptr [ecx], dl
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	dec	esi
	je	LBB179_20
LBB179_15:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB179_17
# %bb.16:                               #   in Loop: Header=BB179_15 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB179_14
LBB179_17:                              #   in Loop: Header=BB179_15 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 2
	push	dword ptr [ebp - 44]            # 4-byte Folded Reload
	call	eax
# %bb.18:                               #   in Loop: Header=BB179_15 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	dec	esi
	jne	LBB179_15
	jmp	LBB179_20
LBB179_19:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB179_20:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	dword ptr [ebp - 36], 0         # 4-byte Folded Spill
	and	ecx, -256
	or	ecx, eax
	lea	eax, [ebp + 12]
	mov	dword ptr [eax + 4], ebx
	mov	dword ptr [eax], ecx
LBB179_21:
	mov	eax, ecx
	cmp	dword ptr [ebp - 76], 0         # 4-byte Folded Reload
	mov	ecx, eax
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	je	LBB179_32
# %bb.23:
	test	ebx, ebx
	je	LBB179_31
# %bb.24:
	cmp	dword ptr [ebp - 52], 15
	lea	eax, [ebp - 72]
	jbe	LBB179_27
# %bb.25:
	mov	eax, dword ptr [ebp - 72]
	jmp	LBB179_27
	.p2align	4, 0x90
LBB179_26:                              #   in Loop: Header=BB179_27 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	inc	eax
	dec	dword ptr [ebp - 76]            # 4-byte Folded Spill
	je	LBB179_32
LBB179_27:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	movzx	eax, byte ptr [eax]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB179_29
# %bb.28:                               #   in Loop: Header=BB179_27 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB179_26
LBB179_29:                              #   in Loop: Header=BB179_27 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 2
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.30:                               #   in Loop: Header=BB179_27 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	inc	eax
	dec	dword ptr [ebp - 76]            # 4-byte Folded Spill
	jne	LBB179_27
	jmp	LBB179_32
LBB179_31:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB179_32:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	lea	edx, [ebp + 12]
	mov	dword ptr [edx + 4], ebx
	and	ecx, -256
	or	eax, ecx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	dword ptr [edx], eax
	mov	eax, dword ptr [ebp + 20]
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	test	eax, eax
	je	LBB179_41
# %bb.33:
	test	ebx, ebx
	je	LBB179_40
# %bb.34:
	movzx	ecx, byte ptr [ebp + 24]
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	jmp	LBB179_36
	.p2align	4, 0x90
LBB179_35:                              #   in Loop: Header=BB179_36 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 24]
	mov	byte ptr [ecx], dl
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	dec	eax
	je	LBB179_41
LBB179_36:                              # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB179_38
# %bb.37:                               #   in Loop: Header=BB179_36 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB179_35
LBB179_38:                              #   in Loop: Header=BB179_36 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 2
	push	dword ptr [ebp - 44]            # 4-byte Folded Reload
	call	eax
# %bb.39:                               #   in Loop: Header=BB179_36 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	dec	eax
	jne	LBB179_36
	jmp	LBB179_41
LBB179_40:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB179_41:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 52]
	or	ecx, eax
	mov	eax, dword ptr [ebp + 8]
	cmp	edi, 16
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ebx
	jb	LBB179_46
# %bb.42:
	mov	ecx, dword ptr [ebp - 72]
	lea	edx, [edi + 1]
	cmp	edx, 4096
	jb	LBB179_45
# %bb.43:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB179_48
# %bb.44:
	add	edi, 36
	mov	ecx, esi
	mov	edx, edi
LBB179_45:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [ebp + 8]
LBB179_46:
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
LBB179_47:
	add	esp, 96
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	24
LBB179_48:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.49:
	.def	 "?dtor$50@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$50@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA":
LBB179_50:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$51@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$51@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA":
LBB179_51:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 68]
	test	ecx, ecx
	je	LBB179_54
# %bb.52:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB179_54
# %bb.53:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB179_54:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$55@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$55@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA":
LBB179_55:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	eax, dword ptr [ebp - 52]
	cmp	eax, 16
	jb	LBB179_60
# %bb.56:
	mov	ecx, dword ptr [ebp - 72]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB179_59
# %bb.57:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB179_61
# %bb.58:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB179_59:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB179_60:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB179_61:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end66:
	.section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.p2align	2
"L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z":
	.long	-1                              # ToState
	.long	"?dtor$51@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$50@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$55@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA" # Action
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
                                        # -- End function
	.def	 "?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.globl	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z" # -- Begin function ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	.p2align	4, 0x90
"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z": # @"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
Lfunc_begin67:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 100
	mov	esi, dword ptr [ebp + 36]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	mov	edi, dword ptr [ebp + 32]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	esi, esi
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB180_2
# %bb.1:
	mov	al, byte ptr [edi]
	add	al, -43
	test	al, -3
	sete	al
	jmp	LBB180_3
LBB180_2:
	xor	eax, eax
LBB180_3:
	mov	edx, dword ptr [ebp + 24]
	movzx	ecx, al
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	ecx, 3584
	and	ecx, dword ptr [edx + 20]
	cmp	ecx, 2048
	jne	LBB180_8
# %bb.4:
	movzx	ecx, al
	lea	eax, [ecx + 2]
	cmp	eax, esi
	ja	LBB180_8
# %bb.5:
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	cmp	byte ptr [edi + edx], 48
	jne	LBB180_8
# %bb.6:
	mov	cl, byte ptr [ecx + edi + 1]
	or	cl, 32
	cmp	cl, 120
	jne	LBB180_8
# %bb.7:
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
LBB180_8:
	mov	eax, dword ptr [ebp + 24]
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 80], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 84]
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	push	eax
	call	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.9:
	mov	ecx, dword ptr [ebp - 80]
	mov	edi, dword ptr [ebp + 36]
	mov	esi, eax
	test	ecx, ecx
	je	LBB180_12
# %bb.10:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB180_12
# %bb.11:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB180_12:
	cmp	edi, 15
	mov	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 68], 0
	mov	byte ptr [ebp - 84], 0
	jbe	LBB180_14
# %bb.13:
	mov	dword ptr [ebp - 16], -1
	sub	esp, 12
	mov	al, byte ptr [ebp - 112]
	lea	ecx, [ebp - 84]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp], edi
	mov	dword ptr [esp + 8], 0
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	cmp	dword ptr [ebp - 64], 15
	ja	LBB180_15
	jmp	LBB180_16
LBB180_14:
	mov	dword ptr [ebp - 68], edi
	push	edi
	push	0
	lea	eax, [ebp - 84]
	push	eax
	call	_memset
	add	esp, 12
	mov	byte ptr [ebp + edi - 84], 0
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB180_16
LBB180_15:
	mov	eax, dword ptr [ebp - 84]
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
LBB180_16:
	mov	ecx, dword ptr [esi]
	mov	ebx, dword ptr [ebp + 32]
	mov	edx, dword ptr [ecx + 28]
	lea	eax, [ebx + edi]
	mov	dword ptr [ebp - 16], 3
	mov	ecx, esi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	eax
	push	ebx
	call	edx
# %bb.17:
	mov	eax, dword ptr [ebp + 24]
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 108], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 112]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.18:
	mov	ecx, dword ptr [ebp - 108]
	mov	esi, eax
	test	ecx, ecx
	je	LBB180_21
# %bb.19:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB180_21
# %bb.20:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB180_21:
	mov	eax, dword ptr [esi]
	lea	edx, [ebp - 112]
	mov	dword ptr [ebp - 56], esi       # 4-byte Spill
	mov	ecx, esi
	mov	eax, dword ptr [eax + 20]
	mov	dword ptr [ebp - 16], 3
	push	edx
	call	eax
# %bb.22:
	cmp	dword ptr [ebp - 92], 15
	lea	edx, [ebp - 112]
	jbe	LBB180_24
# %bb.23:
	mov	edx, dword ptr [ebp - 112]
LBB180_24:
	mov	al, byte ptr [edx]
	mov	ecx, dword ptr [ebp - 56]       # 4-byte Reload
	dec	al
	cmp	al, 125
	ja	LBB180_36
# %bb.25:
	mov	eax, dword ptr [ecx]
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	mov	eax, dword ptr [eax + 16]
	mov	dword ptr [ebp - 16], 5
	call	eax
	mov	byte ptr [ebp - 56], al         # 1-byte Spill
# %bb.26:
	movsx	eax, byte ptr [ebp - 56]        # 1-byte Folded Reload
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	lea	ebx, [ebp - 84]
	mov	dword ptr [ebp - 48], eax       # 4-byte Spill
	jmp	LBB180_29
	.p2align	4, 0x90
LBB180_27:                              #   in Loop: Header=BB180_29 Depth=1
	inc	eax
	lea	ecx, [esi + edi]
	lea	edx, [esi + edi + 1]
	push	eax
	push	ecx
	push	edx
	call	_memmove
	add	esp, 12
	movzx	eax, byte ptr [ebp - 56]        # 1-byte Folded Reload
	mov	byte ptr [esi + edi], al
LBB180_28:                              #   in Loop: Header=BB180_29 Depth=1
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	byte ptr [edx + 1], 0
	lea	eax, [edx + 1]
	cmovg	edx, eax
LBB180_29:                              # =>This Inner Loop Header: Depth=1
	movsx	eax, byte ptr [edx]
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, eax
	dec	cl
	cmp	cl, 125
	ja	LBB180_36
# %bb.30:                               #   in Loop: Header=BB180_29 Depth=1
	mov	ecx, edi
	sub	ecx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	cmp	ecx, eax
	jbe	LBB180_36
# %bb.31:                               #   in Loop: Header=BB180_29 Depth=1
	mov	ecx, dword ptr [ebp - 68]
	sub	edi, eax
	mov	eax, ecx
	sub	eax, edi
	jb	LBB180_131
# %bb.32:                               #   in Loop: Header=BB180_29 Depth=1
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp - 64]
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	cmp	edx, ecx
	jne	LBB180_34
# %bb.33:                               #   in Loop: Header=BB180_29 Depth=1
	mov	dword ptr [ebp - 16], 5
	sub	esp, 20
	movzx	eax, byte ptr [ebp - 88]
	mov	ecx, ebx
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp], 1
	mov	eax, dword ptr [ebp - 48]       # 4-byte Reload
	mov	dword ptr [esp + 16], eax
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	lea	ebx, [ebp - 84]
	jmp	LBB180_28
	.p2align	4, 0x90
LBB180_34:                              #   in Loop: Header=BB180_29 Depth=1
	inc	ecx
	cmp	edx, 15
	mov	esi, ebx
	mov	dword ptr [ebp - 68], ecx
	jbe	LBB180_27
# %bb.35:                               #   in Loop: Header=BB180_29 Depth=1
	mov	esi, dword ptr [ebp - 84]
	jmp	LBB180_27
LBB180_36:
	mov	edx, dword ptr [ebp + 24]
	mov	esi, dword ptr [ebp - 68]
	xor	ecx, ecx
	mov	eax, dword ptr [edx + 32]
	mov	dword ptr [ebp - 56], esi       # 4-byte Spill
	mov	edi, eax
	sub	edi, esi
	cmovb	edi, ecx
	cmp	eax, 1
	mov	eax, dword ptr [edx + 36]
	sbb	eax, 0
	mov	eax, 448
	cmovl	edi, ecx
	and	eax, dword ptr [edx + 20]
	mov	dword ptr [ebp - 48], edi       # 4-byte Spill
	cmp	eax, 64
	je	LBB180_42
# %bb.37:
	cmp	eax, 256
	jne	LBB180_46
# %bb.38:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	je	LBB180_56
# %bb.39:
	test	ebx, ebx
	je	LBB180_55
# %bb.40:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB180_107
# %bb.41:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB180_108
LBB180_42:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	je	LBB180_54
# %bb.43:
	test	ebx, ebx
	je	LBB180_64
# %bb.44:
	cmp	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 60], ecx       # 4-byte Spill
	jbe	LBB180_115
# %bb.45:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB180_116
LBB180_46:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 48], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	je	LBB180_67
# %bb.47:
	test	ebx, ebx
	je	LBB180_66
# %bb.48:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	jmp	LBB180_50
	.p2align	4, 0x90
LBB180_49:                              #   in Loop: Header=BB180_50 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	je	LBB180_67
LBB180_50:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB180_52
# %bb.51:                               #   in Loop: Header=BB180_50 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB180_49
LBB180_52:                              #   in Loop: Header=BB180_50 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	call	eax
# %bb.53:                               #   in Loop: Header=BB180_50 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	jne	LBB180_50
	jmp	LBB180_67
LBB180_54:
	mov	dword ptr [ebp - 60], ecx       # 4-byte Spill
	jmp	LBB180_65
LBB180_55:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB180_56:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	cmp	dword ptr [ebp - 48], 0         # 4-byte Folded Reload
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	je	LBB180_72
# %bb.57:
	test	ebx, ebx
	je	LBB180_71
# %bb.58:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	jmp	LBB180_60
	.p2align	4, 0x90
LBB180_59:                              #   in Loop: Header=BB180_60 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	je	LBB180_72
LBB180_60:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB180_62
# %bb.61:                               #   in Loop: Header=BB180_60 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB180_59
LBB180_62:                              #   in Loop: Header=BB180_60 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	call	eax
# %bb.63:                               #   in Loop: Header=BB180_60 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	jne	LBB180_60
	jmp	LBB180_72
LBB180_64:
	mov	al, 1
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
LBB180_65:
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	ecx, byte ptr [ebp - 60]        # 1-byte Folded Reload
	lea	edx, [ebp + 16]
	mov	dword ptr [edx + 4], ebx
	and	eax, -256
	jmp	LBB180_73
LBB180_66:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB180_67:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	je	LBB180_72
# %bb.68:
	test	ebx, ebx
	je	LBB180_71
# %bb.69:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB180_123
# %bb.70:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB180_124
LBB180_71:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB180_72:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	lea	edx, [ebp + 16]
	mov	dword ptr [ebp - 48], 0         # 4-byte Folded Spill
	mov	dword ptr [edx + 4], ebx
LBB180_73:
	or	ecx, eax
	mov	dword ptr [edx], ecx
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	sub	eax, dword ptr [ebp - 40]       # 4-byte Folded Reload
	je	LBB180_79
# %bb.75:
	test	ebx, ebx
	je	LBB180_78
# %bb.76:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB180_99
# %bb.77:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB180_100
LBB180_78:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB180_79:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	cmp	dword ptr [ebp - 48], 0         # 4-byte Folded Reload
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	mov	ecx, dword ptr [ebp + 24]
	mov	dword ptr [ecx + 36], 0
	mov	dword ptr [ecx + 32], 0
	je	LBB180_88
# %bb.80:
	test	ebx, ebx
	je	LBB180_87
# %bb.81:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	jmp	LBB180_83
	.p2align	4, 0x90
LBB180_82:                              #   in Loop: Header=BB180_83 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	je	LBB180_88
LBB180_83:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB180_85
# %bb.84:                               #   in Loop: Header=BB180_83 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB180_82
LBB180_85:                              #   in Loop: Header=BB180_83 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 56]            # 4-byte Folded Reload
	call	eax
# %bb.86:                               #   in Loop: Header=BB180_83 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	jne	LBB180_83
	jmp	LBB180_88
LBB180_87:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB180_88:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	mov	esi, dword ptr [ebp + 12]
	or	ecx, eax
	mov	eax, dword ptr [ebp - 92]
	mov	dword ptr [esi], ecx
	mov	dword ptr [esi + 4], ebx
	cmp	eax, 16
	jb	LBB180_93
# %bb.89:
	mov	ecx, dword ptr [ebp - 112]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB180_92
# %bb.90:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB180_133
# %bb.91:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB180_92:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB180_93:
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB180_98
# %bb.94:
	mov	ecx, dword ptr [ebp - 84]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB180_97
# %bb.95:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB180_135
# %bb.96:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB180_97:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB180_98:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 100
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB180_99:
	lea	ecx, [ebp - 84]
LBB180_100:
	add	ecx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	jmp	LBB180_103
	.p2align	4, 0x90
LBB180_101:                             #   in Loop: Header=BB180_103 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB180_102:                             #   in Loop: Header=BB180_103 Depth=1
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB180_79
LBB180_103:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB180_105
# %bb.104:                              #   in Loop: Header=BB180_103 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB180_101
LBB180_105:                             #   in Loop: Header=BB180_103 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.106:                              #   in Loop: Header=BB180_103 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB180_102
LBB180_107:
	lea	ecx, [ebp - 84]
LBB180_108:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB180_111
	.p2align	4, 0x90
LBB180_109:                             #   in Loop: Header=BB180_111 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB180_110:                             #   in Loop: Header=BB180_111 Depth=1
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB180_56
LBB180_111:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB180_113
# %bb.112:                              #   in Loop: Header=BB180_111 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB180_109
LBB180_113:                             #   in Loop: Header=BB180_111 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.114:                              #   in Loop: Header=BB180_111 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB180_110
LBB180_115:
	lea	ecx, [ebp - 84]
LBB180_116:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	jmp	LBB180_119
	.p2align	4, 0x90
LBB180_117:                             #   in Loop: Header=BB180_119 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB180_118:                             #   in Loop: Header=BB180_119 Depth=1
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB180_65
LBB180_119:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB180_121
# %bb.120:                              #   in Loop: Header=BB180_119 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB180_117
LBB180_121:                             #   in Loop: Header=BB180_119 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.122:                              #   in Loop: Header=BB180_119 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	jmp	LBB180_118
LBB180_123:
	lea	ecx, [ebp - 84]
LBB180_124:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB180_127
	.p2align	4, 0x90
LBB180_125:                             #   in Loop: Header=BB180_127 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB180_126:                             #   in Loop: Header=BB180_127 Depth=1
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB180_72
LBB180_127:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB180_129
# %bb.128:                              #   in Loop: Header=BB180_127 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB180_125
LBB180_129:                             #   in Loop: Header=BB180_127 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.130:                              #   in Loop: Header=BB180_127 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB180_126
LBB180_131:
	mov	dword ptr [ebp - 16], 5
	call	"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
# %bb.132:
LBB180_133:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.134:
LBB180_135:
	mov	dword ptr [ebp - 16], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.136:
	.def	 "?dtor$137@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$137@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB180_137:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$138@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$138@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB180_138:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$139@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$139@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB180_139:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 108]
	test	ecx, ecx
	je	LBB180_142
# %bb.140:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB180_142
# %bb.141:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB180_142:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$143@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$143@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB180_143:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 80]
	test	ecx, ecx
	je	LBB180_146
# %bb.144:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB180_146
# %bb.145:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB180_146:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$147@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$147@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB180_147:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 92]
	cmp	eax, 16
	jb	LBB180_152
# %bb.148:
	mov	ecx, dword ptr [ebp - 112]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB180_151
# %bb.149:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB180_153
# %bb.150:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB180_151:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB180_152:
	mov	dword ptr [ebp - 96], 0
	mov	dword ptr [ebp - 92], 15
	mov	byte ptr [ebp - 112], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB180_153:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$154@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$154@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB180_154:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB180_159
# %bb.155:
	mov	ecx, dword ptr [ebp - 84]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB180_158
# %bb.156:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB180_160
# %bb.157:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB180_158:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB180_159:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB180_160:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end67:
	.section	.xdata,"dr",associative,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.p2align	2
"L__ehtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z":
	.long	-1                              # ToState
	.long	"?dtor$143@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$138@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$137@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$154@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$139@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$147@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
                                        # -- End function
	.def	 _sprintf_s;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,_sprintf_s
	.globl	_sprintf_s                      # -- Begin function sprintf_s
	.p2align	4, 0x90
_sprintf_s:                             # @sprintf_s
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [esp + 24]
	mov	edi, dword ptr [esp + 28]
	mov	ebx, dword ptr [esp + 32]
	lea	ebp, [esp + 36]
	mov	dword ptr [esp], ebp
	call	___local_stdio_printf_options
	push	ebp
	push	0
	push	ebx
	push	edi
	push	esi
	push	dword ptr [eax + 4]
	push	dword ptr [eax]
	call	___stdio_common_vsprintf_s
	add	esp, 28
	cmp	eax, -2
	mov	ecx, -1
	cmovle	eax, ecx
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.globl	"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z" # -- Begin function ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	.p2align	4, 0x90
"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z": # @"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
Lfunc_begin68:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	lea	ecx, [ebp - 40]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	mov	edx, dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"]
	mov	eax, dword ptr ["?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B"]
	test	edx, edx
	mov	dword ptr [ebp - 36], eax
	je	LBB182_1
# %bb.4:
	mov	eax, dword ptr [edi + 4]
	cmp	dword ptr [eax + 12], edx
	ja	LBB182_5
	jmp	LBB182_6
LBB182_1:
	lea	ecx, [ebp - 44]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	cmp	dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"], 0
	jne	LBB182_3
# %bb.2:
	mov	eax, dword ptr ["?_Id_cnt@id@locale@std@@0HA"]
	inc	eax
	mov	dword ptr ["?_Id_cnt@id@locale@std@@0HA"], eax
	mov	dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"], eax
LBB182_3:
	lea	ecx, [ebp - 44]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	edx, dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"]
	mov	eax, dword ptr [edi + 4]
	cmp	dword ptr [eax + 12], edx
	jbe	LBB182_6
LBB182_5:
	mov	ecx, dword ptr [eax + 8]
	mov	esi, dword ptr [ecx + 4*edx]
	test	esi, esi
	jne	LBB182_17
LBB182_6:
	cmp	byte ptr [eax + 20], 0
	je	LBB182_10
# %bb.7:
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"
# %bb.8:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	cmp	dword ptr [eax + 12], ecx
	jbe	LBB182_10
# %bb.9:
	mov	eax, dword ptr [eax + 8]
	mov	esi, dword ptr [eax + 4*ecx]
	test	esi, esi
	jne	LBB182_17
LBB182_10:
	mov	esi, dword ptr [ebp - 36]
	test	esi, esi
	jne	LBB182_17
# %bb.11:
	lea	eax, [ebp - 36]
	mov	dword ptr [ebp - 16], 0
	push	edi
	push	eax
	call	"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	add	esp, 8
# %bb.12:
	cmp	eax, -1
	je	LBB182_13
# %bb.15:
	mov	eax, dword ptr [ebp - 36]
	mov	dword ptr [ebp - 16], 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	push	eax
	call	"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"
	add	esp, 4
# %bb.16:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	esi, dword ptr [ebp - 36]
	mov	dword ptr ["?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B"], esi
LBB182_17:
	lea	ecx, [ebp - 40]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB182_13:
	call	"?_Throw_bad_cast@std@@YAXXZ"
# %bb.14:
	.def	 "?dtor$18@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA":
LBB182_18:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	cmp	dword ptr [ebp - 32], 0         # 4-byte Folded Reload
	je	LBB182_20
# %bb.19:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	push	1
	call	dword ptr [eax]
LBB182_20:
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$21@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA":
LBB182_21:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end68:
	.section	.xdata,"dr",associative,"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.p2align	2
"L__ehtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z":
	.long	-1                              # ToState
	.long	"?dtor$21@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$18@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
                                        # -- End function
	.def	 "??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.globl	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z" # -- Begin function ??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z
	.p2align	4, 0x90
"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z": # @"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
Lfunc_begin69:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 24
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	js	LBB183_18
# %bb.1:
	mov	ebx, dword ptr [esi + 20]
	mov	ecx, edx
	mov	eax, -2147483648
	mov	dword ptr [ebp - 32], 2147483647 # 4-byte Folded Spill
	or	ecx, 15
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	js	LBB183_5
# %bb.2:
	mov	edx, ebx
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, ebx
	jb	LBB183_5
# %bb.3:
	add	edx, ebx
	cmp	ecx, edx
	cmovae	edx, ecx
	lea	eax, [edx + 1]
	cmp	eax, 4096
	jb	LBB183_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	jae	LBB183_19
LBB183_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB183_9:
	mov	al, byte ptr [ebp + 16]
	mov	ebx, dword ptr [ebp + 8]
	mov	dword ptr [esi + 16], ebx
	mov	dword ptr [esi + 20], edx
	movzx	eax, al
	push	ebx
	push	eax
	push	edi
	call	_memset
	add	esp, 12
	mov	byte ptr [edi + ebx], 0
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	ebx, 16
	jb	LBB183_17
# %bb.10:
	mov	eax, dword ptr [esi]
	lea	ecx, [ebx + 1]
	cmp	ecx, 4096
	jb	LBB183_16
# %bb.11:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB183_12
# %bb.15:
	add	ebx, 36
	mov	eax, edx
	mov	ecx, ebx
LBB183_16:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB183_17:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 24
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB183_6:
	test	eax, eax
	je	LBB183_7
# %bb.8:
	push	eax
	mov	edi, edx
	call	"??2@YAPAXI@Z"
	mov	edx, edi
	add	esp, 4
	mov	edi, eax
	jmp	LBB183_9
LBB183_7:
	xor	edi, edi
	mov	edx, -1
	jmp	LBB183_9
LBB183_18:
	call	"?_Xlen_string@std@@YAXXZ"
LBB183_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB183_19:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z@4HA":
LBB183_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end69:
	.section	.xdata,"dr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
                                        # -- End function
	.def	 "?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.globl	"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z" # -- Begin function ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	.p2align	4, 0x90
"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z": # @"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
Lfunc_begin70:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 72
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB184_8
# %bb.1:
	cmp	dword ptr [edx], 0
	jne	LBB184_8
# %bb.2:
	mov	esi, dword ptr [ebp + 12]
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [esi + 4]
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	test	edx, edx
	je	LBB184_3
# %bb.4:
	mov	ecx, dword ptr [edx + 24]
	add	edx, 28
	test	ecx, ecx
	cmovne	edx, ecx
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 84]
	push	edx
	call	"??0_Locinfo@std@@QAE@PBD@Z"
	jmp	LBB184_6
LBB184_3:
	mov	edx, offset "??_C@_00CNPNBAHC@?$AA@"
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 84]
	push	edx
	call	"??0_Locinfo@std@@QAE@PBD@Z"
LBB184_6:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [ebp - 16], 1
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ecx], offset "??_7?$numpunct@D@std@@6B@"
	push	1
	lea	eax, [ebp - 84]
	push	eax
	call	"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
# %bb.7:
	mov	eax, dword ptr [ebp + 8]
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], ecx
	lea	ecx, [ebp - 84]
	call	"??1_Locinfo@std@@QAE@XZ"
LBB184_8:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, 4
	add	esp, 72
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$9@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA":
LBB184_9:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	lea	ecx, [ebp - 84]
	call	"??1_Locinfo@std@@QAE@XZ"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$10@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$10@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA":
LBB184_10:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??3@YAXPAX@Z"
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end70:
	.section	.xdata,"dr",associative,"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.p2align	2
"L__ehtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z":
	.long	-1                              # ToState
	.long	"?dtor$10@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$9@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
                                        # -- End function
	.def	 "?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.globl	"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z" # -- Begin function ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	.p2align	4, 0x90
"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z": # @"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
Lfunc_begin71:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 120
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	call	_localeconv
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	lea	eax, [ebp - 132]
	push	eax
	call	__Getcvt
	add	esp, 4
	lea	eax, [ebp - 88]
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 16], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	__Getcvt
	add	esp, 4
# %bb.1:
	mov	bh, byte ptr [ebp + 12]
	mov	edi, offset "??_C@_00CNPNBAHC@?$AA@"
	test	bh, bh
	jne	LBB185_3
# %bb.2:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [eax + 8]
LBB185_3:
	push	edi
	call	_strlen
	add	esp, 4
	mov	esi, eax
	inc	esi
	push	1
	push	esi
	call	_calloc
	add	esp, 8
	test	eax, eax
	je	LBB185_18
# %bb.4:
	test	esi, esi
	je	LBB185_14
# %bb.5:
	cmp	esi, 31
	jbe	LBB185_6
# %bb.9:
	lea	ecx, [edi + esi]
	cmp	eax, ecx
	jae	LBB185_11
# %bb.10:
	lea	ecx, [eax + esi]
	cmp	edi, ecx
	jae	LBB185_11
LBB185_6:
	mov	ecx, eax
	mov	edx, edi
LBB185_7:
	xor	edi, edi
	.p2align	4, 0x90
LBB185_8:                               # =>This Inner Loop Header: Depth=1
	mov	bl, byte ptr [edx + edi]
	mov	byte ptr [ecx + edi], bl
	inc	edi
	cmp	esi, edi
	jne	LBB185_8
LBB185_14:
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [esi + 8], eax
	push	1
	push	6
	call	_calloc
	add	esp, 8
	test	eax, eax
	je	LBB185_20
# %bb.15:
	mov	dword ptr [eax], 1936482662
	mov	byte ptr [eax + 4], 101
	mov	dword ptr [esi + 16], eax
	push	1
	push	5
	call	_calloc
	add	esp, 8
	test	eax, eax
	je	LBB185_22
# %bb.16:
	test	bh, bh
	mov	dword ptr [eax], 1702195828
	mov	dword ptr [esi + 20], eax
	je	LBB185_24
# %bb.17:
	mov	byte ptr [esi + 12], 46
	mov	al, 44
	jmp	LBB185_25
LBB185_24:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	al, byte ptr [eax]
	mov	byte ptr [esi + 12], al
	mov	eax, dword ptr [ecx + 4]
	mov	al, byte ptr [eax]
LBB185_25:
	mov	byte ptr [esi + 13], al
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 120
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
LBB185_11:
	mov	edx, esi
	mov	ecx, eax
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	and	esi, 31
	xor	ebx, ebx
	and	edx, -32
	add	ecx, edx
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	add	edx, edi
	.p2align	4, 0x90
LBB185_12:                              # =>This Inner Loop Header: Depth=1
	movups	xmm0, xmmword ptr [edi + ebx]
	movups	xmm1, xmmword ptr [edi + ebx + 16]
	movups	xmmword ptr [eax + ebx], xmm0
	movups	xmmword ptr [eax + ebx + 16], xmm1
	add	ebx, 32
	cmp	dword ptr [ebp - 40], ebx       # 4-byte Folded Reload
	jne	LBB185_12
# %bb.13:
	mov	edi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	bh, byte ptr [ebp + 12]
	cmp	dword ptr [ebp - 44], edi       # 4-byte Folded Reload
	jne	LBB185_7
	jmp	LBB185_14
LBB185_18:
	call	"?_Xbad_alloc@std@@YAXXZ"
# %bb.19:
LBB185_20:
	mov	dword ptr [ebp - 16], 0
	call	"?_Xbad_alloc@std@@YAXXZ"
# %bb.21:
LBB185_22:
	mov	dword ptr [ebp - 16], 0
	call	"?_Xbad_alloc@std@@YAXXZ"
# %bb.23:
	.def	 "?dtor$26@?0??_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$26@?0??_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z@4HA":
LBB185_26:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	push	dword ptr [esi + 8]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 16]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 20]
	call	_free
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end71:
	.section	.xdata,"dr",associative,"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.p2align	2
"L__ehtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z":
	.long	-1                              # ToState
	.long	"?dtor$26@?0??_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
                                        # -- End function
	.def	 "??_G?$numpunct@D@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$numpunct@D@std@@MAEPAXI@Z"
	.globl	"??_G?$numpunct@D@std@@MAEPAXI@Z" # -- Begin function ??_G?$numpunct@D@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_G?$numpunct@D@std@@MAEPAXI@Z":      # @"??_G?$numpunct@D@std@@MAEPAXI@Z"
# %bb.0:
	push	esi
	mov	esi, ecx
	mov	dword ptr [ecx], offset "??_7?$numpunct@D@std@@6B@"
	push	dword ptr [ecx + 8]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 16]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 20]
	call	_free
	add	esp, 4
	cmp	dword ptr [esp + 8], 0
	je	LBB186_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB186_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?do_decimal_point@?$numpunct@D@std@@MBEDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_decimal_point@?$numpunct@D@std@@MBEDXZ"
	.globl	"?do_decimal_point@?$numpunct@D@std@@MBEDXZ" # -- Begin function ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	.p2align	4, 0x90
"?do_decimal_point@?$numpunct@D@std@@MBEDXZ": # @"?do_decimal_point@?$numpunct@D@std@@MBEDXZ"
# %bb.0:
	mov	al, byte ptr [ecx + 12]
	ret
                                        # -- End function
	.def	 "?do_thousands_sep@?$numpunct@D@std@@MBEDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ"
	.globl	"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ" # -- Begin function ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	.p2align	4, 0x90
"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ": # @"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ"
# %bb.0:
	mov	al, byte ptr [ecx + 13]
	ret
                                        # -- End function
	.def	 "?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.globl	"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	.p2align	4, 0x90
"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [esp + 20]
	mov	ebx, dword ptr [ecx + 8]
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	push	ebx
	call	_strlen
	add	esp, 4
	mov	edi, eax
	cmp	eax, 15
	jbe	LBB189_1
# %bb.2:
	sub	esp, 12
	mov	al, byte ptr [esp + 12]
	mov	ecx, esi
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], edi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB189_3
LBB189_1:
	mov	dword ptr [esi + 16], edi
	push	edi
	push	ebx
	push	esi
	call	_memmove
	add	esp, 12
	mov	byte ptr [esi + edi], 0
LBB189_3:
	mov	eax, esi
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.globl	"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	.p2align	4, 0x90
"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [esp + 20]
	mov	ebx, dword ptr [ecx + 16]
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	push	ebx
	call	_strlen
	add	esp, 4
	mov	edi, eax
	cmp	eax, 15
	jbe	LBB190_1
# %bb.2:
	sub	esp, 12
	mov	al, byte ptr [esp + 12]
	mov	ecx, esi
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], edi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB190_3
LBB190_1:
	mov	dword ptr [esi + 16], edi
	push	edi
	push	ebx
	push	esi
	call	_memmove
	add	esp, 12
	mov	byte ptr [esi + edi], 0
LBB190_3:
	mov	eax, esi
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.globl	"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	.p2align	4, 0x90
"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [esp + 20]
	mov	ebx, dword ptr [ecx + 20]
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	push	ebx
	call	_strlen
	add	esp, 4
	mov	edi, eax
	cmp	eax, 15
	jbe	LBB191_1
# %bb.2:
	sub	esp, 12
	mov	al, byte ptr [esp + 12]
	mov	ecx, esi
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], edi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB191_3
LBB191_1:
	mov	dword ptr [esi + 16], edi
	push	edi
	push	ebx
	push	esi
	call	_memmove
	add	esp, 12
	mov	byte ptr [esi + edi], 0
LBB191_3:
	mov	eax, esi
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
Lfunc_begin72:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	mov	ebx, ecx
	lea	eax, [ebp - 24]
	mov	esi, dword ptr [ebp + 8]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	ecx, dword ptr [ebx + 16]
	sub	eax, ecx
	cmp	eax, esi
	jb	LBB192_19
# %bb.1:
	mov	edi, dword ptr [ebx + 20]
	add	esi, ecx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	dword ptr [ebp - 32], 2147483647 # 4-byte Folded Spill
	mov	ecx, esi
	or	ecx, 15
	js	LBB192_5
# %bb.2:
	mov	edx, edi
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	esi, edi
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, esi
	mov	edi, esi
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	jb	LBB192_5
# %bb.3:
	add	edx, edi
	cmp	ecx, edx
	cmovae	edx, ecx
	lea	eax, [edx + 1]
	cmp	eax, 4096
	jb	LBB192_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	jae	LBB192_20
LBB192_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
LBB192_9:
	mov	dword ptr [ebx + 16], esi
	mov	esi, dword ptr [ebp + 16]
	cmp	edi, 16
	mov	dword ptr [ebx + 20], edx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	jb	LBB192_17
# %bb.10:
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	mov	edi, dword ptr [ebx]
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	push	esi
	push	edi
	push	ecx
	mov	ebx, ecx
	call	_memcpy
	add	esp, 12
	movzx	eax, byte ptr [ebp + 24]
	mov	ecx, dword ptr [ebp + 20]
	add	ebx, esi
	push	ecx
	push	eax
	push	ebx
	call	_memset
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	ebx, dword ptr [ebp + 20]
	sub	eax, esi
	add	esi, edi
	inc	eax
	push	eax
	push	esi
	push	ebx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	edx, eax
	inc	eax
	cmp	eax, 4096
	jb	LBB192_16
# %bb.11:
	mov	ecx, dword ptr [edi - 4]
	add	edi, -4
	sub	edi, ecx
	cmp	edi, 32
	jae	LBB192_12
# %bb.15:
	mov	eax, edx
	mov	edi, ecx
	add	eax, 36
LBB192_16:
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	push	eax
	push	edi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB192_18
LBB192_17:
	push	esi
	push	ebx
	push	ecx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 20]
	lea	edi, [eax + esi]
	movzx	eax, byte ptr [ebp + 24]
	push	ecx
	push	eax
	push	edi
	call	_memset
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	edi, dword ptr [ebp + 20]
	sub	eax, esi
	add	esi, ebx
	inc	eax
	push	eax
	push	esi
	push	edi
	call	_memcpy
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
LBB192_18:
	mov	dword ptr [ebx], eax
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, ebx
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	20
LBB192_6:
	test	eax, eax
	je	LBB192_7
# %bb.8:
	push	eax
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	call	"??2@YAPAXI@Z"
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 4
	mov	ecx, eax
	jmp	LBB192_9
LBB192_7:
	xor	ecx, ecx
	mov	edx, -1
	jmp	LBB192_9
LBB192_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB192_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB192_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z@4HA":
LBB192_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end72:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
                                        # -- End function
	.def	 ___local_stdio_printf_options;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,___local_stdio_printf_options
	.globl	___local_stdio_printf_options   # -- Begin function __local_stdio_printf_options
	.p2align	4, 0x90
___local_stdio_printf_options:          # @__local_stdio_printf_options
# %bb.0:
	mov	eax, offset "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	ret
                                        # -- End function
	.def	 "?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.globl	"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z" # -- Begin function ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
	.p2align	4, 0x90
"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z": # @"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
Lfunc_begin73:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 100
	mov	edi, dword ptr [ebp + 36]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	mov	ebx, dword ptr [ebp + 32]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edi, edi
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB194_2
# %bb.1:
	mov	al, byte ptr [ebx]
	add	al, -43
	test	al, -3
	sete	dl
	jmp	LBB194_3
LBB194_2:
	xor	edx, edx
LBB194_3:
	mov	eax, dword ptr [ebp + 24]
	mov	esi, 12288
	movzx	ecx, dl
	and	esi, dword ptr [eax + 20]
	mov	eax, offset "??_C@_02MDKMJEGG@eE?$AA@"
	cmp	esi, 12288
	jne	LBB194_7
# %bb.4:
	movzx	edx, dl
	mov	eax, offset "??_C@_02OOPEBDOJ@pP?$AA@"
	lea	esi, [edx + 2]
	cmp	esi, edi
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	ja	LBB194_7
# %bb.5:
	cmp	byte ptr [ebx + ecx], 48
	jne	LBB194_7
# %bb.6:
	mov	dl, byte ptr [edx + ebx + 1]
	or	dl, 32
	cmp	dl, 120
	je	LBB194_8
LBB194_7:
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
LBB194_8:
	push	eax
	push	ebx
	call	_strcspn
	add	esp, 8
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	mov	word ptr [ebp - 86], 46
	call	_localeconv
	mov	eax, dword ptr [eax]
	mov	al, byte ptr [eax]
	mov	byte ptr [ebp - 86], al
	lea	eax, [ebp - 86]
	push	eax
	push	ebx
	call	_strcspn
	add	esp, 8
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp + 24]
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 80], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 84]
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	push	eax
	call	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.9:
	mov	ecx, dword ptr [ebp - 80]
	mov	edi, dword ptr [ebp + 36]
	mov	esi, eax
	test	ecx, ecx
	je	LBB194_12
# %bb.10:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB194_12
# %bb.11:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB194_12:
	mov	ebx, dword ptr [ebp + 32]
	cmp	edi, 15
	mov	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 68], 0
	mov	byte ptr [ebp - 84], 0
	jbe	LBB194_14
# %bb.13:
	mov	dword ptr [ebp - 16], -1
	sub	esp, 12
	mov	al, byte ptr [ebp - 112]
	lea	ecx, [ebp - 84]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp], edi
	mov	dword ptr [esp + 8], 0
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	cmp	dword ptr [ebp - 64], 15
	ja	LBB194_15
	jmp	LBB194_16
LBB194_14:
	mov	dword ptr [ebp - 68], edi
	push	edi
	push	0
	lea	eax, [ebp - 84]
	push	eax
	call	_memset
	add	esp, 12
	mov	byte ptr [ebp + edi - 84], 0
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB194_16
LBB194_15:
	mov	eax, dword ptr [ebp - 84]
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
LBB194_16:
	mov	ecx, dword ptr [esi]
	lea	eax, [ebx + edi]
	mov	edx, dword ptr [ecx + 28]
	mov	dword ptr [ebp - 16], 3
	mov	ecx, esi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	eax
	push	ebx
	call	edx
# %bb.17:
	mov	eax, dword ptr [ebp + 24]
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 108], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 112]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.18:
	mov	ecx, dword ptr [ebp - 108]
	mov	esi, eax
	test	ecx, ecx
	je	LBB194_21
# %bb.19:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB194_21
# %bb.20:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB194_21:
	mov	eax, dword ptr [esi]
	lea	edx, [ebp - 112]
	mov	ecx, esi
	mov	eax, dword ptr [eax + 20]
	mov	dword ptr [ebp - 16], 3
	push	edx
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	call	eax
# %bb.22:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 16]
	mov	dword ptr [ebp - 16], 5
	call	eax
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ebx, [ebp - 112]
	mov	byte ptr [ebp - 60], al         # 1-byte Spill
# %bb.23:
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	eax, dword ptr [ebp + 36]
	je	LBB194_29
# %bb.24:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 12]
	lea	ebx, [ebp - 112]
# %bb.25:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB194_27
# %bb.26:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB194_28
LBB194_27:
	lea	ecx, [ebp - 84]
LBB194_28:
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	byte ptr [ecx + edi], al
LBB194_29:
	cmp	dword ptr [ebp - 92], 15
	jbe	LBB194_31
# %bb.30:
	mov	ebx, dword ptr [ebp - 112]
LBB194_31:
	movsx	eax, byte ptr [ebp - 60]        # 1-byte Folded Reload
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	jmp	LBB194_34
	.p2align	4, 0x90
LBB194_32:                              #   in Loop: Header=BB194_34 Depth=1
	inc	eax
	lea	ecx, [esi + edi]
	lea	edx, [esi + edi + 1]
	push	eax
	push	ecx
	push	edx
	call	_memmove
	add	esp, 12
	movzx	eax, byte ptr [ebp - 60]        # 1-byte Folded Reload
	mov	byte ptr [esi + edi], al
LBB194_33:                              #   in Loop: Header=BB194_34 Depth=1
	cmp	byte ptr [ebx + 1], 0
	lea	eax, [ebx + 1]
	cmovg	ebx, eax
LBB194_34:                              # =>This Inner Loop Header: Depth=1
	movsx	eax, byte ptr [ebx]
	mov	ecx, eax
	dec	cl
	cmp	cl, 125
	ja	LBB194_41
# %bb.35:                               #   in Loop: Header=BB194_34 Depth=1
	mov	ecx, edi
	sub	ecx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	cmp	ecx, eax
	jbe	LBB194_41
# %bb.36:                               #   in Loop: Header=BB194_34 Depth=1
	mov	ecx, dword ptr [ebp - 68]
	sub	edi, eax
	mov	eax, ecx
	sub	eax, edi
	jb	LBB194_136
# %bb.37:                               #   in Loop: Header=BB194_34 Depth=1
	mov	edx, dword ptr [ebp - 64]
	cmp	edx, ecx
	jne	LBB194_39
# %bb.38:                               #   in Loop: Header=BB194_34 Depth=1
	mov	dword ptr [ebp - 16], 5
	sub	esp, 20
	movzx	eax, byte ptr [ebp - 88]
	lea	ecx, [ebp - 84]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp], 1
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	dword ptr [esp + 16], eax
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB194_33
	.p2align	4, 0x90
LBB194_39:                              #   in Loop: Header=BB194_34 Depth=1
	inc	ecx
	cmp	edx, 15
	lea	esi, [ebp - 84]
	mov	dword ptr [ebp - 68], ecx
	jbe	LBB194_32
# %bb.40:                               #   in Loop: Header=BB194_34 Depth=1
	mov	esi, dword ptr [ebp - 84]
	jmp	LBB194_32
LBB194_41:
	mov	edx, dword ptr [ebp + 24]
	mov	esi, dword ptr [ebp - 68]
	xor	ecx, ecx
	mov	eax, dword ptr [edx + 32]
	mov	dword ptr [ebp - 60], esi       # 4-byte Spill
	mov	edi, eax
	sub	edi, esi
	cmovb	edi, ecx
	cmp	eax, 1
	mov	eax, dword ptr [edx + 36]
	sbb	eax, 0
	mov	eax, 448
	cmovl	edi, ecx
	and	eax, dword ptr [edx + 20]
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	cmp	eax, 64
	je	LBB194_47
# %bb.42:
	cmp	eax, 256
	jne	LBB194_51
# %bb.43:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	je	LBB194_61
# %bb.44:
	test	ebx, ebx
	je	LBB194_60
# %bb.45:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB194_112
# %bb.46:
	mov	eax, dword ptr [ebp - 84]
	jmp	LBB194_113
LBB194_47:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	je	LBB194_59
# %bb.48:
	test	ebx, ebx
	je	LBB194_69
# %bb.49:
	cmp	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 56], ecx       # 4-byte Spill
	jbe	LBB194_120
# %bb.50:
	mov	eax, dword ptr [ebp - 84]
	jmp	LBB194_121
LBB194_51:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 44], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	je	LBB194_72
# %bb.52:
	test	ebx, ebx
	je	LBB194_71
# %bb.53:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	jmp	LBB194_55
	.p2align	4, 0x90
LBB194_54:                              #   in Loop: Header=BB194_55 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	je	LBB194_72
LBB194_55:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB194_57
# %bb.56:                               #   in Loop: Header=BB194_55 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB194_54
LBB194_57:                              #   in Loop: Header=BB194_55 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	call	eax
# %bb.58:                               #   in Loop: Header=BB194_55 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	jne	LBB194_55
	jmp	LBB194_72
LBB194_59:
	mov	dword ptr [ebp - 56], ecx       # 4-byte Spill
	jmp	LBB194_70
LBB194_60:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB194_61:
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	cmp	dword ptr [ebp - 44], 0         # 4-byte Folded Reload
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	je	LBB194_77
# %bb.62:
	test	ebx, ebx
	je	LBB194_76
# %bb.63:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	jmp	LBB194_65
	.p2align	4, 0x90
LBB194_64:                              #   in Loop: Header=BB194_65 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	je	LBB194_77
LBB194_65:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB194_67
# %bb.66:                               #   in Loop: Header=BB194_65 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB194_64
LBB194_67:                              #   in Loop: Header=BB194_65 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	call	eax
# %bb.68:                               #   in Loop: Header=BB194_65 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	jne	LBB194_65
	jmp	LBB194_77
LBB194_69:
	mov	al, 1
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
LBB194_70:
	mov	eax, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	ecx, byte ptr [ebp - 56]        # 1-byte Folded Reload
	lea	edx, [ebp + 16]
	mov	dword ptr [edx + 4], ebx
	and	eax, -256
	jmp	LBB194_78
LBB194_71:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB194_72:
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	je	LBB194_77
# %bb.73:
	test	ebx, ebx
	je	LBB194_76
# %bb.74:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB194_128
# %bb.75:
	mov	eax, dword ptr [ebp - 84]
	jmp	LBB194_129
LBB194_76:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB194_77:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	lea	edx, [ebp + 16]
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	mov	dword ptr [edx + 4], ebx
LBB194_78:
	or	ecx, eax
	mov	dword ptr [edx], ecx
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	sub	eax, dword ptr [ebp - 40]       # 4-byte Folded Reload
	je	LBB194_84
# %bb.80:
	test	ebx, ebx
	je	LBB194_83
# %bb.81:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB194_104
# %bb.82:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB194_105
LBB194_83:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB194_84:
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	cmp	dword ptr [ebp - 44], 0         # 4-byte Folded Reload
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	mov	ecx, dword ptr [ebp + 24]
	mov	dword ptr [ecx + 36], 0
	mov	dword ptr [ecx + 32], 0
	je	LBB194_93
# %bb.85:
	test	ebx, ebx
	je	LBB194_92
# %bb.86:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	jmp	LBB194_88
	.p2align	4, 0x90
LBB194_87:                              #   in Loop: Header=BB194_88 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	je	LBB194_93
LBB194_88:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB194_90
# %bb.89:                               #   in Loop: Header=BB194_88 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB194_87
LBB194_90:                              #   in Loop: Header=BB194_88 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 40]            # 4-byte Folded Reload
	call	eax
# %bb.91:                               #   in Loop: Header=BB194_88 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	jne	LBB194_88
	jmp	LBB194_93
LBB194_92:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB194_93:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	or	ecx, eax
	mov	eax, dword ptr [ebp + 12]
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ebx
	mov	eax, dword ptr [ebp - 92]
	cmp	eax, 16
	jb	LBB194_98
# %bb.94:
	mov	ecx, dword ptr [ebp - 112]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB194_97
# %bb.95:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB194_138
# %bb.96:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB194_97:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB194_98:
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB194_103
# %bb.99:
	mov	ecx, dword ptr [ebp - 84]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB194_102
# %bb.100:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB194_140
# %bb.101:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB194_102:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB194_103:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 12]
	add	esp, 100
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB194_104:
	lea	ecx, [ebp - 84]
LBB194_105:
	add	ecx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	jmp	LBB194_108
	.p2align	4, 0x90
LBB194_106:                             #   in Loop: Header=BB194_108 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB194_107:                             #   in Loop: Header=BB194_108 Depth=1
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB194_84
LBB194_108:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB194_110
# %bb.109:                              #   in Loop: Header=BB194_108 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB194_106
LBB194_110:                             #   in Loop: Header=BB194_108 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.111:                              #   in Loop: Header=BB194_108 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB194_107
LBB194_112:
	lea	eax, [ebp - 84]
LBB194_113:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB194_116
	.p2align	4, 0x90
LBB194_114:                             #   in Loop: Header=BB194_116 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB194_115:                             #   in Loop: Header=BB194_116 Depth=1
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 56]       # 4-byte Reload
	inc	eax
	dec	ecx
	je	LBB194_61
LBB194_116:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 56], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	movzx	eax, byte ptr [eax]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB194_118
# %bb.117:                              #   in Loop: Header=BB194_116 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB194_114
LBB194_118:                             #   in Loop: Header=BB194_116 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.119:                              #   in Loop: Header=BB194_116 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB194_115
LBB194_120:
	lea	eax, [ebp - 84]
LBB194_121:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	jmp	LBB194_124
	.p2align	4, 0x90
LBB194_122:                             #   in Loop: Header=BB194_124 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB194_123:                             #   in Loop: Header=BB194_124 Depth=1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	inc	eax
	dec	ecx
	je	LBB194_70
LBB194_124:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	movzx	eax, byte ptr [eax]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB194_126
# %bb.125:                              #   in Loop: Header=BB194_124 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB194_122
LBB194_126:                             #   in Loop: Header=BB194_124 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.127:                              #   in Loop: Header=BB194_124 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	jmp	LBB194_123
LBB194_128:
	lea	eax, [ebp - 84]
LBB194_129:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB194_132
	.p2align	4, 0x90
LBB194_130:                             #   in Loop: Header=BB194_132 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB194_131:                             #   in Loop: Header=BB194_132 Depth=1
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	inc	eax
	dec	ecx
	je	LBB194_77
LBB194_132:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	movzx	eax, byte ptr [eax]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB194_134
# %bb.133:                              #   in Loop: Header=BB194_132 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB194_130
LBB194_134:                             #   in Loop: Header=BB194_132 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.135:                              #   in Loop: Header=BB194_132 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB194_131
LBB194_136:
	mov	dword ptr [ebp - 16], 5
	call	"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
# %bb.137:
LBB194_138:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.139:
LBB194_140:
	mov	dword ptr [ebp - 16], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.141:
	.def	 "?dtor$142@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$142@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB194_142:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$143@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$143@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB194_143:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$144@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$144@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB194_144:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 108]
	test	ecx, ecx
	je	LBB194_147
# %bb.145:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB194_147
# %bb.146:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB194_147:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$148@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$148@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB194_148:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 80]
	test	ecx, ecx
	je	LBB194_151
# %bb.149:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB194_151
# %bb.150:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB194_151:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$152@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$152@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB194_152:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 92]
	cmp	eax, 16
	jb	LBB194_157
# %bb.153:
	mov	ecx, dword ptr [ebp - 112]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB194_156
# %bb.154:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB194_158
# %bb.155:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB194_156:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB194_157:
	mov	dword ptr [ebp - 96], 0
	mov	dword ptr [ebp - 92], 15
	mov	byte ptr [ebp - 112], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB194_158:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$159@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$159@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB194_159:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB194_164
# %bb.160:
	mov	ecx, dword ptr [ebp - 84]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB194_163
# %bb.161:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB194_165
# %bb.162:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB194_163:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB194_164:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB194_165:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end73:
	.section	.xdata,"dr",associative,"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.p2align	2
"L__ehtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z":
	.long	-1                              # ToState
	.long	"?dtor$148@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$143@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$142@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$159@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$144@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$152@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
Lfunc_begin74:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], 2147483647 # 4-byte Folded Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	ebx, dword ptr [ecx + 16]
	sub	eax, ebx
	cmp	eax, edi
	jb	LBB195_19
# %bb.1:
	mov	esi, dword ptr [ecx + 20]
	add	edi, ebx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	ecx, edi
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	or	ecx, 15
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	js	LBB195_5
# %bb.2:
	mov	edx, esi
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, esi
	jb	LBB195_5
# %bb.3:
	add	edx, dword ptr [ebp - 32]       # 4-byte Folded Reload
	cmp	ecx, edx
	mov	esi, edx
	cmovae	esi, ecx
	lea	eax, [esi + 1]
	cmp	eax, 4096
	jb	LBB195_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	jae	LBB195_20
LBB195_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB195_9:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	edx, 16
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], esi
	jb	LBB195_17
# %bb.10:
	mov	esi, dword ptr [eax]
	push	ebx
	push	esi
	push	edi
	call	_memcpy
	add	esp, 12
	mov	edx, dword ptr [ebp + 16]
	movzx	ecx, byte ptr [ebp + 20]
	lea	eax, [edi + ebx]
	push	edx
	push	ecx
	push	eax
	call	_memset
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
	add	ebx, dword ptr [ebp + 16]
	lea	eax, [edx + 1]
	cmp	eax, 4096
	mov	byte ptr [edi + ebx], 0
	jb	LBB195_16
# %bb.11:
	mov	ecx, dword ptr [esi - 4]
	add	esi, -4
	sub	esi, ecx
	cmp	esi, 32
	jae	LBB195_12
# %bb.15:
	add	edx, 36
	mov	esi, ecx
	mov	eax, edx
LBB195_16:
	push	eax
	push	esi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB195_18
LBB195_17:
	push	ebx
	push	eax
	push	edi
	mov	esi, eax
	call	_memcpy
	add	esp, 12
	mov	edx, dword ptr [ebp + 16]
	movzx	ecx, byte ptr [ebp + 20]
	lea	eax, [edi + ebx]
	push	edx
	push	ecx
	push	eax
	call	_memset
	add	esp, 12
	add	ebx, dword ptr [ebp + 16]
	mov	byte ptr [edi + ebx], 0
LBB195_18:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	16
LBB195_6:
	test	eax, eax
	je	LBB195_7
# %bb.8:
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edi, eax
	jmp	LBB195_9
LBB195_7:
	xor	edi, edi
	mov	esi, -1
	jmp	LBB195_9
LBB195_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB195_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB195_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z@4HA":
LBB195_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end74:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
                                        # -- End function
	.def	 "?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
	.globl	"?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ" # -- Begin function ?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ
	.p2align	4, 0x90
"?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ": # @"?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
Lfunc_begin75:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [esi + 16], 0
	je	LBB196_2
# %bb.1:
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], 0
LBB196_2:
	mov	eax, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	.p2align	4, 0x90
LBB196_3:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB196_4
# %bb.9:                                #   in Loop: Header=BB196_3 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB196_3
# %bb.10:                               #   in Loop: Header=BB196_3 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 4]
	jmp	LBB196_3
LBB196_4:
	test	eax, eax
	je	LBB196_14
# %bb.5:
	mov	ecx, dword ptr [esi + 8]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB196_13
# %bb.6:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB196_7
# %bb.12:
	add	ecx, 35
	mov	eax, edx
LBB196_13:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB196_14:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB196_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$11@?0??_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ@4HA":
LBB196_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end75:
	.section	.xdata,"dr",associative,"?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
	.p2align	2
"L__ehtable$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ@4HA" # Action
	.section	.text,"xr",discard,"?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
                                        # -- End function
	.def	 "?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	.globl	"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z" # -- Begin function ?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z
	.p2align	4, 0x90
"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z": # @"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
Lfunc_begin76:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 1
	mov	edx, dword ptr [ecx + 8]
	test	edx, edx
	cmovne	eax, edx
	cmp	eax, 8
	jb	LBB197_3
	.p2align	4, 0x90
LBB197_2:
	mov	ebx, eax
	sub	ebx, edx
	cmp	ebx, edi
	jae	LBB197_5
LBB197_3:                               # =>This Inner Loop Header: Depth=1
	mov	esi, 268435455
	sub	esi, eax
	cmp	esi, eax
	jb	LBB197_22
# %bb.4:                                #   in Loop: Header=BB197_3 Depth=1
	add	eax, eax
	cmp	eax, 8
	jae	LBB197_2
	jmp	LBB197_3
LBB197_5:
	cmp	eax, 1073741824
	jae	LBB197_23
# %bb.6:
	mov	edi, dword ptr [ecx + 12]
	lea	edx, [4*eax]
	cmp	eax, 1024
	jb	LBB197_9
# %bb.7:
	cmp	eax, 1073741816
	mov	dword ptr [ebp - 16], -1
	jae	LBB197_24
# %bb.8:
	mov	esi, ecx
	add	edx, 35
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
	jmp	LBB197_10
LBB197_9:
	mov	esi, ecx
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
LBB197_10:
	mov	dword ptr [ebp - 36], edi       # 4-byte Spill
	shr	edi, 2
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, dword ptr [esi + 4]
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	lea	edx, [ecx + 4*edi]
	mov	ecx, dword ptr [esi + 8]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*edi]
	sub	esi, eax
	push	esi
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	add	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	mov	ecx, ebx
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	sub	ecx, edi
	mov	eax, dword ptr [eax + 4]
	jae	LBB197_11
# %bb.12:
	lea	ecx, [4*ebx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*ebx]
	sub	esi, eax
	push	esi
	push	eax
	mov	edi, dword ptr [ebp - 40]       # 4-byte Reload
	push	edi
	call	_memmove
	add	esp, 12
	add	esi, edi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	push	esi
	jmp	LBB197_13
LBB197_11:
	mov	edi, dword ptr [ebp - 36]       # 4-byte Reload
	and	edi, -4
	push	edi
	push	eax
	push	esi
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esi, edi
	shl	eax, 2
	push	eax
	push	0
	push	esi
	call	_memset
	add	esp, 12
	push	edi
	push	0
	push	dword ptr [ebp - 40]            # 4-byte Folded Reload
LBB197_13:
	call	_memset
	add	esp, 12
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB197_21
# %bb.14:
	mov	eax, dword ptr [esi + 8]
	shl	eax, 2
	cmp	eax, 4096
	jb	LBB197_20
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB197_16
# %bb.19:
	add	eax, 35
	mov	ecx, edx
LBB197_20:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB197_21:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [esi + 4], eax
	add	dword ptr [esi + 8], ebx
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB197_22:
	mov	dword ptr [ebp - 16], -1
	call	"?_Xlen@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@ABEXXZ"
LBB197_23:
	mov	dword ptr [ebp - 16], -1
LBB197_24:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB197_16:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.17:
	.def	 "?dtor$18@?0??_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z@4HA":
LBB197_18:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end76:
	.section	.xdata,"dr",associative,"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	.p2align	2
"L__ehtable$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
                                        # -- End function
	.def	 "?_Xlen@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@ABEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@ABEXXZ"
	.globl	"?_Xlen@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@ABEXXZ" # -- Begin function ?_Xlen@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@ABEXXZ
	.p2align	4, 0x90
"?_Xlen@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@ABEXXZ": # @"?_Xlen@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@ABEXXZ"
# %bb.0:
	push	offset "??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
	.globl	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z" # -- Begin function ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z
	.p2align	4, 0x90
"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z": # @"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEE@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEE@std@@PAX@std@@@2@QAU32@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	inc	dword ptr [ecx + 4]
	mov	edx, dword ptr [esp + 24]
	mov	eax, dword ptr [esp + 32]
	mov	ecx, dword ptr [ecx]
	mov	dword ptr [eax + 4], edx
	cmp	ecx, edx
	je	LBB199_1
# %bb.2:
	cmp	dword ptr [esp + 28], 0
	je	LBB199_3
# %bb.5:
	mov	dword ptr [edx], eax
	cmp	dword ptr [ecx], edx
	jne	LBB199_7
# %bb.6:
	mov	dword ptr [ecx], eax
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jne	LBB199_38
	jmp	LBB199_8
LBB199_1:
	mov	dword ptr [edx], eax
	mov	dword ptr [edx + 4], eax
	mov	dword ptr [edx + 8], eax
	mov	ecx, eax
	jmp	LBB199_39
LBB199_3:
	mov	dword ptr [edx + 8], eax
	cmp	dword ptr [ecx + 8], edx
	je	LBB199_4
LBB199_7:
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	je	LBB199_8
LBB199_38:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [esp + 32]
LBB199_39:
	mov	byte ptr [ecx + 12], 1
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB199_4:
	mov	dword ptr [ecx + 8], eax
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jne	LBB199_38
LBB199_8:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [esp + 32]
	lea	ebp, [edx + 12]
	lea	esi, [eax + 4]
	jmp	LBB199_9
	.p2align	4, 0x90
LBB199_11:                              #   in Loop: Header=BB199_9 Depth=1
	mov	byte ptr [ebp], 1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	edx, edi
LBB199_37:                              #   in Loop: Header=BB199_9 Depth=1
	mov	ebx, edx
	mov	edx, dword ptr [edx + 4]
	cmp	byte ptr [edx + 12], 0
	lea	ebp, [edx + 12]
	jne	LBB199_38
LBB199_9:                               # =>This Inner Loop Header: Depth=1
	mov	edi, dword ptr [edx + 4]
	mov	eax, dword ptr [edi]
	cmp	edx, eax
	je	LBB199_10
# %bb.24:                               #   in Loop: Header=BB199_9 Depth=1
	cmp	byte ptr [eax + 12], 0
	je	LBB199_11
# %bb.25:                               #   in Loop: Header=BB199_9 Depth=1
	cmp	ebx, dword ptr [edx]
	je	LBB199_27
# %bb.26:                               #   in Loop: Header=BB199_9 Depth=1
	mov	eax, edx
	mov	edx, ebx
	jmp	LBB199_32
	.p2align	4, 0x90
LBB199_10:                              #   in Loop: Header=BB199_9 Depth=1
	mov	eax, dword ptr [edi + 8]
	cmp	byte ptr [eax + 12], 0
	je	LBB199_11
# %bb.12:                               #   in Loop: Header=BB199_9 Depth=1
	mov	ecx, dword ptr [edx + 8]
	cmp	ebx, ecx
	je	LBB199_14
# %bb.13:                               #   in Loop: Header=BB199_9 Depth=1
	mov	ebp, edx
	mov	eax, edx
	mov	edx, ebx
	jmp	LBB199_19
LBB199_27:                              #   in Loop: Header=BB199_9 Depth=1
	mov	eax, dword ptr [ebx + 8]
	mov	dword ptr [edx], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB199_29
# %bb.28:                               #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [eax + 4], edx
	mov	edi, dword ptr [edx + 4]
LBB199_29:                              #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [ebx + 4], edi
	mov	eax, esi
	cmp	dword ptr [esi], edx
	je	LBB199_31
# %bb.30:                               #   in Loop: Header=BB199_9 Depth=1
	mov	ecx, dword ptr [edx + 4]
	cmp	dword ptr [ecx + 8], edx
	lea	eax, [ecx + 8]
	cmovne	eax, ecx
LBB199_31:                              #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [eax], ebx
	mov	dword ptr [ebx + 8], edx
	mov	dword ptr [edx + 4], ebx
	mov	eax, ebx
	mov	edi, dword ptr [ebx + 4]
LBB199_32:                              #   in Loop: Header=BB199_9 Depth=1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	ecx, dword ptr [edi + 8]
	mov	eax, dword ptr [ecx]
	mov	dword ptr [edi + 8], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB199_34
# %bb.33:                               #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [eax + 4], edi
LBB199_34:                              #   in Loop: Header=BB199_9 Depth=1
	mov	eax, dword ptr [edi + 4]
	mov	dword ptr [ecx + 4], eax
	mov	eax, esi
	cmp	dword ptr [esi], edi
	je	LBB199_36
# %bb.35:                               #   in Loop: Header=BB199_9 Depth=1
	mov	ebx, dword ptr [edi + 4]
	cmp	dword ptr [ebx], edi
	lea	eax, [ebx + 8]
	cmove	eax, ebx
LBB199_36:                              #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [eax], ecx
	mov	dword ptr [ecx], edi
	mov	dword ptr [edi + 4], ecx
	jmp	LBB199_37
LBB199_14:                              #   in Loop: Header=BB199_9 Depth=1
	mov	eax, dword ptr [ebx]
	mov	dword ptr [edx + 8], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB199_16
# %bb.15:                               #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [eax + 4], edx
	mov	edi, dword ptr [edx + 4]
LBB199_16:                              #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [ebx + 4], edi
	mov	eax, esi
	cmp	dword ptr [esi], edx
	je	LBB199_18
# %bb.17:                               #   in Loop: Header=BB199_9 Depth=1
	mov	ecx, dword ptr [edx + 4]
	cmp	dword ptr [ecx], edx
	lea	eax, [ecx + 8]
	cmove	eax, ecx
LBB199_18:                              #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [eax], ebx
	mov	dword ptr [ebx], edx
	mov	dword ptr [edx + 4], ebx
	mov	eax, ebx
	mov	edi, dword ptr [ebx + 4]
	mov	ebp, dword ptr [edi]
	mov	ecx, dword ptr [ebp + 8]
LBB199_19:                              #   in Loop: Header=BB199_9 Depth=1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	dword ptr [edi], ecx
	cmp	byte ptr [ecx + 13], 0
	jne	LBB199_21
# %bb.20:                               #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [ecx + 4], edi
LBB199_21:                              #   in Loop: Header=BB199_9 Depth=1
	mov	eax, dword ptr [edi + 4]
	mov	dword ptr [ebp + 4], eax
	mov	eax, esi
	cmp	dword ptr [esi], edi
	je	LBB199_23
# %bb.22:                               #   in Loop: Header=BB199_9 Depth=1
	mov	ecx, dword ptr [edi + 4]
	cmp	dword ptr [ecx + 8], edi
	lea	eax, [ecx + 8]
	cmovne	eax, ecx
LBB199_23:                              #   in Loop: Header=BB199_9 Depth=1
	mov	dword ptr [eax], ebp
	mov	dword ptr [ebp + 8], edi
	mov	dword ptr [edi + 4], ebp
	jmp	LBB199_37
                                        # -- End function
	.def	 "?_Throw_tree_length_error@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Throw_tree_length_error@std@@YAXXZ"
	.globl	"?_Throw_tree_length_error@std@@YAXXZ" # -- Begin function ?_Throw_tree_length_error@std@@YAXXZ
	.p2align	4, 0x90
"?_Throw_tree_length_error@std@@YAXXZ": # @"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.0:
	push	offset "??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.globl	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z" # -- Begin function ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	.p2align	4, 0x90
"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z": # @"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
Lfunc_begin77:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	xor	esi, esi
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [eax + 4]
	mov	ecx, dword ptr [edi + edx + 32]
	mov	ebx, ecx
	sub	ebx, dword ptr [ebp + 16]
	cmovb	ebx, esi
	cmp	ecx, 1
	mov	ecx, dword ptr [edi + edx + 36]
	mov	dword ptr [ebp - 40], edi
	sbb	ecx, 0
	mov	ecx, dword ptr [edi + edx + 56]
	cmovl	ebx, esi
	test	ecx, ecx
	je	LBB201_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [eax + 4]
LBB201_2:
	cmp	dword ptr [edi + edx + 12], 0
	je	LBB201_4
# %bb.3:
	mov	byte ptr [ebp - 36], 0
	mov	ecx, 4
	jmp	LBB201_42
LBB201_4:
	mov	ecx, dword ptr [edi + edx + 60]
	test	ecx, ecx
	je	LBB201_6
# %bb.5:
	cmp	ecx, edi
	je	LBB201_6
# %bb.10:
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.11:
	mov	edi, dword ptr [ebp + 8]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [edi + ecx + 12], 0
	mov	ecx, 4
	sete	byte ptr [ebp - 36]
	jne	LBB201_42
	jmp	LBB201_12
LBB201_6:
	mov	byte ptr [ebp - 36], 1
LBB201_12:
	mov	eax, dword ptr [eax + 4]
	mov	ecx, 448
	and	ecx, dword ptr [edi + eax + 20]
	cmp	ecx, 64
	jne	LBB201_14
# %bb.13:
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	jmp	LBB201_16
	.p2align	4, 0x90
LBB201_20:                              #   in Loop: Header=BB201_14 Depth=1
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	byte ptr [esi], al
LBB201_21:                              #   in Loop: Header=BB201_14 Depth=1
	mov	edi, dword ptr [ebp + 8]
	dec	ebx
LBB201_14:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [edi]
	test	ebx, ebx
	mov	eax, dword ptr [eax + 4]
	je	LBB201_15
# %bb.18:                               #   in Loop: Header=BB201_14 Depth=1
	mov	ecx, dword ptr [edi + eax + 56]
	movzx	eax, byte ptr [edi + eax + 64]
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	edx, dword ptr [ecx + 32]
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB201_22
# %bb.19:                               #   in Loop: Header=BB201_14 Depth=1
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jg	LBB201_20
LBB201_22:                              #   in Loop: Header=BB201_14 Depth=1
	mov	edx, dword ptr [ecx]
	movzx	eax, al
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
# %bb.23:                               #   in Loop: Header=BB201_14 Depth=1
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB201_21
# %bb.24:
	mov	dword ptr [ebp - 44], 4         # 4-byte Folded Spill
	jmp	LBB201_25
LBB201_15:
	mov	dword ptr [ebp - 32], 0         # 4-byte Folded Spill
LBB201_16:
	mov	ecx, dword ptr [edi + eax + 56]
	mov	edx, dword ptr [ebp + 12]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 36]
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 16], 4
	push	0
	push	dword ptr [ebp + 16]
	push	edx
	call	eax
# %bb.17:
	xor	eax, dword ptr [ebp + 16]
	mov	edi, dword ptr [ebp + 8]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, 4
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	or	eax, edx
	je	LBB201_26
	jmp	LBB201_35
LBB201_25:
	mov	edi, dword ptr [ebp + 8]
LBB201_26:
	test	ebx, ebx
	je	LBB201_27
# %bb.28:
	mov	eax, dword ptr [edi]
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edi + eax + 56]
	mov	al, byte ptr [edi + eax + 64]
	mov	edx, dword ptr [ecx + 32]
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB201_32
# %bb.29:
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jle	LBB201_32
# %bb.30:
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	byte ptr [esi], al
	jmp	LBB201_31
LBB201_32:
	mov	edx, dword ptr [ecx]
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	eax, al
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 48], esi
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
# %bb.33:
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	je	LBB201_34
LBB201_31:
	dec	ebx
	jmp	LBB201_25
LBB201_27:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	jmp	LBB201_35
LBB201_34:
	mov	edi, dword ptr [ebp + 8]
	mov	ecx, 4
LBB201_35:
	mov	eax, dword ptr [edi]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [edi + eax + 36], 0
	mov	dword ptr [edi + eax + 32], 0
LBB201_42:
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [eax + 4]
	xor	eax, eax
	or	ecx, dword ptr [edi + edx + 12]
	cmp	dword ptr [edi + edx + 56], 0
	sete	al
	and	ecx, 23
	shl	eax, 2
	or	ecx, eax
	mov	dword ptr [edi + edx + 12], ecx
	and	ecx, dword ptr [edi + edx + 16]
	jne	LBB201_43
# %bb.48:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB201_50
# %bb.49:
	mov	ecx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	edi, dword ptr [ebp + 8]
LBB201_50:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB201_52
# %bb.51:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	edi, dword ptr [ebp + 8]
LBB201_52:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB201_43:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB201_45
# %bb.44:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB201_45:
	test	cl, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	cmove	edx, eax
	test	cl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 68]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.46:
	mov	dword ptr [ebp - 68], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 68]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.47:
LBB201_40:                              # Block address taken
	add	ebp, 12
	jmp	LBB201_41
LBB201_41:
	mov	ecx, dword ptr [ebp - 48]
	mov	edi, dword ptr [ebp + 8]
	jmp	LBB201_42
	.def	 "?dtor$7@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB201_7:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB201_9
# %bb.8:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB201_9:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$36@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$36@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB201_36:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB201_37
# %bb.39:
	mov	eax, offset LBB201_40
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
LBB201_37:
	mov	dword ptr [ebp - 16], 5
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.38:
	.def	 "?dtor$53@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$53@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB201_53:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$54@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$54@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB201_54:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$55@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$55@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB201_55:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB201_57
# %bb.56:
	mov	ecx, dword ptr [ebp - 40]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB201_57:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB201_59
# %bb.58:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB201_59:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end77:
	.section	.xdata,"dr",associative,"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.p2align	2
"L__ehtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z":
	.long	-1                              # ToState
	.long	"?dtor$7@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$53@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$54@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$55@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z":
	.long	4                               # TryLow
	.long	4                               # TryHigh
	.long	5                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z") # HandlerArray
"$handlerMap$0$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$36@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
                                        # -- End function
	.def	 "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
	.globl	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z" # -- Begin function ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z
	.p2align	4, 0x90
"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z": # @"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	inc	dword ptr [ecx + 4]
	mov	edx, dword ptr [esp + 24]
	mov	eax, dword ptr [esp + 32]
	mov	ecx, dword ptr [ecx]
	mov	dword ptr [eax + 4], edx
	cmp	ecx, edx
	je	LBB202_1
# %bb.2:
	cmp	dword ptr [esp + 28], 0
	je	LBB202_3
# %bb.5:
	mov	dword ptr [edx], eax
	cmp	dword ptr [ecx], edx
	jne	LBB202_7
# %bb.6:
	mov	dword ptr [ecx], eax
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jne	LBB202_38
	jmp	LBB202_8
LBB202_1:
	mov	dword ptr [edx], eax
	mov	dword ptr [edx + 4], eax
	mov	dword ptr [edx + 8], eax
	mov	ecx, eax
	jmp	LBB202_39
LBB202_3:
	mov	dword ptr [edx + 8], eax
	cmp	dword ptr [ecx + 8], edx
	je	LBB202_4
LBB202_7:
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	je	LBB202_8
LBB202_38:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [esp + 32]
LBB202_39:
	mov	byte ptr [ecx + 12], 1
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB202_4:
	mov	dword ptr [ecx + 8], eax
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jne	LBB202_38
LBB202_8:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [esp + 32]
	lea	ebp, [edx + 12]
	lea	esi, [eax + 4]
	jmp	LBB202_9
	.p2align	4, 0x90
LBB202_11:                              #   in Loop: Header=BB202_9 Depth=1
	mov	byte ptr [ebp], 1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	edx, edi
LBB202_37:                              #   in Loop: Header=BB202_9 Depth=1
	mov	ebx, edx
	mov	edx, dword ptr [edx + 4]
	cmp	byte ptr [edx + 12], 0
	lea	ebp, [edx + 12]
	jne	LBB202_38
LBB202_9:                               # =>This Inner Loop Header: Depth=1
	mov	edi, dword ptr [edx + 4]
	mov	eax, dword ptr [edi]
	cmp	edx, eax
	je	LBB202_10
# %bb.24:                               #   in Loop: Header=BB202_9 Depth=1
	cmp	byte ptr [eax + 12], 0
	je	LBB202_11
# %bb.25:                               #   in Loop: Header=BB202_9 Depth=1
	cmp	ebx, dword ptr [edx]
	je	LBB202_27
# %bb.26:                               #   in Loop: Header=BB202_9 Depth=1
	mov	eax, edx
	mov	edx, ebx
	jmp	LBB202_32
	.p2align	4, 0x90
LBB202_10:                              #   in Loop: Header=BB202_9 Depth=1
	mov	eax, dword ptr [edi + 8]
	cmp	byte ptr [eax + 12], 0
	je	LBB202_11
# %bb.12:                               #   in Loop: Header=BB202_9 Depth=1
	mov	ecx, dword ptr [edx + 8]
	cmp	ebx, ecx
	je	LBB202_14
# %bb.13:                               #   in Loop: Header=BB202_9 Depth=1
	mov	ebp, edx
	mov	eax, edx
	mov	edx, ebx
	jmp	LBB202_19
LBB202_27:                              #   in Loop: Header=BB202_9 Depth=1
	mov	eax, dword ptr [ebx + 8]
	mov	dword ptr [edx], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB202_29
# %bb.28:                               #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [eax + 4], edx
	mov	edi, dword ptr [edx + 4]
LBB202_29:                              #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [ebx + 4], edi
	mov	eax, esi
	cmp	dword ptr [esi], edx
	je	LBB202_31
# %bb.30:                               #   in Loop: Header=BB202_9 Depth=1
	mov	ecx, dword ptr [edx + 4]
	cmp	dword ptr [ecx + 8], edx
	lea	eax, [ecx + 8]
	cmovne	eax, ecx
LBB202_31:                              #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [eax], ebx
	mov	dword ptr [ebx + 8], edx
	mov	dword ptr [edx + 4], ebx
	mov	eax, ebx
	mov	edi, dword ptr [ebx + 4]
LBB202_32:                              #   in Loop: Header=BB202_9 Depth=1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	ecx, dword ptr [edi + 8]
	mov	eax, dword ptr [ecx]
	mov	dword ptr [edi + 8], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB202_34
# %bb.33:                               #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [eax + 4], edi
LBB202_34:                              #   in Loop: Header=BB202_9 Depth=1
	mov	eax, dword ptr [edi + 4]
	mov	dword ptr [ecx + 4], eax
	mov	eax, esi
	cmp	dword ptr [esi], edi
	je	LBB202_36
# %bb.35:                               #   in Loop: Header=BB202_9 Depth=1
	mov	ebx, dword ptr [edi + 4]
	cmp	dword ptr [ebx], edi
	lea	eax, [ebx + 8]
	cmove	eax, ebx
LBB202_36:                              #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [eax], ecx
	mov	dword ptr [ecx], edi
	mov	dword ptr [edi + 4], ecx
	jmp	LBB202_37
LBB202_14:                              #   in Loop: Header=BB202_9 Depth=1
	mov	eax, dword ptr [ebx]
	mov	dword ptr [edx + 8], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB202_16
# %bb.15:                               #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [eax + 4], edx
	mov	edi, dword ptr [edx + 4]
LBB202_16:                              #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [ebx + 4], edi
	mov	eax, esi
	cmp	dword ptr [esi], edx
	je	LBB202_18
# %bb.17:                               #   in Loop: Header=BB202_9 Depth=1
	mov	ecx, dword ptr [edx + 4]
	cmp	dword ptr [ecx], edx
	lea	eax, [ecx + 8]
	cmove	eax, ecx
LBB202_18:                              #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [eax], ebx
	mov	dword ptr [ebx], edx
	mov	dword ptr [edx + 4], ebx
	mov	eax, ebx
	mov	edi, dword ptr [ebx + 4]
	mov	ebp, dword ptr [edi]
	mov	ecx, dword ptr [ebp + 8]
LBB202_19:                              #   in Loop: Header=BB202_9 Depth=1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	dword ptr [edi], ecx
	cmp	byte ptr [ecx + 13], 0
	jne	LBB202_21
# %bb.20:                               #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [ecx + 4], edi
LBB202_21:                              #   in Loop: Header=BB202_9 Depth=1
	mov	eax, dword ptr [edi + 4]
	mov	dword ptr [ebp + 4], eax
	mov	eax, esi
	cmp	dword ptr [esi], edi
	je	LBB202_23
# %bb.22:                               #   in Loop: Header=BB202_9 Depth=1
	mov	ecx, dword ptr [edi + 4]
	cmp	dword ptr [ecx + 8], edi
	lea	eax, [ecx + 8]
	cmovne	eax, ecx
LBB202_23:                              #   in Loop: Header=BB202_9 Depth=1
	mov	dword ptr [eax], ebp
	mov	dword ptr [ebp + 8], edi
	mov	dword ptr [edi + 4], ebp
	jmp	LBB202_37
                                        # -- End function
	.def	 "?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.globl	"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z" # -- Begin function ?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z
	.p2align	4, 0x90
"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z": # @"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
Lfunc_begin78:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 1
	mov	edx, dword ptr [ecx + 8]
	test	edx, edx
	cmovne	eax, edx
	cmp	eax, 8
	jb	LBB203_3
	.p2align	4, 0x90
LBB203_2:
	mov	ebx, eax
	sub	ebx, edx
	cmp	ebx, edi
	jae	LBB203_5
LBB203_3:                               # =>This Inner Loop Header: Depth=1
	mov	esi, 268435455
	sub	esi, eax
	cmp	esi, eax
	jb	LBB203_22
# %bb.4:                                #   in Loop: Header=BB203_3 Depth=1
	add	eax, eax
	cmp	eax, 8
	jae	LBB203_2
	jmp	LBB203_3
LBB203_5:
	cmp	eax, 1073741824
	jae	LBB203_23
# %bb.6:
	mov	edi, dword ptr [ecx + 12]
	lea	edx, [4*eax]
	cmp	eax, 1024
	jb	LBB203_9
# %bb.7:
	cmp	eax, 1073741816
	mov	dword ptr [ebp - 16], -1
	jae	LBB203_24
# %bb.8:
	mov	esi, ecx
	add	edx, 35
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
	jmp	LBB203_10
LBB203_9:
	mov	esi, ecx
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
LBB203_10:
	shr	edi, 3
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [esi + 4]
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	lea	edx, [ecx + 4*edi]
	mov	ecx, dword ptr [esi + 8]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*edi]
	sub	esi, eax
	push	esi
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	mov	ecx, ebx
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	sub	ecx, edi
	mov	eax, dword ptr [eax + 4]
	jae	LBB203_11
# %bb.12:
	lea	ecx, [4*ebx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*ebx]
	sub	esi, eax
	push	esi
	push	eax
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
	call	_memmove
	add	esp, 12
	add	esi, edi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	push	esi
	jmp	LBB203_13
LBB203_11:
	mov	edi, ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [4*ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
	lea	eax, [esi + 4*eax]
	push	edi
	push	0
	push	eax
	call	_memset
	add	esp, 12
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
LBB203_13:
	call	_memset
	add	esp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB203_21
# %bb.14:
	mov	eax, dword ptr [esi + 8]
	shl	eax, 2
	cmp	eax, 4096
	jb	LBB203_20
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB203_16
# %bb.19:
	add	eax, 35
	mov	ecx, edx
LBB203_20:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB203_21:
	mov	dword ptr [esi + 4], edi
	add	dword ptr [esi + 8], ebx
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB203_22:
	mov	dword ptr [ebp - 16], -1
	call	"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ"
LBB203_23:
	mov	dword ptr [ebp - 16], -1
LBB203_24:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB203_16:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.17:
	.def	 "?dtor$18@?0??_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z@4HA":
LBB203_18:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end78:
	.section	.xdata,"dr",associative,"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.p2align	2
"L__ehtable$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
                                        # -- End function
	.def	 "?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ"
	.globl	"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ" # -- Begin function ?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ
	.p2align	4, 0x90
"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ": # @"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ"
# %bb.0:
	push	offset "??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z"
	.globl	"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z" # -- Begin function ??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z
	.p2align	4, 0x90
"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z": # @"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, ecx
	mov	ecx, dword ptr [ecx + 12]
	mov	eax, dword ptr [esi + 16]
	lea	edx, [eax + ecx]
	test	dl, 15
	jne	LBB205_3
# %bb.1:
	lea	edx, [eax + 16]
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB205_3
# %bb.2:
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
LBB205_3:
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	edi, dword ptr [esp + 20]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB205_5
# %bb.4:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
LBB205_5:
	mov	cl, byte ptr [edi]
	and	ebx, 15
	mov	byte ptr [eax + ebx], cl
	mov	eax, dword ptr [esi + 16]
	lea	ecx, [eax + 1]
	mov	dword ptr [esi + 16], ecx
	add	eax, dword ptr [esi + 12]
	mov	edx, dword ptr [esi + 4]
	mov	esi, dword ptr [esi + 8]
	mov	ecx, eax
	dec	esi
	and	eax, 15
	shr	ecx, 4
	and	esi, ecx
	add	eax, dword ptr [edx + 4*esi]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
                                        # -- End function
	.def	 "??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.globl	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z" # -- Begin function ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	.p2align	4, 0x90
"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z": # @"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
Lfunc_begin79:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 44], esi
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + edx + 56]
	test	ecx, ecx
	je	LBB206_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
LBB206_2:
	cmp	dword ptr [esi + edx + 12], 0
	je	LBB206_9
# %bb.3:
	xor	edx, edx
	mov	byte ptr [ebp - 40], 0
LBB206_4:
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + eax + 32], 0
	mov	dword ptr [esi + eax + 36], 0
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	xor	eax, eax
	or	edx, dword ptr [esi + ecx + 12]
	cmp	dword ptr [esi + ecx + 56], 0
	sete	al
	and	edx, 23
	shl	eax, 2
	or	edx, eax
	mov	dword ptr [esi + ecx + 12], edx
	and	edx, dword ptr [esi + ecx + 16]
	jne	LBB206_5
# %bb.47:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB206_49
# %bb.48:
	mov	ecx, dword ptr [ebp - 44]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	esi, dword ptr [ebp + 8]
LBB206_49:
	mov	eax, dword ptr [ebp - 44]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB206_51
# %bb.50:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	esi, dword ptr [ebp + 8]
LBB206_51:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB206_9:
	mov	ecx, dword ptr [esi + edx + 60]
	test	ecx, ecx
	je	LBB206_11
# %bb.10:
	cmp	ecx, esi
	je	LBB206_11
# %bb.15:
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.16:
	mov	esi, dword ptr [ebp + 8]
	xor	edx, edx
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [esi + ecx + 12], 0
	sete	byte ptr [ebp - 40]
	jne	LBB206_4
	jmp	LBB206_17
LBB206_11:
	mov	byte ptr [ebp - 40], 1
LBB206_17:
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 32]
	mov	edx, dword ptr [esi + eax + 36]
	mov	edi, ecx
	mov	ebx, edx
	add	edi, -1
	adc	ebx, -1
	cmp	ecx, 2
	mov	ecx, 448
	sbb	edx, 0
	mov	edx, 0
	cmovl	ebx, edx
	cmovl	edi, edx
	and	ecx, dword ptr [esi + eax + 20]
	cmp	ecx, 64
	jne	LBB206_19
# %bb.18:
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 36], edi       # 4-byte Spill
	jmp	LBB206_28
	.p2align	4, 0x90
LBB206_23:                              #   in Loop: Header=BB206_19 Depth=1
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	dec	ebx
	mov	dword ptr [ecx], ebx
	lea	ebx, [edi + 1]
	mov	dword ptr [esi], ebx
	mov	byte ptr [edi], dl
LBB206_25:                              #   in Loop: Header=BB206_19 Depth=1
	mov	edi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edx, edx
	cmp	eax, -1
	mov	esi, dword ptr [ebp + 8]
	sete	dl
	shl	edx, 2
	add	edi, -1
	adc	ebx, -1
LBB206_19:                              # =>This Inner Loop Header: Depth=1
	test	edx, edx
	mov	dword ptr [ebp - 36], edi       # 4-byte Spill
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	jne	LBB206_26
# %bb.20:                               #   in Loop: Header=BB206_19 Depth=1
	cmp	edi, 1
	mov	eax, ebx
	sbb	eax, 0
	jl	LBB206_26
# %bb.21:                               #   in Loop: Header=BB206_19 Depth=1
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	movzx	edx, byte ptr [esi + eax + 64]
	mov	esi, dword ptr [ecx + 32]
	movzx	eax, dl
	mov	edi, dword ptr [esi]
	test	edi, edi
	je	LBB206_24
# %bb.22:                               #   in Loop: Header=BB206_19 Depth=1
	mov	ebx, dword ptr [ecx + 48]
	mov	dword ptr [ebp - 48], ebx       # 4-byte Spill
	mov	ebx, dword ptr [ebx]
	test	ebx, ebx
	jg	LBB206_23
LBB206_24:                              #   in Loop: Header=BB206_19 Depth=1
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
	jmp	LBB206_25
LBB206_26:
	test	edx, edx
	jne	LBB206_34
# %bb.27:
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
LBB206_28:
	mov	ecx, dword ptr [esi + eax + 56]
	mov	dl, byte ptr [ebp + 12]
	mov	eax, dword ptr [ecx + 32]
	mov	esi, dword ptr [eax]
	test	esi, esi
	je	LBB206_31
# %bb.29:
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jle	LBB206_31
# %bb.30:
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	dword ptr [eax], ecx
	mov	byte ptr [esi], dl
	movzx	eax, dl
	jmp	LBB206_32
LBB206_31:
	movzx	eax, dl
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
LBB206_32:
	mov	edi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edx, edx
	cmp	eax, -1
	sete	dl
	shl	edx, 2
	jmp	LBB206_33
LBB206_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB206_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB206_7:
	test	dl, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	ecx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	cmove	ecx, eax
	test	dl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	eax, ecx
	lea	ecx, [ebp - 68]
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 68], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 68]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.46:
LBB206_33:
	mov	esi, dword ptr [ebp + 8]
LBB206_34:
	test	edx, edx
	jne	LBB206_4
# %bb.35:
	cmp	edi, 1
	mov	eax, ebx
	sbb	eax, 0
	jl	LBB206_4
# %bb.36:
	mov	eax, dword ptr [esi]
	mov	dword ptr [ebp - 36], edi       # 4-byte Spill
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	mov	dl, byte ptr [esi + eax + 64]
	mov	esi, dword ptr [ecx + 32]
	movzx	eax, dl
	mov	edi, dword ptr [esi]
	test	edi, edi
	je	LBB206_39
# %bb.37:
	mov	ebx, dword ptr [ecx + 48]
	mov	dword ptr [ebp - 48], ebx       # 4-byte Spill
	mov	ebx, dword ptr [ebx]
	test	ebx, ebx
	jle	LBB206_39
# %bb.38:
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	dec	ebx
	mov	dword ptr [ecx], ebx
	lea	ebx, [edi + 1]
	mov	dword ptr [esi], ebx
	mov	byte ptr [edi], dl
	jmp	LBB206_40
LBB206_39:
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
LBB206_40:
	mov	edi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edx, edx
	cmp	eax, -1
	sete	dl
	shl	edx, 2
	add	edi, -1
	adc	ebx, -1
	jmp	LBB206_33
LBB206_45:                              # Block address taken
	add	ebp, 12
	xor	edx, edx
	mov	esi, dword ptr [ebp + 8]
	jmp	LBB206_4
	.def	 "?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB206_12:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 44]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB206_14
# %bb.13:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB206_14:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$41@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$41@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB206_41:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB206_42
# %bb.44:
	mov	eax, offset LBB206_45
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
LBB206_42:
	mov	dword ptr [ebp - 16], 5
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.43:
	.def	 "?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB206_52:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB206_53:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	lea	ecx, [ebp - 44]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$54@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$54@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB206_54:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB206_56
# %bb.55:
	mov	ecx, dword ptr [ebp - 44]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB206_56:
	mov	eax, dword ptr [ebp - 44]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB206_58
# %bb.57:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB206_58:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end79:
	.section	.xdata,"dr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.p2align	2
"L__ehtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$54@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z":
	.long	4                               # TryLow
	.long	4                               # TryHigh
	.long	5                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z") # HandlerArray
"$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$41@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
                                        # -- End function
	.def	 __GLOBAL__sub_I_main.cpp;
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function _GLOBAL__sub_I_main.cpp
__GLOBAL__sub_I_main.cpp:               # @_GLOBAL__sub_I_main.cpp
Lfunc_begin80:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 44
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset ___ehhandler$_GLOBAL__sub_I_main.cpp
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 36], 16908545
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+4], 0
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"], 0
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+12], 0
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+8], 0
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+16], 0
	mov	dword ptr [esp], 8
	call	"??2@YAPAXI@Z"
	mov	dword ptr [eax], offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	mov	ecx, offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"], eax
	lea	eax, [ebp - 36]
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [esp], eax
	call	"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z"
	sub	esp, 4
# %bb.1:
	lea	eax, [ebp - 34]
	mov	ecx, offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	mov	dword ptr [esp], eax
	call	"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z"
	sub	esp, 4
# %bb.2:
	mov	dword ptr [esp], offset "??__FsupportedExtensions@@YAXXZ"
	call	_atexit
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+4], 0
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"], 0
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+12], 0
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+8], 0
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"+16], 0
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [esp], 8
	call	"??2@YAPAXI@Z"
	mov	dword ptr [eax + 4], 0
	mov	dword ptr ["?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"], eax
	mov	dword ptr [eax], offset "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	mov	dword ptr [esp], offset "??__Fpalettes@@YAXXZ"
	call	_atexit
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+20], 15
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+16], 0
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"], 0
	mov	byte ptr [ebp - 29], 1
	mov	dword ptr [ebp - 40], offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"
	mov	dword ptr [ebp - 16], 1
	mov	ecx, offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"
	mov	al, byte ptr [ebp - 36]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], offset "??_C@_0BB@EFKDDADM@Atari?58bit?5?$CI256?$CJ?$AA@"
	mov	dword ptr [esp], 16
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	sub	esp, 12
# %bb.3:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+44], 15
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+40], 12
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+24], 1869772097
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+28], 673210738
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+32], 691418418
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+36], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+68], 15
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+64], 10
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+48], 1818588484
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+52], 892479520
	mov	word ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+56], 10550
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+58], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+92], 15
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+88], 0
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+72], 0
	mov	byte ptr [ebp - 29], 0
	mov	dword ptr [ebp - 40], offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+72
	mov	ecx, offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+72
	mov	al, byte ptr [ebp - 36]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], offset "??_C@_0BC@IBOHMGCP@Hocus?5Pocus?5?$CI256?$CJ?$AA@"
	mov	dword ptr [esp], 17
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	sub	esp, 12
# %bb.4:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+116], 15
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+112], 0
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+96], 0
	mov	byte ptr [ebp - 29], 0
	mov	dword ptr [ebp - 40], offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+96
	mov	ecx, offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+96
	mov	al, byte ptr [ebp - 36]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], offset "??_C@_0BJ@FKMMNLBE@Sonic?5Robo?5Blast?52?5?$CI256?$CJ?$AA@"
	mov	dword ptr [esp], 24
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	sub	esp, 12
# %bb.5:
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+140], 15
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+136], 10
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+120], 845312627
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+124], 892479520
	mov	word ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+128], 10550
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+130], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+164], 15
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+160], 12
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+144], 1650817653
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+148], 673216623
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+152], 691418418
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+156], 0
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+188], 15
	mov	dword ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+184], 0
	mov	byte ptr ["?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+168], 0
	mov	byte ptr [ebp - 29], 0
	mov	dword ptr [ebp - 40], offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+168
	mov	ecx, offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"+168
	mov	al, byte ptr [ebp - 36]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], offset "??_C@_0BB@MABGHAKE@Windows?595?5?$CI256?$CJ?$AA@"
	mov	dword ptr [esp], 16
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	sub	esp, 12
# %bb.6:
	mov	dword ptr [esp], offset "??__FpaletteNames@@YAXXZ"
	call	_atexit
	mov	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"], 0
	mov	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"+4], 0
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [esp], 16
	call	"??2@YAPAXI@Z"
	mov	dword ptr [eax], eax
	mov	dword ptr [eax + 4], eax
	mov	dword ptr [eax + 8], eax
	mov	word ptr [eax + 12], 257
	mov	dword ptr ["?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"], eax
	mov	dword ptr [esp], offset "??__Fchr2nib@@YAXXZ"
	call	_atexit
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 44
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$7@?0?_GLOBAL__sub_I_main.cpp@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0?_GLOBAL__sub_I_main.cpp@4HA":
LBB207_7:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	cmp	byte ptr [ebp - 29], 0
	jne	LBB207_21
# %bb.8:
	mov	edi, dword ptr [ebp - 40]
	mov	eax, dword ptr [edi - 4]
	lea	esi, [edi - 24]
	cmp	eax, 16
	jb	LBB207_13
# %bb.9:
	mov	ecx, dword ptr [esi]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB207_12
# %bb.10:
	mov	ebx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, ebx
	cmp	ecx, 32
	jae	LBB207_23
# %bb.11:
	add	eax, 36
	mov	ecx, ebx
	mov	edx, eax
LBB207_12:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB207_13:
	cmp	esi, offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"
	mov	dword ptr [edi - 8], 0
	mov	dword ptr [edi - 4], 15
	mov	byte ptr [edi - 24], 0
	je	LBB207_21
# %bb.14:
	mov	edi, offset "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"
	jmp	LBB207_15
LBB207_19:                              #   in Loop: Header=BB207_15 Depth=1
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB207_20:                              #   in Loop: Header=BB207_15 Depth=1
	mov	dword ptr [esi - 8], 0
	mov	dword ptr [esi - 4], 15
	mov	byte ptr [esi - 24], 0
	add	esi, -24
	cmp	edi, esi
	je	LBB207_21
LBB207_15:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi - 4]
	cmp	eax, 16
	jb	LBB207_20
# %bb.16:                               #   in Loop: Header=BB207_15 Depth=1
	mov	ecx, dword ptr [esi - 24]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB207_19
# %bb.17:                               #   in Loop: Header=BB207_15 Depth=1
	mov	ebx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, ebx
	cmp	ecx, 32
	jae	LBB207_23
# %bb.18:                               #   in Loop: Header=BB207_15 Depth=1
	add	eax, 36
	mov	ecx, ebx
	mov	edx, eax
	jmp	LBB207_19
LBB207_21:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
LBB207_23:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$22@?0?_GLOBAL__sub_I_main.cpp@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0?_GLOBAL__sub_I_main.cpp@4HA":
LBB207_22:
	push	ebp
	sub	esp, 12
	mov	ecx, offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	add	ebp, 12
	call	"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	dword ptr [esp + 4], 8
	mov	dword ptr [esp], eax
	call	"??3@YAXPAXI@Z"
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end80:
	.section	.xdata,"dr"
	.p2align	2
L__ehtable$_GLOBAL__sub_I_main.cpp:
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	($stateUnwindMap$_GLOBAL__sub_I_main.cpp) # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
$stateUnwindMap$_GLOBAL__sub_I_main.cpp:
	.long	-1                              # ToState
	.long	"?dtor$22@?0?_GLOBAL__sub_I_main.cpp@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$7@?0?_GLOBAL__sub_I_main.cpp@4HA" # Action
	.text
                                        # -- End function
	.def	 "___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z
"___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z": # @"__ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z
"___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z": # @"__ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
"___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z": # @"__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
"___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z": # @"__ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ
"___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ": # @"__ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z
"___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z": # @"__ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z
"___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z": # @"__ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
"___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z": # @"__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
"___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z": # @"__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??__FpaletteNames@@YAXXZ";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??__FpaletteNames@@YAXXZ
"___ehhandler$??__FpaletteNames@@YAXXZ": # @"__ehhandler$??__FpaletteNames@@YAXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??__FpaletteNames@@YAXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?read_palette_color@@YA?AUcolor@@E@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?read_palette_color@@YA?AUcolor@@E@Z
"___ehhandler$?read_palette_color@@YA?AUcolor@@E@Z": # @"__ehhandler$?read_palette_color@@YA?AUcolor@@E@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?read_palette_color@@YA?AUcolor@@E@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
"___ehhandler$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"__ehhandler$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
"___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z": # @"__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
"___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"__ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 ___ehhandler$main;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$main
___ehhandler$main:                      # @"__ehhandler$main"
# %bb.0:
	mov	eax, offset L__ehtable$main
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0fileInfo@@QAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0fileInfo@@QAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0fileInfo@@QAE@XZ
"___ehhandler$??0fileInfo@@QAE@XZ":     # @"__ehhandler$??0fileInfo@@QAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??0fileInfo@@QAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z
"___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z": # @"__ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
"___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z": # @"__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
"___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z": # @"__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0bad_alloc@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0exception@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0exception@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0exception@std@@QAE@ABV01@@Z
"___ehhandler$??0exception@std@@QAE@ABV01@@Z": # @"__ehhandler$??0exception@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0exception@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1exception@std@@UAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1exception@std@@UAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1exception@std@@UAE@XZ
"___ehhandler$??1exception@std@@UAE@XZ": # @"__ehhandler$??1exception@std@@UAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1exception@std@@UAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z
"___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z": # @"__ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z
"___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z": # @"__ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gbad_alloc@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gexception@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gexception@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gexception@std@@UAEPAXI@Z
"___ehhandler$??_Gexception@std@@UAEPAXI@Z": # @"__ehhandler$??_Gexception@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gexception@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
"___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ": # @"__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
"___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z": # @"__ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
"___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
"___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z": # @"__ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0_Locinfo@std@@QAE@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0_Locinfo@std@@QAE@PBD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
"___ehhandler$??0_Locinfo@std@@QAE@PBD@Z": # @"__ehhandler$??0_Locinfo@std@@QAE@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0_Locinfo@std@@QAE@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1_Locinfo@std@@QAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1_Locinfo@std@@QAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1_Locinfo@std@@QAE@XZ
"___ehhandler$??1_Locinfo@std@@QAE@XZ": # @"__ehhandler$??1_Locinfo@std@@QAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1_Locinfo@std@@QAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0bad_cast@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0bad_cast@std@@QAE@ABV01@@Z
"___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z": # @"__ehhandler$??0bad_cast@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0bad_cast@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gbad_cast@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gbad_cast@std@@UAEPAXI@Z
"___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z": # @"__ehhandler$??_Gbad_cast@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gbad_cast@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gios_base@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gios_base@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gios_base@std@@UAEPAXI@Z
"___ehhandler$??_Gios_base@std@@UAEPAXI@Z": # @"__ehhandler$??_Gios_base@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gios_base@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ
"___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ": # @"__ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z
"___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z": # @"__ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ
"___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ": # @"__ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
"___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z": # @"__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
"___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z": # @"__ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
"___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z": # @"__ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
"___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z": # @"__ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0failure@ios_base@std@@QAE@ABV012@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z
"___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z": # @"__ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0failure@ios_base@std@@QAE@ABV012@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0system_error@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0system_error@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0system_error@std@@QAE@ABV01@@Z
"___ehhandler$??0system_error@std@@QAE@ABV01@@Z": # @"__ehhandler$??0system_error@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0system_error@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0_System_error@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0_System_error@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0_System_error@std@@QAE@ABV01@@Z
"___ehhandler$??0_System_error@std@@QAE@ABV01@@Z": # @"__ehhandler$??0_System_error@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0_System_error@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0runtime_error@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
"___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z": # @"__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0runtime_error@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
"___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z": # @"__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z
"___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z": # @"__ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gfailure@ios_base@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
"___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z": # @"__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gsystem_error@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gsystem_error@std@@UAEPAXI@Z
"___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z": # @"__ehhandler$??_Gsystem_error@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gsystem_error@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
"___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z": # @"__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_G_System_error@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_G_System_error@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_G_System_error@std@@UAEPAXI@Z
"___ehhandler$??_G_System_error@std@@UAEPAXI@Z": # @"__ehhandler$??_G_System_error@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_G_System_error@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gruntime_error@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gruntime_error@std@@UAEPAXI@Z
"___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z": # @"__ehhandler$??_Gruntime_error@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gruntime_error@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
"___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z": # @"__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
"___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z": # @"__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
"___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z": # @"__ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
"___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ": # @"__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
"___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ": # @"__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
"___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ": # @"__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ
"___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ": # @"__ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z
"___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z": # @"__ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z
"___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z": # @"__ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
"___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z": # @"__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z": # @"__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z": # @"__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z": # @"__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
"___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z": # @"__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
"___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z": # @"__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z
"___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z": # @"__ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
"___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z": # @"__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
"___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z": # @"__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
"___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z": # @"__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ
"___ehhandler$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ": # @"__ehhandler$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z
"___ehhandler$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z": # @"__ehhandler$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
"___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z": # @"__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z
"___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z": # @"__ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
"___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z": # @"__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 ___ehhandler$_GLOBAL__sub_I_main.cpp;
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function __ehhandler$_GLOBAL__sub_I_main.cpp
___ehhandler$_GLOBAL__sub_I_main.cpp:   # @"__ehhandler$_GLOBAL__sub_I_main.cpp"
# %bb.0:
	mov	eax, offset L__ehtable$_GLOBAL__sub_I_main.cpp
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.section	.rdata,"dr",discard,"??_C@_01GOHFPIOK@m?$AA@"
	.globl	"??_C@_01GOHFPIOK@m?$AA@"       # @"??_C@_01GOHFPIOK@m?$AA@"
"??_C@_01GOHFPIOK@m?$AA@":
	.asciz	"m"

	.section	.rdata,"dr",discard,"??_C@_01ICJEACDI@?$DL?$AA@"
	.globl	"??_C@_01ICJEACDI@?$DL?$AA@"    # @"??_C@_01ICJEACDI@?$DL?$AA@"
"??_C@_01ICJEACDI@?$DL?$AA@":
	.asciz	";"

	.section	.rdata,"dr",discard,"??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	.globl	"??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@" # @"??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
"??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@":
	.asciz	"\033[38;2;"

	.section	.rdata,"dr",discard,"??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@"
	.globl	"??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@" # @"??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@"
"??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@":
	.asciz	"\033[0m"

	.bss
	.globl	"?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A" # @"?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	.p2align	2
"?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A":
	.zero	20

	.section	.rdata,"dr",discard,"??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@"
	.globl	"??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@" # @"??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@"
"??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@":
	.asciz	" | Given size: "

	.section	.rdata,"dr",discard,"??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@"
	.globl	"??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@" # @"??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@"
"??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@":
	.asciz	", Expected Size: "

	.bss
	.globl	"?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A" # @"?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	.p2align	2
"?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A":
	.zero	20

	.globl	"?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A" # @"?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"
	.p2align	2
"?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A":
	.zero	192

	.section	.rdata,"dr",discard,"??_C@_0BB@EFKDDADM@Atari?58bit?5?$CI256?$CJ?$AA@"
	.globl	"??_C@_0BB@EFKDDADM@Atari?58bit?5?$CI256?$CJ?$AA@" # @"??_C@_0BB@EFKDDADM@Atari?58bit?5?$CI256?$CJ?$AA@"
"??_C@_0BB@EFKDDADM@Atari?58bit?5?$CI256?$CJ?$AA@":
	.asciz	"Atari 8bit (256)"

	.section	.rdata,"dr",discard,"??_C@_0N@DEDJKDHF@Aurora?5?$CI256?$CJ?$AA@"
	.globl	"??_C@_0N@DEDJKDHF@Aurora?5?$CI256?$CJ?$AA@" # @"??_C@_0N@DEDJKDHF@Aurora?5?$CI256?$CJ?$AA@"
"??_C@_0N@DEDJKDHF@Aurora?5?$CI256?$CJ?$AA@":
	.asciz	"Aurora (256)"

	.section	.rdata,"dr",discard,"??_C@_0L@CPMPEAMG@Duel?5?$CI256?$CJ?$AA@"
	.globl	"??_C@_0L@CPMPEAMG@Duel?5?$CI256?$CJ?$AA@" # @"??_C@_0L@CPMPEAMG@Duel?5?$CI256?$CJ?$AA@"
"??_C@_0L@CPMPEAMG@Duel?5?$CI256?$CJ?$AA@":
	.asciz	"Duel (256)"

	.section	.rdata,"dr",discard,"??_C@_0BC@IBOHMGCP@Hocus?5Pocus?5?$CI256?$CJ?$AA@"
	.globl	"??_C@_0BC@IBOHMGCP@Hocus?5Pocus?5?$CI256?$CJ?$AA@" # @"??_C@_0BC@IBOHMGCP@Hocus?5Pocus?5?$CI256?$CJ?$AA@"
"??_C@_0BC@IBOHMGCP@Hocus?5Pocus?5?$CI256?$CJ?$AA@":
	.asciz	"Hocus Pocus (256)"

	.section	.rdata,"dr",discard,"??_C@_0BJ@FKMMNLBE@Sonic?5Robo?5Blast?52?5?$CI256?$CJ?$AA@"
	.globl	"??_C@_0BJ@FKMMNLBE@Sonic?5Robo?5Blast?52?5?$CI256?$CJ?$AA@" # @"??_C@_0BJ@FKMMNLBE@Sonic?5Robo?5Blast?52?5?$CI256?$CJ?$AA@"
"??_C@_0BJ@FKMMNLBE@Sonic?5Robo?5Blast?52?5?$CI256?$CJ?$AA@":
	.asciz	"Sonic Robo Blast 2 (256)"

	.section	.rdata,"dr",discard,"??_C@_0L@OIIPIJBN@srb2?5?$CI256?$CJ?$AA@"
	.globl	"??_C@_0L@OIIPIJBN@srb2?5?$CI256?$CJ?$AA@" # @"??_C@_0L@OIIPIJBN@srb2?5?$CI256?$CJ?$AA@"
"??_C@_0L@OIIPIJBN@srb2?5?$CI256?$CJ?$AA@":
	.asciz	"srb2 (256)"

	.section	.rdata,"dr",discard,"??_C@_0N@MNCFGOGD@uzebox?5?$CI256?$CJ?$AA@"
	.globl	"??_C@_0N@MNCFGOGD@uzebox?5?$CI256?$CJ?$AA@" # @"??_C@_0N@MNCFGOGD@uzebox?5?$CI256?$CJ?$AA@"
"??_C@_0N@MNCFGOGD@uzebox?5?$CI256?$CJ?$AA@":
	.asciz	"uzebox (256)"

	.section	.rdata,"dr",discard,"??_C@_0BB@MABGHAKE@Windows?595?5?$CI256?$CJ?$AA@"
	.globl	"??_C@_0BB@MABGHAKE@Windows?595?5?$CI256?$CJ?$AA@" # @"??_C@_0BB@MABGHAKE@Windows?595?5?$CI256?$CJ?$AA@"
"??_C@_0BB@MABGHAKE@Windows?595?5?$CI256?$CJ?$AA@":
	.asciz	"Windows 95 (256)"

	.data
	.globl	"?palette@@3EA"                 # @"?palette@@3EA"
"?palette@@3EA":
	.byte	1                               # 0x1

	.bss
	.globl	"?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A" # @"?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	.p2align	2
"?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A":
	.zero	8

	.section	.rdata,"dr"
_atari_8_bit_family_gtia_hex:           # @atari_8_bit_family_gtia_hex
	.ascii	"000000\r\n111111\r\n222222\r\n333333\r\n444444\r\n555555\r\n666666\r\n777777\r\n888888\r\n999999\r\naaaaaa\r\nbbbbbb\r\ncccccc\r\ndddddd\r\neeeeee\r\nffffff\r\n190700\r\n2a1800\r\n3b2900\r\n4c3a00\r\n5d4b00\r\n6e5c00\r\n7f6d00\r\n907e09\r\na18f1a\r\nb3a02b\r\nc3b13c\r\nd4c24d\r\ne5d35e\r\nf7e46f\r\nfff582\r\nffff96\r\n310000\r\n3f0000\r\n531700\r\n642800\r\n753900\r\n864a00\r\n975b0a\r\na86c1b\r\nb97d2c\r\nca8e3d\r\ndb9f4e\r\necb05f\r\nfdc170\r\nffd285\r\nffe39c\r\nfff4b2\r\n420404\r\n4f0000\r\n600800\r\n711900\r\n822a0d\r\n933b1e\r\na44c2f\r\nb55d40\r\nc66e51\r\nd77f62\r\ne89073\r\nf9a183\r\nffb298\r\nffc3ae\r\nffd4c4\r\nffe5da\r\n410103\r\n50000f\r\n61001b\r\n720f2b\r\n83203c\r\n94314d\r\na5425e\r\nb6536f\r\nc76480\r\nd87591\r\ne986a2\r\nfa97b3\r\nffa8c8\r\nffb9de\r\nffcaef\r\nfbdcf6\r\n330035\r\n440041\r\n55004c\r\n660c5c\r\n771d6d\r\n882e7e\r\n993f8f\r\naa50a0\r\nbb61b1\r\ncc72c2\r\ndd83d3\r\nee94e4\r\nffa5e4\r\nffb6e9\r\nffc7ee\r\nffd8f3\r\n1d005c\r\n2e0068\r\n400074\r\n511084\r\n622195\r\n7332a6\r\n8443b7\r\n9554c8\r\na665d9\r\nb776ea\r\nc887eb\r\nd998eb\r\ne9a9ec\r\nfbbaeb\r\nffcbef\r\nffdff9\r\n020071\r\n13007d\r\n240b8c\r\n351c9d\r\n462dae\r\n573ebf\r\n684fd0\r\n7960e1\r\n8a71f2\r\n9b82f7\r\nac93f7\r\nbda4f7\r\nceb5f7\r\ndfc6f7\r\nf0d7f7\r\nffe8f8\r\n000068\r\n000a7c\r\n081b90\r\n192ca1\r\n2a3db2\r\n3b4ec3\r\n4c5fd4\r\n5d70e5\r\n6e81f6\r\n7f92ff\r\n90a3ff\r\na1b4ff\r\nb2c5ff\r\nc3d6ff\r\nd4e7ff\r\ne5f8ff\r\n000a4d\r\n001b63\r\n002c79\r\n023d8f\r\n134ea0\r\n245fb1\r\n3570c2\r\n4681d3\r\n5792e4\r\n68a3f5\r\n79b4ff\r\n8ac5ff\r\n9bd6ff\r\nace7ff\r\nbdf8ff\r\nceffff\r\n001a26\r\n002b3c\r\n003c52\r\n004d68\r\n065e7c\r\n176f8d\r\n28809e\r\n3991af\r\n4aa2c0\r\n5bb3d1\r\n6cc4e2\r\n7dd5f3\r\n8ee6ff\r\n9ff7ff\r\nb0ffff\r\nc1ffff\r\n01250a\r\n023610\r\n004622\r\n005738\r\n05684d\r\n16795e\r\n278a6f\r\n389b80\r\n49ac91\r\n5abda2\r\n6bceb3\r\n7cdfc4\r\n8df0d5\r\n9effe5\r\naffff1\r\nc0fffd\r\n04260d\r\n043811\r\n054713\r\n005a1b\r\n106b1b\r\n217c2c\r\n328d3d\r\n439e4e\r\n54af5f\r\n65c070\r\n76d181\r\n87e292\r\n98f3a3\r\na9ffb3\r\nbaffbf\r\ncbffcb\r\n00230a\r\n003510\r\n044613\r\n155613\r\n266713\r\n377813\r\n488914\r\n599a25\r\n6aab36\r\n7bbc47\r\n8ccd58\r\n9dde69\r\naeef7a\r\nbfff8b\r\nd0ff97\r\ne1ffa3\r\n001707\r\n0e2808\r\n1f3908\r\n304a08\r\n415b08\r\n526c08\r\n637d08\r\n748e0d\r\n859f1e\r\n96b02f\r\na7c140\r\nb8d251\r\nc9e362\r\ndaf473\r\nebff82\r\nfcff8e\r\n1b0701\r\n2c1801\r\n3c2900\r\n4d3b00\r\n5f4c00\r\n705e00\r\n816f00\r\n938009\r\na4921a\r\nb2a02b\r\nc7b43d\r\nd8c64e\r\nead760\r\nf6e46f\r\nfffa84\r\nffff99\r\n"

_aurora_hex:                            # @aurora_hex
	.ascii	"000000\r\n111111\r\n222222\r\n333333\r\n444444\r\n555555\r\n666666\r\n777777\r\n888888\r\n999999\r\naaaaaa\r\nbbbbbb\r\ncccccc\r\ndddddd\r\neeeeee\r\nffffff\r\n007f7f\r\n3fbfbf\r\n00ffff\r\nbfffff\r\n8181ff\r\n0000ff\r\n3f3fbf\r\n00007f\r\n0f0f50\r\n7f007f\r\nbf3fbf\r\nf500f5\r\nfd81ff\r\nffc0cb\r\nff8181\r\nff0000\r\nbf3f3f\r\n7f0000\r\n551414\r\n7f3f00\r\nbf7f3f\r\nff7f00\r\nffbf81\r\nffffbf\r\nffff00\r\nbfbf3f\r\n7f7f00\r\n007f00\r\n3fbf3f\r\n00ff00\r\nafffaf\r\n00bfff\r\n007fff\r\n4b7dc8\r\nbcafc0\r\ncbaa89\r\na6a090\r\n7e9494\r\n6e8287\r\n7e6e60\r\na0695f\r\nc07872\r\nd08a74\r\ne19b7d\r\nebaa8c\r\nf5b99b\r\nf6c8af\r\nf5e1d2\r\n7f00ff\r\n573b3b\r\n73413c\r\n8e5555\r\nab7373\r\nc78f8f\r\ne3abab\r\nf8d2da\r\ne3c7ab\r\nc49e73\r\n8f7357\r\n73573b\r\n3b2d1f\r\n414123\r\n73733b\r\n8f8f57\r\na2a255\r\nb5b572\r\nc7c78f\r\ndadaab\r\nededc7\r\nc7e3ab\r\nabc78f\r\n8ebe55\r\n738f57\r\n587d3e\r\n465032\r\n191e0f\r\n235037\r\n3b573b\r\n506450\r\n3b7349\r\n578f57\r\n73ab73\r\n64c082\r\n8fc78f\r\na2d8a2\r\ne1f8fa\r\nb4eeca\r\nabe3c5\r\n87b48e\r\n507d5f\r\n0f6946\r\n1e2d23\r\n234146\r\n3b7373\r\n64abab\r\n8fc7c7\r\nabe3e3\r\nc7f1f1\r\nbed2f0\r\nabc7e3\r\na8b9dc\r\n8fabc7\r\n578fc7\r\n57738f\r\n3b5773\r\n0f192d\r\n1f1f3b\r\n3b3b57\r\n494973\r\n57578f\r\n736eaa\r\n7676ca\r\n8f8fc7\r\nababe3\r\nd0daf8\r\ne3e3ff\r\nab8fc7\r\n8f57c7\r\n73578f\r\n573b73\r\n3c233c\r\n463246\r\n724072\r\n8f578f\r\nab57ab\r\nab73ab\r\nebace1\r\nffdcf5\r\ne3c7e3\r\ne1b9d2\r\nd7a0be\r\nc78fb9\r\nc87da0\r\nc35a91\r\n4b2837\r\n321623\r\n280a1e\r\n401811\r\n621800\r\na5140a\r\nda2010\r\nd5524a\r\nff3c0a\r\nf55a32\r\nff6262\r\nf6bd31\r\nffa53c\r\nd79b0f\r\nda6e0a\r\nb45a00\r\na04b05\r\n5f3214\r\n53500a\r\n626200\r\n8c805a\r\nac9400\r\nb1b10a\r\ne6d55a\r\nffd510\r\nffea4a\r\nc8ff41\r\n9bf046\r\n96dc19\r\n73c805\r\n6aa805\r\n3c6e14\r\n283405\r\n204608\r\n0c5c0c\r\n149605\r\n0ad70a\r\n14e60a\r\n7dff73\r\n4bf05a\r\n00c514\r\n05b450\r\n1c8c4e\r\n123832\r\n129880\r\n06c491\r\n00de6a\r\n2deba8\r\n3cfea5\r\n6affcd\r\n91ebff\r\n55e6ff\r\n7dd7f0\r\n08ded5\r\n109cde\r\n055a5c\r\n162c52\r\n0f377d\r\n004a9c\r\n326496\r\n0052f6\r\n186abd\r\n2378dc\r\n699dc3\r\n4aa4ff\r\n90b0ff\r\n5ac5ff\r\nbeb9fa\r\n786ef0\r\n4a5aff\r\n6241f6\r\n3c3cf5\r\n101cda\r\n0010bd\r\n231094\r\n0c2148\r\n5010b0\r\n6010d0\r\n8732d2\r\n9c41ff\r\nbd62ff\r\nb991ff\r\nd7a5ff\r\nd7c3fa\r\nf8c6fc\r\ne673ff\r\nff52ff\r\nda20e0\r\nbd29ff\r\nbd10c5\r\n8c14be\r\n5a187b\r\n641464\r\n410062\r\n320a46\r\n551937\r\na01982\r\nc80078\r\nff50bf\r\nff6ac5\r\nfaa0b9\r\nfc3a8c\r\ne61e78\r\nbd1039\r\n98344d\r\n911437\r\n"

_duel_hex:                              # @duel_hex
	.ascii	"000000\r\n222323\r\n434549\r\n626871\r\n828b98\r\na6aeba\r\ncdd2da\r\nf5f7fa\r\n625d54\r\n857565\r\n9e8c79\r\naea189\r\nbbafa4\r\nccc3b1\r\neadbc9\r\nfff3d6\r\n583126\r\n733d3b\r\n885041\r\n9a624c\r\nad6e51\r\nd58d6b\r\nfbaa84\r\nffce7f\r\n002735\r\n003850\r\n004d5e\r\n0b667f\r\n006f89\r\n328ca7\r\n24aed6\r\n88d6ff\r\n662b29\r\n94363a\r\nb64d46\r\ncd5e46\r\ne37840\r\nf99b4e\r\nffbc4e\r\nffe949\r\n282b4a\r\n3a4568\r\n615f84\r\n7a7799\r\n8690b2\r\n96b2d9\r\nc7d6ff\r\nc6ecff\r\n002219\r\n003221\r\n174a1b\r\n225918\r\n2f690c\r\n518822\r\n7da42d\r\na6cc34\r\n181f2f\r\n23324d\r\n25466b\r\n366b8a\r\n318eb8\r\n41b2e3\r\n52d2ff\r\n74f5fd\r\n1a332c\r\n2f3f38\r\n385140\r\n325c40\r\n417455\r\n498960\r\n55b67d\r\n91daa1\r\n5e0711\r\n82211d\r\nb63c35\r\ne45c5f\r\nff7676\r\nff9ba8\r\nffbbc7\r\nffdbff\r\n2d3136\r\n48474d\r\n5b5c69\r\n73737f\r\n848795\r\nabaebe\r\nbac7db\r\nebf0f6\r\n3b303c\r\n5a3c45\r\n8a5258\r\nae6b60\r\nc7826c\r\nd89f75\r\necc581\r\nfffaab\r\n31222a\r\n4a353c\r\n5e4646\r\n725a51\r\n7e6c54\r\n9e8a6e\r\nc0a588\r\nddbf9a\r\n2e1026\r\n49283d\r\n663659\r\n975475\r\nb96d91\r\nc178aa\r\ndb99bf\r\nf8c6da\r\n002e49\r\n004051\r\n005162\r\n006b6d\r\n008279\r\n00a087\r\n00bfa3\r\n00deda\r\n453125\r\n614a3c\r\n7e6144\r\n997951\r\nb29062\r\ncca96e\r\ne8cb82\r\nfbeaa3\r\n5f0926\r\n6e2434\r\n904647\r\na76057\r\nbd7d64\r\nce9770\r\nedb67c\r\nedd493\r\n323558\r\n4a5280\r\n64659d\r\n7877c1\r\n8e8ce2\r\n9c9bef\r\nb8aeff\r\ndcd4ff\r\n431729\r\n712b3b\r\n9f3b52\r\nd94a69\r\nf85d80\r\nff7daf\r\nffa6c5\r\nffcdff\r\n49251c\r\n633432\r\n7c4b47\r\n98595a\r\nac6f6e\r\nc17e7a\r\nd28d7a\r\ne59a7c\r\n202900\r\n2f4f08\r\n495d00\r\n617308\r\n7c831e\r\n969a26\r\nb4aa33\r\nd0cc32\r\n622a00\r\n753b09\r\n854f12\r\n9e6520\r\nba882e\r\nd1aa39\r\ne8d24b\r\nfff64f\r\n26233d\r\n3b3855\r\n56506f\r\n75686e\r\n917a7b\r\nb39783\r\ncfaf8e\r\nfedfb1\r\n1d2c43\r\n2e3d47\r\n394d3c\r\n4c5f33\r\n58712c\r\n6b842d\r\n789e24\r\n7fbd39\r\n372423\r\n53393a\r\n784c49\r\n945d4f\r\na96d58\r\nbf7e63\r\nd79374\r\nf4a380\r\n2d4b47\r\n47655a\r\n5b7b69\r\n71957d\r\n87ae8e\r\n8ac196\r\na9d1c1\r\ne0faeb\r\n001b40\r\n03315f\r\n07487c\r\n105da2\r\n1476c0\r\n4097ea\r\n55b1f1\r\n6dccff\r\n554769\r\n765d73\r\n977488\r\nb98c93\r\nd5a39a\r\nebbd9d\r\nffd59b\r\nfdf786\r\n1d1d21\r\n3c3151\r\n584a7f\r\n7964ba\r\n9585f1\r\na996ec\r\nbaabf7\r\nd1bdfe\r\n262450\r\n28335d\r\n2d3d72\r\n3d5083\r\n5165ae\r\n5274c5\r\n6c82c4\r\n8393c3\r\n492129\r\n5e414a\r\n77535b\r\n91606a\r\nad7984\r\nb58b94\r\nd4aeaa\r\nffe2cf\r\n721c03\r\n9c3327\r\nbf5a3e\r\ne98627\r\nffb108\r\nffcf05\r\nfff02b\r\nf7f4bf\r\n"

_hocus_pocus_hex:                       # @hocus_pocus_hex
	.ascii	"060013\r\n19141d\r\ne9e396\r\ncebb6c\r\nb58f46\r\n9e6628\r\n843b11\r\n78250f\r\nd2797e\r\nbb6a6e\r\na45d62\r\n8d5152\r\n764145\r\n5e3535\r\n482829\r\n361d1d\r\n4b09d4\r\n4308bd\r\n3a07a6\r\n320690\r\n290679\r\n210562\r\n18044c\r\n1d1044\r\n8295a8\r\n728594\r\n657584\r\n566670\r\n495660\r\n39464c\r\n2d373c\r\n22282e\r\na26f70\r\n956263\r\n855657\r\n784e4f\r\n684545\r\n5b3939\r\n4b3030\r\n472f35\r\na27fb8\r\n9273a4\r\n826794\r\n725b83\r\n624e6f\r\n52425f\r\n42364e\r\n372b3f\r\nca97a3\r\nb38690\r\n9e7680\r\n8a6670\r\n72565c\r\n5e474c\r\n493739\r\n3e3137\r\n8d88bc\r\n7b79a7\r\n6d6894\r\n5e5a7f\r\n4f4a6c\r\n413956\r\n322c44\r\n252033\r\ne8988c\r\nd18479\r\nba7369\r\na4625c\r\n8e524c\r\n77453f\r\n613532\r\n4c3825\r\n15c714\r\n12bb11\r\n0f9d0d\r\n0d810a\r\n0a6807\r\n074c05\r\n053003\r\n021b01\r\n38b3fa\r\n2996e5\r\n1f79d0\r\n1560bb\r\n0e4ba6\r\n083791\r\n03237c\r\n162a73\r\nf9f1dc\r\nd6c4b4\r\nb6988c\r\n97736b\r\n77534e\r\n583735\r\n381c1c\r\n1c0b0b\r\nedd8e4\r\nc3b0c3\r\n9d8ca6\r\n7a6b89\r\n5b4e6b\r\n3f354e\r\n241c31\r\n251f14\r\nfaf400\r\ndebb00\r\nc28900\r\naa5f00\r\n8e3d00\r\n762200\r\n5a0b00\r\n440300\r\ne40002\r\ncb0015\r\nb50015\r\n9c0014\r\n850014\r\n6c0014\r\n560013\r\n501013\r\ne4c013\r\ncba312\r\nb28912\r\n9b7012\r\n825a11\r\n6c4711\r\n523211\r\n3e2510\r\n000023\r\n0000f6\r\n0000f2\r\n0000ea\r\n0000e6\r\n0000e2\r\n0000de\r\n0000da\r\n0000d6\r\n0000d2\r\n0000ce\r\n0000ca\r\n0000c6\r\n0000c2\r\n0000be\r\n0000ba\r\n0000b6\r\n0000b2\r\n0000ad\r\n0000a6\r\n0000a2\r\n00009e\r\n00009a\r\n000096\r\n000092\r\n00008e\r\n00008a\r\n000086\r\n000082\r\n00007e\r\n00007a\r\n000076\r\n151583\r\n14147e\r\n131377\r\n121273\r\n11116f\r\n10106b\r\n0f0f67\r\n0e0e63\r\n0d0d5f\r\n0c0c5b\r\n0b0b57\r\n0a0a53\r\n0a0a4f\r\n09094b\r\n080847\r\n070743\r\ne5e5fb\r\nd7d7f2\r\nccccec\r\nc1c1e7\r\nb6b6e1\r\nababdc\r\na0a0d6\r\n9795d0\r\na38ec5\r\n9683be\r\n8978ba\r\n8071b7\r\n7669b3\r\n6a5faf\r\n6057ac\r\n5851a8\r\n0015e5\r\n0013cf\r\n0011b9\r\n000ea3\r\n000c91\r\n000a7b\r\n000865\r\n15074f\r\nfa1515\r\ne21313\r\nca1111\r\nb20f0f\r\n9a0d0d\r\n820b0b\r\n6a0909\r\n570707\r\n15f600\r\n15dc00\r\n15c400\r\n15a900\r\n159200\r\n157700\r\n156000\r\n295815\r\nfae4fa\r\ndecbde\r\nc6b5c6\r\nae9fae\r\n968996\r\n7e737e\r\n665d66\r\n504950\r\ne7c100\r\ne8b301\r\ne9a603\r\neb9904\r\nec8f06\r\nee8207\r\nef7508\r\nf1641e\r\nf00bf0\r\nd80dd8\r\nc30ec3\r\naf10af\r\n9a119a\r\n861286\r\n711471\r\n5f155f\r\n010101\r\n0d0d0d\r\n1e1e1e\r\n313131\r\n414141\r\n515151\r\n626262\r\n757575\r\n858585\r\n959595\r\na6a6a6\r\nb9b9b9\r\nc9c9c9\r\nd9d9d9\r\neaeaea\r\nfcfcfc\r\n"

_sonic_robo_blast_2_v22_hex:            # @sonic_robo_blast_2_v22_hex
	.ascii	"ffffff\r\nf6f6f6\r\nededed\r\ne4e4e4\r\ndadada\r\nd1d1d1\r\nc8c8c8\r\nbfbfbf\r\nb7b7b7\r\nafafaf\r\na7a7a7\r\n9f9f9f\r\n979797\r\n8f8f8f\r\n878787\r\n7f7f7f\r\n777777\r\n6f6f6f\r\n676767\r\n5f5f5f\r\n575757\r\n4f4f4f\r\n474747\r\n3f3f3f\r\n373737\r\n2f2f2f\r\n272727\r\n1f1f1f\r\n171717\r\n0f0f0f\r\n070707\r\n000000\r\nff7f7f\r\nff5f5f\r\nff3f3f\r\nff0000\r\nef0000\r\ndf0000\r\ncf0000\r\nbf0000\r\naf0000\r\n9f0000\r\n8f0000\r\n7f0000\r\n6f0000\r\n5f0000\r\n470000\r\n370000\r\nffdbc0\r\nffcb97\r\nffb975\r\nffa855\r\nff9736\r\nff8619\r\nff7500\r\nec6900\r\ndd5e00\r\nd05800\r\nc44f00\r\nb54400\r\n9f3800\r\n8a2900\r\n812000\r\n791800\r\nebdb57\r\nd7bb43\r\nc39b2f\r\naf7b1f\r\n9b5b13\r\n874307\r\n752900\r\n550000\r\nffff4f\r\nffff00\r\ne3d90f\r\nc9bb0e\r\naa9b0b\r\n887809\r\n706007\r\n5a4905\r\nffffcf\r\nffffaf\r\nffff8f\r\nffff73\r\nebde81\r\nd0c280\r\nb7a977\r\n96835d\r\ndeffa8\r\nc7e494\r\nadc880\r\n95ad6b\r\n7c9258\r\n647744\r\n4a5a30\r\n323f1d\r\n77ff4f\r\n70f04b\r\n69e046\r\n61d041\r\n5ac03c\r\n52b037\r\n4ba032\r\n43902d\r\n3c8028\r\n357023\r\n2d601e\r\n265019\r\n1e4014\r\n17300f\r\n0f200a\r\n070f04\r\n00ff00\r\n00df00\r\n00bf00\r\n009f00\r\n007f00\r\n005f00\r\n003f00\r\n002d00\r\nb7fbe7\r\n66f7cb\r\n15f2b0\r\n0bd297\r\n03b180\r\n02936b\r\n027354\r\n01563f\r\ncefaff\r\na6f1ff\r\n75e7ff\r\n57d5ff\r\n4fc7ff\r\n47b9ff\r\n37a5ff\r\n208ae1\r\n186fb6\r\n155386\r\n0e3556\r\n071e30\r\n74d1c9\r\n42b3b3\r\n178888\r\n005f5f\r\ne7e7ff\r\nc6c6ff\r\nadadff\r\n8c8cff\r\n7373ff\r\n5252ff\r\n3131ff\r\n1818ff\r\n0000ff\r\n0000df\r\n0000c4\r\n0000ac\r\n000095\r\n000080\r\n000066\r\n000052\r\nd8b7ff\r\nc799ff\r\nad6aff\r\n9844ff\r\n7f16ff\r\n6b00ee\r\n5b00c9\r\n48009f\r\n330071\r\n240051\r\n9797d5\r\n7777bb\r\n5454a7\r\n414183\r\n2e2e5c\r\n21224e\r\nffcaff\r\nffaaff\r\nff8aff\r\nff6aff\r\nff4aff\r\nff00ff\r\ndd00dd\r\nbf00bf\r\na200a2\r\n790079\r\n550055\r\n350035\r\nc5e800\r\na7ca04\r\n8ca80b\r\n6c7c12\r\ncf7fcf\r\nb76fb7\r\n9f5f9f\r\n874f87\r\n6f3f6f\r\n572f57\r\n402040\r\n2b152b\r\nffc4e0\r\nff99c0\r\nf570a5\r\ndd578c\r\nc73d74\r\nb13466\r\n9d2f5b\r\n85274d\r\nffe6db\r\nffbfbf\r\nff9f9f\r\ne18585\r\ncc7171\r\nc26363\r\nb55353\r\na73f3f\r\nffcfb3\r\nffc19e\r\nffb78b\r\nf7ab7b\r\nefa373\r\ne39767\r\nd78b5b\r\ncf8353\r\nbf7b4b\r\nb37347\r\nab6f43\r\na36b3f\r\n9b633b\r\n8f5f37\r\n875733\r\n7f532f\r\n774f2b\r\n6b4727\r\n5f4323\r\n533f1f\r\n4b371b\r\n3f2f17\r\n332b13\r\n2b230f\r\nbfa78f\r\naf9880\r\n9f8971\r\n927d65\r\n86725a\r\n7e6a52\r\n75624a\r\n6d5a42\r\n65533b\r\n5d4b33\r\n57452d\r\n4b3c23\r\nffe7f6\r\n00003f\r\n000020\r\n00ffff\r\n"

_srb2_hex:                              # @srb2_hex
	.ascii	"ffffff\r\nf7f7f7\r\nefefef\r\ne7e7e7\r\ndfdfdf\r\nd7d7d7\r\ncfcfcf\r\nc7c7c7\r\nbfbfbf\r\nb7b7b7\r\nafafaf\r\na7a7a7\r\n9f9f9f\r\n979797\r\n8f8f8f\r\n878787\r\n7f7f7f\r\n777777\r\n6f6f6f\r\n676767\r\n5f5f5f\r\n575757\r\n4f4f4f\r\n474747\r\n3f3f3f\r\n373737\r\n2f2f2f\r\n272727\r\n1f1f1f\r\n171717\r\n0f0f0f\r\n070707\r\n000000\r\nbfa78f\r\nb7a088\r\naf9880\r\na79078\r\n9f8971\r\n968169\r\n8e7961\r\n86725a\r\n7e6a52\r\n75624a\r\n6d5a42\r\n65533b\r\n5d4b33\r\n54432b\r\n4c3c24\r\n43331b\r\nbf7b4b\r\nb37347\r\nab6f43\r\na36b3f\r\n9b633b\r\n8f5f37\r\n875733\r\n7f532f\r\n774f2b\r\n6b4727\r\n5f4323\r\n533f1f\r\n4b371b\r\n3f2f17\r\n332b13\r\n2b230f\r\nffebdf\r\nffe3d3\r\nffdbc7\r\nffd3bb\r\nffcfb3\r\nffc7a7\r\nffbf9b\r\nffbb93\r\nffb383\r\nf7ab7b\r\nefa373\r\ne79b6b\r\ndf9363\r\nd78b5b\r\ncf8353\r\ncb7f4f\r\nffeedc\r\nffdcb9\r\nffcb97\r\nffb975\r\nffa855\r\nff9736\r\nff8619\r\nff7500\r\nf36d00\r\ne56500\r\nd85d00\r\ncb5500\r\nbe4d00\r\nb14500\r\na43d00\r\n973600\r\nffffef\r\nffffcf\r\nffffaf\r\nffff8f\r\nffff6f\r\nffff4f\r\nffff2f\r\nffff0f\r\nffff00\r\ncfcf00\r\nafaf00\r\n8f8f00\r\n6f6f00\r\n4f4f00\r\n2f2f00\r\n0f0f00\r\nffff73\r\nebdb57\r\nd7bb43\r\nc39b2f\r\naf7b1f\r\n9b5b13\r\n874307\r\n732b00\r\nffdfdf\r\nffbfbf\r\nff9f9f\r\nff7f7f\r\nff5f5f\r\nff3f3f\r\nff1f1f\r\nff0000\r\nef0000\r\ndf0000\r\ncf0000\r\nbf0000\r\naf0000\r\n9f0000\r\n8f0000\r\n7f0000\r\n6f0000\r\n5f0000\r\n4f0000\r\n3f0000\r\n2f0000\r\n1f0000\r\n0f0000\r\nffb7b7\r\nf3a3a3\r\ne78f8f\r\ndb7b7b\r\ncb6b6b\r\nbf5b5b\r\nb34f4f\r\na73f3f\r\n8e2e00\r\n862700\r\n7e2000\r\n751900\r\n6d1200\r\n650b00\r\n5d0500\r\n550000\r\n77ff4f\r\n70f04b\r\n69e046\r\n61d041\r\n5ac03c\r\n52b037\r\n4ba032\r\n43902d\r\n3c8028\r\n357023\r\n2d601e\r\n265019\r\n1e4014\r\n17300f\r\n0f200a\r\n070f04\r\ndeffa8\r\nc7e494\r\nadc880\r\n95ad6b\r\n7c9258\r\n647744\r\n4a5a30\r\n323f1d\r\n00ff00\r\n00df00\r\n00bf00\r\n009f00\r\n007f00\r\n005f00\r\n003f00\r\n001f00\r\nff6fff\r\nff00ff\r\ndf00df\r\nbf00bf\r\n9f009f\r\n7f007f\r\n5f005f\r\n3f003f\r\ne9e9f3\r\nc4c4e1\r\n9d9dce\r\n7777bb\r\n5454a7\r\n414183\r\n2e2e5c\r\n1b1b34\r\nd5f1ff\r\nbfebff\r\naae3ff\r\n95ddff\r\n80d6ff\r\n6acfff\r\n55c8ff\r\n3fbfff\r\n379ddf\r\n2f8fbf\r\n27779f\r\n1f5f7f\r\n00bfbf\r\n007f7f\r\n005f5f\r\n003f3f\r\ne7e7ff\r\nc6c6ff\r\nadadff\r\n8c8cff\r\n7373ff\r\n5252ff\r\n3131ff\r\n1818ff\r\n0000ff\r\n0000e7\r\n0000ce\r\n0000b5\r\n00009c\r\n000084\r\n00006b\r\n000052\r\n00004f\r\n00003f\r\n000037\r\n000027\r\n00001f\r\n00000f\r\n000007\r\n00ffff\r\ncf7fcf\r\nb76fb7\r\n9f5f9f\r\n874f87\r\n6f3f6f\r\n572f57\r\n3f1f3f\r\n270f27\r\n"

_uzebox_hex:                            # @uzebox_hex
	.ascii	"000000\r\n240000\r\n480000\r\n6d0000\r\n910000\r\nb60000\r\nda0000\r\nff0000\r\n002400\r\n242400\r\n482400\r\n6d2400\r\n912400\r\nb62400\r\nda2400\r\nff2400\r\n004800\r\n244800\r\n484800\r\n6d4800\r\n914800\r\nb64800\r\nda4800\r\nff4800\r\n006d00\r\n246d00\r\n486d00\r\n6d6d00\r\n916d00\r\nb66d00\r\nda6d00\r\nff6d00\r\n009100\r\n249100\r\n489100\r\n6d9100\r\n919100\r\nb69100\r\nda9100\r\nff9100\r\n00b600\r\n24b600\r\n48b600\r\n6db600\r\n91b600\r\nb6b600\r\ndab600\r\nffb600\r\n00da00\r\n24da00\r\n48da00\r\n6dda00\r\n91da00\r\nb6da00\r\ndada00\r\nffda00\r\n00ff00\r\n24ff00\r\n48ff00\r\n6dff00\r\n91ff00\r\nb6ff00\r\ndaff00\r\nffff00\r\n000055\r\n240055\r\n480055\r\n6d0055\r\n910055\r\nb60055\r\nda0055\r\nff0055\r\n002455\r\n242455\r\n482455\r\n6d2455\r\n912455\r\nb62455\r\nda2455\r\nff2455\r\n004855\r\n244855\r\n484855\r\n6d4855\r\n914855\r\nb64855\r\nda4855\r\nff4855\r\n006d55\r\n246d55\r\n486d55\r\n6d6d55\r\n916d55\r\nb66d55\r\nda6d55\r\nff6d55\r\n009155\r\n249155\r\n489155\r\n6d9155\r\n919155\r\nb69155\r\nda9155\r\nff9155\r\n00b655\r\n24b655\r\n48b655\r\n6db655\r\n91b655\r\nb6b655\r\ndab655\r\nffb655\r\n00da55\r\n24da55\r\n48da55\r\n6dda55\r\n91da55\r\nb6da55\r\ndada55\r\nffda55\r\n00ff55\r\n24ff55\r\n48ff55\r\n6dff55\r\n91ff55\r\nb6ff55\r\ndaff55\r\nffff55\r\n0000aa\r\n2400aa\r\n4800aa\r\n6d00aa\r\n9100aa\r\nb600aa\r\nda00aa\r\nff00aa\r\n0024aa\r\n2424aa\r\n4824aa\r\n6d24aa\r\n9124aa\r\nb624aa\r\nda24aa\r\nff24aa\r\n0048aa\r\n2448aa\r\n4848aa\r\n6d48aa\r\n9148aa\r\nb648aa\r\nda48aa\r\nff48aa\r\n006daa\r\n246daa\r\n486daa\r\n6d6daa\r\n916daa\r\nb66daa\r\nda6daa\r\nff6daa\r\n0091aa\r\n2491aa\r\n4891aa\r\n6d91aa\r\n9191aa\r\nb691aa\r\nda91aa\r\nff91aa\r\n00b6aa\r\n24b6aa\r\n48b6aa\r\n6db6aa\r\n91b6aa\r\nb6b6aa\r\ndab6aa\r\nffb6aa\r\n00daaa\r\n24daaa\r\n48daaa\r\n6ddaaa\r\n91daaa\r\nb6daaa\r\ndadaaa\r\nffdaaa\r\n00ffaa\r\n24ffaa\r\n48ffaa\r\n6dffaa\r\n91ffaa\r\nb6ffaa\r\ndaffaa\r\nffffaa\r\n0000ff\r\n2400ff\r\n4800ff\r\n6d00ff\r\n9100ff\r\nb600ff\r\nda00ff\r\nff00ff\r\n0024ff\r\n2424ff\r\n4824ff\r\n6d24ff\r\n9124ff\r\nb624ff\r\nda24ff\r\nff24ff\r\n0048ff\r\n2448ff\r\n4848ff\r\n6d48ff\r\n9148ff\r\nb648ff\r\nda48ff\r\nff48ff\r\n006dff\r\n246dff\r\n486dff\r\n6d6dff\r\n916dff\r\nb66dff\r\nda6dff\r\nff6dff\r\n0091ff\r\n2491ff\r\n4891ff\r\n6d91ff\r\n9191ff\r\nb691ff\r\nda91ff\r\nff91ff\r\n00b6ff\r\n24b6ff\r\n48b6ff\r\n6db6ff\r\n91b6ff\r\nb6b6ff\r\ndab6ff\r\nffb6ff\r\n00daff\r\n24daff\r\n48daff\r\n6ddaff\r\n91daff\r\nb6daff\r\ndadaff\r\nffdaff\r\n00ffff\r\n24ffff\r\n48ffff\r\n6dffff\r\n91ffff\r\nb6ffff\r\ndaffff\r\nffffff\r\n"

_windows_95_256_colours_hex:            # @windows_95_256_colours_hex
	.ascii	"000000\r\n800000\r\n008000\r\n808000\r\n000080\r\n800080\r\n008080\r\nc0c0c0\r\nc0dcc0\r\na6caf0\r\n2a3faa\r\n2a3fff\r\n2a5f00\r\n2a5f55\r\n2a5faa\r\n2a5fff\r\n2a7f00\r\n2a7f55\r\n2a7faa\r\n2a7fff\r\n2a9f00\r\n2a9f55\r\n2a9faa\r\n2a9fff\r\n2abf00\r\n2abf55\r\n2abfaa\r\n2abfff\r\n2adf00\r\n2adf55\r\n2adfaa\r\n2adfff\r\n2aff00\r\n2aff55\r\n2affaa\r\n2affff\r\n550000\r\n550055\r\n5500aa\r\n5500ff\r\n551f00\r\n551f55\r\n551faa\r\n551fff\r\n553f00\r\n553f55\r\n553faa\r\n553fff\r\n555f00\r\n555f55\r\n555faa\r\n555fff\r\n557f00\r\n557f55\r\n557faa\r\n557fff\r\n559f00\r\n559f55\r\n559faa\r\n559fff\r\n55bf00\r\n55bf55\r\n55bfaa\r\n55bfff\r\n55df00\r\n55df55\r\n55dfaa\r\n55dfff\r\n55ff00\r\n55ff55\r\n55ffaa\r\n55ffff\r\n7f0000\r\n7f0055\r\n7f00aa\r\n7f00ff\r\n7f1f00\r\n7f1f55\r\n7f1faa\r\n7f1fff\r\n7f3f00\r\n7f3f55\r\n7f3faa\r\n7f3fff\r\n7f5f00\r\n7f5f55\r\n7f5faa\r\n7f5fff\r\n7f7f00\r\n7f7f55\r\n7f7faa\r\n7f7fff\r\n7f9f00\r\n7f9f55\r\n7f9faa\r\n7f9fff\r\n7fbf00\r\n7fbf55\r\n7fbfaa\r\n7fbfff\r\n7fdf00\r\n7fdf55\r\n7fdfaa\r\n7fdfff\r\n7fff00\r\n7fff55\r\n7fffaa\r\n7fffff\r\naa0000\r\naa0055\r\naa00aa\r\naa00ff\r\naa1f00\r\naa1f55\r\naa1faa\r\naa1fff\r\naa3f00\r\naa3f55\r\naa3faa\r\naa3fff\r\naa5f00\r\naa5f55\r\naa5faa\r\naa5fff\r\naa7f00\r\naa7f55\r\naa7faa\r\naa7fff\r\naa9f00\r\naa9f55\r\naa9faa\r\naa9fff\r\naabf00\r\naabf55\r\naabfaa\r\naabfff\r\naadf00\r\naadf55\r\naadfaa\r\naadfff\r\naaff00\r\naaff55\r\naaffaa\r\naaffff\r\nd40000\r\nd40055\r\nd400aa\r\nd400ff\r\nd41f00\r\nd41f55\r\nd41faa\r\nd41fff\r\nd43f00\r\nd43f55\r\nd43faa\r\nd43fff\r\nd45f00\r\nd45f55\r\nd45faa\r\nd45fff\r\nd47f00\r\nd47f55\r\nd47faa\r\nd47fff\r\nd49f00\r\nd49f55\r\nd49faa\r\nd49fff\r\nd4bf00\r\nd4bf55\r\nd4bfaa\r\nd4bfff\r\nd4df00\r\nd4df55\r\nd4dfaa\r\nd4dfff\r\nd4ff00\r\nd4ff55\r\nd4ffaa\r\nd4ffff\r\nff0055\r\nff00aa\r\nff1f00\r\nff1f55\r\nff1faa\r\nff1fff\r\nff3f00\r\nff3f55\r\nff3faa\r\nff3fff\r\nff5f00\r\nff5f55\r\nff5faa\r\nff5fff\r\nff7f00\r\nff7f55\r\nff7faa\r\nff7fff\r\nff9f00\r\nff9f55\r\nff9faa\r\nff9fff\r\nffbf00\r\nffbf55\r\nffbfaa\r\nffbfff\r\nffdf00\r\nffdf55\r\nffdfaa\r\nffdfff\r\nffff55\r\nffffaa\r\nccccff\r\nffccff\r\n33ffff\r\n66ffff\r\n99ffff\r\nccffff\r\n007f00\r\n007f55\r\n007faa\r\n007fff\r\n009f00\r\n009f55\r\n009faa\r\n009fff\r\n00bf00\r\n00bf55\r\n00bfaa\r\n00bfff\r\n00df00\r\n00df55\r\n00dfaa\r\n00dfff\r\n00ff55\r\n00ffaa\r\n2a0000\r\n2a0055\r\n2a00aa\r\n2a00ff\r\n2a1f00\r\n2a1f55\r\n2a1faa\r\n2a1fff\r\n2a3f00\r\n2a3f55\r\nfffbf0\r\na0a0a4\r\n808080\r\nff0000\r\n00ff00\r\nffff00\r\n0000ff\r\nff00ff\r\n00ffff\r\nffffff\r\n"

	.section	.data,"dw",discard,"??_R0?AVout_of_range@std@@@8"
	.globl	"??_R0?AVout_of_range@std@@@8"  # @"??_R0?AVout_of_range@std@@@8"
	.p2align	4
"??_R0?AVout_of_range@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVout_of_range@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_C@_0BP@LDKDOJOI@Index?5out?5of?5range?5for?5palette?$AA@"
	.globl	"??_C@_0BP@LDKDOJOI@Index?5out?5of?5range?5for?5palette?$AA@" # @"??_C@_0BP@LDKDOJOI@Index?5out?5of?5range?5for?5palette?$AA@"
"??_C@_0BP@LDKDOJOI@Index?5out?5of?5range?5for?5palette?$AA@":
	.asciz	"Index out of range for palette"

	.bss
	.globl	"?ext0101_noop_id@@3IA"         # @"?ext0101_noop_id@@3IA"
	.p2align	2
"?ext0101_noop_id@@3IA":
	.long	0                               # 0x0

	.data
	.globl	"?ext0101_noopex_id@@3IA"       # @"?ext0101_noopex_id@@3IA"
	.p2align	2
"?ext0101_noopex_id@@3IA":
	.long	1                               # 0x1

	.globl	"?ext0101_setcolor_id@@3IA"     # @"?ext0101_setcolor_id@@3IA"
	.p2align	2
"?ext0101_setcolor_id@@3IA":
	.long	16842752                        # 0x1010000

	.globl	"?ext0101_setdebug_id@@3IA"     # @"?ext0101_setdebug_id@@3IA"
	.p2align	2
"?ext0101_setdebug_id@@3IA":
	.long	16842753                        # 0x1010001

	.globl	"?ext0101_raster4_id@@3IA"      # @"?ext0101_raster4_id@@3IA"
	.p2align	2
"?ext0101_raster4_id@@3IA":
	.long	16842754                        # 0x1010002

	.globl	"?ext0101_raster3_id@@3IA"      # @"?ext0101_raster3_id@@3IA"
	.p2align	2
"?ext0101_raster3_id@@3IA":
	.long	16842755                        # 0x1010003

	.globl	"?ext0101_raster_set_palette_id@@3IA" # @"?ext0101_raster_set_palette_id@@3IA"
	.p2align	2
"?ext0101_raster_set_palette_id@@3IA":
	.long	16842756                        # 0x1010004

	.section	.rdata,"dr",discard,"??_C@_0BB@OCFNGDLM@Set?5palette?5to?5?$CC?$AA@"
	.globl	"??_C@_0BB@OCFNGDLM@Set?5palette?5to?5?$CC?$AA@" # @"??_C@_0BB@OCFNGDLM@Set?5palette?5to?5?$CC?$AA@"
"??_C@_0BB@OCFNGDLM@Set?5palette?5to?5?$CC?$AA@":
	.asciz	"Set palette to \""

	.section	.rdata,"dr",discard,"??_C@_01BJJEKLCA@?$CC?$AA@"
	.globl	"??_C@_01BJJEKLCA@?$CC?$AA@"    # @"??_C@_01BJJEKLCA@?$CC?$AA@"
"??_C@_01BJJEKLCA@?$CC?$AA@":
	.asciz	"\""

	.data
	.globl	"?ext0101_raster_palette_id@@3IA" # @"?ext0101_raster_palette_id@@3IA"
	.p2align	2
"?ext0101_raster_palette_id@@3IA":
	.long	16842757                        # 0x1010005

	.section	.rdata,"dr",discard,"??_C@_01ODHLEDKK@?$CI?$AA@"
	.globl	"??_C@_01ODHLEDKK@?$CI?$AA@"    # @"??_C@_01ODHLEDKK@?$CI?$AA@"
"??_C@_01ODHLEDKK@?$CI?$AA@":
	.asciz	"("

	.section	.rdata,"dr",discard,"??_C@_02KEGNLNML@?0?5?$AA@"
	.globl	"??_C@_02KEGNLNML@?0?5?$AA@"    # @"??_C@_02KEGNLNML@?0?5?$AA@"
"??_C@_02KEGNLNML@?0?5?$AA@":
	.asciz	", "

	.section	.rdata,"dr",discard,"??_C@_02MNMNLDAI@?$CJ?6?$AA@"
	.globl	"??_C@_02MNMNLDAI@?$CJ?6?$AA@"  # @"??_C@_02MNMNLDAI@?$CJ?6?$AA@"
"??_C@_02MNMNLDAI@?$CJ?6?$AA@":
	.asciz	")\n"

	.data
	.globl	"?ext0102_pixel_id@@3IA"        # @"?ext0102_pixel_id@@3IA"
	.p2align	2
"?ext0102_pixel_id@@3IA":
	.long	16908288                        # 0x1020000

	.section	.rdata,"dr",discard,"??_C@_01PKGAHCOL@?$CJ?$AA@"
	.globl	"??_C@_01PKGAHCOL@?$CJ?$AA@"    # @"??_C@_01PKGAHCOL@?$CJ?$AA@"
"??_C@_01PKGAHCOL@?$CJ?$AA@":
	.asciz	")"

	.data
	.globl	"?ext0102_rect_id@@3IA"         # @"?ext0102_rect_id@@3IA"
	.p2align	2
"?ext0102_rect_id@@3IA":
	.long	16908289                        # 0x1020001

	.section	.rdata,"dr",discard,"??_C@_01EEMJAFIK@?6?$AA@"
	.globl	"??_C@_01EEMJAFIK@?6?$AA@"      # @"??_C@_01EEMJAFIK@?6?$AA@"
"??_C@_01EEMJAFIK@?6?$AA@":
	.asciz	"\n"

	.data
	.globl	"?ext0102_circle_id@@3IA"       # @"?ext0102_circle_id@@3IA"
	.p2align	2
"?ext0102_circle_id@@3IA":
	.long	16908290                        # 0x1020002

	.section	.rdata,"dr",discard,"??_C@_01CLKCMJKC@?5?$AA@"
	.globl	"??_C@_01CLKCMJKC@?5?$AA@"      # @"??_C@_01CLKCMJKC@?5?$AA@"
"??_C@_01CLKCMJKC@?5?$AA@":
	.asciz	" "

	.section	.rdata,"dr",discard,"??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@"
	.globl	"??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@" # @"??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@"
"??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@":
	.asciz	") -> ("

	.data
	.globl	"?ext0102_line_id@@3IA"         # @"?ext0102_line_id@@3IA"
	.p2align	2
"?ext0102_line_id@@3IA":
	.long	16908291                        # 0x1020003

	.section	.rdata,"dr",discard,"??_C@_00CNPNBAHC@?$AA@"
	.globl	"??_C@_00CNPNBAHC@?$AA@"        # @"??_C@_00CNPNBAHC@?$AA@"
"??_C@_00CNPNBAHC@?$AA@":
	.zero	1

	.section	.rdata,"dr",discard,"??_C@_03ICFFBAI@RGB?$AA@"
	.globl	"??_C@_03ICFFBAI@RGB?$AA@"      # @"??_C@_03ICFFBAI@RGB?$AA@"
"??_C@_03ICFFBAI@RGB?$AA@":
	.asciz	"RGB"

	.section	.rdata,"dr",discard,"??_C@_03CAADKAK@HSV?$AA@"
	.globl	"??_C@_03CAADKAK@HSV?$AA@"      # @"??_C@_03CAADKAK@HSV?$AA@"
"??_C@_03CAADKAK@HSV?$AA@":
	.asciz	"HSV"

	.section	.rdata,"dr",discard,"??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@"
	.globl	"??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@" # @"??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@"
"??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@":
	.asciz	"Image info:\n"

	.section	.rdata,"dr",discard,"??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@"
	.globl	"??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@" # @"??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@"
"??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@":
	.asciz	"  Version: "

	.section	.rdata,"dr",discard,"??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@"
	.globl	"??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@" # @"??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@"
"??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@":
	.asciz	"  Width: "

	.section	.rdata,"dr",discard,"??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@"
	.globl	"??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@" # @"??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@"
"??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@":
	.asciz	"  Height: "

	.section	.rdata,"dr",discard,"??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@"
	.globl	"??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@" # @"??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@"
"??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@":
	.asciz	"  Metadata: "

	.section	.rdata,"dr",discard,"??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@"
	.globl	"??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@" # @"??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@"
"??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@":
	.asciz	"  Background Color: #"

	.section	.rdata,"dr",discard,"??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@"
	.globl	"??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@" # @"??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@"
"??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@":
	.asciz	"  Color Mode: "

	.section	.rdata,"dr",discard,"??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@"
	.globl	"??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@" # @"??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@"
"??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@":
	.asciz	"  Extensions Needed: { "

	.section	.rdata,"dr",discard,"??_C@_03NIEPJMFE@?5?$HN?6?$AA@"
	.globl	"??_C@_03NIEPJMFE@?5?$HN?6?$AA@" # @"??_C@_03NIEPJMFE@?5?$HN?6?$AA@"
"??_C@_03NIEPJMFE@?5?$HN?6?$AA@":
	.asciz	" }\n"

	.section	.rdata,"dr",discard,"??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@"
	.globl	"??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@" # @"??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@"
"??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@":
	.asciz	"Image uses one or more unsupported extensions, exiting.\n"

	.section	.rdata,"dr",discard,"??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@"
	.globl	"??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@" # @"??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@"
"??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@":
	.asciz	"Proper usage: "

	.section	.rdata,"dr",discard,"??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@"
	.globl	"??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@" # @"??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@"
"??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@":
	.asciz	" <wvc file>"

	.section	.rdata,"dr",discard,"??_C@_0O@HFECNAJH@Instruction?3?5?$AA@"
	.globl	"??_C@_0O@HFECNAJH@Instruction?3?5?$AA@" # @"??_C@_0O@HFECNAJH@Instruction?3?5?$AA@"
"??_C@_0O@HFECNAJH@Instruction?3?5?$AA@":
	.asciz	"Instruction: "

	.section	.bss,"bw",discard,"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.globl	"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A" # @"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.p2align	2
"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A":
	.zero	4

	.section	.bss,"bw",discard,"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.globl	"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A" # @"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.p2align	2
"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A":
	.zero	4

	.section	.bss,"bw",discard,"?id@?$numpunct@D@std@@2V0locale@2@A"
	.globl	"?id@?$numpunct@D@std@@2V0locale@2@A" # @"?id@?$numpunct@D@std@@2V0locale@2@A"
	.p2align	2
"?id@?$numpunct@D@std@@2V0locale@2@A":
	.zero	4

	.section	.rdata,"dr",discard,"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
	.globl	"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@" # @"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@":
	.asciz	"string too long"

	.section	.data,"dw",discard,"??_R0?AVbad_array_new_length@std@@@8"
	.globl	"??_R0?AVbad_array_new_length@std@@@8" # @"??_R0?AVbad_array_new_length@std@@@8"
	.p2align	4
"??_R0?AVbad_array_new_length@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVbad_array_new_length@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0bad_array_new_length@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVbad_alloc@std@@@8"
	.globl	"??_R0?AVbad_alloc@std@@@8"     # @"??_R0?AVbad_alloc@std@@@8"
	.p2align	4
"??_R0?AVbad_alloc@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVbad_alloc@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12":
	.long	16                              # 0x10
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0bad_alloc@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
	.globl	"??_R0?AVexception@std@@@8"     # @"??_R0?AVexception@std@@@8"
	.p2align	4
"??_R0?AVexception@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVexception@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVexception@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0exception@std@@QAE@ABV01@@Z"

	.section	.xdata,"dr",discard,"__CTA3?AVbad_array_new_length@std@@"
	.globl	"__CTA3?AVbad_array_new_length@std@@" # @"_CTA3?AVbad_array_new_length@std@@"
	.p2align	2
"__CTA3?AVbad_array_new_length@std@@":
	.long	3                               # 0x3
	.long	"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"

	.section	.xdata,"dr",discard,"__TI3?AVbad_array_new_length@std@@"
	.globl	"__TI3?AVbad_array_new_length@std@@" # @"_TI3?AVbad_array_new_length@std@@"
	.p2align	2
"__TI3?AVbad_array_new_length@std@@":
	.long	0                               # 0x0
	.long	"??1exception@std@@UAE@XZ"
	.long	0
	.long	"__CTA3?AVbad_array_new_length@std@@"

	.section	.rdata,"dr",discard,"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
	.globl	"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@" # @"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@":
	.asciz	"bad array new length"

	.section	.rdata,"dr",largest,"??_7bad_array_new_length@std@@6B@"
	.p2align	2                               # @0
L___unnamed_1:
	.long	"??_R4bad_array_new_length@std@@6B@"
	.long	"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_array_new_length@std@@6B@"
	.globl	"??_R4bad_array_new_length@std@@6B@" # @"??_R4bad_array_new_length@std@@6B@"
	.p2align	4
"??_R4bad_array_new_length@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	"??_R3bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R3bad_array_new_length@std@@8"
	.globl	"??_R3bad_array_new_length@std@@8" # @"??_R3bad_array_new_length@std@@8"
	.p2align	2
"??_R3bad_array_new_length@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	"??_R2bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R2bad_array_new_length@std@@8"
	.globl	"??_R2bad_array_new_length@std@@8" # @"??_R2bad_array_new_length@std@@8"
	.p2align	2
"??_R2bad_array_new_length@std@@8":
	.long	"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.long	"??_R1A@?0A@EA@bad_alloc@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.globl	"??_R1A@?0A@EA@bad_array_new_length@std@@8" # @"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_array_new_length@std@@8":
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_alloc@std@@8"
	.globl	"??_R1A@?0A@EA@bad_alloc@std@@8" # @"??_R1A@?0A@EA@bad_alloc@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_alloc@std@@8":
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3bad_alloc@std@@8"

	.section	.rdata,"dr",discard,"??_R3bad_alloc@std@@8"
	.globl	"??_R3bad_alloc@std@@8"         # @"??_R3bad_alloc@std@@8"
	.p2align	2
"??_R3bad_alloc@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2bad_alloc@std@@8"

	.section	.rdata,"dr",discard,"??_R2bad_alloc@std@@8"
	.globl	"??_R2bad_alloc@std@@8"         # @"??_R2bad_alloc@std@@8"
	.p2align	2
"??_R2bad_alloc@std@@8":
	.long	"??_R1A@?0A@EA@bad_alloc@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
	.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3exception@std@@8"

	.section	.rdata,"dr",discard,"??_R3exception@std@@8"
	.globl	"??_R3exception@std@@8"         # @"??_R3exception@std@@8"
	.p2align	2
"??_R3exception@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2exception@std@@8"

	.section	.rdata,"dr",discard,"??_R2exception@std@@8"
	.globl	"??_R2exception@std@@8"         # @"??_R2exception@std@@8"
	.p2align	2
"??_R2exception@std@@8":
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",largest,"??_7bad_alloc@std@@6B@"
	.p2align	2                               # @1
L___unnamed_2:
	.long	"??_R4bad_alloc@std@@6B@"
	.long	"??_Gbad_alloc@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_alloc@std@@6B@"
	.globl	"??_R4bad_alloc@std@@6B@"       # @"??_R4bad_alloc@std@@6B@"
	.p2align	4
"??_R4bad_alloc@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	"??_R3bad_alloc@std@@8"

	.section	.rdata,"dr",largest,"??_7exception@std@@6B@"
	.p2align	2                               # @2
L___unnamed_3:
	.long	"??_R4exception@std@@6B@"
	.long	"??_Gexception@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
	.globl	"??_R4exception@std@@6B@"       # @"??_R4exception@std@@6B@"
	.p2align	4
"??_R4exception@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVexception@std@@@8"
	.long	"??_R3exception@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
	.asciz	"Unknown exception"

	.section	.rdata,"dr",largest,"??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	2                               # @3
L___unnamed_4:
	.long	"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"

	.section	.rdata,"dr",discard,"??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@"
	.globl	"??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@" # @"??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@"
	.p2align	2
"??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@":
	.long	0                               # 0x0
	.long	112                             # 0x70

	.section	.rdata,"dr",discard,"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	112                             # 0x70
	.long	4                               # 0x4
	.long	"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	5                               # 0x5
	.long	"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@A@3EA@ios_base@std@@8"
	.long	"??_R17A@3EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_istream@DU?$char_traits@D@std@@@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@A@3EA@ios_base@std@@8"
	.long	"??_R17A@3EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	80                              # 0x50
	.long	"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_ios@DU?$char_traits@D@std@@@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@?0A@EA@ios_base@std@@8"
	.long	"??_R17?0A@EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@ios_base@std@@8"
	.globl	"??_R1A@?0A@EA@ios_base@std@@8" # @"??_R1A@?0A@EA@ios_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@ios_base@std@@8":
	.long	"??_R0?AVios_base@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3ios_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AVios_base@std@@@8"
	.globl	"??_R0?AVios_base@std@@@8"      # @"??_R0?AVios_base@std@@@8"
	.p2align	4
"??_R0?AVios_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVios_base@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3ios_base@std@@8"
	.globl	"??_R3ios_base@std@@8"          # @"??_R3ios_base@std@@8"
	.p2align	2
"??_R3ios_base@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2ios_base@std@@8"
	.globl	"??_R2ios_base@std@@8"          # @"??_R2ios_base@std@@8"
	.p2align	2
"??_R2ios_base@std@@8":
	.long	"??_R1A@?0A@EA@ios_base@std@@8"
	.long	"??_R17?0A@EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R17?0A@EA@?$_Iosb@H@std@@8"
	.globl	"??_R17?0A@EA@?$_Iosb@H@std@@8" # @"??_R17?0A@EA@?$_Iosb@H@std@@8"
	.p2align	4
"??_R17?0A@EA@?$_Iosb@H@std@@8":
	.long	"??_R0?AV?$_Iosb@H@std@@@8"
	.long	0                               # 0x0
	.long	8                               # 0x8
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$_Iosb@H@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$_Iosb@H@std@@@8"
	.globl	"??_R0?AV?$_Iosb@H@std@@@8"     # @"??_R0?AV?$_Iosb@H@std@@@8"
	.p2align	4
"??_R0?AV?$_Iosb@H@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$_Iosb@H@std@@"

	.section	.rdata,"dr",discard,"??_R3?$_Iosb@H@std@@8"
	.globl	"??_R3?$_Iosb@H@std@@8"         # @"??_R3?$_Iosb@H@std@@8"
	.p2align	2
"??_R3?$_Iosb@H@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2?$_Iosb@H@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$_Iosb@H@std@@8"
	.globl	"??_R2?$_Iosb@H@std@@8"         # @"??_R2?$_Iosb@H@std@@8"
	.p2align	2
"??_R2?$_Iosb@H@std@@8":
	.long	"??_R1A@?0A@EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$_Iosb@H@std@@8"
	.globl	"??_R1A@?0A@EA@?$_Iosb@H@std@@8" # @"??_R1A@?0A@EA@?$_Iosb@H@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$_Iosb@H@std@@8":
	.long	"??_R0?AV?$_Iosb@H@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$_Iosb@H@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@A@3EA@ios_base@std@@8"
	.globl	"??_R1A@A@3EA@ios_base@std@@8"  # @"??_R1A@A@3EA@ios_base@std@@8"
	.p2align	4
"??_R1A@A@3EA@ios_base@std@@8":
	.long	"??_R0?AVios_base@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	64                              # 0x40
	.long	"??_R3ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R17A@3EA@?$_Iosb@H@std@@8"
	.globl	"??_R17A@3EA@?$_Iosb@H@std@@8"  # @"??_R17A@3EA@?$_Iosb@H@std@@8"
	.p2align	4
"??_R17A@3EA@?$_Iosb@H@std@@8":
	.long	"??_R0?AV?$_Iosb@H@std@@@8"
	.long	0                               # 0x0
	.long	8                               # 0x8
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	64                              # 0x40
	.long	"??_R3?$_Iosb@H@std@@8"

	.section	.rdata,"dr",largest,"??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4                               # @4
L___unnamed_5:
	.long	"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.long	"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.long	"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.long	"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.long	"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.long	"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ"
	.long	"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
	.long	"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
	.long	"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
	.long	"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
	.long	"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z"
	.long	"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"

	.section	.rdata,"dr",discard,"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@"

	.section	.rdata,"dr",discard,"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.long	0

	.section	.bss,"bw",discard,"?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"
	.globl	"?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A" # @"?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"
	.p2align	2
"?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A":
	.zero	8

	.section	.rdata,"dr",largest,"??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4                               # @5
L___unnamed_6:
	.long	"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.long	"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.long	"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.long	"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.long	"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.long	"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ"
	.long	"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
	.long	"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
	.long	"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
	.long	"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
	.long	"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z"
	.long	"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"

	.section	.rdata,"dr",discard,"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"
	.globl	"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@" # @"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"
"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@":
	.asciz	"invalid string position"

	.section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B"
	.globl	"?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B" # @"?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B"
	.p2align	2
"?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B":
	.long	0

	.section	.rdata,"dr",discard,"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"
	.globl	"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@" # @"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"
"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@":
	.asciz	"bad locale name"

	.section	.rdata,"dr",largest,"??_7?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.p2align	4                               # @6
L___unnamed_7:
	.long	"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.long	"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ"
	.long	"?do_max_length@codecvt_base@std@@MBEHXZ"
	.long	"?do_encoding@codecvt_base@std@@MBEHXZ"
	.long	"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
	.long	"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
	.long	"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z"
	.long	"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z"

	.section	.rdata,"dr",discard,"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.globl	"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@" # @"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.p2align	4
"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.long	"??_R3?$codecvt@DDU_Mbstatet@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.globl	"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8" # @"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.p2align	4
"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$codecvt@DDU_Mbstatet@@@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3?$codecvt@DDU_Mbstatet@@@std@@8"
	.globl	"??_R3?$codecvt@DDU_Mbstatet@@@std@@8" # @"??_R3?$codecvt@DDU_Mbstatet@@@std@@8"
	.p2align	2
"??_R3?$codecvt@DDU_Mbstatet@@@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	5                               # 0x5
	.long	"??_R2?$codecvt@DDU_Mbstatet@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$codecvt@DDU_Mbstatet@@@std@@8"
	.globl	"??_R2?$codecvt@DDU_Mbstatet@@@std@@8" # @"??_R2?$codecvt@DDU_Mbstatet@@@std@@8"
	.p2align	4
"??_R2?$codecvt@DDU_Mbstatet@@@std@@8":
	.long	"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8"
	.long	"??_R1A@?0A@EA@codecvt_base@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8" # @"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8":
	.long	"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$codecvt@DDU_Mbstatet@@@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@codecvt_base@std@@8"
	.globl	"??_R1A@?0A@EA@codecvt_base@std@@8" # @"??_R1A@?0A@EA@codecvt_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@codecvt_base@std@@8":
	.long	"??_R0?AVcodecvt_base@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3codecvt_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AVcodecvt_base@std@@@8"
	.globl	"??_R0?AVcodecvt_base@std@@@8"  # @"??_R0?AVcodecvt_base@std@@@8"
	.p2align	4
"??_R0?AVcodecvt_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVcodecvt_base@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3codecvt_base@std@@8"
	.globl	"??_R3codecvt_base@std@@8"      # @"??_R3codecvt_base@std@@8"
	.p2align	2
"??_R3codecvt_base@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	4                               # 0x4
	.long	"??_R2codecvt_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2codecvt_base@std@@8"
	.globl	"??_R2codecvt_base@std@@8"      # @"??_R2codecvt_base@std@@8"
	.p2align	4
"??_R2codecvt_base@std@@8":
	.long	"??_R1A@?0A@EA@codecvt_base@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@facet@locale@std@@8"
	.globl	"??_R1A@?0A@EA@facet@locale@std@@8" # @"??_R1A@?0A@EA@facet@locale@std@@8"
	.p2align	4
"??_R1A@?0A@EA@facet@locale@std@@8":
	.long	"??_R0?AVfacet@locale@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3facet@locale@std@@8"

	.section	.data,"dw",discard,"??_R0?AVfacet@locale@std@@@8"
	.globl	"??_R0?AVfacet@locale@std@@@8"  # @"??_R0?AVfacet@locale@std@@@8"
	.p2align	4
"??_R0?AVfacet@locale@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVfacet@locale@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3facet@locale@std@@8"
	.globl	"??_R3facet@locale@std@@8"      # @"??_R3facet@locale@std@@8"
	.p2align	2
"??_R3facet@locale@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	3                               # 0x3
	.long	"??_R2facet@locale@std@@8"

	.section	.rdata,"dr",discard,"??_R2facet@locale@std@@8"
	.globl	"??_R2facet@locale@std@@8"      # @"??_R2facet@locale@std@@8"
	.p2align	2
"??_R2facet@locale@std@@8":
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Facet_base@std@@8"
	.globl	"??_R1A@?0A@EA@_Facet_base@std@@8" # @"??_R1A@?0A@EA@_Facet_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@_Facet_base@std@@8":
	.long	"??_R0?AV_Facet_base@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_Facet_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AV_Facet_base@std@@@8"
	.globl	"??_R0?AV_Facet_base@std@@@8"   # @"??_R0?AV_Facet_base@std@@@8"
	.p2align	4
"??_R0?AV_Facet_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV_Facet_base@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3_Facet_base@std@@8"
	.globl	"??_R3_Facet_base@std@@8"       # @"??_R3_Facet_base@std@@8"
	.p2align	2
"??_R3_Facet_base@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2_Facet_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2_Facet_base@std@@8"
	.globl	"??_R2_Facet_base@std@@8"       # @"??_R2_Facet_base@std@@8"
	.p2align	2
"??_R2_Facet_base@std@@8":
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.globl	"??_R13?0A@EA@_Crt_new_delete@std@@8" # @"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.p2align	4
"??_R13?0A@EA@_Crt_new_delete@std@@8":
	.long	"??_R0?AU_Crt_new_delete@std@@@8"
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_Crt_new_delete@std@@8"

	.section	.data,"dw",discard,"??_R0?AU_Crt_new_delete@std@@@8"
	.globl	"??_R0?AU_Crt_new_delete@std@@@8" # @"??_R0?AU_Crt_new_delete@std@@@8"
	.p2align	4
"??_R0?AU_Crt_new_delete@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AU_Crt_new_delete@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3_Crt_new_delete@std@@8"
	.globl	"??_R3_Crt_new_delete@std@@8"   # @"??_R3_Crt_new_delete@std@@8"
	.p2align	2
"??_R3_Crt_new_delete@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2_Crt_new_delete@std@@8"

	.section	.rdata,"dr",discard,"??_R2_Crt_new_delete@std@@8"
	.globl	"??_R2_Crt_new_delete@std@@8"   # @"??_R2_Crt_new_delete@std@@8"
	.p2align	2
"??_R2_Crt_new_delete@std@@8":
	.long	"??_R1A@?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Crt_new_delete@std@@8"
	.globl	"??_R1A@?0A@EA@_Crt_new_delete@std@@8" # @"??_R1A@?0A@EA@_Crt_new_delete@std@@8"
	.p2align	4
"??_R1A@?0A@EA@_Crt_new_delete@std@@8":
	.long	"??_R0?AU_Crt_new_delete@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_Crt_new_delete@std@@8"

	.section	.rdata,"dr",largest,"??_7codecvt_base@std@@6B@"
	.p2align	4                               # @7
L___unnamed_8:
	.long	"??_R4codecvt_base@std@@6B@"
	.long	"??_Gcodecvt_base@std@@UAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_always_noconv@codecvt_base@std@@MBE_NXZ"
	.long	"?do_max_length@codecvt_base@std@@MBEHXZ"
	.long	"?do_encoding@codecvt_base@std@@MBEHXZ"

	.section	.rdata,"dr",discard,"??_R4codecvt_base@std@@6B@"
	.globl	"??_R4codecvt_base@std@@6B@"    # @"??_R4codecvt_base@std@@6B@"
	.p2align	4
"??_R4codecvt_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVcodecvt_base@std@@@8"
	.long	"??_R3codecvt_base@std@@8"

	.section	.rdata,"dr",largest,"??_7facet@locale@std@@6B@"
	.p2align	2                               # @8
L___unnamed_9:
	.long	"??_R4facet@locale@std@@6B@"
	.long	"??_Gfacet@locale@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"

	.section	.rdata,"dr",discard,"??_R4facet@locale@std@@6B@"
	.globl	"??_R4facet@locale@std@@6B@"    # @"??_R4facet@locale@std@@6B@"
	.p2align	4
"??_R4facet@locale@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVfacet@locale@std@@@8"
	.long	"??_R3facet@locale@std@@8"

	.section	.rdata,"dr",largest,"??_7_Facet_base@std@@6B@"
	.p2align	2                               # @9
L___unnamed_10:
	.long	"??_R4_Facet_base@std@@6B@"
	.long	"??_G_Facet_base@std@@UAEPAXI@Z"
	.long	__purecall
	.long	__purecall

	.section	.rdata,"dr",discard,"??_R4_Facet_base@std@@6B@"
	.globl	"??_R4_Facet_base@std@@6B@"     # @"??_R4_Facet_base@std@@6B@"
	.p2align	4
"??_R4_Facet_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV_Facet_base@std@@@8"
	.long	"??_R3_Facet_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AVbad_cast@std@@@8"
	.globl	"??_R0?AVbad_cast@std@@@8"      # @"??_R0?AVbad_cast@std@@@8"
	.p2align	4
"??_R0?AVbad_cast@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVbad_cast@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVbad_cast@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0bad_cast@std@@QAE@ABV01@@Z"

	.section	.xdata,"dr",discard,"__CTA2?AVbad_cast@std@@"
	.globl	"__CTA2?AVbad_cast@std@@"       # @"_CTA2?AVbad_cast@std@@"
	.p2align	2
"__CTA2?AVbad_cast@std@@":
	.long	2                               # 0x2
	.long	"__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"

	.section	.xdata,"dr",discard,"__TI2?AVbad_cast@std@@"
	.globl	"__TI2?AVbad_cast@std@@"        # @"_TI2?AVbad_cast@std@@"
	.p2align	2
"__TI2?AVbad_cast@std@@":
	.long	0                               # 0x0
	.long	"??1exception@std@@UAE@XZ"
	.long	0
	.long	"__CTA2?AVbad_cast@std@@"

	.section	.rdata,"dr",discard,"??_C@_08EPJLHIJG@bad?5cast?$AA@"
	.globl	"??_C@_08EPJLHIJG@bad?5cast?$AA@" # @"??_C@_08EPJLHIJG@bad?5cast?$AA@"
"??_C@_08EPJLHIJG@bad?5cast?$AA@":
	.asciz	"bad cast"

	.section	.rdata,"dr",largest,"??_7bad_cast@std@@6B@"
	.p2align	2                               # @10
L___unnamed_11:
	.long	"??_R4bad_cast@std@@6B@"
	.long	"??_Gbad_cast@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_cast@std@@6B@"
	.globl	"??_R4bad_cast@std@@6B@"        # @"??_R4bad_cast@std@@6B@"
	.p2align	4
"??_R4bad_cast@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVbad_cast@std@@@8"
	.long	"??_R3bad_cast@std@@8"

	.section	.rdata,"dr",discard,"??_R3bad_cast@std@@8"
	.globl	"??_R3bad_cast@std@@8"          # @"??_R3bad_cast@std@@8"
	.p2align	2
"??_R3bad_cast@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2bad_cast@std@@8"

	.section	.rdata,"dr",discard,"??_R2bad_cast@std@@8"
	.globl	"??_R2bad_cast@std@@8"          # @"??_R2bad_cast@std@@8"
	.p2align	2
"??_R2bad_cast@std@@8":
	.long	"??_R1A@?0A@EA@bad_cast@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_cast@std@@8"
	.globl	"??_R1A@?0A@EA@bad_cast@std@@8" # @"??_R1A@?0A@EA@bad_cast@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_cast@std@@8":
	.long	"??_R0?AVbad_cast@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3bad_cast@std@@8"

	.section	.rdata,"dr",largest,"??_7ios_base@std@@6B@"
	.p2align	2                               # @11
L___unnamed_12:
	.long	"??_R4ios_base@std@@6B@"
	.long	"??_Gios_base@std@@UAEPAXI@Z"

	.section	.rdata,"dr",discard,"??_R4ios_base@std@@6B@"
	.globl	"??_R4ios_base@std@@6B@"        # @"??_R4ios_base@std@@6B@"
	.p2align	4
"??_R4ios_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVios_base@std@@@8"
	.long	"??_R3ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	.globl	"??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@" # @"??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
"??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@":
	.asciz	"deque<T> too long"

	.section	.rdata,"dr",largest,"??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	2                               # @12
L___unnamed_13:
	.long	"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",largest,"??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	2                               # @13
L___unnamed_14:
	.long	"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	24                              # 0x18
	.long	4                               # 0x4
	.long	"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	.globl	"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@" # @"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@":
	.asciz	"ios_base::badbit set"

	.section	.rdata,"dr",discard,"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	.globl	"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@" # @"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@":
	.asciz	"ios_base::failbit set"

	.section	.rdata,"dr",discard,"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	.globl	"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@" # @"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@":
	.asciz	"ios_base::eofbit set"

	.section	.data,"dw",discard,"??_R0?AVfailure@ios_base@std@@@8"
	.globl	"??_R0?AVfailure@ios_base@std@@@8" # @"??_R0?AVfailure@ios_base@std@@@8"
	.p2align	4
"??_R0?AVfailure@ios_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVfailure@ios_base@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20"
	.globl	"__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20" # @"_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20"
	.p2align	4
"__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20":
	.long	0                               # 0x0
	.long	"??_R0?AVfailure@ios_base@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	20                              # 0x14
	.long	"??0failure@ios_base@std@@QAE@ABV012@@Z"

	.section	.data,"dw",discard,"??_R0?AVsystem_error@std@@@8"
	.globl	"??_R0?AVsystem_error@std@@@8"  # @"??_R0?AVsystem_error@std@@@8"
	.p2align	4
"??_R0?AVsystem_error@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVsystem_error@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20"
	.globl	"__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20" # @"_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20"
	.p2align	4
"__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20":
	.long	0                               # 0x0
	.long	"??_R0?AVsystem_error@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	20                              # 0x14
	.long	"??0system_error@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AV_System_error@std@@@8"
	.globl	"??_R0?AV_System_error@std@@@8" # @"??_R0?AV_System_error@std@@@8"
	.p2align	4
"??_R0?AV_System_error@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV_System_error@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20"
	.globl	"__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20" # @"_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20"
	.p2align	4
"__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20":
	.long	0                               # 0x0
	.long	"??_R0?AV_System_error@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	20                              # 0x14
	.long	"??0_System_error@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVruntime_error@std@@@8"
	.globl	"??_R0?AVruntime_error@std@@@8" # @"??_R0?AVruntime_error@std@@@8"
	.p2align	4
"??_R0?AVruntime_error@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVruntime_error@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVruntime_error@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0runtime_error@std@@QAE@ABV01@@Z"

	.section	.xdata,"dr",discard,"__CTA5?AVfailure@ios_base@std@@"
	.globl	"__CTA5?AVfailure@ios_base@std@@" # @"_CTA5?AVfailure@ios_base@std@@"
	.p2align	4
"__CTA5?AVfailure@ios_base@std@@":
	.long	5                               # 0x5
	.long	"__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20"
	.long	"__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20"
	.long	"__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20"
	.long	"__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"

	.section	.xdata,"dr",discard,"__TI5?AVfailure@ios_base@std@@"
	.globl	"__TI5?AVfailure@ios_base@std@@" # @"_TI5?AVfailure@ios_base@std@@"
	.p2align	2
"__TI5?AVfailure@ios_base@std@@":
	.long	0                               # 0x0
	.long	"??1exception@std@@UAE@XZ"
	.long	0
	.long	"__CTA5?AVfailure@ios_base@std@@"

	.section	.bss,"bw",discard,"?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	.globl	"?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A" # @"?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	.p2align	2
"?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A":
	.zero	8

	.section	.rdata,"dr",largest,"??_7_Iostream_error_category2@std@@6B@"
	.p2align	4                               # @14
L___unnamed_15:
	.long	"??_R4_Iostream_error_category2@std@@6B@"
	.long	"??_G_Iostream_error_category2@std@@UAEPAXI@Z"
	.long	"?name@_Iostream_error_category2@std@@UBEPBDXZ"
	.long	"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
	.long	"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z"
	.long	"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z"
	.long	"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z"

	.section	.rdata,"dr",discard,"??_R4_Iostream_error_category2@std@@6B@"
	.globl	"??_R4_Iostream_error_category2@std@@6B@" # @"??_R4_Iostream_error_category2@std@@6B@"
	.p2align	4
"??_R4_Iostream_error_category2@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV_Iostream_error_category2@std@@@8"
	.long	"??_R3_Iostream_error_category2@std@@8"

	.section	.data,"dw",discard,"??_R0?AV_Iostream_error_category2@std@@@8"
	.globl	"??_R0?AV_Iostream_error_category2@std@@@8" # @"??_R0?AV_Iostream_error_category2@std@@@8"
	.p2align	4
"??_R0?AV_Iostream_error_category2@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV_Iostream_error_category2@std@@"

	.section	.rdata,"dr",discard,"??_R3_Iostream_error_category2@std@@8"
	.globl	"??_R3_Iostream_error_category2@std@@8" # @"??_R3_Iostream_error_category2@std@@8"
	.p2align	2
"??_R3_Iostream_error_category2@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2_Iostream_error_category2@std@@8"

	.section	.rdata,"dr",discard,"??_R2_Iostream_error_category2@std@@8"
	.globl	"??_R2_Iostream_error_category2@std@@8" # @"??_R2_Iostream_error_category2@std@@8"
	.p2align	2
"??_R2_Iostream_error_category2@std@@8":
	.long	"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
	.long	"??_R1A@?0A@EA@error_category@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
	.globl	"??_R1A@?0A@EA@_Iostream_error_category2@std@@8" # @"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
	.p2align	4
"??_R1A@?0A@EA@_Iostream_error_category2@std@@8":
	.long	"??_R0?AV_Iostream_error_category2@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_Iostream_error_category2@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@error_category@std@@8"
	.globl	"??_R1A@?0A@EA@error_category@std@@8" # @"??_R1A@?0A@EA@error_category@std@@8"
	.p2align	4
"??_R1A@?0A@EA@error_category@std@@8":
	.long	"??_R0?AVerror_category@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3error_category@std@@8"

	.section	.data,"dw",discard,"??_R0?AVerror_category@std@@@8"
	.globl	"??_R0?AVerror_category@std@@@8" # @"??_R0?AVerror_category@std@@@8"
	.p2align	4
"??_R0?AVerror_category@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVerror_category@std@@"
	.zero	3

	.section	.rdata,"dr",discard,"??_R3error_category@std@@8"
	.globl	"??_R3error_category@std@@8"    # @"??_R3error_category@std@@8"
	.p2align	2
"??_R3error_category@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2error_category@std@@8"

	.section	.rdata,"dr",discard,"??_R2error_category@std@@8"
	.globl	"??_R2error_category@std@@8"    # @"??_R2error_category@std@@8"
	.p2align	2
"??_R2error_category@std@@8":
	.long	"??_R1A@?0A@EA@error_category@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_C@_08LLGCOLLL@iostream?$AA@"
	.globl	"??_C@_08LLGCOLLL@iostream?$AA@" # @"??_C@_08LLGCOLLL@iostream?$AA@"
"??_C@_08LLGCOLLL@iostream?$AA@":
	.asciz	"iostream"

	.section	.rdata,"dr",discard,"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
	.globl	"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB" # @"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB":
	.asciz	"iostream stream error"

	.section	.rdata,"dr",largest,"??_7failure@ios_base@std@@6B@"
	.p2align	2                               # @15
L___unnamed_16:
	.long	"??_R4failure@ios_base@std@@6B@"
	.long	"??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4failure@ios_base@std@@6B@"
	.globl	"??_R4failure@ios_base@std@@6B@" # @"??_R4failure@ios_base@std@@6B@"
	.p2align	4
"??_R4failure@ios_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVfailure@ios_base@std@@@8"
	.long	"??_R3failure@ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R3failure@ios_base@std@@8"
	.globl	"??_R3failure@ios_base@std@@8"  # @"??_R3failure@ios_base@std@@8"
	.p2align	2
"??_R3failure@ios_base@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	5                               # 0x5
	.long	"??_R2failure@ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2failure@ios_base@std@@8"
	.globl	"??_R2failure@ios_base@std@@8"  # @"??_R2failure@ios_base@std@@8"
	.p2align	4
"??_R2failure@ios_base@std@@8":
	.long	"??_R1A@?0A@EA@failure@ios_base@std@@8"
	.long	"??_R1A@?0A@EA@system_error@std@@8"
	.long	"??_R1A@?0A@EA@_System_error@std@@8"
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@failure@ios_base@std@@8"
	.globl	"??_R1A@?0A@EA@failure@ios_base@std@@8" # @"??_R1A@?0A@EA@failure@ios_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@failure@ios_base@std@@8":
	.long	"??_R0?AVfailure@ios_base@std@@@8"
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3failure@ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@system_error@std@@8"
	.globl	"??_R1A@?0A@EA@system_error@std@@8" # @"??_R1A@?0A@EA@system_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@system_error@std@@8":
	.long	"??_R0?AVsystem_error@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3system_error@std@@8"

	.section	.rdata,"dr",discard,"??_R3system_error@std@@8"
	.globl	"??_R3system_error@std@@8"      # @"??_R3system_error@std@@8"
	.p2align	2
"??_R3system_error@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	"??_R2system_error@std@@8"

	.section	.rdata,"dr",discard,"??_R2system_error@std@@8"
	.globl	"??_R2system_error@std@@8"      # @"??_R2system_error@std@@8"
	.p2align	4
"??_R2system_error@std@@8":
	.long	"??_R1A@?0A@EA@system_error@std@@8"
	.long	"??_R1A@?0A@EA@_System_error@std@@8"
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@_System_error@std@@8"
	.globl	"??_R1A@?0A@EA@_System_error@std@@8" # @"??_R1A@?0A@EA@_System_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@_System_error@std@@8":
	.long	"??_R0?AV_System_error@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_System_error@std@@8"

	.section	.rdata,"dr",discard,"??_R3_System_error@std@@8"
	.globl	"??_R3_System_error@std@@8"     # @"??_R3_System_error@std@@8"
	.p2align	2
"??_R3_System_error@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	"??_R2_System_error@std@@8"

	.section	.rdata,"dr",discard,"??_R2_System_error@std@@8"
	.globl	"??_R2_System_error@std@@8"     # @"??_R2_System_error@std@@8"
	.p2align	2
"??_R2_System_error@std@@8":
	.long	"??_R1A@?0A@EA@_System_error@std@@8"
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@runtime_error@std@@8"
	.globl	"??_R1A@?0A@EA@runtime_error@std@@8" # @"??_R1A@?0A@EA@runtime_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@runtime_error@std@@8":
	.long	"??_R0?AVruntime_error@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3runtime_error@std@@8"

	.section	.rdata,"dr",discard,"??_R3runtime_error@std@@8"
	.globl	"??_R3runtime_error@std@@8"     # @"??_R3runtime_error@std@@8"
	.p2align	2
"??_R3runtime_error@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2runtime_error@std@@8"

	.section	.rdata,"dr",discard,"??_R2runtime_error@std@@8"
	.globl	"??_R2runtime_error@std@@8"     # @"??_R2runtime_error@std@@8"
	.p2align	2
"??_R2runtime_error@std@@8":
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",largest,"??_7system_error@std@@6B@"
	.p2align	2                               # @16
L___unnamed_17:
	.long	"??_R4system_error@std@@6B@"
	.long	"??_Gsystem_error@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4system_error@std@@6B@"
	.globl	"??_R4system_error@std@@6B@"    # @"??_R4system_error@std@@6B@"
	.p2align	4
"??_R4system_error@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVsystem_error@std@@@8"
	.long	"??_R3system_error@std@@8"

	.section	.rdata,"dr",largest,"??_7_System_error@std@@6B@"
	.p2align	2                               # @17
L___unnamed_18:
	.long	"??_R4_System_error@std@@6B@"
	.long	"??_G_System_error@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4_System_error@std@@6B@"
	.globl	"??_R4_System_error@std@@6B@"   # @"??_R4_System_error@std@@6B@"
	.p2align	4
"??_R4_System_error@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV_System_error@std@@@8"
	.long	"??_R3_System_error@std@@8"

	.section	.rdata,"dr",discard,"??_C@_02LMMGGCAJ@?3?5?$AA@"
	.globl	"??_C@_02LMMGGCAJ@?3?5?$AA@"    # @"??_C@_02LMMGGCAJ@?3?5?$AA@"
"??_C@_02LMMGGCAJ@?3?5?$AA@":
	.asciz	": "

	.section	.rdata,"dr",largest,"??_7runtime_error@std@@6B@"
	.p2align	2                               # @18
L___unnamed_19:
	.long	"??_R4runtime_error@std@@6B@"
	.long	"??_Gruntime_error@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4runtime_error@std@@6B@"
	.globl	"??_R4runtime_error@std@@6B@"   # @"??_R4runtime_error@std@@6B@"
	.p2align	4
"??_R4runtime_error@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVruntime_error@std@@@8"
	.long	"??_R3runtime_error@std@@8"

	.section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B"
	.globl	"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B" # @"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B"
	.p2align	2
"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B":
	.long	0

	.section	.rdata,"dr",largest,"??_7?$ctype@D@std@@6B@"
	.p2align	4                               # @19
L___unnamed_20:
	.long	"??_R4?$ctype@D@std@@6B@"
	.long	"??_G?$ctype@D@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z"
	.long	"?do_tolower@?$ctype@D@std@@MBEDD@Z"
	.long	"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z"
	.long	"?do_toupper@?$ctype@D@std@@MBEDD@Z"
	.long	"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z"
	.long	"?do_widen@?$ctype@D@std@@MBEDD@Z"
	.long	"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z"
	.long	"?do_narrow@?$ctype@D@std@@MBEDDD@Z"

	.section	.rdata,"dr",discard,"??_R4?$ctype@D@std@@6B@"
	.globl	"??_R4?$ctype@D@std@@6B@"       # @"??_R4?$ctype@D@std@@6B@"
	.p2align	4
"??_R4?$ctype@D@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$ctype@D@std@@@8"
	.long	"??_R3?$ctype@D@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$ctype@D@std@@@8"
	.globl	"??_R0?AV?$ctype@D@std@@@8"     # @"??_R0?AV?$ctype@D@std@@@8"
	.p2align	4
"??_R0?AV?$ctype@D@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$ctype@D@std@@"

	.section	.rdata,"dr",discard,"??_R3?$ctype@D@std@@8"
	.globl	"??_R3?$ctype@D@std@@8"         # @"??_R3?$ctype@D@std@@8"
	.p2align	2
"??_R3?$ctype@D@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	5                               # 0x5
	.long	"??_R2?$ctype@D@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$ctype@D@std@@8"
	.globl	"??_R2?$ctype@D@std@@8"         # @"??_R2?$ctype@D@std@@8"
	.p2align	4
"??_R2?$ctype@D@std@@8":
	.long	"??_R1A@?0A@EA@?$ctype@D@std@@8"
	.long	"??_R1A@?0A@EA@ctype_base@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$ctype@D@std@@8"
	.globl	"??_R1A@?0A@EA@?$ctype@D@std@@8" # @"??_R1A@?0A@EA@?$ctype@D@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$ctype@D@std@@8":
	.long	"??_R0?AV?$ctype@D@std@@@8"
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$ctype@D@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@ctype_base@std@@8"
	.globl	"??_R1A@?0A@EA@ctype_base@std@@8" # @"??_R1A@?0A@EA@ctype_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@ctype_base@std@@8":
	.long	"??_R0?AUctype_base@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3ctype_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AUctype_base@std@@@8"
	.globl	"??_R0?AUctype_base@std@@@8"    # @"??_R0?AUctype_base@std@@@8"
	.p2align	4
"??_R0?AUctype_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AUctype_base@std@@"
	.zero	3

	.section	.rdata,"dr",discard,"??_R3ctype_base@std@@8"
	.globl	"??_R3ctype_base@std@@8"        # @"??_R3ctype_base@std@@8"
	.p2align	2
"??_R3ctype_base@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	4                               # 0x4
	.long	"??_R2ctype_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2ctype_base@std@@8"
	.globl	"??_R2ctype_base@std@@8"        # @"??_R2ctype_base@std@@8"
	.p2align	4
"??_R2ctype_base@std@@8":
	.long	"??_R1A@?0A@EA@ctype_base@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",largest,"??_7ctype_base@std@@6B@"
	.p2align	2                               # @20
L___unnamed_21:
	.long	"??_R4ctype_base@std@@6B@"
	.long	"??_Gctype_base@std@@UAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"

	.section	.rdata,"dr",discard,"??_R4ctype_base@std@@6B@"
	.globl	"??_R4ctype_base@std@@6B@"      # @"??_R4ctype_base@std@@6B@"
	.p2align	4
"??_R4ctype_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AUctype_base@std@@@8"
	.long	"??_R3ctype_base@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
	.globl	"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@" # @"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@":
	.asciz	"vector too long"

	.section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B"
	.globl	"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B" # @"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B"
	.p2align	2
"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B":
	.long	0

	.section	.rdata,"dr",largest,"??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.p2align	4                               # @21
L___unnamed_22:
	.long	"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.long	"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"

	.section	.rdata,"dr",discard,"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.globl	"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@" # @"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.p2align	4
"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.long	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.globl	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8" # @"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.globl	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.p2align	2
"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	4                               # 0x4
	.long	"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.globl	"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.p2align	4
"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
	.long	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_C@_02BBAHNLBA@?$CFp?$AA@"
	.globl	"??_C@_02BBAHNLBA@?$CFp?$AA@"   # @"??_C@_02BBAHNLBA@?$CFp?$AA@"
"??_C@_02BBAHNLBA@?$CFp?$AA@":
	.asciz	"%p"

	.section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B"
	.globl	"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B" # @"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B"
	.p2align	2
"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B":
	.long	0

	.section	.rdata,"dr",largest,"??_7?$numpunct@D@std@@6B@"
	.p2align	4                               # @22
L___unnamed_23:
	.long	"??_R4?$numpunct@D@std@@6B@"
	.long	"??_G?$numpunct@D@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_decimal_point@?$numpunct@D@std@@MBEDXZ"
	.long	"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ"
	.long	"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.long	"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.long	"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"

	.section	.rdata,"dr",discard,"??_R4?$numpunct@D@std@@6B@"
	.globl	"??_R4?$numpunct@D@std@@6B@"    # @"??_R4?$numpunct@D@std@@6B@"
	.p2align	4
"??_R4?$numpunct@D@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$numpunct@D@std@@@8"
	.long	"??_R3?$numpunct@D@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$numpunct@D@std@@@8"
	.globl	"??_R0?AV?$numpunct@D@std@@@8"  # @"??_R0?AV?$numpunct@D@std@@@8"
	.p2align	4
"??_R0?AV?$numpunct@D@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$numpunct@D@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3?$numpunct@D@std@@8"
	.globl	"??_R3?$numpunct@D@std@@8"      # @"??_R3?$numpunct@D@std@@8"
	.p2align	2
"??_R3?$numpunct@D@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	4                               # 0x4
	.long	"??_R2?$numpunct@D@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$numpunct@D@std@@8"
	.globl	"??_R2?$numpunct@D@std@@8"      # @"??_R2?$numpunct@D@std@@8"
	.p2align	4
"??_R2?$numpunct@D@std@@8":
	.long	"??_R1A@?0A@EA@?$numpunct@D@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$numpunct@D@std@@8"
	.globl	"??_R1A@?0A@EA@?$numpunct@D@std@@8" # @"??_R1A@?0A@EA@?$numpunct@D@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$numpunct@D@std@@8":
	.long	"??_R0?AV?$numpunct@D@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$numpunct@D@std@@8"

	.section	.bss,"bw",discard,"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.globl	"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA" # @"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.p2align	3
"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA":
	.quad	0                               # 0x0

	.section	.rdata,"dr",discard,"??_C@_02MDKMJEGG@eE?$AA@"
	.globl	"??_C@_02MDKMJEGG@eE?$AA@"      # @"??_C@_02MDKMJEGG@eE?$AA@"
"??_C@_02MDKMJEGG@eE?$AA@":
	.asciz	"eE"

	.section	.rdata,"dr",discard,"??_C@_02OOPEBDOJ@pP?$AA@"
	.globl	"??_C@_02OOPEBDOJ@pP?$AA@"      # @"??_C@_02OOPEBDOJ@pP?$AA@"
"??_C@_02OOPEBDOJ@pP?$AA@":
	.asciz	"pP"

	.section	.rdata,"dr",discard,"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"
	.globl	"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@" # @"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"
"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@":
	.asciz	"map/set too long"

	.section	.CRT$XCU,"dr",associative,"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.p2align	2
	.long	"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ"
	.section	.CRT$XCU,"dr",associative,"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.p2align	2
	.long	"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
	.section	.CRT$XCU,"dr",associative,"?id@?$numpunct@D@std@@2V0locale@2@A"
	.p2align	2
	.long	"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
	.section	.CRT$XCU,"dr"
	.p2align	2
	.long	__GLOBAL__sub_I_main.cpp
	.section	.drectve,"yn"
	.ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
	.ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=0\""
	.ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MT_StaticRelease\""
	.ascii	" /DEFAULTLIB:libcpmt.lib"
	.ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
	.ascii	" /DEFAULTLIB:uuid.lib"
	.ascii	" /DEFAULTLIB:uuid.lib"
	.safeseh	"___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	.safeseh	"___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	.safeseh	"___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.safeseh	"___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.safeseh	"___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.safeseh	"___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.safeseh	"___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	.safeseh	"___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.safeseh	"___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.safeseh	"___ehhandler$??__FpaletteNames@@YAXXZ"
	.safeseh	"___ehhandler$?read_palette_color@@YA?AUcolor@@E@Z"
	.safeseh	"___ehhandler$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.safeseh	"___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.safeseh	"___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.safeseh	___ehhandler$main
	.safeseh	"___ehhandler$??0fileInfo@@QAE@XZ"
	.safeseh	"___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.safeseh	"___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??1exception@std@@UAE@XZ"
	.safeseh	"___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.safeseh	"___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.safeseh	"___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.safeseh	"___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.safeseh	"___ehhandler$??0_Locinfo@std@@QAE@PBD@Z"
	.safeseh	"___ehhandler$??1_Locinfo@std@@QAE@XZ"
	.safeseh	"___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gios_base@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.safeseh	"___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.safeseh	"___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.safeseh	"___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.safeseh	"___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.safeseh	"___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.safeseh	"___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z"
	.safeseh	"___ehhandler$??0system_error@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0_System_error@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.safeseh	"___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.safeseh	"___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.safeseh	"___ehhandler$??_G_System_error@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.safeseh	"___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.safeseh	"___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.safeseh	"___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.safeseh	"___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.safeseh	"___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.safeseh	"___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.safeseh	"___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.safeseh	"___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.safeseh	"___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.safeseh	"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.safeseh	"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.safeseh	"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.safeseh	"___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.safeseh	"___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.safeseh	"___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.safeseh	"___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.safeseh	"___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.safeseh	"___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.safeseh	"___ehhandler$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
	.safeseh	"___ehhandler$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	.safeseh	"___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.safeseh	"___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.safeseh	"___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.safeseh	___ehhandler$_GLOBAL__sub_I_main.cpp
	.globl	"??_7bad_array_new_length@std@@6B@"
.set "??_7bad_array_new_length@std@@6B@", L___unnamed_1+4
	.globl	"??_7bad_alloc@std@@6B@"
.set "??_7bad_alloc@std@@6B@", L___unnamed_2+4
	.globl	"??_7exception@std@@6B@"
.set "??_7exception@std@@6B@", L___unnamed_3+4
	.globl	"??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_4+4
	.globl	"??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_5+4
	.globl	"??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_6+4
	.globl	"??_7?$codecvt@DDU_Mbstatet@@@std@@6B@"
.set "??_7?$codecvt@DDU_Mbstatet@@@std@@6B@", L___unnamed_7+4
	.globl	"??_7codecvt_base@std@@6B@"
.set "??_7codecvt_base@std@@6B@", L___unnamed_8+4
	.globl	"??_7facet@locale@std@@6B@"
.set "??_7facet@locale@std@@6B@", L___unnamed_9+4
	.globl	"??_7_Facet_base@std@@6B@"
.set "??_7_Facet_base@std@@6B@", L___unnamed_10+4
	.globl	"??_7bad_cast@std@@6B@"
.set "??_7bad_cast@std@@6B@", L___unnamed_11+4
	.globl	"??_7ios_base@std@@6B@"
.set "??_7ios_base@std@@6B@", L___unnamed_12+4
	.globl	"??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_13+4
	.globl	"??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_14+4
	.globl	"??_7_Iostream_error_category2@std@@6B@"
.set "??_7_Iostream_error_category2@std@@6B@", L___unnamed_15+4
	.globl	"??_7failure@ios_base@std@@6B@"
.set "??_7failure@ios_base@std@@6B@", L___unnamed_16+4
	.globl	"??_7system_error@std@@6B@"
.set "??_7system_error@std@@6B@", L___unnamed_17+4
	.globl	"??_7_System_error@std@@6B@"
.set "??_7_System_error@std@@6B@", L___unnamed_18+4
	.globl	"??_7runtime_error@std@@6B@"
.set "??_7runtime_error@std@@6B@", L___unnamed_19+4
	.globl	"??_7?$ctype@D@std@@6B@"
.set "??_7?$ctype@D@std@@6B@", L___unnamed_20+4
	.globl	"??_7ctype_base@std@@6B@"
.set "??_7ctype_base@std@@6B@", L___unnamed_21+4
	.globl	"??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
.set "??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@", L___unnamed_22+4
	.globl	"??_7?$numpunct@D@std@@6B@"
.set "??_7?$numpunct@D@std@@6B@", L___unnamed_23+4
	.ascii	" /INCLUDE:?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.ascii	" /INCLUDE:?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.ascii	" /INCLUDE:?id@?$numpunct@D@std@@2V0locale@2@A"
	.addrsig
	.addrsig_sym ___CxxFrameHandler3
	.addrsig_sym "??__FsupportedExtensions@@YAXXZ"
	.addrsig_sym "??__Fpalettes@@YAXXZ"
	.addrsig_sym "??__FpaletteNames@@YAXXZ"
	.addrsig_sym "??__Fchr2nib@@YAXXZ"
	.addrsig_sym "?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0101_raster_set_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ"
	.addrsig_sym "??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
	.addrsig_sym "??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
	.addrsig_sym __GLOBAL__sub_I_main.cpp
	.addrsig_sym "___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	.addrsig_sym "___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	.addrsig_sym "___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.addrsig_sym "___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.addrsig_sym "___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.addrsig_sym "___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.addrsig_sym "___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	.addrsig_sym "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.addrsig_sym "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.addrsig_sym "___ehhandler$??__FpaletteNames@@YAXXZ"
	.addrsig_sym "___ehhandler$?read_palette_color@@YA?AUcolor@@E@Z"
	.addrsig_sym "___ehhandler$?ext0101_raster_palette_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.addrsig_sym "___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym ___ehhandler$main
	.addrsig_sym "___ehhandler$??0fileInfo@@QAE@XZ"
	.addrsig_sym "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.addrsig_sym "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??1exception@std@@UAE@XZ"
	.addrsig_sym "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.addrsig_sym "___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.addrsig_sym "___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.addrsig_sym "___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.addrsig_sym "___ehhandler$??0_Locinfo@std@@QAE@PBD@Z"
	.addrsig_sym "___ehhandler$??1_Locinfo@std@@QAE@XZ"
	.addrsig_sym "___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gios_base@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.addrsig_sym "___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.addrsig_sym "___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.addrsig_sym "___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.addrsig_sym "___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.addrsig_sym "___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.addrsig_sym "___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z"
	.addrsig_sym "___ehhandler$??0system_error@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0_System_error@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.addrsig_sym "___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.addrsig_sym "___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.addrsig_sym "___ehhandler$??_G_System_error@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.addrsig_sym "___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.addrsig_sym "___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.addrsig_sym "___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.addrsig_sym "___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.addrsig_sym "___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.addrsig_sym "___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.addrsig_sym "___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.addrsig_sym "___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.addrsig_sym "___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.addrsig_sym "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.addrsig_sym "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.addrsig_sym "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.addrsig_sym "___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.addrsig_sym "___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.addrsig_sym "___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.addrsig_sym "___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.addrsig_sym "___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.addrsig_sym "___ehhandler$?_Tidy@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXXZ"
	.addrsig_sym "___ehhandler$?_Growmap@?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@AAEXI@Z"
	.addrsig_sym "___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.addrsig_sym "___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.addrsig_sym "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.addrsig_sym ___ehhandler$_GLOBAL__sub_I_main.cpp
	.addrsig_sym "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	.addrsig_sym "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	.addrsig_sym "?palettes@@3V?$deque@PAY0IAA@$$CBEV?$allocator@PAY0IAA@$$CBE@std@@@std@@A"
	.addrsig_sym "?paletteNames@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A"
	.addrsig_sym "?chr2nib@@3V?$map@EEU?$less@E@std@@V?$allocator@U?$pair@$$CBEE@std@@@2@@std@@A"
	.addrsig_sym _atari_8_bit_family_gtia_hex
	.addrsig_sym _aurora_hex
	.addrsig_sym _duel_hex
	.addrsig_sym _hocus_pocus_hex
	.addrsig_sym _sonic_robo_blast_2_v22_hex
	.addrsig_sym _srb2_hex
	.addrsig_sym _uzebox_hex
	.addrsig_sym _windows_95_256_colours_hex
	.addrsig_sym "??_7type_info@@6B@"
	.addrsig_sym "??_R0?AVout_of_range@std@@@8"
	.addrsig_sym "?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.addrsig_sym "?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.addrsig_sym "?id@?$numpunct@D@std@@2V0locale@2@A"
	.addrsig_sym "??_R0?AVbad_array_new_length@std@@@8"
	.addrsig_sym "??_R0?AVbad_alloc@std@@@8"
	.addrsig_sym "??_R0?AVexception@std@@@8"
	.addrsig_sym "??_R4bad_array_new_length@std@@6B@"
	.addrsig_sym "??_R3bad_array_new_length@std@@8"
	.addrsig_sym "??_R2bad_array_new_length@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_alloc@std@@8"
	.addrsig_sym "??_R3bad_alloc@std@@8"
	.addrsig_sym "??_R2bad_alloc@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@exception@std@@8"
	.addrsig_sym "??_R3exception@std@@8"
	.addrsig_sym "??_R2exception@std@@8"
	.addrsig_sym "??_R4bad_alloc@std@@6B@"
	.addrsig_sym "??_R4exception@std@@6B@"
	.addrsig_sym "??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@ios_base@std@@8"
	.addrsig_sym "??_R0?AVios_base@std@@@8"
	.addrsig_sym "??_R3ios_base@std@@8"
	.addrsig_sym "??_R2ios_base@std@@8"
	.addrsig_sym "??_R17?0A@EA@?$_Iosb@H@std@@8"
	.addrsig_sym "??_R0?AV?$_Iosb@H@std@@@8"
	.addrsig_sym "??_R3?$_Iosb@H@std@@8"
	.addrsig_sym "??_R2?$_Iosb@H@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$_Iosb@H@std@@8"
	.addrsig_sym "??_R1A@A@3EA@ios_base@std@@8"
	.addrsig_sym "??_R17A@3EA@?$_Iosb@H@std@@8"
	.addrsig_sym "??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.addrsig_sym "??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.addrsig_sym "??_R3?$codecvt@DDU_Mbstatet@@@std@@8"
	.addrsig_sym "??_R2?$codecvt@DDU_Mbstatet@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@codecvt_base@std@@8"
	.addrsig_sym "??_R0?AVcodecvt_base@std@@@8"
	.addrsig_sym "??_R3codecvt_base@std@@8"
	.addrsig_sym "??_R2codecvt_base@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@facet@locale@std@@8"
	.addrsig_sym "??_R0?AVfacet@locale@std@@@8"
	.addrsig_sym "??_R3facet@locale@std@@8"
	.addrsig_sym "??_R2facet@locale@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@_Facet_base@std@@8"
	.addrsig_sym "??_R0?AV_Facet_base@std@@@8"
	.addrsig_sym "??_R3_Facet_base@std@@8"
	.addrsig_sym "??_R2_Facet_base@std@@8"
	.addrsig_sym "??_R13?0A@EA@_Crt_new_delete@std@@8"
	.addrsig_sym "??_R0?AU_Crt_new_delete@std@@@8"
	.addrsig_sym "??_R3_Crt_new_delete@std@@8"
	.addrsig_sym "??_R2_Crt_new_delete@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@_Crt_new_delete@std@@8"
	.addrsig_sym "??_R4codecvt_base@std@@6B@"
	.addrsig_sym "??_R4facet@locale@std@@6B@"
	.addrsig_sym "??_R4_Facet_base@std@@6B@"
	.addrsig_sym "??_R0?AVbad_cast@std@@@8"
	.addrsig_sym "??_R4bad_cast@std@@6B@"
	.addrsig_sym "??_R3bad_cast@std@@8"
	.addrsig_sym "??_R2bad_cast@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_cast@std@@8"
	.addrsig_sym "??_R4ios_base@std@@6B@"
	.addrsig_sym "??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R0?AVfailure@ios_base@std@@@8"
	.addrsig_sym "??_R0?AVsystem_error@std@@@8"
	.addrsig_sym "??_R0?AV_System_error@std@@@8"
	.addrsig_sym "??_R0?AVruntime_error@std@@@8"
	.addrsig_sym "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	.addrsig_sym "??_R4_Iostream_error_category2@std@@6B@"
	.addrsig_sym "??_R0?AV_Iostream_error_category2@std@@@8"
	.addrsig_sym "??_R3_Iostream_error_category2@std@@8"
	.addrsig_sym "??_R2_Iostream_error_category2@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@error_category@std@@8"
	.addrsig_sym "??_R0?AVerror_category@std@@@8"
	.addrsig_sym "??_R3error_category@std@@8"
	.addrsig_sym "??_R2error_category@std@@8"
	.addrsig_sym "?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
	.addrsig_sym "??_R4failure@ios_base@std@@6B@"
	.addrsig_sym "??_R3failure@ios_base@std@@8"
	.addrsig_sym "??_R2failure@ios_base@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@failure@ios_base@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@system_error@std@@8"
	.addrsig_sym "??_R3system_error@std@@8"
	.addrsig_sym "??_R2system_error@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@_System_error@std@@8"
	.addrsig_sym "??_R3_System_error@std@@8"
	.addrsig_sym "??_R2_System_error@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@runtime_error@std@@8"
	.addrsig_sym "??_R3runtime_error@std@@8"
	.addrsig_sym "??_R2runtime_error@std@@8"
	.addrsig_sym "??_R4system_error@std@@6B@"
	.addrsig_sym "??_R4_System_error@std@@6B@"
	.addrsig_sym "??_R4runtime_error@std@@6B@"
	.addrsig_sym "??_R4?$ctype@D@std@@6B@"
	.addrsig_sym "??_R0?AV?$ctype@D@std@@@8"
	.addrsig_sym "??_R3?$ctype@D@std@@8"
	.addrsig_sym "??_R2?$ctype@D@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$ctype@D@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@ctype_base@std@@8"
	.addrsig_sym "??_R0?AUctype_base@std@@@8"
	.addrsig_sym "??_R3ctype_base@std@@8"
	.addrsig_sym "??_R2ctype_base@std@@8"
	.addrsig_sym "??_R4ctype_base@std@@6B@"
	.addrsig_sym "??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.addrsig_sym "??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.addrsig_sym "??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.addrsig_sym "??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.addrsig_sym "??_R4?$numpunct@D@std@@6B@"
	.addrsig_sym "??_R0?AV?$numpunct@D@std@@@8"
	.addrsig_sym "??_R3?$numpunct@D@std@@8"
	.addrsig_sym "??_R2?$numpunct@D@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$numpunct@D@std@@8"
	.addrsig_sym "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.globl	__fltused
