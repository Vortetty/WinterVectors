	.text
	.def	 @feat.00;
	.scl	3;
	.type	0;
	.endef
	.globl	@feat.00
.set @feat.00, 1
	.intel_syntax noprefix
	.file	"main.cpp"
	.def	 "?concolor_setup@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?concolor_setup@@YAXXZ"        # -- Begin function ?concolor_setup@@YAXXZ
	.p2align	4, 0x90
"?concolor_setup@@YAXXZ":               # @"?concolor_setup@@YAXXZ"
# %bb.0:
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [__imp__GetStdHandle@4]
	mov	dword ptr [esp], 0
	push	-11
	call	esi
	mov	ecx, esp
	push	ecx
	push	eax
	call	dword ptr [__imp__GetConsoleMode@8]
	mov	edi, dword ptr [esp]
	or	edi, 4
	mov	dword ptr [esp], edi
	push	-11
	call	esi
	push	edi
	push	eax
	call	dword ptr [__imp__SetConsoleMode@8]
	add	esp, 4
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z" # -- Begin function ?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z
	.p2align	4, 0x90
"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z": # @"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
Lfunc_begin0:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 236
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	movzx	ebx, byte ptr [ebp + 20]
	lea	eax, [ebp - 24]
	lea	edi, [ebp - 227]
	xor	esi, esi
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	.p2align	4, 0x90
LBB1_1:                                 # =>This Inner Loop Header: Depth=1
	mov	eax, ebx
	mov	ecx, -858993459
	inc	esi
	mul	ecx
	mov	ecx, ebx
	shr	edx, 3
	lea	eax, [edx + edx]
	lea	eax, [eax + 4*eax]
	sub	ecx, eax
	or	cl, 48
	mov	byte ptr [edi - 1], cl
	dec	edi
	cmp	ebx, 9
	mov	ebx, edx
	ja	LBB1_1
# %bb.2:
	test	esi, esi
	mov	dword ptr [ebp - 204], 15
	mov	dword ptr [ebp - 208], 0
	mov	byte ptr [ebp - 224], 0
	je	LBB1_6
# %bb.3:
	cmp	esi, 15
	jbe	LBB1_4
# %bb.5:
	mov	dword ptr [ebp - 16], -1
	sub	esp, 12
	mov	al, byte ptr [ebp - 200]
	lea	ecx, [ebp - 224]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB1_6
LBB1_4:
	mov	dword ptr [ebp - 208], esi
	lea	eax, [ebp - 224]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 224], 0
LBB1_6:
	movzx	ebx, byte ptr [ebp + 16]
	lea	edi, [ebp - 227]
	xor	esi, esi
	.p2align	4, 0x90
LBB1_7:                                 # =>This Inner Loop Header: Depth=1
	mov	eax, ebx
	mov	ecx, -858993459
	inc	esi
	mul	ecx
	mov	ecx, ebx
	shr	edx, 3
	lea	eax, [edx + edx]
	lea	eax, [eax + 4*eax]
	sub	ecx, eax
	or	cl, 48
	mov	byte ptr [edi - 1], cl
	dec	edi
	cmp	ebx, 9
	mov	ebx, edx
	ja	LBB1_7
# %bb.8:
	test	esi, esi
	mov	dword ptr [ebp - 156], 15
	mov	dword ptr [ebp - 160], 0
	mov	byte ptr [ebp - 176], 0
	je	LBB1_12
# %bb.9:
	cmp	esi, 15
	jbe	LBB1_10
# %bb.11:
	mov	dword ptr [ebp - 16], 8
	sub	esp, 12
	mov	al, byte ptr [ebp - 152]
	lea	ecx, [ebp - 176]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB1_12
LBB1_10:
	mov	dword ptr [ebp - 160], esi
	lea	eax, [ebp - 176]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 176], 0
LBB1_12:
	movzx	ebx, byte ptr [ebp + 12]
	lea	edi, [ebp - 227]
	xor	esi, esi
	.p2align	4, 0x90
LBB1_13:                                # =>This Inner Loop Header: Depth=1
	mov	eax, ebx
	mov	ecx, -858993459
	inc	esi
	mul	ecx
	mov	ecx, ebx
	shr	edx, 3
	lea	eax, [edx + edx]
	lea	eax, [eax + 4*eax]
	sub	ecx, eax
	or	cl, 48
	mov	byte ptr [edi - 1], cl
	dec	edi
	cmp	ebx, 9
	mov	ebx, edx
	ja	LBB1_13
# %bb.14:
	test	esi, esi
	mov	dword ptr [ebp - 36], 15
	mov	dword ptr [ebp - 40], 0
	mov	byte ptr [ebp - 56], 0
	je	LBB1_15
# %bb.16:
	cmp	esi, 15
	jbe	LBB1_17
# %bb.18:
	mov	dword ptr [ebp - 16], 9
	sub	esp, 12
	mov	al, byte ptr [ebp - 32]
	lea	ecx, [ebp - 56]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB1_19
LBB1_15:
	xor	eax, eax
	mov	ecx, 15
	mov	edx, ecx
	sub	edx, eax
	cmp	edx, 7
	jb	LBB1_29
LBB1_21:
	lea	edx, [eax + 7]
	cmp	ecx, 15
	mov	dword ptr [ebp - 40], edx
	jbe	LBB1_22
# %bb.23:
	mov	edi, dword ptr [ebp - 56]
	cmp	edi, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"+7
	mov	ebx, 7
	jb	LBB1_25
	jmp	LBB1_28
LBB1_17:
	mov	dword ptr [ebp - 40], esi
	lea	eax, [ebp - 56]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 56], 0
LBB1_19:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [ebp - 36]
	mov	edx, ecx
	sub	edx, eax
	cmp	edx, 7
	jae	LBB1_21
LBB1_29:
	mov	dword ptr [ebp - 16], 10
	sub	esp, 20
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 56]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 16], 7
	mov	dword ptr [esp + 12], offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp], 7
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
# %bb.30:
	mov	esi, eax
	jmp	LBB1_31
LBB1_22:
	lea	edi, [ebp - 56]
	cmp	edi, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"+7
	mov	ebx, 7
	jae	LBB1_28
LBB1_25:
	lea	ecx, [edi + eax]
	mov	ebx, 7
	cmp	ecx, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	jb	LBB1_28
# %bb.26:
	xor	ebx, ebx
	cmp	edi, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	jbe	LBB1_28
# %bb.27:
	mov	ecx, offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	mov	ebx, edi
	sub	ebx, ecx
LBB1_28:
	lea	esi, [ebp - 56]
	inc	eax
	lea	ecx, [edi + 7]
	push	eax
	push	edi
	push	ecx
	call	_memmove
	add	esp, 12
	push	ebx
	push	offset "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	push	edi
	call	_memcpy
	add	esp, 12
	mov	ecx, 7
	lea	eax, [ebx + "??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"+7]
	add	edi, ebx
	sub	ecx, ebx
	push	ecx
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12
LBB1_31:
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [esi + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [ebp - 80], xmm0
	movsd	qword ptr [ebp - 72], xmm1
	movsd	xmm0, qword ptr [esi + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 64], xmm0
	mov	dword ptr [esi + 16], 0
	mov	dword ptr [esi + 20], 15
	mov	byte ptr [esi], 0
	mov	ecx, dword ptr [ebp - 64]
	mov	edx, dword ptr [ebp - 60]
	cmp	edx, ecx
	jne	LBB1_32
# %bb.35:
	mov	dword ptr [ebp - 16], 11
	sub	esp, 16
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 80]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp + 8], offset "??_C@_01ICJEACDI@?$DL?$AA@"
	mov	dword ptr [esp], 1
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	jmp	LBB1_36
LBB1_32:
	lea	eax, [ebp - 80]
	lea	esi, [ecx + 1]
	cmp	edx, 15
	mov	edx, eax
	mov	dword ptr [ebp - 64], esi
	jbe	LBB1_34
# %bb.33:
	mov	edx, dword ptr [ebp - 80]
LBB1_34:
	mov	word ptr [edx + ecx], 59
	mov	dword ptr [ebp - 16], 12
LBB1_36:
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [ebp - 152], xmm0
	movsd	qword ptr [ebp - 144], xmm1
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 136], xmm0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 15
	mov	byte ptr [eax], 0
	mov	dword ptr [ebp - 16], 12
	sub	esp, 12
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 104]
	mov	byte ptr [esp], al
	lea	eax, [ebp - 176]
	mov	dword ptr [esp + 8], eax
	lea	eax, [ebp - 152]
	mov	dword ptr [esp + 4], eax
	call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z"
# %bb.37:
	mov	esi, dword ptr [ebp - 88]
	mov	ecx, dword ptr [ebp - 84]
	cmp	ecx, esi
	jne	LBB1_38
# %bb.41:
	mov	dword ptr [ebp - 16], 13
	sub	esp, 16
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 104]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp + 8], offset "??_C@_01ICJEACDI@?$DL?$AA@"
	mov	dword ptr [esp], 1
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	jmp	LBB1_42
LBB1_38:
	lea	eax, [ebp - 104]
	lea	edx, [esi + 1]
	cmp	ecx, 15
	mov	ecx, eax
	mov	dword ptr [ebp - 88], edx
	jbe	LBB1_40
# %bb.39:
	mov	ecx, dword ptr [ebp - 104]
LBB1_40:
	mov	word ptr [ecx + esi], 59
LBB1_42:
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [ebp - 200], xmm0
	movsd	qword ptr [ebp - 192], xmm1
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 184], xmm0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 15
	mov	byte ptr [eax], 0
	mov	dword ptr [ebp - 16], 14
	sub	esp, 12
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 128]
	mov	byte ptr [esp], al
	lea	eax, [ebp - 224]
	mov	dword ptr [esp + 8], eax
	lea	eax, [ebp - 200]
	mov	dword ptr [esp + 4], eax
	call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z"
# %bb.43:
	mov	esi, dword ptr [ebp - 112]
	mov	ecx, dword ptr [ebp - 108]
	cmp	ecx, esi
	jne	LBB1_44
# %bb.47:
	mov	dword ptr [ebp - 16], 15
	sub	esp, 16
	mov	al, byte ptr [ebp - 248]
	lea	ecx, [ebp - 128]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp + 8], offset "??_C@_01GOHFPIOK@m?$AA@"
	mov	dword ptr [esp], 1
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
# %bb.48:
	mov	edi, dword ptr [ebp + 8]
	jmp	LBB1_49
LBB1_44:
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 128]
	lea	edx, [esi + 1]
	cmp	ecx, 15
	mov	ecx, eax
	mov	dword ptr [ebp - 112], edx
	jbe	LBB1_46
# %bb.45:
	mov	ecx, dword ptr [ebp - 128]
LBB1_46:
	mov	word ptr [ecx + esi], 109
LBB1_49:
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [edi + 16], xmm0
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [edi + 8], xmm1
	movsd	qword ptr [edi], xmm0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 15
	mov	byte ptr [eax], 0
	mov	eax, dword ptr [ebp - 108]
	cmp	eax, 16
	jb	LBB1_57
# %bb.50:
	mov	ecx, dword ptr [ebp - 128]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_56
# %bb.51:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_52
# %bb.55:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_56:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_57:
	mov	eax, dword ptr [ebp - 180]
	mov	dword ptr [ebp - 112], 0
	mov	dword ptr [ebp - 108], 15
	mov	byte ptr [ebp - 128], 0
	cmp	eax, 16
	jb	LBB1_65
# %bb.58:
	mov	ecx, dword ptr [ebp - 200]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_64
# %bb.59:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_60
# %bb.63:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_64:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_65:
	mov	eax, dword ptr [ebp - 84]
	mov	dword ptr [ebp - 184], 0
	mov	dword ptr [ebp - 180], 15
	mov	byte ptr [ebp - 200], 0
	cmp	eax, 16
	jb	LBB1_73
# %bb.66:
	mov	ecx, dword ptr [ebp - 104]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_72
# %bb.67:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_68
# %bb.71:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_72:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_73:
	mov	eax, dword ptr [ebp - 132]
	mov	dword ptr [ebp - 88], 0
	mov	dword ptr [ebp - 84], 15
	mov	byte ptr [ebp - 104], 0
	cmp	eax, 16
	jb	LBB1_81
# %bb.74:
	mov	ecx, dword ptr [ebp - 152]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_80
# %bb.75:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_76
# %bb.79:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_80:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_81:
	mov	eax, dword ptr [ebp - 60]
	mov	dword ptr [ebp - 136], 0
	mov	dword ptr [ebp - 132], 15
	mov	byte ptr [ebp - 152], 0
	cmp	eax, 16
	jb	LBB1_89
# %bb.82:
	mov	ecx, dword ptr [ebp - 80]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_88
# %bb.83:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_84
# %bb.87:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_88:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_89:
	mov	eax, dword ptr [ebp - 36]
	mov	dword ptr [ebp - 64], 0
	mov	dword ptr [ebp - 60], 15
	mov	byte ptr [ebp - 80], 0
	cmp	eax, 16
	jb	LBB1_97
# %bb.90:
	mov	ecx, dword ptr [ebp - 56]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_96
# %bb.91:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_92
# %bb.95:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_96:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_97:
	mov	eax, dword ptr [ebp - 156]
	cmp	eax, 16
	jb	LBB1_105
# %bb.98:
	mov	ecx, dword ptr [ebp - 176]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_104
# %bb.99:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_100
# %bb.103:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_104:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_105:
	mov	eax, dword ptr [ebp - 204]
	cmp	eax, 16
	jb	LBB1_113
# %bb.106:
	mov	ecx, dword ptr [ebp - 224]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB1_112
# %bb.107:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB1_108
# %bb.111:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB1_112:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_113:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 236
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB1_52:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.53:
LBB1_60:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.61:
LBB1_68:
	mov	dword ptr [ebp - 16], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.69:
LBB1_76:
	mov	dword ptr [ebp - 16], 3
	call	__invalid_parameter_noinfo_noreturn
# %bb.77:
LBB1_84:
	mov	dword ptr [ebp - 16], 4
	call	__invalid_parameter_noinfo_noreturn
# %bb.85:
LBB1_92:
	mov	dword ptr [ebp - 16], 5
	call	__invalid_parameter_noinfo_noreturn
# %bb.93:
LBB1_100:
	mov	dword ptr [ebp - 16], 6
	call	__invalid_parameter_noinfo_noreturn
# %bb.101:
LBB1_108:
	mov	dword ptr [ebp - 16], 7
	call	__invalid_parameter_noinfo_noreturn
# %bb.109:
	.def	 "?dtor$54@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$54@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_54:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$62@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$62@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_62:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$70@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$70@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_70:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$78@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$78@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_78:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$86@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$86@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_86:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$94@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$94@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_94:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$102@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$102@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_102:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$110@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$110@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_110:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$114@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$114@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_114:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 108]
	cmp	eax, 16
	jb	LBB1_119
# %bb.115:
	mov	ecx, dword ptr [ebp - 128]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_118
# %bb.116:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_162
# %bb.117:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_118:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_119:
	mov	dword ptr [ebp - 112], 0
	mov	dword ptr [ebp - 108], 15
	mov	byte ptr [ebp - 128], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_162:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$120@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$120@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_120:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 180]
	cmp	eax, 16
	jb	LBB1_125
# %bb.121:
	mov	ecx, dword ptr [ebp - 200]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_124
# %bb.122:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_163
# %bb.123:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_124:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_125:
	mov	dword ptr [ebp - 184], 0
	mov	dword ptr [ebp - 180], 15
	mov	byte ptr [ebp - 200], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_163:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$126@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$126@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_126:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 84]
	cmp	eax, 16
	jb	LBB1_131
# %bb.127:
	mov	ecx, dword ptr [ebp - 104]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_130
# %bb.128:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_164
# %bb.129:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_130:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_131:
	mov	dword ptr [ebp - 88], 0
	mov	dword ptr [ebp - 84], 15
	mov	byte ptr [ebp - 104], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_164:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$132@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$132@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_132:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 132]
	cmp	eax, 16
	jb	LBB1_137
# %bb.133:
	mov	ecx, dword ptr [ebp - 152]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_136
# %bb.134:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_165
# %bb.135:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_136:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_137:
	mov	dword ptr [ebp - 136], 0
	mov	dword ptr [ebp - 132], 15
	mov	byte ptr [ebp - 152], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_165:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$138@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$138@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_138:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 60]
	cmp	eax, 16
	jb	LBB1_143
# %bb.139:
	mov	ecx, dword ptr [ebp - 80]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_142
# %bb.140:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_166
# %bb.141:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_142:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_143:
	mov	dword ptr [ebp - 64], 0
	mov	dword ptr [ebp - 60], 15
	mov	byte ptr [ebp - 80], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_166:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$144@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$144@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_144:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jb	LBB1_149
# %bb.145:
	mov	ecx, dword ptr [ebp - 56]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_148
# %bb.146:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_167
# %bb.147:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_148:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_149:
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 15
	mov	byte ptr [ebp - 56], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_167:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$150@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$150@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_150:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 156]
	cmp	eax, 16
	jb	LBB1_155
# %bb.151:
	mov	ecx, dword ptr [ebp - 176]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_154
# %bb.152:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_168
# %bb.153:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_154:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_155:
	mov	dword ptr [ebp - 160], 0
	mov	dword ptr [ebp - 156], 15
	mov	byte ptr [ebp - 176], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_168:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$156@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$156@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA":
LBB1_156:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 204]
	cmp	eax, 16
	jb	LBB1_161
# %bb.157:
	mov	ecx, dword ptr [ebp - 224]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB1_160
# %bb.158:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB1_169
# %bb.159:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB1_160:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB1_161:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB1_169:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end0:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z":
	.long	429065506                       # MagicNumber
	.long	16                              # MaxState
	.long	("$stateUnwindMap$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z":
	.long	-1                              # ToState
	.long	"?dtor$54@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$62@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$70@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$78@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$86@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$94@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$102@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$110@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$156@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	8                               # ToState
	.long	"?dtor$150@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	9                               # ToState
	.long	"?dtor$144@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	10                              # ToState
	.long	"?dtor$138@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	11                              # ToState
	.long	"?dtor$132@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	12                              # ToState
	.long	"?dtor$126@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	13                              # ToState
	.long	"?dtor$120@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.long	14                              # ToState
	.long	"?dtor$114@?0??concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ";
	.scl	2;
	.type	32;
	.endef
	.globl	"?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ" # -- Begin function ?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	.p2align	4, 0x90
"?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ": # @"?concolor_reset@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	dword ptr [eax + 20], 15
	mov	dword ptr [eax + 16], 4
	mov	dword ptr [eax], 1831885595
	mov	byte ptr [eax + 4], 0
	ret
                                        # -- End function
	.def	 "??__FsupportedExtensions@@YAXXZ";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function ??__FsupportedExtensions@@YAXXZ
"??__FsupportedExtensions@@YAXXZ":      # @"??__FsupportedExtensions@@YAXXZ"
# %bb.0:
	mov	ecx, offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	call	"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	mov	eax, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"]
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	ret
                                        # -- End function
	.def	 "?genInt@@YAIEEEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?genInt@@YAIEEEE@Z"            # -- Begin function ?genInt@@YAIEEEE@Z
	.p2align	4, 0x90
"?genInt@@YAIEEEE@Z":                   # @"?genInt@@YAIEEEE@Z"
# %bb.0:
	push	esi
	movzx	edx, byte ptr [esp + 12]
	mov	esi, dword ptr [esp + 8]
	movzx	eax, byte ptr [esp + 16]
	movzx	ecx, byte ptr [esp + 20]
	shl	esi, 24
	shl	edx, 16
	shl	eax, 8
	or	edx, esi
	or	eax, edx
	or	eax, ecx
	pop	esi
	ret
                                        # -- End function
	.def	 "?genInt16@@YAGEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?genInt16@@YAGEE@Z"            # -- Begin function ?genInt16@@YAGEE@Z
	.p2align	4, 0x90
"?genInt16@@YAGEE@Z":                   # @"?genInt16@@YAGEE@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	movzx	ecx, byte ptr [esp + 8]
	shl	eax, 8
	or	eax, ecx
                                        # kill: def $ax killed $ax killed $eax
	ret
                                        # -- End function
	.def	 "?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z" # -- Begin function ?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z
	.p2align	4, 0x90
"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z": # @"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@EEEE@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	edx, dword ptr [esp + 20]
	mov	ecx, dword ptr [esp + 16]
	mov	eax, dword ptr [esp + 28]
	imul	edx, dword ptr [esp + 24]
	shl	ecx, 2
	mov	ebx, dword ptr [eax + 8]
	lea	esi, [ecx + 4*edx]
	dec	ebx
	add	esi, dword ptr [eax + 12]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 32]
	mov	byte ptr [edi + esi], bl
	lea	esi, [ecx + 4*edx + 1]
	add	esi, dword ptr [eax + 12]
	mov	ebx, dword ptr [eax + 8]
	mov	edi, esi
	dec	ebx
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 36]
	mov	byte ptr [edi + esi], bl
	lea	esi, [ecx + 4*edx + 2]
	lea	ecx, [ecx + 4*edx + 3]
	add	esi, dword ptr [eax + 12]
	mov	ebx, dword ptr [eax + 8]
	mov	edi, esi
	dec	ebx
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 40]
	mov	byte ptr [edi + esi], bl
	add	ecx, dword ptr [eax + 12]
	mov	esi, dword ptr [eax + 8]
	mov	eax, dword ptr [eax + 4]
	mov	edx, ecx
	dec	esi
	and	ecx, 15
	shr	edx, 4
	and	esi, edx
	mov	dl, byte ptr [esp + 44]
	mov	eax, dword ptr [eax + 4*esi]
	mov	byte ptr [eax + ecx], dl
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z" # -- Begin function ?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z
	.p2align	4, 0x90
"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z": # @"?setPixel@@YAXIIIAAV?$deque@EV?$allocator@E@std@@@std@@Ucolor@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	edx, dword ptr [esp + 20]
	mov	ecx, dword ptr [esp + 16]
	mov	eax, dword ptr [esp + 28]
	imul	edx, dword ptr [esp + 24]
	shl	ecx, 2
	mov	ebx, dword ptr [eax + 8]
	lea	esi, [ecx + 4*edx]
	dec	ebx
	add	esi, dword ptr [eax + 12]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 32]
	mov	byte ptr [edi + esi], bl
	lea	esi, [ecx + 4*edx + 1]
	add	esi, dword ptr [eax + 12]
	mov	ebx, dword ptr [eax + 8]
	mov	edi, esi
	dec	ebx
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 33]
	mov	byte ptr [edi + esi], bl
	lea	esi, [ecx + 4*edx + 2]
	lea	ecx, [ecx + 4*edx + 3]
	add	esi, dword ptr [eax + 12]
	mov	ebx, dword ptr [eax + 8]
	mov	edi, esi
	dec	ebx
	and	esi, 15
	shr	edi, 4
	and	ebx, edi
	mov	edi, dword ptr [eax + 4]
	mov	edi, dword ptr [edi + 4*ebx]
	mov	bl, byte ptr [esp + 34]
	mov	byte ptr [edi + esi], bl
	add	ecx, dword ptr [eax + 12]
	mov	esi, dword ptr [eax + 8]
	mov	eax, dword ptr [eax + 4]
	mov	edx, ecx
	dec	esi
	and	ecx, 15
	shr	edx, 4
	and	esi, edx
	mov	dl, byte ptr [esp + 35]
	mov	eax, dword ptr [eax + 4*esi]
	mov	byte ptr [eax + ecx], dl
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?pointDistance@@YANIIII@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__real@4330000000000000         # -- Begin function ?pointDistance@@YANIIII@Z
	.section	.rdata,"dr",discard,__real@4330000000000000
	.p2align	3
__real@4330000000000000:
	.quad	0x4330000000000000              # double 4503599627370496
	.text
	.globl	"?pointDistance@@YANIIII@Z"
	.p2align	4, 0x90
"?pointDistance@@YANIIII@Z":            # @"?pointDistance@@YANIIII@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	and	esp, -8
	sub	esp, 16
	mov	eax, dword ptr [ebp + 20]
	mov	ecx, dword ptr [ebp + 16]
	movq	xmm1, qword ptr [__real@4330000000000000] # xmm1 = mem[0],zero
	sub	ecx, dword ptr [ebp + 8]
	sub	eax, dword ptr [ebp + 12]
	imul	ecx, ecx
	imul	eax, eax
	add	eax, ecx
	movd	xmm0, eax
	por	xmm0, xmm1
	subsd	xmm0, xmm1
	xorpd	xmm1, xmm1
	ucomisd	xmm0, xmm1
	jb	LBB8_1
# %bb.2:
	sqrtsd	xmm0, xmm0
	movsd	qword ptr [esp + 8], xmm0
	fld	qword ptr [esp + 8]
	mov	esp, ebp
	pop	ebp
	ret
LBB8_1:
	movsd	qword ptr [esp], xmm0
	call	_sqrt
	mov	esp, ebp
	pop	ebp
	ret
                                        # -- End function
	.def	 "?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z" # -- Begin function ?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z
	.p2align	4, 0x90
"?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z": # @"?getNextInt@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	ecx, dword ptr [esp + 24]
	mov	ebp, 268435455
	mov	esi, dword ptr [ecx + 12]
	add	ebp, dword ptr [ecx + 8]
	mov	ebx, dword ptr [ecx + 4]
	lea	eax, [esi + 3]
	mov	edx, eax
	and	eax, 15
	shr	edx, 4
	and	edx, ebp
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	eax, byte ptr [edx + eax]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 2]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [edi + eax]
	lea	eax, [esi + 1]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, esi
	shr	eax, 4
	and	eax, ebp
	mov	edx, dword ptr [ebx + 4*eax]
	mov	eax, dword ptr [esp + 24]
	mov	ebx, esi
	add	esi, 4
	and	ebx, 15
	mov	ebp, dword ptr [eax + 16]
	mov	eax, 3
	movzx	edx, byte ptr [edx + ebx]
	cmp	ebp, 1
	cmovne	eax, esi
	cmp	ebp, 2
	mov	esi, 1
	cmove	eax, ebp
	cmp	ebp, 3
	cmovne	esi, eax
	xor	eax, eax
	cmp	ebp, 4
	cmovne	eax, esi
	shl	ecx, 8
	mov	esi, dword ptr [esp + 24]
	shl	edi, 16
	shl	edx, 24
	add	ebp, -4
	add	ecx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [esi + 12], eax
	mov	dword ptr [esi + 16], ebp
	or	ecx, edi
	or	ecx, edx
	mov	eax, ecx
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z" # -- Begin function ?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z
	.p2align	4, 0x90
"?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z": # @"?getNextInt16@@YAIAAV?$deque@EV?$allocator@E@std@@@std@@@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	ecx, dword ptr [esp + 16]
	mov	ebx, 268435455
	mov	edx, dword ptr [ecx + 12]
	add	ebx, dword ptr [ecx + 8]
	mov	eax, dword ptr [ecx + 4]
	lea	esi, [edx + 1]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	edi, ebx
	mov	edi, dword ptr [eax + 4*edi]
	movzx	esi, byte ptr [edi + esi]
	mov	edi, edx
	shr	edi, 4
	and	edi, ebx
	mov	ebx, edx
	add	edx, 2
	mov	eax, dword ptr [eax + 4*edi]
	and	ebx, 15
	movzx	eax, byte ptr [eax + ebx]
	shl	eax, 8
	or	eax, esi
	mov	esi, dword ptr [ecx + 16]
	cmp	esi, 1
	cmove	edx, esi
	xor	edi, edi
	add	esi, -2
	cmovne	edi, edx
	mov	dword ptr [ecx + 16], esi
	mov	dword ptr [ecx + 12], edi
	pop	esi
	pop	edi
	pop	ebx
	ret
                                        # -- End function
	.def	 "?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z" # -- Begin function ?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z
	.p2align	4, 0x90
"?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z": # @"?getNextInt8@@YAEAAV?$deque@EV?$allocator@E@std@@@std@@@Z"
# %bb.0:
	push	edi
	push	esi
	mov	ecx, dword ptr [esp + 12]
	mov	edx, dword ptr [ecx + 12]
	mov	edi, dword ptr [ecx + 8]
	mov	esi, dword ptr [ecx + 4]
	mov	eax, edx
	dec	edi
	shr	eax, 4
	and	edi, eax
	mov	eax, edx
	inc	edx
	mov	esi, dword ptr [esi + 4*edi]
	and	eax, 15
	mov	al, byte ptr [esi + eax]
	xor	esi, esi
	dec	dword ptr [ecx + 16]
	cmovne	esi, edx
	mov	dword ptr [ecx + 12], esi
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z" # -- Begin function ?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z
	.p2align	4, 0x90
"?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z": # @"?getNextColor@@YA?AUcolor@@AAV?$deque@EV?$allocator@E@std@@@std@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	ecx, dword ptr [esp + 24]
	mov	ebp, 268435455
	mov	esi, dword ptr [ecx + 12]
	add	ebp, dword ptr [ecx + 8]
	mov	ebx, dword ptr [ecx + 4]
	mov	eax, esi
	mov	edx, esi
	shr	eax, 4
	and	edx, 15
	and	eax, ebp
	mov	eax, dword ptr [ebx + 4*eax]
	movzx	eax, byte ptr [eax + edx]
	lea	edx, [esi + 3]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 1]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [edi + eax]
	lea	eax, [esi + 2]
	add	esi, 4
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, edx
	and	edx, 15
	shr	eax, 4
	and	eax, ebp
	mov	ebp, 3
	mov	eax, dword ptr [ebx + 4*eax]
	mov	ebx, dword ptr [esp + 24]
	mov	ebx, dword ptr [ebx + 16]
	movzx	eax, byte ptr [eax + edx]
	mov	edx, dword ptr [esp + 24]
	cmp	ebx, 1
	cmovne	ebp, esi
	cmp	ebx, 2
	mov	esi, 1
	cmove	ebp, ebx
	cmp	ebx, 3
	cmovne	esi, ebp
	xor	ebp, ebp
	cmp	ebx, 4
	cmovne	ebp, esi
	shl	ecx, 8
	shl	edi, 16
	shl	eax, 24
	add	ebx, -4
	add	ecx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [edx + 12], ebp
	mov	dword ptr [edx + 16], ebx
	or	ecx, edi
	or	ecx, eax
	mov	eax, ecx
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?checkInstructionSetSupported@@YA_NEE@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?checkInstructionSetSupported@@YA_NEE@Z" # -- Begin function ?checkInstructionSetSupported@@YA_NEE@Z
	.p2align	4, 0x90
"?checkInstructionSetSupported@@YA_NEE@Z": # @"?checkInstructionSetSupported@@YA_NEE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	edx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"]
	mov	esi, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+12]
	mov	ecx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+16]
	test	edx, edx
	je	LBB13_1
# %bb.2:
	mov	ebx, dword ptr [edx]
	lea	edx, [ecx + esi]
	test	ecx, ecx
	mov	eax, edx
	jne	LBB13_4
	jmp	LBB13_9
LBB13_1:
	xor	ebx, ebx
	lea	edx, [ecx + esi]
	test	ecx, ecx
	mov	eax, edx
	je	LBB13_9
LBB13_4:
	mov	dword ptr [esp], edx            # 4-byte Spill
	movzx	edx, byte ptr [esp + 24]
	movzx	edi, byte ptr [esp + 28]
	shl	edx, 8
	or	edx, edi
	mov	edi, 536870911
	add	edi, dword ptr [ebx + 8]
	mov	ebx, dword ptr [ebx + 4]
	.p2align	4, 0x90
LBB13_5:                                # =>This Inner Loop Header: Depth=1
	mov	ebp, esi
	mov	eax, esi
	shr	ebp, 3
	and	eax, 7
	and	ebp, edi
	mov	ebp, dword ptr [ebx + 4*ebp]
	movzx	eax, word ptr [ebp + 2*eax]
	cmp	edx, eax
	je	LBB13_6
# %bb.7:                                #   in Loop: Header=BB13_5 Depth=1
	inc	esi
	dec	ecx
	jne	LBB13_5
# %bb.8:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	eax, edx
	jmp	LBB13_9
LBB13_6:
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	eax, esi
LBB13_9:
	cmp	eax, edx
	setne	al
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z" # -- Begin function ?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z
	.p2align	4, 0x90
"?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z": # @"?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
Lfunc_begin1:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 256
	mov	esi, esp
	mov	dword ptr [esi + 232], ebp
	mov	dword ptr [esi + 236], esp
	mov	dword ptr [esi + 248], -1
	mov	dword ptr [esi + 244], offset "___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	mov	eax, dword ptr [ebp + 12]
	lea	ecx, [esi + 240]
	lea	edi, [esi + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [esi + 240], edx
	mov	dword ptr fs:[0], ecx
	mov	ecx, edi
	push	1
	push	64
	push	32
	push	eax
	call	"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	mov	eax, dword ptr [esi + 8]
	mov	ecx, edi
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + 248], 1
	and	dword ptr [esi + eax + 28], -2
	push	2
	push	0
	push	0
	call	"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
# %bb.1:
	lea	eax, [esi + 208]
	lea	ecx, [esi + 8]
	push	eax
	call	"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
# %bb.2:
	lea	ecx, [esi + 8]
	push	0
	push	0
	push	0
	call	"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
# %bb.3:
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], 0
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.4:
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [esi], esp            # 4-byte Spill
	mov	dword ptr [ecx], eax
	mov	dword ptr [eax], ecx
	push	eax
	sub	esp, 28
	mov	ecx, esp
	lea	edx, [esi + 8]
	mov	dword ptr [esi + 248], 2
	lea	eax, [ecx + 20]
	mov	dword ptr [ecx + 24], 0
	mov	byte ptr [ecx + 28], 0
	mov	dword ptr [ecx + 16], edx
	mov	dword ptr [esi + 4], ecx        # 4-byte Spill
	mov	byte ptr [ecx + 20], 0
	push	eax
	push	edx
	call	"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	add	esp, 8
# %bb.5:
	mov	ecx, dword ptr [eax]
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	mov	ecx, dword ptr [ecx + 4]
	test	byte ptr [eax + ecx + 12], 6
	je	LBB14_7
# %bb.6:
	mov	dword ptr [edi + 16], 0
LBB14_7:
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [edi + 4], 0
	mov	dword ptr [edi + 8], 0
	mov	edx, dword ptr [ecx]
	mov	eax, dword ptr [ecx + 12]
	test	edx, edx
	je	LBB14_11
# %bb.8:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB14_10
# %bb.9:
	mov	edx, dword ptr [edx]
	mov	dword ptr [edi + 4], edx
LBB14_11:
	mov	dword ptr [edi + 12], eax
	lea	eax, [esi + 196]
	mov	dword ptr [edi], eax
	call	"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
LBB14_12:
	mov	esp, dword ptr [esi]            # 4-byte Reload
	mov	eax, dword ptr [esi + 8]
	lea	edi, [esi + 120]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + eax + 8], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [esi + 8]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [esi + eax + 4], ecx
	lea	ecx, [esi + 24]
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	mov	dword ptr [esi + 120], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [esi + 248], 0
	push	edi
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.13:
	mov	eax, dword ptr [esi + 240]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 8]
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB14_10:
	mov	dword ptr [edi + 4], 0
	mov	dword ptr [edi + 12], eax
	lea	eax, [esi + 196]
	mov	dword ptr [edi], eax
	call	"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	jmp	LBB14_12
	.def	 "?dtor$14@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA":
LBB14_14:
	push	ebp
	sub	esp, 32
	lea	esi, [ebp - 252]
	mov	ebp, dword ptr [esi + 232]
	mov	edi, dword ptr [ebp + 8]
	mov	ecx, edi
	call	"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	mov	eax, dword ptr [edi]
	mov	dword ptr [edi], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 40
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$15@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA":
LBB14_15:
	push	ebp
	sub	esp, 32
	lea	esi, [ebp - 252]
	mov	ebp, dword ptr [esi + 232]
	mov	eax, dword ptr [esi + 8]
	lea	edi, [esi + 120]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + eax + 8], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [esi + 8]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [esi + eax + 4], ecx
	lea	ecx, [esi + 24]
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	mov	dword ptr [esi + 120], offset "??_7ios_base@std@@6B@"
	push	edi
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 36
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$16@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA":
LBB14_16:
	push	ebp
	sub	esp, 32
	lea	esi, [ebp - 252]
	mov	ebp, dword ptr [esi + 232]
	call	___std_terminate
Lfunc_end1:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$16@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$15@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA" # Action
	.long	1                               # ToState
	.long	"?dtor$14@?0??readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.globl	"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z" # -- Begin function ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	.p2align	4, 0x90
"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z": # @"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
Lfunc_begin2:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 48
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	mov	edx, ecx
	cmp	dword ptr [ebp + 20], 0
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB15_1
# %bb.2:
	mov	eax, offset "??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@"
	mov	dword ptr [edx], offset "??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@"
	mov	dword ptr [edx + 112], offset "??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	jmp	LBB15_3
LBB15_1:
	mov	eax, dword ptr [edx]
LBB15_3:
	mov	eax, dword ptr [eax + 4]
	lea	esi, [edx + 16]
	mov	dword ptr [edx + eax], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [edx + eax - 4], ecx
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [edx + eax], offset "??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 24]
	mov	dword ptr [edx + eax - 4], ecx
	mov	dword ptr [edx + 12], 0
	mov	dword ptr [edx + 8], 0
	mov	eax, dword ptr [edx]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 16], 1
	add	ecx, edx
	push	0
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	push	esi
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	call	"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
# %bb.4:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [edx + eax], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [edx + eax - 4], ecx
	mov	dword ptr [edx + 16], offset "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
# %bb.5:
	mov	dword ptr [ebp - 16], 0
	push	1
	call	"?_Init@locale@std@@CAPAV_Locimp@12@_N@Z"
	add	esp, 4
# %bb.6:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	esi, dword ptr [ebp + 12]
	mov	edx, dword ptr [ebp + 16]
	mov	dword ptr [ecx + 4], eax
	mov	dword ptr [edi + 68], ecx
	lea	eax, [edi + 20]
	lea	ecx, [edi + 24]
	mov	dword ptr [edi + 16], offset "??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	mov	byte ptr [edi + 88], 0
	mov	byte ptr [edi + 77], 0
	or	esi, 1
	mov	dword ptr [edi + 28], eax
	mov	dword ptr [edi + 32], ecx
	lea	eax, [edi + 36]
	lea	ecx, [edi + 40]
	mov	dword ptr [edi + 44], eax
	mov	dword ptr [edi + 48], ecx
	lea	eax, [edi + 52]
	lea	ecx, [edi + 56]
	mov	dword ptr [edi + 60], eax
	mov	dword ptr [edi + 64], ecx
	mov	dword ptr [edi + 24], 0
	mov	dword ptr [edi + 40], 0
	mov	dword ptr [edi + 56], 0
	mov	dword ptr [edi + 20], 0
	mov	dword ptr [edi + 36], 0
	mov	dword ptr [edi + 52], 0
	mov	dword ptr [edi + 92], 0
	mov	eax, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"]
	mov	ecx, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"+4]
	mov	dword ptr [edi + 80], eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [edi + 84], ecx
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [edi + 72], 0
	mov	dword ptr [ebp - 16], 2
	push	edx
	push	esi
	push	eax
	call	"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
# %bb.7:
	test	eax, eax
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	jne	LBB15_14
# %bb.8:
	mov	ecx, dword ptr [eax]
	mov	edx, dword ptr [ecx + 4]
	xor	ecx, ecx
	cmp	dword ptr [eax + edx + 56], 0
	mov	ebx, dword ptr [eax + edx + 12]
	sete	cl
	and	ebx, 21
	shl	ecx, 2
	or	ebx, ecx
	or	ebx, 2
	mov	dword ptr [eax + edx + 12], ebx
	mov	ecx, dword ptr [eax + edx + 16]
	and	ebx, ecx
	jne	LBB15_9
LBB15_14:
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 48
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	16
LBB15_9:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB15_11
# %bb.10:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB15_11:
	test	cl, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	edx, ecx
	test	bl, 4
	lea	ecx, [ebp - 60]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.12:
	mov	dword ptr [ebp - 60], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 60]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.13:
	.def	 "?dtor$15@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA":
LBB15_15:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$16@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA":
LBB15_16:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	cmp	dword ptr [ebp + 20], 0
	je	LBB15_18
# %bb.17:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax + 112], offset "??_7ios_base@std@@6B@"
	add	eax, 112
	push	eax
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
LBB15_18:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$19@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA":
LBB15_19:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end2:
	.section	.xdata,"dr",associative,"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.p2align	2
"L__ehtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z":
	.long	-1                              # ToState
	.long	"?dtor$19@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$16@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA" # Action
	.long	1                               # ToState
	.long	"?dtor$15@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z@4HA" # Action
	.section	.text,"xr",discard,"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
                                        # -- End function
	.def	 "?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.globl	"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z" # -- Begin function ?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
	.p2align	4, 0x90
"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z": # @"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
Lfunc_begin3:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 64
	mov	esi, esp
	mov	dword ptr [esi + 40], ebp
	mov	dword ptr [esi + 44], esp
	mov	dword ptr [esi + 56], -1
	mov	dword ptr [esi + 52], offset "___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	mov	edi, ecx
	lea	eax, [esi + 48]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [esi + 48], ecx
	mov	dword ptr fs:[0], eax
	xor	ecx, ecx
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [edi + edx + 56], 0
	mov	eax, dword ptr [edi + edx + 12]
	sete	cl
	and	eax, 22
	shl	ecx, 2
	or	eax, ecx
	mov	dword ptr [edi + edx + 12], eax
	and	eax, dword ptr [edi + edx + 16]
	jne	LBB16_1
# %bb.4:
	mov	eax, dword ptr [edi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edi + eax + 56]
	test	ecx, ecx
	je	LBB16_6
# %bb.5:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
LBB16_6:
	mov	dword ptr [esi + 56], 0
	mov	ecx, edi
	push	1
	mov	dword ptr [esi + 4], edi        # 4-byte Spill
	call	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
# %bb.7:
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, edx
	test	byte ptr [edx + ecx + 12], 6
	jne	LBB16_19
# %bb.8:
	mov	ecx, dword ptr [eax + ecx + 56]
	mov	edi, dword ptr [ebp + 8]
	mov	ebx, dword ptr [ebp + 16]
	lea	edx, [esi + 8]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 40]
	mov	dword ptr [esi + 56], 2
	push	1
	push	ebx
	push	dword ptr [ebp + 12]
	push	edi
	push	edx
	call	eax
# %bb.9:
	mov	eax, dword ptr [esi + 16]
	mov	ecx, dword ptr [esi + 20]
	add	eax, dword ptr [esi + 8]
	adc	ecx, dword ptr [esi + 12]
	and	ecx, eax
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	cmp	ecx, -1
	jne	LBB16_19
# %bb.10:
	mov	ecx, dword ptr [eax]
	mov	edx, dword ptr [ecx + 4]
	xor	ecx, ecx
	cmp	dword ptr [eax + edx + 56], 0
	mov	ebx, dword ptr [eax + edx + 12]
	sete	cl
	and	ebx, 21
	shl	ecx, 2
	or	ebx, ecx
	or	ebx, 2
	mov	dword ptr [eax + edx + 12], ebx
	mov	ecx, dword ptr [eax + edx + 16]
	and	ebx, ecx
	jne	LBB16_11
LBB16_19:
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB16_21
# %bb.20:
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 8]
	mov	dword ptr [esi + 56], 1
	call	edx
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
LBB16_21:
	mov	ecx, dword ptr [esi + 48]
	mov	dword ptr fs:[0], ecx
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB16_1:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB16_3
# %bb.2:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB16_3:
	test	al, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	lea	edi, [esi + 8]
	mov	dword ptr [esi + 32], 1
	mov	dword ptr [esi + 36], offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	mov	ecx, edi
	cmove	eax, edx
	lea	edx, [esi + 32]
	push	edx
	push	eax
	call	"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	push	edi
	call	__CxxThrowException@8
LBB16_11:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB16_13
# %bb.12:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB16_13:
	test	cl, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	edx, ecx
	test	bl, 4
	lea	ecx, [esi + 8]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.14:
	mov	dword ptr [esi + 8], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [esi + 8]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.18:
	.def	 "?dtor$15@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$15@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA":
LBB16_15:
	push	ebp
	sub	esp, 20
	lea	esi, [ebp - 60]
	mov	ebp, dword ptr [esi + 40]
	mov	ecx, dword ptr [esi + 4]        # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB16_17
# %bb.16:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB16_17:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$22@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$22@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA":
LBB16_22:
	push	ebp
	sub	esp, 20
	lea	esi, [ebp - 60]
	mov	ebp, dword ptr [esi + 40]
	mov	ecx, dword ptr [esi + 4]        # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB16_24
# %bb.23:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB16_24:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$25@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$25@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA":
LBB16_25:
	push	ebp
	sub	esp, 20
	lea	esi, [ebp - 60]
	mov	ebp, dword ptr [esi + 40]
	call	___std_terminate
Lfunc_end3:
	.section	.xdata,"dr",associative,"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.p2align	2
"L__ehtable$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z":
	.long	-1                              # ToState
	.long	"?dtor$15@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$25@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$22@?0??seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z@4HA" # Action
	.section	.text,"xr",discard,"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
                                        # -- End function
	.def	 "?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.globl	"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ" # -- Begin function ?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ
	.p2align	4, 0x90
"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ": # @"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
Lfunc_begin4:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	test	ecx, ecx
	je	LBB17_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
LBB17_2:
	mov	dword ptr [ebp - 16], 0
	mov	ecx, esi
	push	1
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	call	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
# %bb.3:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp + 8]
	mov	esi, dword ptr [edx]
	mov	ecx, dword ptr [esi + 4]
	test	byte ptr [edx + ecx + 12], 6
	je	LBB17_4
# %bb.9:
	mov	dword ptr [eax + 4], -1
	mov	dword ptr [eax], -1
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	mov	ecx, dword ptr [esi + 4]
	mov	ecx, dword ptr [edx + ecx + 56]
	test	ecx, ecx
	jne	LBB17_11
	jmp	LBB17_12
LBB17_4:
	mov	ecx, dword ptr [edx + ecx + 56]
	mov	esi, dword ptr [ecx]
	mov	esi, dword ptr [esi + 40]
	mov	dword ptr [ebp - 16], 2
	push	1
	push	1
	push	0
	push	0
	push	eax
	call	esi
# %bb.5:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp + 8]
	mov	esi, dword ptr [edx]
	mov	ecx, dword ptr [esi + 4]
	mov	ecx, dword ptr [edx + ecx + 56]
	test	ecx, ecx
	je	LBB17_12
LBB17_11:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	eax, dword ptr [ebp + 8]
LBB17_12:
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$6@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$6@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA":
LBB17_6:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB17_8
# %bb.7:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB17_8:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$13@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA":
LBB17_13:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB17_15
# %bb.14:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB17_15:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$16@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA":
LBB17_16:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
Lfunc_end4:
	.section	.xdata,"dr",associative,"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.p2align	2
"L__ehtable$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ":
	.long	-1                              # ToState
	.long	"?dtor$6@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$16@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$13@?0??tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ@4HA" # Action
	.section	.text,"xr",discard,"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
                                        # -- End function
	.def	 "??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.globl	"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z" # -- Begin function ??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z
	.p2align	4, 0x90
"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z": # @"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
Lfunc_begin5:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 76
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	mov	ebx, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 8]
	mov	ecx, dword ptr [ebp + 24]
	mov	edx, dword ptr [ebp + 28]
	mov	esi, dword ptr [ebp + 20]
	mov	dword ptr [ebp - 64], eax       # 4-byte Spill
	mov	eax, dword ptr [ebx + 12]
	mov	dword ptr [ebp - 56], edx
	mov	dword ptr [ebp - 60], ecx
	mov	edx, dword ptr [ebp + 32]
	sub	esi, eax
	cmp	edx, ecx
	mov	dword ptr [ebp - 52], esi       # 4-byte Spill
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	je	LBB18_92
# %bb.1:
	mov	edx, dword ptr [ebx + 16]
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	ecx, edx
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	shr	ecx
	cmp	dword ptr [ebp - 52], ecx       # 4-byte Folded Reload
	jbe	LBB18_13
# %bb.2:
	mov	ecx, edx
	lea	edx, [ecx + eax]
	test	dl, 15
	jne	LBB18_7
	.p2align	4, 0x90
LBB18_4:
	lea	edx, [ecx + 16]
	shr	edx, 4
	cmp	dword ptr [ebx + 8], edx
	ja	LBB18_7
# %bb.5:
	mov	dword ptr [ebp - 16], 2
	mov	ecx, ebx
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.6:
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebx + 12]
	mov	ecx, dword ptr [ebx + 16]
	.p2align	4, 0x90
LBB18_7:                                # =>This Inner Loop Header: Depth=1
	mov	esi, dword ptr [ebx + 8]
	mov	edx, esi
	add	esi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, eax
	mov	eax, dword ptr [ebx + 4]
	mov	dword ptr [ebx + 12], edx
	add	edx, ecx
	mov	ecx, edx
	shr	ecx, 4
	and	esi, ecx
	mov	eax, dword ptr [eax + 4*esi]
	mov	dword ptr [ebp - 16], 2
	test	eax, eax
	jne	LBB18_10
# %bb.8:                                #   in Loop: Header=BB18_7 Depth=1
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	mov	dword ptr [ebp - 44], edx       # 4-byte Spill
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.9:                                #   in Loop: Header=BB18_7 Depth=1
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebx + 4]
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [ebx + 4]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [ebp - 44]       # 4-byte Reload
LBB18_10:                               #   in Loop: Header=BB18_7 Depth=1
	movzx	ecx, byte ptr [ebp - 56]
	and	edx, 15
	mov	byte ptr [eax + edx], cl
	inc	dword ptr [ebx + 16]
	lea	eax, [ebp - 56]
	push	eax
	push	dword ptr [ebp - 60]
	call	"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	add	esp, 8
# %bb.11:                               #   in Loop: Header=BB18_7 Depth=1
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	test	byte ptr [eax + ecx + 12], 6
	je	LBB18_12
# %bb.66:                               #   in Loop: Header=BB18_7 Depth=1
	xor	eax, eax
	mov	dword ptr [ebp - 60], 0
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, dword ptr [ebp - 48]       # 4-byte Folded Reload
	jne	LBB18_68
	jmp	LBB18_76
	.p2align	4, 0x90
LBB18_12:                               #   in Loop: Header=BB18_7 Depth=1
	mov	eax, dword ptr [ebp - 60]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, dword ptr [ebp - 48]       # 4-byte Folded Reload
	je	LBB18_76
LBB18_68:                               #   in Loop: Header=BB18_7 Depth=1
	mov	eax, dword ptr [ebx + 12]
	mov	ecx, dword ptr [ebx + 16]
	lea	edx, [ecx + eax]
	test	dl, 15
	jne	LBB18_7
	jmp	LBB18_4
	.p2align	4, 0x90
LBB18_13:                               # =>This Inner Loop Header: Depth=1
	test	al, 15
	jne	LBB18_17
# %bb.14:                               #   in Loop: Header=BB18_13 Depth=1
	mov	ecx, dword ptr [ebx + 16]
	add	ecx, 16
	shr	ecx, 4
	cmp	dword ptr [ebx + 8], ecx
	ja	LBB18_17
# %bb.15:                               #   in Loop: Header=BB18_13 Depth=1
	mov	dword ptr [ebp - 16], 0
	mov	ecx, ebx
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.16:                               #   in Loop: Header=BB18_13 Depth=1
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebx + 12]
	.p2align	4, 0x90
LBB18_17:                               #   in Loop: Header=BB18_13 Depth=1
	mov	edx, dword ptr [ebx + 8]
	mov	ecx, edx
	shl	ecx, 4
	lea	esi, [ecx - 1]
	and	esi, eax
	mov	eax, dword ptr [ebx + 4]
	mov	dword ptr [ebx + 12], esi
	cmove	esi, ecx
	add	edx, 268435455
	dec	esi
	mov	ecx, esi
	shr	ecx, 4
	and	edx, ecx
	mov	eax, dword ptr [eax + 4*edx]
	mov	dword ptr [ebp - 16], 0
	test	eax, eax
	jne	LBB18_20
# %bb.18:                               #   in Loop: Header=BB18_13 Depth=1
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.19:                               #   in Loop: Header=BB18_13 Depth=1
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ecx, dword ptr [ebx + 4]
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [ebx + 4]
	mov	eax, dword ptr [eax + 4*edx]
LBB18_20:                               #   in Loop: Header=BB18_13 Depth=1
	movzx	edx, byte ptr [ebp - 56]
	mov	ecx, esi
	and	ecx, 15
	mov	byte ptr [eax + ecx], dl
	mov	dword ptr [ebx + 12], esi
	inc	dword ptr [ebx + 16]
	lea	eax, [ebp - 56]
	push	eax
	push	dword ptr [ebp - 60]
	call	"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	add	esp, 8
# %bb.21:                               #   in Loop: Header=BB18_13 Depth=1
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	test	byte ptr [eax + ecx + 12], 6
	je	LBB18_22
# %bb.23:                               #   in Loop: Header=BB18_13 Depth=1
	xor	eax, eax
	mov	dword ptr [ebp - 60], 0
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	eax, dword ptr [ebp - 48]       # 4-byte Folded Reload
	jne	LBB18_25
	jmp	LBB18_31
	.p2align	4, 0x90
LBB18_22:                               #   in Loop: Header=BB18_13 Depth=1
	mov	eax, dword ptr [ebp - 60]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	eax, dword ptr [ebp - 48]       # 4-byte Folded Reload
	je	LBB18_31
LBB18_25:                               #   in Loop: Header=BB18_13 Depth=1
	mov	eax, dword ptr [ebx + 12]
	jmp	LBB18_13
LBB18_76:
	mov	edi, esp
	push	eax
	sub	esp, 36
	mov	ecx, dword ptr [ebx + 12]
	mov	edx, dword ptr [ebx + 16]
	mov	eax, esp
	mov	dword ptr [eax + 32], 0
	add	edx, ecx
	mov	dword ptr [eax + 36], edx
	mov	edx, dword ptr [ebx]
	test	edx, edx
	mov	dword ptr [eax + 28], edx
	je	LBB18_83
# %bb.77:
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB18_83
# %bb.78:
	mov	esi, dword ptr [esi]
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 0
	test	esi, esi
	je	LBB18_82
# %bb.79:
	mov	esi, dword ptr [esi]
	test	esi, esi
	je	LBB18_81
# %bb.80:
	mov	esi, dword ptr [esi]
	mov	dword ptr [eax + 16], esi
	jmp	LBB18_82
LBB18_31:
	mov	eax, dword ptr [ebx + 16]
	mov	esi, dword ptr [ebx]
	mov	edi, dword ptr [ebx + 12]
	sub	eax, ecx
	test	esi, esi
	je	LBB18_101
# %bb.32:
	mov	edx, dword ptr [esi]
	test	edx, edx
	je	LBB18_35
# %bb.33:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_35
# %bb.34:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_35
# %bb.36:
	mov	ebx, edi
	mov	edi, dword ptr [edx]
	mov	esi, dword ptr [esi]
	mov	ecx, ebx
	lea	edx, [ebx + eax]
	test	edi, edi
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	je	LBB18_37
# %bb.38:
	mov	esi, dword ptr [edi]
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	jmp	LBB18_39
LBB18_83:
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 0
	add	esi, ecx
	mov	dword ptr [eax + 24], esi
	mov	esi, eax
	add	esi, 4
	test	edx, edx
	je	LBB18_85
# %bb.84:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_85
LBB18_86:
	mov	edx, dword ptr [edx]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax + 8], 0
	test	edx, edx
	je	LBB18_90
# %bb.87:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_89
# %bb.88:
	mov	edx, dword ptr [edx]
	mov	dword ptr [esi], edx
	jmp	LBB18_90
LBB18_35:
	mov	esi, dword ptr [esi]
	lea	edx, [edi + eax]
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	test	eax, eax
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	jne	LBB18_41
	jmp	LBB18_44
LBB18_101:
	lea	edx, [edi + eax]
	mov	dword ptr [ebp - 36], 0         # 4-byte Folded Spill
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	test	eax, eax
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	jne	LBB18_41
	jmp	LBB18_44
LBB18_89:
	mov	dword ptr [eax + 4], 0
	jmp	LBB18_90
LBB18_81:
	mov	dword ptr [eax + 16], 0
LBB18_82:
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	add	esi, ecx
	mov	dword ptr [eax + 24], esi
	mov	esi, eax
	add	esi, 4
	mov	edx, dword ptr [edx]
	test	edx, edx
	jne	LBB18_86
LBB18_85:
	mov	dword ptr [esi], 0
	mov	dword ptr [eax + 8], 0
LBB18_90:
	add	ecx, dword ptr [ebp - 52]       # 4-byte Folded Reload
	lea	edx, [ebp - 76]
	mov	dword ptr [eax + 12], ecx
	mov	dword ptr [eax], edx
	jmp	LBB18_91
LBB18_37:
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
LBB18_39:
	mov	edi, ecx
	test	eax, eax
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	je	LBB18_44
LBB18_41:
	dec	edx
	.p2align	4, 0x90
LBB18_42:                               # =>This Inner Loop Header: Depth=1
	cmp	edx, edi
	je	LBB18_44
# %bb.43:                               #   in Loop: Header=BB18_42 Depth=1
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ebx, edx
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	shr	ebx, 4
	mov	eax, dword ptr [esi + 4]
	mov	esi, dword ptr [esi + 8]
	dec	esi
	and	esi, ebx
	mov	ebx, edx
	mov	edx, edi
	mov	ecx, dword ptr [eax + 4*esi]
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	esi, edi
	and	ebx, 15
	shr	esi, 4
	mov	edi, dword ptr [eax + 8]
	dec	edi
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	movzx	eax, byte ptr [ecx + ebx]
	mov	esi, dword ptr [esi + 4*edi]
	mov	edi, edx
	and	edi, 15
	mov	ah, byte ptr [esi + edi]
	mov	byte ptr [esi + edi], al
	mov	edi, edx
	inc	edi
	mov	byte ptr [ecx + ebx], ah
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	cmp	ecx, edi
	lea	edx, [ecx - 1]
	jne	LBB18_42
LBB18_44:
	mov	esi, esp
	push	eax
	sub	esp, 36
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, esp
	mov	dword ptr [ebp - 48], esi       # 4-byte Spill
	mov	edx, dword ptr [eax + 12]
	test	eax, eax
	je	LBB18_45
# %bb.48:
	mov	esi, dword ptr [eax]
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 40]       # 4-byte Reload
	lea	ebx, [edi + eax]
	test	esi, esi
	je	LBB18_46
# %bb.49:
	mov	eax, edi
	mov	edi, dword ptr [esi]
	test	edi, edi
	je	LBB18_46
# %bb.50:
	mov	edi, dword ptr [edi]
	mov	dword ptr [ecx + 28], 0
	mov	dword ptr [ecx + 32], 0
	test	edi, edi
	je	LBB18_54
# %bb.51:
	mov	edi, dword ptr [edi]
	test	edi, edi
	je	LBB18_53
# %bb.52:
	mov	eax, dword ptr [edi]
	mov	dword ptr [ecx + 28], eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB18_54
LBB18_45:
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	lea	ebx, [esi + eax]
LBB18_46:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, ecx
	add	ebx, edx
	mov	dword ptr [ecx + 28], 0
	mov	dword ptr [ecx + 32], 0
	add	edi, 16
	mov	dword ptr [ecx + 36], ebx
	test	eax, eax
	je	LBB18_47
# %bb.55:
	mov	esi, dword ptr [eax]
	mov	ebx, eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	test	esi, esi
	je	LBB18_57
# %bb.56:
	mov	esi, dword ptr [esi]
	test	esi, esi
	jne	LBB18_58
	jmp	LBB18_57
LBB18_47:
	mov	ebx, eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB18_57
LBB18_53:
	mov	dword ptr [ecx + 28], 0
LBB18_54:
	add	ebx, edx
	mov	edi, ecx
	mov	dword ptr [ecx + 36], ebx
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	add	edi, 16
	mov	esi, dword ptr [esi]
	test	esi, esi
	je	LBB18_57
LBB18_58:
	mov	esi, dword ptr [esi]
	mov	dword ptr [ecx + 16], 0
	mov	dword ptr [ecx + 20], 0
	test	esi, esi
	je	LBB18_62
# %bb.59:
	mov	esi, dword ptr [esi]
	test	esi, esi
	je	LBB18_61
# %bb.60:
	mov	eax, dword ptr [esi]
	mov	dword ptr [edi], eax
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB18_62
LBB18_57:
	mov	dword ptr [edi], 0
	mov	dword ptr [edi + 4], 0
LBB18_62:
	add	eax, edx
	test	ebx, ebx
	mov	dword ptr [edi + 8], eax
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 12], edx
	je	LBB18_64
# %bb.63:
	mov	eax, dword ptr [ebx]
	mov	dword ptr [ecx + 4], eax
	jmp	LBB18_65
LBB18_64:
	mov	dword ptr [ecx + 4], 0
LBB18_65:
	mov	edi, dword ptr [ebp - 48]       # 4-byte Reload
	lea	eax, [ebp - 88]
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ecx], eax
LBB18_91:
	mov	dword ptr [ebp - 16], -1
	call	"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z"
	add	esp, 40
	mov	esp, edi
LBB18_92:
	mov	ecx, dword ptr [ebx + 12]
	lea	eax, [ebp + 8]
	test	ebx, ebx
	je	LBB18_95
# %bb.93:
	mov	edx, dword ptr [ebx]
	test	edx, edx
	je	LBB18_95
# %bb.94:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_95
# %bb.96:
	mov	edx, dword ptr [edx]
	mov	esi, dword ptr [ebp - 64]       # 4-byte Reload
	test	edx, edx
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
	je	LBB18_100
# %bb.97:
	mov	edx, dword ptr [edx]
	test	edx, edx
	je	LBB18_99
# %bb.98:
	mov	edx, dword ptr [edx]
	mov	dword ptr [esi], edx
	jmp	LBB18_100
LBB18_95:
	mov	esi, dword ptr [ebp - 64]       # 4-byte Reload
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
LBB18_100:
	add	ecx, dword ptr [ebp - 52]       # 4-byte Folded Reload
	mov	dword ptr [esi + 8], ecx
	mov	ecx, dword ptr [ebp - 24]
	mov	eax, dword ptr [eax]
	mov	dword ptr fs:[0], ecx
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	32
LBB18_99:
	mov	dword ptr [esi], 0
	jmp	LBB18_100
LBB18_61:
	mov	dword ptr [ecx + 16], 0
	jmp	LBB18_62
	.def	 "?catch$26@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$26@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA":
LBB18_26:
	push	ebp
	sub	esp, 40
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [eax + 16]
	cmp	dword ptr [ebp - 36], ecx       # 4-byte Folded Reload
	jae	LBB18_30
# %bb.27:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edx, edx
	mov	eax, dword ptr [eax + 12]
LBB18_28:                               # =>This Inner Loop Header: Depth=1
	inc	eax
	cmp	ecx, 1
	lea	ecx, [ecx - 1]
	cmove	eax, edx
	cmp	dword ptr [ebp - 36], ecx       # 4-byte Folded Reload
	jb	LBB18_28
# %bb.29:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [ecx + 12], eax
	mov	dword ptr [ecx + 16], edx
	mov	dword ptr [ebp - 16], 1
LBB18_30:
	mov	dword ptr [ebp - 16], 1
	push	0
	push	0
	call	__CxxThrowException@8
	.def	 "?catch$69@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$69@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA":
LBB18_69:
	push	ebp
	sub	esp, 40
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 16]
	cmp	dword ptr [ebp - 36], eax       # 4-byte Folded Reload
	jae	LBB18_75
# %bb.70:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
LBB18_71:                               # =>This Inner Loop Header: Depth=1
	cmp	eax, 1
	lea	eax, [eax - 1]
	jne	LBB18_73
# %bb.72:                               #   in Loop: Header=BB18_71 Depth=1
	mov	dword ptr [ecx + 12], 0
LBB18_73:                               #   in Loop: Header=BB18_71 Depth=1
	cmp	dword ptr [ebp - 36], eax       # 4-byte Folded Reload
	jb	LBB18_71
# %bb.74:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [ebp - 16], 3
LBB18_75:
	mov	dword ptr [ebp - 16], 3
	push	0
	push	0
	call	__CxxThrowException@8
Lfunc_end5:
	.section	.xdata,"dr",associative,"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.p2align	2
"L__ehtable$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	429065506                       # MagicNumber
	.long	4                               # MaxState
	.long	("$stateUnwindMap$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z") # UnwindMap
	.long	2                               # NumTryBlocks
	.long	("$tryMap$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
"$tryMap$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	0                               # TryLow
	.long	0                               # TryHigh
	.long	1                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z") # HandlerArray
	.long	2                               # TryLow
	.long	2                               # TryHigh
	.long	3                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$1$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z") # HandlerArray
"$handlerMap$0$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$26@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA" # Handler
"$handlerMap$1$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$69@?0???$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
                                        # -- End function
	.def	 "?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z" # -- Begin function ?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z
	.p2align	4, 0x90
"?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z": # @"?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
Lfunc_begin6:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 84
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	mov	edx, dword ptr [ebp + 12]
	lea	eax, [ebp - 24]
	xor	esi, esi
	mov	ebx, esp
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 52], 0
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], 0
	mov	eax, 0
	mov	ecx, dword ptr [edx + 12]
	mov	edi, dword ptr [edx + 16]
	je	LBB19_2
# %bb.1:
	mov	eax, dword ptr [edx]
LBB19_2:
	test	eax, eax
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
	je	LBB19_4
# %bb.3:
	mov	esi, dword ptr [eax]
LBB19_4:
	test	edi, edi
	je	LBB19_15
# %bb.5:
	js	LBB19_6
# %bb.8:
	cmp	edi, 4096
	mov	dword ptr [ebp - 88], esi       # 4-byte Spill
	mov	dword ptr [ebp - 60], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 96], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 92], edi       # 4-byte Spill
	jb	LBB19_11
# %bb.9:
	lea	eax, [edi + 35]
	mov	dword ptr [ebp - 16], 3
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.10:
	mov	ecx, eax
	add	eax, 35
	and	eax, -32
	mov	dword ptr [eax - 4], ecx
	jmp	LBB19_12
LBB19_11:
	mov	dword ptr [ebp - 16], 3
	push	edi
	call	"??2@YAPAXI@Z"
	add	esp, 4
LBB19_12:
	mov	ebx, dword ptr [ebp - 92]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 60]       # 4-byte Reload
	mov	esi, dword ptr [ebp - 88]       # 4-byte Reload
	mov	dword ptr [ebp - 40], eax
	mov	dword ptr [ebp - 36], eax
	lea	ecx, [eax + ebx]
	mov	dword ptr [ebp - 32], ecx
	.p2align	4, 0x90
LBB19_13:                               # =>This Inner Loop Header: Depth=1
	mov	edx, dword ptr [esi + 8]
	mov	ecx, edi
	shr	ecx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 4]
	mov	ecx, dword ptr [ecx + 4*edx]
	mov	edx, edi
	inc	edi
	and	edx, 15
	movzx	ecx, byte ptr [ecx + edx]
	mov	byte ptr [eax], cl
	inc	eax
	dec	ebx
	jne	LBB19_13
# %bb.14:
	mov	ebx, dword ptr [ebp - 96]       # 4-byte Reload
	mov	dword ptr [ebp - 36], eax
	mov	dword ptr [ebp - 16], 4
LBB19_15:
	mov	esp, ebx
	lea	eax, [ebp - 40]
	mov	dword ptr [ebp - 16], 4
	lea	ecx, [ebp - 52]
	push	8
	push	6
	push	dword ptr [ebp + 20]
	push	dword ptr [ebp + 16]
	push	eax
	push	ecx
	call	"?encode@lodepng@@YAIAAV?$vector@EV?$allocator@E@std@@@std@@ABV23@IIW4LodePNGColorType@@I@Z"
	add	esp, 24
# %bb.16:
	test	eax, eax
	je	LBB19_17
# %bb.35:
	mov	ecx, dword ptr ["?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
	mov	edx, -3585
	mov	ecx, dword ptr [ecx + 4]
	and	edx, dword ptr [ecx + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20]
	or	edx, 512
	mov	dword ptr [ecx + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20], edx
	push	eax
	call	"?lodepng_error_text@@YAPBDI@Z"
	add	esp, 4
# %bb.36:
	push	eax
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.37:
	push	offset "??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.38:
	mov	ecx, dword ptr [ebp + 12]
	mov	edx, dword ptr [ecx + 16]
	mov	ecx, eax
	shr	edx, 2
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.39:
	push	offset "??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.40:
	mov	edx, dword ptr [ebp + 20]
	mov	ecx, eax
	imul	edx, dword ptr [ebp + 16]
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	jmp	LBB19_41
LBB19_17:
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 68], 0
	mov	byte ptr [ebp - 84], 0
	push	edi
	call	_strlen
	add	esp, 4
	mov	esi, eax
	cmp	eax, 15
	jbe	LBB19_18
# %bb.19:
	sub	esp, 12
	mov	al, byte ptr [ebp - 56]
	lea	ecx, [ebp - 84]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB19_20
LBB19_18:
	mov	dword ptr [ebp - 68], esi
	lea	eax, [ebp - 84]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 84], 0
LBB19_20:
	lea	eax, [ebp - 84]
	mov	dword ptr [ebp - 16], 5
	push	eax
	lea	eax, [ebp - 52]
	push	eax
	call	"?save_file@lodepng@@YAIABV?$vector@EV?$allocator@E@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z"
	add	esp, 8
# %bb.21:
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB19_41
# %bb.22:
	mov	ecx, dword ptr [ebp - 84]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB19_28
# %bb.23:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB19_24
# %bb.27:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB19_28:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB19_41:
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	je	LBB19_49
# %bb.42:
	mov	eax, dword ptr [ebp - 32]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB19_48
# %bb.43:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_44
# %bb.47:
	add	eax, 35
	mov	ecx, edx
LBB19_48:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
LBB19_49:
	mov	ecx, dword ptr [ebp - 52]
	test	ecx, ecx
	je	LBB19_57
# %bb.50:
	mov	eax, dword ptr [ebp - 44]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB19_56
# %bb.51:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_52
# %bb.55:
	add	eax, 35
	mov	ecx, edx
LBB19_56:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 52], 0
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], 0
LBB19_57:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 84
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB19_6:
	mov	dword ptr [ebp - 16], 3
	call	"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
# %bb.7:
LBB19_44:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.45:
LBB19_52:
	mov	dword ptr [ebp - 16], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.53:
LBB19_24:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.25:
	.def	 "?dtor$26@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$26@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_26:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$29@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$29@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_29:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB19_34
# %bb.30:
	mov	ecx, dword ptr [ebp - 84]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB19_33
# %bb.31:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_70
# %bb.32:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB19_33:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB19_34:
	mov	dword ptr [ebp - 68], 0
	mov	dword ptr [ebp - 64], 15
	mov	byte ptr [ebp - 84], 0
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB19_70:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$46@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$46@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_46:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$54@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$54@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_54:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$58@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$58@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_58:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 40]
	test	ecx, ecx
	je	LBB19_63
# %bb.59:
	mov	eax, dword ptr [ebp - 32]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB19_62
# %bb.60:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_71
# %bb.61:
	add	eax, 35
	mov	ecx, edx
LBB19_62:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 0
	mov	dword ptr [ebp - 32], 0
LBB19_63:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB19_71:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$64@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$64@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA":
LBB19_64:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 52]
	test	ecx, ecx
	je	LBB19_69
# %bb.65:
	mov	eax, dword ptr [ebp - 44]
	sub	eax, ecx
	cmp	eax, 4096
	jb	LBB19_68
# %bb.66:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB19_72
# %bb.67:
	add	eax, 35
	mov	ecx, edx
LBB19_68:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [ebp - 52], 0
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], 0
LBB19_69:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB19_72:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end6:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z":
	.long	-1                              # ToState
	.long	"?dtor$26@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$46@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$54@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$64@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$58@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.long	4                               # ToState
	.long	"?dtor$29@?0??saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.globl	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z" # -- Begin function ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	.p2align	4, 0x90
"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z": # @"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
Lfunc_begin7:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 60
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	push	dword ptr [ebp + 12]
	call	_strlen
	add	esp, 4
	mov	ecx, eax
	mov	eax, dword ptr [edi]
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	mov	eax, dword ptr [edi + ebx + 32]
	mov	edx, dword ptr [edi + ebx + 36]
	mov	dword ptr [ebp - 48], edi
	mov	esi, eax
	neg	esi
	mov	esi, 0
	sbb	esi, edx
	mov	esi, 0
	setl	byte ptr [ebp - 32]             # 1-byte Folded Spill
	cmp	ecx, eax
	sbb	esi, edx
	setl	byte ptr [ebp - 36]             # 1-byte Folded Spill
	sub	eax, ecx
	mov	cl, byte ptr [ebp - 36]         # 1-byte Reload
	sbb	edx, 0
	test	byte ptr [ebp - 32], cl         # 1-byte Folded Reload
	mov	ecx, 0
	cmove	edx, ecx
	cmove	eax, ecx
	mov	ecx, dword ptr [edi + ebx + 56]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	test	ecx, ecx
	je	LBB20_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [edi]
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
LBB20_2:
	cmp	dword ptr [edi + ebx + 12], 0
	je	LBB20_9
# %bb.3:
	mov	edx, 4
	mov	byte ptr [ebp - 44], 0
	jmp	LBB20_4
LBB20_9:
	mov	ecx, dword ptr [edi + ebx + 60]
	test	ecx, ecx
	je	LBB20_11
# %bb.10:
	cmp	ecx, edi
	je	LBB20_11
# %bb.15:
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.16:
	mov	edi, dword ptr [ebp + 8]
	mov	edx, 4
	mov	eax, dword ptr [edi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [edi + ecx + 12], 0
	sete	byte ptr [ebp - 44]
	jne	LBB20_4
	jmp	LBB20_17
LBB20_11:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	byte ptr [ebp - 44], 1
LBB20_17:
	mov	eax, dword ptr [eax + 4]
	mov	ecx, 448
	and	ecx, dword ptr [edi + eax + 20]
	cmp	ecx, 64
	jne	LBB20_18
LBB20_27:
	mov	ecx, dword ptr [edi + eax + 56]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 36]
	mov	dword ptr [ebp - 16], 4
	push	0
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	push	dword ptr [ebp + 12]
	call	eax
# %bb.28:
	xor	eax, dword ptr [ebp - 52]       # 4-byte Folded Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 40], 4         # 4-byte Folded Spill
	or	eax, edx
	jne	LBB20_39
# %bb.29:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	jmp	LBB20_30
	.p2align	4, 0x90
LBB20_34:                               #   in Loop: Header=BB20_30 Depth=1
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	dword ptr [edx], ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	byte ptr [esi], al
LBB20_35:                               #   in Loop: Header=BB20_30 Depth=1
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	add	eax, -1
	adc	ecx, -1
LBB20_30:                               # =>This Inner Loop Header: Depth=1
	cmp	eax, 1
	mov	edx, ecx
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	sbb	edx, 0
	jl	LBB20_31
# %bb.32:                               #   in Loop: Header=BB20_30 Depth=1
	mov	eax, dword ptr [edi]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edi + eax + 56]
	movzx	eax, byte ptr [edi + eax + 64]
	mov	edx, dword ptr [ecx + 32]
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB20_36
# %bb.33:                               #   in Loop: Header=BB20_30 Depth=1
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jg	LBB20_34
LBB20_36:                               #   in Loop: Header=BB20_30 Depth=1
	mov	edx, dword ptr [ecx]
	movzx	eax, al
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
# %bb.37:                               #   in Loop: Header=BB20_30 Depth=1
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB20_35
	jmp	LBB20_38
LBB20_18:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB20_19
	.p2align	4, 0x90
LBB20_22:                               #   in Loop: Header=BB20_19 Depth=1
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	dword ptr [edx], ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	byte ptr [esi], al
LBB20_23:                               #   in Loop: Header=BB20_19 Depth=1
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	add	eax, -1
	adc	ecx, -1
LBB20_19:                               # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	cmp	eax, 1
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	sbb	eax, 0
	mov	eax, dword ptr [edi]
	mov	eax, dword ptr [eax + 4]
	jl	LBB20_27
# %bb.20:                               #   in Loop: Header=BB20_19 Depth=1
	mov	ecx, dword ptr [edi + eax + 56]
	movzx	eax, byte ptr [edi + eax + 64]
	mov	edx, dword ptr [ecx + 32]
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB20_24
# %bb.21:                               #   in Loop: Header=BB20_19 Depth=1
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jg	LBB20_22
LBB20_24:                               #   in Loop: Header=BB20_19 Depth=1
	mov	edx, dword ptr [ecx]
	movzx	eax, al
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
# %bb.25:                               #   in Loop: Header=BB20_19 Depth=1
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB20_23
# %bb.26:
	mov	dword ptr [ebp - 40], 4         # 4-byte Folded Spill
LBB20_38:
	mov	edi, dword ptr [ebp + 8]
	jmp	LBB20_39
LBB20_31:
	mov	dword ptr [ebp - 40], 0         # 4-byte Folded Spill
LBB20_39:
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [edi + eax + 36], 0
	mov	dword ptr [edi + eax + 32], 0
LBB20_4:
	mov	eax, dword ptr [edi]
	mov	ecx, dword ptr [eax + 4]
	xor	eax, eax
	or	edx, dword ptr [edi + ecx + 12]
	cmp	dword ptr [edi + ecx + 56], 0
	sete	al
	and	edx, 23
	shl	eax, 2
	or	edx, eax
	mov	dword ptr [edi + ecx + 12], edx
	and	edx, dword ptr [edi + ecx + 16]
	jne	LBB20_5
# %bb.46:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB20_48
# %bb.47:
	mov	ecx, dword ptr [ebp - 48]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	edi, dword ptr [ebp + 8]
LBB20_48:
	mov	eax, dword ptr [ebp - 48]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB20_50
# %bb.49:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	edi, dword ptr [ebp + 8]
LBB20_50:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 60
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB20_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	mov	eax, edx
	#MEMBARRIER
	jne	LBB20_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB20_7:
	mov	edx, eax
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	ecx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	test	dl, 2
	cmove	ecx, eax
	test	dl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	eax, ecx
	lea	ecx, [ebp - 72]
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 72], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 72]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.45:
LBB20_44:                               # Block address taken
	add	ebp, 12
	xor	edx, edx
	mov	edi, dword ptr [ebp + 8]
	jmp	LBB20_4
	.def	 "?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_12:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 48]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB20_14
# %bb.13:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB20_14:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$40@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$40@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_40:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB20_41
# %bb.43:
	mov	eax, offset LBB20_44
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
LBB20_41:
	mov	dword ptr [ebp - 16], 5
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.42:
	.def	 "?dtor$51@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$51@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_51:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_52:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	lea	ecx, [ebp - 48]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA":
LBB20_53:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB20_55
# %bb.54:
	mov	ecx, dword ptr [ebp - 48]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB20_55:
	mov	eax, dword ptr [ebp - 48]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB20_57
# %bb.56:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB20_57:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end7:
	.section	.xdata,"dr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.p2align	2
"L__ehtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$51@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z":
	.long	4                               # TryLow
	.long	4                               # TryHigh
	.long	5                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z") # HandlerArray
"$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$40@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
                                        # -- End function
	.def	 "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.globl	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z" # -- Begin function ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	.p2align	4, 0x90
"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z": # @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
Lfunc_begin8:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 64
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 40], esi
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + edx + 56]
	test	ecx, ecx
	je	LBB21_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
LBB21_2:
	cmp	dword ptr [esi + edx + 12], 0
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	je	LBB21_9
# %bb.3:
	xor	edi, edi
	mov	byte ptr [ebp - 36], 0
	jmp	LBB21_4
LBB21_9:
	mov	ecx, dword ptr [esi + edx + 60]
	test	ecx, ecx
	je	LBB21_11
# %bb.10:
	cmp	ecx, esi
	je	LBB21_11
# %bb.15:
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edi, edi
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [esi + ecx + 12], 0
	sete	byte ptr [ebp - 36]
	jne	LBB21_4
	jmp	LBB21_17
LBB21_11:
	mov	byte ptr [ebp - 36], 1
LBB21_17:
	mov	eax, dword ptr [eax + 4]
	mov	eax, dword ptr [esi + eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 64], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 68]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.18:
	mov	ecx, dword ptr [ebp - 64]
	mov	edi, dword ptr [ebp + 8]
	mov	esi, eax
	test	ecx, ecx
	je	LBB21_21
# %bb.19:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB21_21
# %bb.20:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB21_21:
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [ebx + eax]
	movsx	edx, byte ptr [ebx + eax + 64]
	mov	eax, dword ptr [ebx + eax + 56]
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 32]
	mov	dword ptr [ebp - 16], 5
	sub	esp, 24
	movsd	xmm0, qword ptr [ebp - 48]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 4], xmm0
	mov	dword ptr [esp + 12], ecx
	lea	ecx, [ebp - 76]
	mov	dword ptr [esp + 20], edi
	mov	dword ptr [esp + 16], edx
	mov	dword ptr [esp], ecx
	mov	ecx, esi
	call	eax
# %bb.22:
	movzx	edi, byte ptr [ebp - 76]
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
LBB21_4:
	mov	eax, dword ptr [esi]
	xor	ecx, ecx
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [esi + edx + 56], 0
	mov	eax, dword ptr [esi + edx + 12]
	sete	cl
	and	eax, 23
	shl	ecx, 2
	or	ecx, edi
	or	eax, ecx
	mov	dword ptr [esi + edx + 12], eax
	and	eax, dword ptr [esi + edx + 16]
	jne	LBB21_5
# %bb.33:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB21_35
# %bb.34:
	mov	ecx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB21_35:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB21_37
# %bb.36:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB21_37:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 64
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB21_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB21_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB21_7:
	test	al, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 68]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 68], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 68]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.32:
LBB21_31:                               # Block address taken
	add	ebp, 12
	xor	edi, edi
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB21_4
	.def	 "?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_12:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB21_14
# %bb.13:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB21_14:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_23:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 64]
	test	ecx, ecx
	je	LBB21_26
# %bb.24:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB21_26
# %bb.25:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB21_26:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_27:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB21_28
# %bb.30:
	mov	eax, offset LBB21_31
	add	esp, 24
	pop	ebp
	ret                                     # CATCHRET
LBB21_28:
	mov	dword ptr [ebp - 16], 6
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.29:
	.def	 "?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_38:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_39:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA":
LBB21_40:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB21_42
# %bb.41:
	mov	ecx, dword ptr [ebp - 40]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB21_42:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB21_44
# %bb.43:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB21_44:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end8:
	.section	.xdata,"dr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.p2align	2
"L__ehtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z":
	.long	429065506                       # MagicNumber
	.long	7                               # MaxState
	.long	("$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z":
	.long	5                               # TryLow
	.long	5                               # TryHigh
	.long	6                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z") # HandlerArray
"$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z@4HA" # Handler
	.section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
                                        # -- End function
	.def	 "?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z";
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	"?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z" # -- Begin function ?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z
	.p2align	4, 0x90
"?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z": # @"?padImage@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 20]
	mov	edi, dword ptr [esp + 28]
	mov	eax, dword ptr [esi + 16]
	imul	edi, dword ptr [esp + 24]
	mov	ecx, eax
	shr	ecx, 2
	jmp	LBB22_1
	.p2align	4, 0x90
LBB22_22:                               #   in Loop: Header=BB22_1 Depth=1
	and	ebx, 15
	mov	byte ptr [eax + ebx], 0
	mov	eax, dword ptr [esi + 16]
	inc	eax
	mov	ecx, eax
	mov	dword ptr [esi + 16], eax
	shr	ecx, 2
LBB22_1:                                # =>This Inner Loop Header: Depth=1
	cmp	ecx, edi
	jae	LBB22_23
# %bb.2:                                #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, dword ptr [esi + 12]
	lea	edx, [eax + ecx]
	test	dl, 15
	jne	LBB22_5
# %bb.3:                                #   in Loop: Header=BB22_1 Depth=1
	lea	edx, [eax + 16]
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB22_5
# %bb.4:                                #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
	.p2align	4, 0x90
LBB22_5:                                #   in Loop: Header=BB22_1 Depth=1
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB22_7
# %bb.6:                                #   in Loop: Header=BB22_1 Depth=1
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
LBB22_7:                                #   in Loop: Header=BB22_1 Depth=1
	and	ebx, 15
	mov	byte ptr [eax + ebx], 0
	mov	edx, dword ptr [esi + 16]
	mov	ecx, dword ptr [esi + 12]
	lea	ebx, [edx + ecx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 16], eax
	jne	LBB22_10
# %bb.8:                                #   in Loop: Header=BB22_1 Depth=1
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB22_10
# %bb.9:                                #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
	.p2align	4, 0x90
LBB22_10:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB22_12
# %bb.11:                               #   in Loop: Header=BB22_1 Depth=1
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
LBB22_12:                               #   in Loop: Header=BB22_1 Depth=1
	and	ebx, 15
	mov	byte ptr [eax + ebx], 0
	mov	edx, dword ptr [esi + 16]
	mov	ecx, dword ptr [esi + 12]
	lea	ebx, [edx + ecx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 16], eax
	jne	LBB22_15
# %bb.13:                               #   in Loop: Header=BB22_1 Depth=1
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB22_15
# %bb.14:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
	.p2align	4, 0x90
LBB22_15:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB22_17
# %bb.16:                               #   in Loop: Header=BB22_1 Depth=1
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
LBB22_17:                               #   in Loop: Header=BB22_1 Depth=1
	and	ebx, 15
	mov	byte ptr [eax + ebx], 0
	mov	edx, dword ptr [esi + 16]
	mov	ecx, dword ptr [esi + 12]
	lea	ebx, [edx + ecx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 16], eax
	jne	LBB22_20
# %bb.18:                               #   in Loop: Header=BB22_1 Depth=1
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB22_20
# %bb.19:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
	.p2align	4, 0x90
LBB22_20:                               #   in Loop: Header=BB22_1 Depth=1
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB22_22
# %bb.21:                               #   in Loop: Header=BB22_1 Depth=1
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
	jmp	LBB22_22
LBB22_23:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	ret
                                        # -- End function
	.def	 "?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	eax, dword ptr [esp + 24]
	mov	ebx, 268435455
	mov	ecx, dword ptr [eax + 76]
	add	ebx, dword ptr [eax + 72]
	mov	edx, dword ptr [eax + 68]
	lea	esi, [ecx + 1]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	edi, ebx
	mov	edi, dword ptr [edx + 4*edi]
	movzx	ebp, byte ptr [edi + esi]
	mov	esi, ecx
	mov	edi, ecx
	add	ecx, 2
	shr	esi, 4
	and	edi, 15
	and	esi, ebx
	mov	edx, dword ptr [edx + 4*esi]
	mov	esi, dword ptr [eax + 80]
	movzx	edx, byte ptr [edx + edi]
	mov	edi, esi
	shl	edx, 8
	cmp	esi, 1
	cmove	ecx, esi
	xor	ebx, ebx
	add	edi, -2
	cmove	ecx, ebx
	or	edx, ebp
	mov	dword ptr [eax + 80], edi
	mov	dword ptr [eax + 76], ecx
	je	LBB24_4
# %bb.1:
	add	esi, -3
	mov	ebp, edx
	.p2align	4, 0x90
LBB24_2:                                # =>This Inner Loop Header: Depth=1
	inc	ecx
	sub	esi, 1
	cmovb	ecx, ebx
	dec	ebp
	jne	LBB24_2
# %bb.3:
	sub	edi, edx
	mov	dword ptr [eax + 76], ecx
	mov	dword ptr [eax + 80], edi
LBB24_4:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [esp + 28]
	mov	ebp, 268435455
	mov	esi, dword ptr [eax + 76]
	add	ebp, dword ptr [eax + 72]
	mov	ebx, dword ptr [eax + 68]
	mov	ecx, esi
	mov	edx, esi
	shr	ecx, 4
	and	edx, 15
	and	ecx, ebp
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	eax, byte ptr [ecx + edx]
	lea	edx, [esi + 1]
	lea	ecx, [esi + 3]
	mov	edi, edx
	and	edx, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 2]
	add	esi, 4
	movzx	edx, byte ptr [edi + edx]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, ecx
	and	ecx, 15
	shr	eax, 4
	and	eax, ebp
	mov	ebp, 3
	mov	eax, dword ptr [ebx + 4*eax]
	mov	ebx, dword ptr [esp + 28]
	mov	ebx, dword ptr [ebx + 80]
	movzx	eax, byte ptr [eax + ecx]
	mov	ecx, dword ptr [esp + 28]
	cmp	ebx, 1
	cmovne	ebp, esi
	cmp	ebx, 2
	mov	esi, 1
	cmove	ebp, ebx
	cmp	ebx, 3
	cmovne	esi, ebp
	xor	ebp, ebp
	cmp	ebx, 4
	cmovne	ebp, esi
	shl	edx, 8
	shl	edi, 16
	shl	eax, 24
	add	ebx, -4
	add	edx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [ecx + 76], ebp
	mov	dword ptr [ecx + 80], ebx
	or	edx, edi
	or	edx, eax
	mov	dword ptr [ecx + 36], edx
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	eax, dword ptr [esp + 28]
	mov	ebp, 268435455
	mov	esi, dword ptr [eax + 76]
	add	ebp, dword ptr [eax + 72]
	mov	ebx, dword ptr [eax + 68]
	lea	ecx, [esi + 3]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, ebp
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	eax, byte ptr [edx + ecx]
	lea	edx, [esi + 2]
	mov	edi, edx
	and	edx, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esi + 1]
	movzx	edx, byte ptr [edi + edx]
	mov	edi, eax
	and	eax, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	edi, byte ptr [edi + eax]
	mov	eax, esi
	shr	eax, 4
	and	eax, ebp
	mov	ecx, dword ptr [ebx + 4*eax]
	mov	eax, dword ptr [esp + 28]
	mov	ebx, esi
	add	esi, 4
	and	ebx, 15
	mov	ebp, dword ptr [eax + 80]
	mov	eax, 3
	movzx	ecx, byte ptr [ecx + ebx]
	cmp	ebp, 1
	cmovne	eax, esi
	cmp	ebp, 2
	mov	esi, 1
	cmove	eax, ebp
	cmp	ebp, 3
	cmovne	esi, eax
	xor	eax, eax
	cmp	ebp, 4
	cmovne	eax, esi
	shl	edx, 8
	shl	edi, 16
	shl	ecx, 24
	add	ebp, -4
	add	edx, dword ptr [esp]            # 4-byte Folded Reload
	or	edx, edi
	or	edx, ecx
	mov	edx, dword ptr [esp + 28]
	mov	dword ptr [edx + 76], eax
	mov	dword ptr [edx + 80], ebp
	setne	byte ptr [edx + 84]
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z" # -- Begin function ?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z
	.p2align	4, 0x90
"?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z": # @"?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 20]
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_2
# %bb.1:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_7
	jmp	LBB27_6
LBB27_2:
	mov	edx, dword ptr ["?ext0101_noop_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB27_3:                                # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_3
# %bb.4:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_7
LBB27_6:
	mov	ecx, dword ptr ["?ext0101_noop_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB27_9
LBB27_7:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB27_37
# %bb.8:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_noop_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB27_9:
	mov	dword ptr [eax + 20], offset "?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_11
# %bb.10:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_16
	jmp	LBB27_15
LBB27_11:
	mov	edx, dword ptr ["?ext0101_noopex_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB27_12:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_12
# %bb.13:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_16
LBB27_15:
	mov	ecx, dword ptr ["?ext0101_noopex_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB27_18
LBB27_16:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB27_37
# %bb.17:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_noopex_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB27_18:
	mov	dword ptr [eax + 20], offset "?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_20
# %bb.19:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_25
	jmp	LBB27_24
LBB27_20:
	mov	edx, dword ptr ["?ext0101_setcolor_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB27_21:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_21
# %bb.22:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_25
LBB27_24:
	mov	ecx, dword ptr ["?ext0101_setcolor_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB27_27
LBB27_25:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB27_37
# %bb.26:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_setcolor_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB27_27:
	mov	dword ptr [eax + 20], offset "?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_29
# %bb.28:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_34
	jmp	LBB27_33
LBB27_29:
	mov	edx, dword ptr ["?ext0101_setdebug_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB27_30:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB27_30
# %bb.31:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB27_34
LBB27_33:
	mov	ecx, dword ptr ["?ext0101_setdebug_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB27_36
LBB27_34:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB27_37
# %bb.35:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0101_setdebug_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB27_36:
	mov	dword ptr [eax + 20], offset "?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB27_37:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
                                        # -- End function
	.def	 "?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	esi, dword ptr [esp + 40]
	mov	edi, 268435455
	mov	edx, dword ptr [esi + 76]
	mov	ebx, dword ptr [esi + 68]
	mov	esi, dword ptr [esi + 72]
	lea	eax, [edx + 3]
	add	esi, edi
	mov	dword ptr [esp], ebx            # 4-byte Spill
	mov	ecx, eax
	and	eax, 15
	mov	ebp, esi
	mov	dword ptr [esp + 12], esi       # 4-byte Spill
	shr	ecx, 4
	and	ecx, esi
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	eax, byte ptr [ecx + eax]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	lea	eax, [edx + 2]
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	ecx, esi
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	edi, byte ptr [ecx + eax]
	lea	eax, [edx + 1]
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	ecx, esi
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	eax, byte ptr [ecx + eax]
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	mov	eax, edx
	shr	eax, 4
	and	eax, esi
	mov	esi, edx
	add	edx, 4
	mov	eax, dword ptr [ebx + 4*eax]
	and	esi, 15
	movzx	esi, byte ptr [eax + esi]
	mov	eax, dword ptr [esp + 40]
	mov	ecx, dword ptr [eax + 80]
	mov	eax, 3
	cmp	ecx, 1
	lea	ebx, [ecx - 4]
	cmove	edx, eax
	cmp	ecx, 2
	mov	eax, 1
	cmove	edx, ecx
	cmp	ecx, 3
	cmove	edx, eax
	xor	eax, eax
	cmp	ecx, 4
	cmove	edx, eax
	shl	edi, 8
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	shl	esi, 24
	add	edi, dword ptr [esp + 4]        # 4-byte Folded Reload
	shl	eax, 16
	or	edi, eax
	mov	eax, dword ptr [esp + 40]
	or	edi, esi
	lea	esi, [edx + 3]
	mov	dword ptr [esp + 4], edi        # 4-byte Spill
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	mov	dword ptr [eax + 76], edx
	mov	dword ptr [eax + 80], ebx
	mov	eax, dword ptr [esp]            # 4-byte Reload
	and	edi, ebp
	mov	edi, dword ptr [eax + 4*edi]
	movzx	esi, byte ptr [edi + esi]
	mov	dword ptr [esp + 8], esi        # 4-byte Spill
	lea	esi, [edx + 2]
	mov	edi, esi
	and	esi, 15
	shr	edi, 4
	and	edi, ebp
	mov	edi, dword ptr [eax + 4*edi]
	movzx	eax, byte ptr [edi + esi]
	lea	edi, [edx + 1]
	mov	esi, edi
	and	edi, 15
	shr	esi, 4
	and	esi, ebp
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	mov	esi, dword ptr [ebp + 4*esi]
	mov	ebp, dword ptr [esp]            # 4-byte Reload
	movzx	esi, byte ptr [esi + edi]
	mov	edi, edx
	shr	edi, 4
	and	edi, dword ptr [esp + 12]       # 4-byte Folded Reload
	mov	edi, dword ptr [ebp + 4*edi]
	mov	ebp, edx
	add	edx, 4
	and	ebp, 15
	cmp	ebx, 1
	mov	dword ptr [esp], edi            # 4-byte Spill
	mov	edi, 3
	cmove	edx, edi
	cmp	ebx, 2
	mov	edi, 1
	cmove	edx, ebx
	cmp	ebx, 3
	cmove	edx, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	cmp	ebx, 4
	mov	ebx, 0
	cmove	edx, ebx
	shl	eax, 8
	add	ecx, -8
	shl	esi, 16
	add	eax, dword ptr [esp + 8]        # 4-byte Folded Reload
	movzx	ebx, byte ptr [edi + ebp]
	mov	edi, dword ptr [esp + 40]
	mov	ebp, dword ptr [esp + 36]
	or	eax, esi
	mov	dword ptr [edi + 76], edx
	shl	ebx, 24
	mov	dword ptr [edi + 80], ecx
	mov	edx, 268435455
	or	eax, ebx
	mov	ebx, dword ptr [edi + 4]
	add	edx, dword ptr [ebp + 8]
	mov	dword ptr [esp], eax            # 4-byte Spill
	imul	ebx, eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	lea	eax, [4*eax]
	lea	esi, [eax + 4*ebx]
	add	esi, dword ptr [ebp + 12]
	mov	ecx, esi
	and	esi, 15
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [ebp + 4]
	mov	edi, dword ptr [ecx + 4*edx]
	mov	ecx, dword ptr [esp + 40]
	mov	edx, dword ptr [ecx + 36]
	mov	ecx, ebp
	mov	byte ptr [edi + esi], dl
	lea	esi, [eax + 4*ebx + 1]
	add	esi, dword ptr [ebp + 12]
	mov	ebp, dword ptr [ebp + 8]
	mov	edi, esi
	dec	ebp
	and	esi, 15
	shr	edi, 4
	and	ebp, edi
	mov	edi, dword ptr [ecx + 4]
	mov	edi, dword ptr [edi + 4*ebp]
	mov	byte ptr [edi + esi], dh
	lea	esi, [eax + 4*ebx + 2]
	lea	eax, [eax + 4*ebx + 3]
	mov	ebx, dword ptr [esp + 36]
	add	esi, dword ptr [ecx + 12]
	mov	ebp, dword ptr [ecx + 8]
	mov	edi, esi
	dec	ebp
	and	esi, 15
	shr	edi, 4
	and	ebp, edi
	mov	edi, dword ptr [ecx + 4]
	mov	ecx, edx
	shr	edx, 24
	shr	ecx, 16
	mov	edi, dword ptr [edi + 4*ebp]
	mov	byte ptr [edi + esi], cl
	add	eax, dword ptr [ebx + 12]
	mov	esi, dword ptr [ebx + 8]
	mov	ecx, eax
	dec	esi
	and	eax, 15
	shr	ecx, 4
	and	esi, ecx
	mov	ecx, dword ptr [ebx + 4]
	mov	ecx, dword ptr [ecx + 4*esi]
	mov	byte ptr [ecx + eax], dl
	mov	ecx, dword ptr [esp + 40]
	cmp	byte ptr [ecx + 84], 0
	je	LBB28_2
# %bb.1:
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	dword ptr [esp + 4]             # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	dword ptr [esp]                 # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01PKGAHCOL@?$CJ?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
LBB28_2:
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 52
	mov	ecx, dword ptr [esp + 76]
	mov	edx, 268435455
	mov	eax, dword ptr [ecx + 76]
	add	edx, dword ptr [ecx + 72]
	mov	ebp, dword ptr [ecx + 68]
	lea	esi, [eax + 3]
	mov	ecx, eax
	mov	dword ptr [esp + 28], ebp       # 4-byte Spill
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	mov	edi, esi
	and	esi, 15
	and	ecx, 15
	shr	edi, 4
	and	edi, edx
	mov	edi, dword ptr [ebp + 4*edi]
	movzx	esi, byte ptr [edi + esi]
	lea	edi, [eax + 2]
	mov	ebx, edi
	and	edi, 15
	shr	ebx, 4
	and	ebx, edx
	mov	ebx, dword ptr [ebp + 4*ebx]
	mov	dword ptr [esp], esi            # 4-byte Spill
	movzx	esi, byte ptr [ebx + edi]
	lea	edi, [eax + 1]
	mov	ebx, edi
	and	edi, 15
	shr	ebx, 4
	and	ebx, edx
	mov	ebx, dword ptr [ebp + 4*ebx]
	movzx	edi, byte ptr [ebx + edi]
	mov	ebx, eax
	add	eax, 4
	shr	ebx, 4
	and	ebx, edx
	mov	ebx, dword ptr [ebp + 4*ebx]
	movzx	ebp, byte ptr [ebx + ecx]
	mov	ecx, dword ptr [esp + 76]
	mov	ebx, dword ptr [ecx + 80]
	mov	ecx, 3
	cmp	ebx, 1
	mov	dword ptr [esp + 8], ebx        # 4-byte Spill
	cmove	eax, ecx
	cmp	ebx, 2
	mov	ecx, 1
	cmove	eax, ebx
	cmp	ebx, 3
	cmove	eax, ecx
	xor	ecx, ecx
	cmp	ebx, 4
	cmove	eax, ecx
	shl	esi, 8
	shl	edi, 16
	shl	ebp, 24
	mov	ecx, dword ptr [esp + 76]
	add	esi, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [ecx + 76], eax
	or	esi, edi
	lea	edi, [eax + 3]
	or	esi, ebp
	mov	ebp, edi
	and	edi, 15
	mov	dword ptr [esp + 12], esi       # 4-byte Spill
	lea	esi, [ebx - 4]
	mov	ebx, dword ptr [esp + 28]       # 4-byte Reload
	shr	ebp, 4
	mov	dword ptr [ecx + 80], esi
	and	ebp, edx
	mov	ebp, dword ptr [ebx + 4*ebp]
	movzx	ecx, byte ptr [ebp + edi]
	lea	edi, [eax + 2]
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, edx
	mov	ebp, dword ptr [ebx + 4*ebp]
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	movzx	ecx, byte ptr [ebp + edi]
	lea	edi, [eax + 1]
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, edx
	mov	ebp, dword ptr [ebx + 4*ebp]
	mov	dword ptr [esp + 24], ecx       # 4-byte Spill
	movzx	ecx, byte ptr [ebp + edi]
	mov	edi, eax
	mov	ebp, eax
	add	eax, 4
	shr	edi, 4
	and	ebp, 15
	and	edi, edx
	cmp	esi, 1
	mov	edx, dword ptr [esp + 76]
	mov	dword ptr [esp + 44], ecx       # 4-byte Spill
	mov	ecx, 3
	cmove	eax, ecx
	cmp	esi, 2
	mov	ecx, 1
	cmove	eax, esi
	cmp	esi, 3
	cmove	eax, ecx
	cmp	esi, 4
	mov	esi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [esi + ebp]
	mov	dword ptr [esp + 40], ecx       # 4-byte Spill
	mov	ecx, 0
	cmove	eax, ecx
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	lea	esi, [eax + 3]
	mov	dword ptr [edx + 76], eax
	mov	ebp, esi
	and	esi, 15
	shr	ebp, 4
	lea	edi, [ecx - 8]
	mov	ecx, dword ptr [esp + 16]       # 4-byte Reload
	mov	dword ptr [edx + 80], edi
	and	ebp, ecx
	mov	ebp, dword ptr [ebx + 4*ebp]
	movzx	edx, byte ptr [ebp + esi]
	lea	esi, [eax + 2]
	mov	ebp, esi
	and	esi, 15
	shr	ebp, 4
	and	ebp, ecx
	mov	ebp, dword ptr [ebx + 4*ebp]
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	edx, ecx
	lea	ecx, [eax + 1]
	movzx	ebp, byte ptr [ebp + esi]
	mov	esi, ecx
	and	ecx, 15
	shr	esi, 4
	and	esi, edx
	mov	esi, dword ptr [ebx + 4*esi]
	movzx	ecx, byte ptr [esi + ecx]
	mov	esi, 3
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	ecx, eax
	shr	ecx, 4
	and	ecx, edx
	mov	edx, eax
	add	eax, 4
	mov	ecx, dword ptr [ebx + 4*ecx]
	and	edx, 15
	cmp	edi, 1
	cmove	eax, esi
	cmp	edi, 2
	mov	esi, 1
	cmove	eax, edi
	cmp	edi, 3
	cmove	eax, esi
	cmp	edi, 4
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	movzx	ecx, byte ptr [ecx + edx]
	mov	edx, 0
	cmove	eax, edx
	shl	ebp, 8
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	add	ebp, dword ptr [esp]            # 4-byte Folded Reload
	shl	ecx, 24
	shl	edx, 16
	or	ebp, edx
	mov	edx, dword ptr [esp + 76]
	or	ebp, ecx
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [edx + 76], eax
	lea	esi, [ecx - 12]
	lea	ecx, [eax + 3]
	mov	dword ptr [edx + 80], esi
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [esp], ecx            # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [esp + 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 1]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	mov	edx, dword ptr [ebx + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, eax
	and	edx, 15
	mov	dword ptr [esp + 32], ecx       # 4-byte Spill
	mov	ecx, eax
	add	eax, 4
	shr	ecx, 4
	and	ecx, edi
	cmp	esi, 1
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	ecx, byte ptr [ecx + edx]
	mov	edx, 3
	cmove	eax, edx
	cmp	esi, 2
	mov	edx, 1
	cmove	eax, esi
	cmp	esi, 3
	cmove	eax, edx
	cmp	esi, 4
	mov	edx, 0
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	cmove	eax, edx
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	mov	edx, dword ptr [esp + 76]
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	add	esi, -16
	mov	dword ptr [edx + 76], eax
	mov	dword ptr [edx + 80], esi
	lea	edx, [ebp + ecx]
	cmp	ecx, edx
	mov	dword ptr [esp + 48], edx       # 4-byte Spill
	jae	LBB29_10
# %bb.1:
	mov	edx, dword ptr [esp + 24]       # 4-byte Reload
	mov	eax, dword ptr [esp + 44]       # 4-byte Reload
	mov	esi, dword ptr [esp + 32]       # 4-byte Reload
	shl	edx, 8
	shl	eax, 16
	shl	esi, 16
	add	edx, dword ptr [esp + 20]       # 4-byte Folded Reload
	or	edx, eax
	mov	eax, dword ptr [esp + 40]       # 4-byte Reload
	shl	eax, 24
	or	edx, eax
	mov	eax, dword ptr [esp + 36]       # 4-byte Reload
	shl	eax, 8
	add	eax, dword ptr [esp]            # 4-byte Folded Reload
	or	esi, eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	shl	eax, 24
	or	eax, esi
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	add	eax, edx
	cmp	edx, eax
	jae	LBB29_11
# %bb.2:
	lea	eax, [4*edx]
	mov	dword ptr [esp + 24], edx       # 4-byte Spill
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	jmp	LBB29_3
	.p2align	4, 0x90
LBB29_13:                               #   in Loop: Header=BB29_11 Depth=1
	dec	ebp
	je	LBB29_10
LBB29_11:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esp + 76]
	cmp	byte ptr [eax + 84], 0
	je	LBB29_13
# %bb.12:                               #   in Loop: Header=BB29_11 Depth=1
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB29_13
	.p2align	4, 0x90
LBB29_9:                                #   in Loop: Header=BB29_3 Depth=1
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	inc	ecx
	cmp	ecx, dword ptr [esp + 48]       # 4-byte Folded Reload
	je	LBB29_10
LBB29_3:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_4 Depth 2
	lea	eax, [4*ecx]
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	mov	edi, dword ptr [esp + 24]       # 4-byte Reload
	mov	dword ptr [esp + 12], ecx       # 4-byte Spill
	mov	dword ptr [esp + 28], eax       # 4-byte Spill
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	jmp	LBB29_4
	.p2align	4, 0x90
LBB29_6:                                #   in Loop: Header=BB29_4 Depth=2
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	inc	edi
	add	edx, 4
	dec	eax
	je	LBB29_7
LBB29_4:                                #   Parent Loop BB29_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
	mov	eax, dword ptr [esp + 76]
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	mov	edi, dword ptr [esp + 72]
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	ecx, dword ptr [eax + 4]
	mov	ebp, dword ptr [edi + 8]
	mov	esi, dword ptr [eax + 36]
	mov	eax, 268435455
	imul	ecx, edx
	mov	edx, dword ptr [edi + 12]
	add	ebp, eax
	mov	eax, esi
	add	ecx, dword ptr [esp + 28]       # 4-byte Folded Reload
	add	edx, ecx
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebp, ebx
	mov	ebx, dword ptr [edi + 4]
	mov	ebx, dword ptr [ebx + 4*ebp]
	mov	byte ptr [ebx + edx], al
	mov	edx, ecx
	or	edx, 1
	mov	ebp, dword ptr [edi + 8]
	add	edx, dword ptr [edi + 12]
	dec	ebp
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebp, ebx
	mov	ebx, dword ptr [edi + 4]
	mov	ebx, dword ptr [ebx + 4*ebp]
	mov	byte ptr [ebx + edx], ah
	mov	edx, ecx
	shr	eax, 16
	or	ecx, 3
	or	edx, 2
	mov	ebp, dword ptr [edi + 8]
	add	edx, dword ptr [edi + 12]
	dec	ebp
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebp, ebx
	mov	ebx, dword ptr [edi + 4]
	mov	ebx, dword ptr [ebx + 4*ebp]
	mov	byte ptr [ebx + edx], al
	add	ecx, dword ptr [edi + 12]
	mov	edx, dword ptr [edi + 8]
	mov	eax, ecx
	dec	edx
	and	ecx, 15
	shr	eax, 4
	and	edx, eax
	mov	eax, dword ptr [edi + 4]
	mov	edi, dword ptr [esp + 16]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, esi
	shr	edx, 24
	mov	byte ptr [eax + ecx], dl
	mov	ecx, dword ptr [esp + 76]
	cmp	byte ptr [ecx + 84], 0
	je	LBB29_6
# %bb.5:                                #   in Loop: Header=BB29_4 Depth=2
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	dword ptr [esp + 12]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	edi
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01PKGAHCOL@?$CJ?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB29_6
	.p2align	4, 0x90
LBB29_7:                                #   in Loop: Header=BB29_3 Depth=1
	mov	eax, dword ptr [esp + 76]
	cmp	byte ptr [eax + 84], 0
	je	LBB29_9
# %bb.8:                                #   in Loop: Header=BB29_3 Depth=1
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB29_9
LBB29_10:
	add	esp, 52
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
Lfunc_begin9:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 140
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	ebx, dword ptr [ebp + 12]
	lea	eax, [ebp - 24]
	mov	edx, 268435455
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebx + 76]
	mov	edi, dword ptr [ebx + 72]
	mov	ebx, dword ptr [ebx + 68]
	lea	ecx, [eax + 3]
	add	edi, edx
	mov	dword ptr [ebp - 40], ebx       # 4-byte Spill
	mov	esi, ecx
	and	ecx, 15
	mov	edx, edi
	shr	esi, 4
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	and	esi, edi
	mov	esi, dword ptr [ebx + 4*esi]
	movzx	ecx, byte ptr [esi + ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, edx
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	lea	ecx, [eax + 1]
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, edx
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	esi, byte ptr [edi + ecx]
	mov	edi, eax
	mov	ecx, eax
	add	eax, 4
	shr	edi, 4
	and	ecx, 15
	and	edi, edx
	mov	edx, dword ptr [ebp + 12]
	mov	edi, dword ptr [ebx + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	edi, dword ptr [edx + 80]
	mov	edx, 3
	cmp	edi, 1
	mov	dword ptr [ebp - 120], edi      # 4-byte Spill
	lea	ebx, [edi - 4]
	cmove	eax, edx
	cmp	edi, 2
	mov	edx, 1
	cmove	eax, edi
	cmp	edi, 3
	cmove	eax, edx
	xor	edx, edx
	cmp	edi, 4
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 52]       # 4-byte Reload
	shl	esi, 16
	shl	ecx, 24
	shl	edx, 8
	add	edx, dword ptr [ebp - 36]       # 4-byte Folded Reload
	or	edx, esi
	or	edx, ecx
	mov	ecx, dword ptr [ebp + 12]
	mov	dword ptr [ebp - 52], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [ecx + 76], eax
	mov	dword ptr [ecx + 80], ebx
	lea	ecx, [eax + 3]
	mov	esi, ecx
	and	ecx, 15
	shr	esi, 4
	and	esi, edi
	mov	esi, dword ptr [edx + 4*esi]
	movzx	ecx, byte ptr [esi + ecx]
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	esi, ecx
	and	ecx, 15
	shr	esi, 4
	and	esi, edi
	mov	edi, edx
	mov	esi, dword ptr [edx + 4*esi]
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	movzx	ecx, byte ptr [esi + ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	lea	ecx, [eax + 1]
	mov	esi, ecx
	and	ecx, 15
	shr	esi, 4
	and	esi, edx
	mov	esi, dword ptr [edi + 4*esi]
	mov	edi, 3
	movzx	ecx, byte ptr [esi + ecx]
	mov	esi, eax
	and	esi, 15
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	ecx, eax
	add	eax, 4
	shr	ecx, 4
	and	ecx, edx
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	cmp	ebx, 1
	cmove	eax, edi
	cmp	ebx, 2
	mov	edi, 1
	cmove	eax, ebx
	cmp	ebx, 3
	cmove	eax, edi
	cmp	ebx, 4
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [edx + 4*ecx]
	mov	edx, 0
	cmove	eax, edx
	mov	edx, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	ecx, byte ptr [ecx + esi]
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	shl	edx, 16
	shl	esi, 8
	shl	ecx, 24
	add	esi, dword ptr [ebp - 48]       # 4-byte Folded Reload
	or	esi, edx
	mov	edx, dword ptr [ebp + 12]
	or	esi, ecx
	mov	ecx, dword ptr [ebp - 120]      # 4-byte Reload
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	dword ptr [edx + 76], eax
	add	ecx, -8
	mov	dword ptr [edx + 80], ecx
	lea	edx, [eax + 3]
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	esi, edi
	mov	esi, dword ptr [ebx + 4*esi]
	movzx	edx, byte ptr [esi + edx]
	mov	dword ptr [ebp - 48], edx       # 4-byte Spill
	lea	edx, [eax + 2]
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	esi, edi
	mov	edi, ebx
	mov	esi, dword ptr [ebx + 4*esi]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	movzx	edx, byte ptr [esi + edx]
	lea	esi, [eax + 1]
	mov	dword ptr [ebp - 56], edx       # 4-byte Spill
	mov	edx, esi
	and	esi, 15
	shr	edx, 4
	and	edx, ebx
	mov	edx, dword ptr [edi + 4*edx]
	movzx	edx, byte ptr [edx + esi]
	mov	esi, eax
	and	esi, 15
	mov	dword ptr [ebp - 44], edx       # 4-byte Spill
	mov	edx, eax
	add	eax, 4
	shr	edx, 4
	and	edx, ebx
	cmp	ecx, 1
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edx, dword ptr [edi + 4*edx]
	mov	edi, dword ptr [ebp - 56]       # 4-byte Reload
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	edx, 3
	cmove	eax, edx
	cmp	ecx, 2
	mov	edx, 1
	cmove	eax, ecx
	cmp	ecx, 3
	cmove	eax, edx
	cmp	ecx, 4
	mov	ecx, 0
	mov	edx, dword ptr [ebp + 12]
	cmove	eax, ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 8
	add	edi, dword ptr [ebp - 48]       # 4-byte Folded Reload
	movzx	ecx, byte ptr [ecx + esi]
	mov	dword ptr [edx + 76], eax
	mov	eax, dword ptr [ebp - 120]      # 4-byte Reload
	mov	esi, dword ptr [ebp - 52]       # 4-byte Reload
	add	eax, -12
	shl	ecx, 24
	mov	dword ptr [edx + 80], eax
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	shl	eax, 16
	or	edi, eax
	or	edi, ecx
	cmp	byte ptr [edx + 84], 0
	je	LBB30_3
# %bb.1:
	mov	eax, dword ptr ["?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
	mov	ecx, -3585
	mov	eax, dword ptr [eax + 4]
	and	ecx, dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20]
	or	ecx, 512
	mov	dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20], ecx
	mov	ecx, offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	push	esi
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01CLKCMJKC@?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	ebx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01CLKCMJKC@?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	edi
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	eax, dword ptr [ebp + 12]
	cmp	byte ptr [eax + 84], 0
	je	LBB30_3
# %bb.2:
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	edx, esi
	mov	ecx, eax
	sub	edx, edi
	inc	edx
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	edx, ebx
	mov	ecx, eax
	sub	edx, edi
	inc	edx
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	lea	edx, [edi + esi]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	lea	edx, [edi + ebx]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02MNMNLDAI@?$CJ?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
LBB30_3:
	movq	xmm1, qword ptr [__real@4330000000000000] # xmm1 = mem[0],zero
	lea	ecx, [edi + esi + 1]
	mov	eax, esi
	movd	xmm0, edi
	mov	dword ptr [ebp - 64], ecx       # 4-byte Spill
	mov	ecx, ebx
	sub	eax, edi
	sub	ecx, edi
	mov	dword ptr [ebp - 60], ecx       # 4-byte Spill
	lea	ecx, [edi + ebx + 1]
	mov	edi, eax
	mov	eax, esi
	por	xmm0, xmm1
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	subsd	xmm0, xmm1
	movupd	xmmword ptr [ebp - 120], xmm0   # 16-byte Spill
	jmp	LBB30_4
	.p2align	4, 0x90
LBB30_9:                                #   in Loop: Header=BB30_4 Depth=1
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	inc	edi
LBB30_4:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_6 Depth 2
	cmp	edi, dword ptr [ebp - 64]       # 4-byte Folded Reload
	jae	LBB30_55
# %bb.5:                                #   in Loop: Header=BB30_4 Depth=1
	mov	edx, dword ptr [ebp - 60]       # 4-byte Reload
	mov	ecx, edi
	mov	dword ptr [ebp - 40], edi       # 4-byte Spill
	sub	ecx, eax
	lea	eax, [4*edi]
	imul	ecx, ecx
	mov	dword ptr [ebp - 68], eax       # 4-byte Spill
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	jmp	LBB30_6
LBB30_39:                               #   in Loop: Header=BB30_6 Depth=2
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB30_40:                               #   in Loop: Header=BB30_6 Depth=2
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB30_41:                               #   in Loop: Header=BB30_6 Depth=2
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
LBB30_42:                               #   in Loop: Header=BB30_6 Depth=2
	inc	edx
LBB30_6:                                #   Parent Loop BB30_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	edx, dword ptr [ebp - 48]       # 4-byte Folded Reload
	jae	LBB30_7
# %bb.10:                               #   in Loop: Header=BB30_6 Depth=2
	mov	eax, edx
	movq	xmm1, qword ptr [__real@4330000000000000] # xmm1 = mem[0],zero
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	sub	eax, ebx
	imul	eax, eax
	add	eax, dword ptr [ebp - 44]       # 4-byte Folded Reload
	movd	xmm0, eax
	por	xmm0, xmm1
	subsd	xmm0, xmm1
	movupd	xmm1, xmmword ptr [ebp - 120]   # 16-byte Reload
	sqrtsd	xmm0, xmm0
	ucomisd	xmm1, xmm0
	jb	LBB30_12
# %bb.11:                               #   in Loop: Header=BB30_6 Depth=2
	mov	ecx, dword ptr [ebp + 12]
	mov	ebx, 268435455
	mov	eax, dword ptr [ecx + 36]
	mov	ecx, dword ptr [ecx + 4]
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 68]       # 4-byte Reload
	imul	ecx, edx
	lea	ecx, [eax + 4*ecx]
	mov	eax, dword ptr [ebp + 8]
	mov	edx, dword ptr [eax + 12]
	mov	edi, dword ptr [eax + 8]
	add	edx, ecx
	add	edi, ebx
	mov	ebx, dword ptr [ebp - 56]       # 4-byte Reload
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	esi, dword ptr [esi + 4*edi]
	mov	byte ptr [esi + edx], bl
	mov	edx, ecx
	or	edx, 1
	mov	edi, dword ptr [eax + 8]
	add	edx, dword ptr [eax + 12]
	dec	edi
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	esi, dword ptr [esi + 4*edi]
	mov	byte ptr [esi + edx], bh
	mov	edx, ecx
	or	ecx, 3
	or	edx, 2
	mov	edi, dword ptr [eax + 8]
	add	edx, dword ptr [eax + 12]
	dec	edi
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	edi, esi
	mov	esi, dword ptr [eax + 4]
	mov	esi, dword ptr [esi + 4*edi]
	mov	edi, ebx
	shr	ebx, 16
	mov	byte ptr [esi + edx], bl
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	add	ecx, dword ptr [eax + 12]
	mov	esi, dword ptr [eax + 8]
	mov	edx, ecx
	dec	esi
	and	ecx, 15
	shr	edx, 4
	and	esi, edx
	mov	edx, dword ptr [eax + 4]
	mov	eax, edi
	mov	edi, dword ptr [ebp - 40]       # 4-byte Reload
	shr	eax, 24
	mov	edx, dword ptr [edx + 4*esi]
	mov	byte ptr [edx + ecx], al
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
LBB30_12:                               #   in Loop: Header=BB30_6 Depth=2
	mov	eax, dword ptr [ebp + 12]
	cmp	byte ptr [eax + 84], 0
	je	LBB30_42
# %bb.13:                               #   in Loop: Header=BB30_6 Depth=2
	movupd	xmm1, xmmword ptr [ebp - 120]   # 16-byte Reload
	lea	esi, [ebp - 144]
	mov	dword ptr [ebp - 16], -1
	ucomisd	xmm1, xmm0
	jae	LBB30_14
# %bb.15:                               #   in Loop: Header=BB30_6 Depth=2
	push	119
	push	119
	push	221
	jmp	LBB30_16
	.p2align	4, 0x90
LBB30_14:                               #   in Loop: Header=BB30_6 Depth=2
	push	119
	push	221
	push	119
LBB30_16:                               #   in Loop: Header=BB30_6 Depth=2
	push	esi
	call	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	add	esp, 16
	mov	eax, dword ptr [ebp - 128]
	cmp	dword ptr [ebp - 124], 15
	mov	ecx, esi
	jbe	LBB30_18
# %bb.17:                               #   in Loop: Header=BB30_6 Depth=2
	mov	ecx, dword ptr [ebp - 144]
LBB30_18:                               #   in Loop: Header=BB30_6 Depth=2
	mov	dword ptr [ebp - 16], 2
	push	eax
	push	ecx
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.19:                               #   in Loop: Header=BB30_6 Depth=2
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.20:                               #   in Loop: Header=BB30_6 Depth=2
	mov	ecx, eax
	push	dword ptr [ebp - 40]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.21:                               #   in Loop: Header=BB30_6 Depth=2
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.22:                               #   in Loop: Header=BB30_6 Depth=2
	mov	ecx, eax
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.23:                               #   in Loop: Header=BB30_6 Depth=2
	push	offset "??_C@_01PKGAHCOL@?$CJ?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.24:                               #   in Loop: Header=BB30_6 Depth=2
	mov	dword ptr [ebp - 72], 15
	mov	dword ptr [ebp - 76], 4
	mov	dword ptr [ebp - 92], 1831885595
	mov	byte ptr [ebp - 88], 0
	mov	dword ptr [ebp - 16], 3
	push	4
	lea	ecx, [ebp - 92]
	push	ecx
	push	eax
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.25:                               #   in Loop: Header=BB30_6 Depth=2
	mov	eax, dword ptr [ebp - 72]
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 40]       # 4-byte Reload
	cmp	eax, 16
	jb	LBB30_33
# %bb.26:                               #   in Loop: Header=BB30_6 Depth=2
	mov	ecx, dword ptr [ebp - 92]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB30_32
# %bb.27:                               #   in Loop: Header=BB30_6 Depth=2
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB30_28
# %bb.31:                               #   in Loop: Header=BB30_6 Depth=2
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB30_32:                               #   in Loop: Header=BB30_6 Depth=2
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB30_33:                               #   in Loop: Header=BB30_6 Depth=2
	mov	eax, dword ptr [ebp - 124]
	cmp	eax, 16
	jb	LBB30_41
# %bb.34:                               #   in Loop: Header=BB30_6 Depth=2
	mov	ecx, dword ptr [ebp - 144]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB30_40
# %bb.35:                               #   in Loop: Header=BB30_6 Depth=2
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jb	LBB30_39
	jmp	LBB30_36
	.p2align	4, 0x90
LBB30_7:                                #   in Loop: Header=BB30_4 Depth=1
	mov	eax, dword ptr [ebp + 12]
	cmp	byte ptr [eax + 84], 0
	je	LBB30_9
# %bb.8:                                #   in Loop: Header=BB30_4 Depth=1
	mov	dword ptr [ebp - 16], -1
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB30_9
LBB30_55:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 140
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB30_28:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.29:
LBB30_36:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.37:
	.def	 "?dtor$30@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$30@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB30_30:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$38@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$38@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB30_38:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$43@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$43@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB30_43:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	eax, dword ptr [ebp - 72]
	cmp	eax, 16
	jb	LBB30_48
# %bb.44:
	mov	ecx, dword ptr [ebp - 92]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB30_47
# %bb.45:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB30_56
# %bb.46:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB30_47:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB30_48:
	mov	dword ptr [ebp - 76], 0
	mov	dword ptr [ebp - 72], 15
	mov	byte ptr [ebp - 92], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB30_56:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$49@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$49@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA":
LBB30_49:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	eax, dword ptr [ebp - 124]
	cmp	eax, 16
	jb	LBB30_54
# %bb.50:
	mov	ecx, dword ptr [ebp - 144]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB30_53
# %bb.51:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB30_57
# %bb.52:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB30_53:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB30_54:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB30_57:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end9:
	.section	.xdata,"dr"
	.p2align	2
"L__ehtable$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z":
	.long	429065506                       # MagicNumber
	.long	4                               # MaxState
	.long	("$stateUnwindMap$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z":
	.long	-1                              # ToState
	.long	"?dtor$30@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$38@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$49@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.long	2                               # ToState
	.long	"?dtor$43@?0??ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@4HA" # Action
	.text
                                        # -- End function
	.def	 "?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z" # -- Begin function ?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
	.p2align	4, 0x90
"?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 36
	mov	ecx, dword ptr [esp + 60]
	mov	eax, 268435455
	mov	edx, dword ptr [ecx + 76]
	mov	ebx, dword ptr [ecx + 72]
	mov	ebp, dword ptr [ecx + 68]
	lea	esi, [edx + 3]
	add	ebx, eax
	mov	dword ptr [esp + 8], ebp        # 4-byte Spill
	mov	edi, esi
	and	esi, 15
	mov	eax, ebx
	shr	edi, 4
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
	and	edi, ebx
	mov	edi, dword ptr [ebp + 4*edi]
	movzx	ecx, byte ptr [edi + esi]
	lea	esi, [edx + 2]
	mov	edi, ebp
	mov	ebx, esi
	and	esi, 15
	shr	ebx, 4
	and	ebx, eax
	mov	ebx, dword ptr [ebp + 4*ebx]
	mov	dword ptr [esp], ecx            # 4-byte Spill
	movzx	ecx, byte ptr [ebx + esi]
	lea	esi, [edx + 1]
	mov	ebx, esi
	and	esi, 15
	shr	ebx, 4
	and	ebx, eax
	mov	ebx, dword ptr [ebp + 4*ebx]
	mov	ebp, edx
	and	ebp, 15
	movzx	ebx, byte ptr [ebx + esi]
	mov	esi, edx
	add	edx, 4
	shr	esi, 4
	and	esi, eax
	mov	eax, 3
	mov	esi, dword ptr [edi + 4*esi]
	mov	edi, dword ptr [esp + 60]
	movzx	ebp, byte ptr [esi + ebp]
	mov	esi, dword ptr [edi + 80]
	cmp	esi, 1
	mov	dword ptr [esp + 4], esi        # 4-byte Spill
	cmove	edx, eax
	cmp	esi, 2
	mov	eax, 1
	cmove	edx, esi
	cmp	esi, 3
	cmove	edx, eax
	xor	eax, eax
	cmp	esi, 4
	cmove	edx, eax
	shl	ecx, 8
	shl	ebx, 16
	shl	ebp, 24
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	add	ecx, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [edi + 76], edx
	or	ecx, ebx
	lea	ebx, [esi - 4]
	or	ecx, ebp
	mov	dword ptr [edi + 80], ebx
	lea	edi, [edx + 3]
	mov	dword ptr [esp], ecx            # 4-byte Spill
	mov	ecx, dword ptr [esp + 12]       # 4-byte Reload
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, ecx
	mov	ebp, dword ptr [eax + 4*ebp]
	movzx	esi, byte ptr [ebp + edi]
	lea	edi, [edx + 2]
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, ecx
	mov	ebp, dword ptr [eax + 4*ebp]
	mov	dword ptr [esp + 32], esi       # 4-byte Spill
	movzx	esi, byte ptr [ebp + edi]
	lea	edi, [edx + 1]
	mov	ebp, edi
	and	edi, 15
	shr	ebp, 4
	and	ebp, ecx
	mov	ebp, dword ptr [eax + 4*ebp]
	mov	dword ptr [esp + 28], esi       # 4-byte Spill
	movzx	esi, byte ptr [ebp + edi]
	mov	edi, edx
	mov	ebp, edx
	add	edx, 4
	shr	edi, 4
	and	ebp, 15
	and	edi, ecx
	cmp	ebx, 1
	mov	ecx, 3
	cmove	edx, ecx
	cmp	ebx, 2
	mov	ecx, 1
	mov	edi, dword ptr [eax + 4*edi]
	cmove	edx, ebx
	cmp	ebx, 3
	mov	dword ptr [esp + 24], esi       # 4-byte Spill
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	cmove	edx, ecx
	cmp	ebx, 4
	mov	ecx, 0
	cmove	edx, ecx
	mov	ecx, dword ptr [esp + 60]
	movzx	ebp, byte ptr [edi + ebp]
	mov	ebx, edx
	lea	eax, [esi - 8]
	mov	esi, dword ptr [esp + 8]        # 4-byte Reload
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	mov	dword ptr [ecx + 76], edx
	mov	dword ptr [ecx + 80], eax
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	lea	ecx, [edx + 3]
	add	edx, 2
	mov	edi, ecx
	and	ecx, 15
	shr	edi, 4
	and	edi, eax
	mov	edi, dword ptr [esi + 4*edi]
	movzx	ecx, byte ptr [edi + ecx]
	mov	dword ptr [esp + 16], ecx       # 4-byte Spill
	mov	ecx, edx
	and	edx, 15
	shr	ecx, 4
	and	ecx, eax
	mov	ecx, dword ptr [esi + 4*ecx]
	movzx	edi, byte ptr [ecx + edx]
	lea	ecx, [ebx + 1]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, eax
	mov	edx, dword ptr [esi + 4*edx]
	shl	edi, 8
	add	edi, dword ptr [esp + 16]       # 4-byte Folded Reload
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, ebx
	shr	edx, 4
	and	edx, eax
	mov	eax, ebx
	add	ebx, 8
	mov	edx, dword ptr [esi + 4*edx]
	and	eax, 15
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	shl	ecx, 16
	or	edi, ecx
	mov	ecx, 6
	movzx	eax, byte ptr [edx + eax]
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	shl	eax, 24
	or	edi, eax
	cmp	edx, 1
	mov	eax, 7
	cmovne	eax, ebx
	cmp	edx, 2
	mov	ebx, dword ptr [esp + 60]
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	cmovne	ecx, eax
	cmp	edx, 3
	mov	eax, 5
	cmovne	eax, ecx
	cmp	edx, 4
	lea	ecx, [esi - 12]
	cmove	eax, edx
	cmp	ecx, 1
	mov	edx, 3
	cmove	eax, edx
	cmp	ecx, 2
	mov	edx, 1
	cmove	eax, ecx
	cmp	ecx, 3
	cmove	eax, edx
	cmp	ecx, 4
	mov	edx, 0
	cmove	eax, edx
	mov	edx, esi
	mov	esi, dword ptr [esp]            # 4-byte Reload
	add	edx, -16
	mov	dword ptr [ebx + 76], eax
	mov	dword ptr [ebx + 80], edx
	cmp	edi, esi
	jae	LBB31_1
LBB31_5:
	add	esp, 36
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB31_1:
	mov	eax, dword ptr [esp + 28]       # 4-byte Reload
	mov	ecx, dword ptr [esp + 24]       # 4-byte Reload
	shl	ebp, 24
	shl	eax, 8
	shl	ecx, 16
	add	eax, dword ptr [esp + 32]       # 4-byte Folded Reload
	or	ecx, eax
	or	ebp, ecx
	mov	ebx, ebp
	lea	edx, [4*ebp]
	lea	ebp, [4*esi]
	jmp	LBB31_2
	.p2align	4, 0x90
LBB31_4:                                #   in Loop: Header=BB31_2 Depth=1
	mov	edx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	inc	esi
	inc	ebx
	add	edx, 4
	add	ebp, 4
	cmp	esi, dword ptr [esp + 16]       # 4-byte Folded Reload
	ja	LBB31_5
LBB31_2:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esp + 60]
	mov	edi, dword ptr [esp + 56]
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	mov	dword ptr [esp], esi            # 4-byte Spill
	mov	dword ptr [esp + 12], ebx       # 4-byte Spill
	mov	ebx, ebp
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	mov	ecx, dword ptr [eax + 36]
	mov	esi, dword ptr [edi + 8]
	mov	dword ptr [esp + 20], ecx       # 4-byte Spill
	mov	ecx, dword ptr [eax + 4]
	mov	eax, 268435455
	add	esi, eax
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	imul	ecx, edx
	mov	edx, dword ptr [edi + 12]
	add	edx, ecx
	add	edx, ebp
	mov	ebp, edx
	and	edx, 15
	shr	ebp, 4
	and	esi, ebp
	mov	ebp, dword ptr [edi + 4]
	mov	esi, dword ptr [ebp + 4*esi]
	mov	byte ptr [esi + edx], al
	mov	edx, dword ptr [edi + 12]
	mov	ebp, dword ptr [edi + 8]
	add	edx, ecx
	dec	ebp
	lea	edx, [ebx + edx + 1]
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	ebp, esi
	mov	esi, dword ptr [edi + 4]
	mov	esi, dword ptr [esi + 4*ebp]
	mov	byte ptr [esi + edx], ah
	mov	edx, dword ptr [edi + 12]
	mov	ebp, dword ptr [edi + 8]
	add	edx, ecx
	dec	ebp
	lea	edx, [ebx + edx + 2]
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	esi, edx
	and	edx, 15
	shr	esi, 4
	and	ebp, esi
	mov	esi, dword ptr [edi + 4]
	mov	esi, dword ptr [esi + 4*ebp]
	mov	ebp, eax
	shr	eax, 16
	mov	byte ptr [esi + edx], al
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	esi, dword ptr [esp]            # 4-byte Reload
	add	ecx, dword ptr [edi + 12]
	mov	edx, dword ptr [edi + 8]
	lea	eax, [eax + ecx + 3]
	dec	edx
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [edi + 4]
	mov	ecx, dword ptr [ecx + 4*edx]
	mov	edx, ebp
	shr	edx, 24
	mov	byte ptr [ecx + eax], dl
	mov	ecx, dword ptr [esp + 60]
	cmp	byte ptr [ecx + 84], 0
	je	LBB31_4
# %bb.3:                                #   in Loop: Header=BB31_2 Depth=1
	push	offset "??_C@_01ODHLEDKK@?$CI?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	esi
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	mov	ecx, eax
	push	ebx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	push	offset "??_C@_01PKGAHCOL@?$CJ?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB31_4
                                        # -- End function
	.def	 "?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	"?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z" # -- Begin function ?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z
	.p2align	4, 0x90
"?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z": # @"?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, dword ptr [esp + 20]
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB32_2
# %bb.1:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB32_7
	jmp	LBB32_6
LBB32_2:
	mov	edx, dword ptr ["?ext0102_pixel_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB32_3:                                # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB32_3
# %bb.4:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB32_7
LBB32_6:
	mov	ecx, dword ptr ["?ext0102_pixel_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB32_9
LBB32_7:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB32_37
# %bb.8:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0102_pixel_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB32_9:
	mov	dword ptr [eax + 20], offset "?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB32_11
# %bb.10:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB32_16
	jmp	LBB32_15
LBB32_11:
	mov	edx, dword ptr ["?ext0102_rect_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB32_12:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB32_12
# %bb.13:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB32_16
LBB32_15:
	mov	ecx, dword ptr ["?ext0102_rect_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB32_18
LBB32_16:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB32_37
# %bb.17:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0102_rect_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB32_18:
	mov	dword ptr [eax + 20], offset "?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB32_20
# %bb.19:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB32_25
	jmp	LBB32_24
LBB32_20:
	mov	edx, dword ptr ["?ext0102_circle_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB32_21:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB32_21
# %bb.22:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB32_25
LBB32_24:
	mov	ecx, dword ptr ["?ext0102_circle_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB32_27
LBB32_25:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB32_37
# %bb.26:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0102_circle_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB32_27:
	mov	dword ptr [eax + 20], offset "?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	mov	edi, dword ptr [esi]
	mov	ebx, dword ptr [edi + 4]
	cmp	byte ptr [ebx + 13], 0
	je	LBB32_29
# %bb.28:
	xor	ebp, ebp
	mov	eax, edi
	cmp	byte ptr [eax + 13], 0
	jne	LBB32_34
	jmp	LBB32_33
LBB32_29:
	mov	edx, dword ptr ["?ext0102_line_id@@3IA"]
	mov	eax, edi
	.p2align	4, 0x90
LBB32_30:                               # =>This Inner Loop Header: Depth=1
	mov	ebp, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	ebp, edx
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB32_30
# %bb.31:
	xor	ebx, ebx
	cmp	ebp, edx
	setae	bl
	mov	ebp, ebx
	mov	ebx, ecx
	cmp	byte ptr [eax + 13], 0
	jne	LBB32_34
LBB32_33:
	mov	ecx, dword ptr ["?ext0102_line_id@@3IA"]
	cmp	ecx, dword ptr [eax + 16]
	jae	LBB32_36
LBB32_34:
	cmp	dword ptr [esi + 4], 178956970
	je	LBB32_37
# %bb.35:
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr ["?ext0102_line_id@@3IA"]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], edi
	mov	dword ptr [eax + 4], edi
	mov	dword ptr [eax + 8], edi
	mov	word ptr [eax + 12], 0
	mov	ecx, esi
	push	eax
	push	ebp
	push	ebx
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB32_36:
	mov	dword ptr [eax + 20], offset "?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB32_37:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
                                        # -- End function
	.def	 _main;
	.scl	2;
	.type	32;
	.endef
	.globl	_main                           # -- Begin function main
	.p2align	4, 0x90
_main:                                  # @main
Lfunc_begin10:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -16
	sub	esp, 352
	mov	esi, esp
	mov	dword ptr [esi + 328], ebp
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [esi + 332], esp
	mov	dword ptr [esi + 344], -1
	mov	dword ptr [esi + 340], offset ___ehhandler$main
	lea	ecx, [esi + 336]
	mov	edx, dword ptr fs:[0]
	cmp	eax, 2
	mov	dword ptr [esi + 336], edx
	mov	dword ptr fs:[0], ecx
	mov	dword ptr [esi + 228], 15
	mov	dword ptr [esi + 224], 0
	mov	byte ptr [esi + 208], 0
	jl	LBB33_5
# %bb.1:
	mov	eax, dword ptr [ebp + 12]
	mov	ebx, dword ptr [eax + 4]
	push	ebx
	call	_strlen
	add	esp, 4
	mov	edi, eax
	cmp	eax, 15
	jbe	LBB33_2
# %bb.3:
	mov	dword ptr [esi + 344], 11
	sub	esp, 12
	mov	al, byte ptr [esi + 232]
	lea	ecx, [esi + 208]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], edi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB33_4
LBB33_2:
	mov	dword ptr [esi + 224], edi
	lea	eax, [esi + 208]
	push	edi
	push	ebx
	push	eax
	call	_memmove
	add	esp, 12
	mov	byte ptr [esi + edi + 208], 0
LBB33_4:
	mov	dword ptr [esi + 344], 11
LBB33_5:
	xorps	xmm0, xmm0
	mov	dword ptr [esi + 64], 0
	mov	dword ptr [esi + 344], 11
	movaps	xmmword ptr [esi + 48], xmm0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.6:
	lea	ecx, [esi + 48]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [esi + 48], eax
	mov	dword ptr [esi + 344], 12
	mov	dword ptr [eax], ecx
	lea	ecx, [esi + 116]
	call	"??0fileInfo@@QAE@XZ"
# %bb.7:
	mov	dword ptr [esi + 108], 0
	mov	dword ptr [esi + 252], 15
	mov	dword ptr [esi + 248], 4
	mov	dword ptr [esi + 232], 1094862674
	mov	byte ptr [esi + 236], 0
	mov	dword ptr [esi + 276], 15
	mov	dword ptr [esi + 272], 4
	mov	dword ptr [esi + 256], 1096176456
	mov	byte ptr [esi + 260], 0
	mov	dword ptr [esi + 300], 15
	mov	dword ptr [esi + 296], 3
	mov	dword ptr [esi + 280], 4343634
	mov	dword ptr [esi + 324], 15
	mov	dword ptr [esi + 320], 3
	mov	dword ptr [esi + 304], 5657416
	mov	dword ptr [esi + 112], 0
	mov	dword ptr [esi + 344], 13
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.8:
	xorps	xmm0, xmm0
	mov	dword ptr [eax], eax
	mov	dword ptr [eax + 4], eax
	mov	dword ptr [eax + 8], eax
	mov	word ptr [eax + 12], 257
	mov	dword ptr [esi + 108], eax
	mov	dword ptr [esi + 32], 0
	mov	dword ptr [esi + 344], 14
	movaps	xmmword ptr [esi + 16], xmm0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.9:
	lea	ecx, [esi + 16]
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [esi + 16], eax
	mov	dword ptr [esi + 80], 0
	mov	dword ptr [esi + 344], 15
	mov	dword ptr [eax], ecx
	push	-11
	call	dword ptr [__imp__GetStdHandle@4]
# %bb.10:
	lea	ecx, [esi + 80]
	push	ecx
	push	eax
	call	dword ptr [__imp__GetConsoleMode@8]
# %bb.11:
	mov	eax, dword ptr [esi + 80]
	or	eax, 4
	mov	dword ptr [esi], eax            # 4-byte Spill
	mov	dword ptr [esi + 80], eax
	push	-11
	call	dword ptr [__imp__GetStdHandle@4]
# %bb.12:
	push	dword ptr [esi]                 # 4-byte Folded Reload
	push	eax
	call	dword ptr [__imp__SetConsoleMode@8]
# %bb.13:
	cmp	dword ptr [esi + 224], 0
	je	LBB33_178
# %bb.14:
	cmp	dword ptr [esi + 228], 15
	jbe	LBB33_15
# %bb.16:
	mov	eax, dword ptr [esi + 208]
	jmp	LBB33_17
LBB33_178:
	push	offset "??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.179:
	mov	ecx, dword ptr [ebp + 12]
	push	dword ptr [ecx]
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.180:
	push	offset "??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB33_130
LBB33_15:
	lea	eax, [esi + 208]
LBB33_17:
	push	eax
	lea	eax, [esi + 80]
	push	eax
	call	"?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	add	esp, 8
# %bb.18:
	cmp	dword ptr [esi + 64], 0
	je	LBB33_20
# %bb.19:
	mov	dword ptr [esi + 60], 0
	mov	dword ptr [esi + 64], 0
LBB33_20:
	mov	eax, dword ptr [esi + 52]
	mov	edi, dword ptr [esi + 56]
	.p2align	4, 0x90
LBB33_21:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_22
# %bb.27:                               #   in Loop: Header=BB33_21 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_21
# %bb.28:                               #   in Loop: Header=BB33_21 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 52]
	jmp	LBB33_21
LBB33_22:
	test	eax, eax
	je	LBB33_32
# %bb.23:
	mov	ecx, dword ptr [esi + 56]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_31
# %bb.24:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_25
# %bb.30:
	add	ecx, 35
	mov	eax, edx
LBB33_31:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_32:
	mov	dword ptr [esi + 56], 0
	mov	dword ptr [esi + 52], 0
	mov	ecx, dword ptr [esi + 80]
	mov	eax, dword ptr [esi + 48]
	test	ecx, ecx
	mov	dword ptr [esi + 48], ecx
	mov	dword ptr [esi + 80], eax
	je	LBB33_34
# %bb.33:
	lea	edx, [esi + 48]
	mov	dword ptr [ecx], edx
LBB33_34:
	test	eax, eax
	je	LBB33_36
# %bb.35:
	lea	ecx, [esi + 80]
	mov	dword ptr [eax], ecx
LBB33_36:
	movups	xmm0, xmmword ptr [esi + 84]
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 92], 0
	mov	eax, dword ptr [esi + 80]
	mov	dword ptr [esi + 88], 0
	mov	dword ptr [esi + 84], 0
	mov	dword ptr [esi + 80], 0
	movups	xmmword ptr [esi + 52], xmm0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 60]
	mov	ecx, 268435455
	mov	edx, dword ptr [esi + 52]
	add	ecx, dword ptr [esi + 56]
	lea	edi, [eax + 3]
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	ebx, edi
	and	edi, 15
	mov	dword ptr [esi], ecx            # 4-byte Spill
	shr	ebx, 4
	and	ebx, ecx
	mov	ebx, dword ptr [edx + 4*ebx]
	movzx	ecx, byte ptr [ebx + edi]
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	ebx, ecx
	and	ecx, 15
	shr	ebx, 4
	and	ebx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	lea	edx, [eax + 1]
	movzx	ecx, byte ptr [ebx + ecx]
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebx, edi
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	shl	ecx, 8
	add	ecx, dword ptr [esi + 8]        # 4-byte Folded Reload
	mov	ebx, dword ptr [edi + 4*ebx]
	movzx	edx, byte ptr [ebx + edx]
	mov	ebx, eax
	shr	ebx, 4
	and	ebx, dword ptr [esi]            # 4-byte Folded Reload
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	edx, eax
	add	eax, 4
	and	edx, 15
	mov	ebx, dword ptr [edi + 4*ebx]
	movzx	edx, byte ptr [ebx + edx]
	mov	ebx, dword ptr [esi + 12]       # 4-byte Reload
	shl	ebx, 16
	shl	edx, 24
	or	ecx, ebx
	mov	ebx, dword ptr [esi]            # 4-byte Reload
	or	ecx, edx
	mov	edx, dword ptr [esi + 64]
	mov	dword ptr [esi + 116], ecx
	lea	ecx, [edx - 4]
	cmp	edx, 1
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	dword ptr [esi + 64], ecx
	mov	ecx, 3
	cmove	eax, ecx
	cmp	edx, 2
	mov	ecx, 1
	cmove	eax, edx
	cmp	edx, 3
	cmove	eax, ecx
	xor	ecx, ecx
	cmp	edx, 4
	cmove	eax, ecx
	lea	ecx, [eax + 3]
	mov	dword ptr [esi + 60], eax
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, ebx
	mov	edx, dword ptr [edi + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	lea	ecx, [eax + 2]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, ebx
	mov	edx, dword ptr [edi + 4*edx]
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	movzx	ecx, byte ptr [edx + ecx]
	lea	edx, [eax + 1]
	mov	ebx, edx
	and	edx, 15
	shr	ebx, 4
	and	ebx, dword ptr [esi]            # 4-byte Folded Reload
	shl	ecx, 8
	add	ecx, dword ptr [esi + 8]        # 4-byte Folded Reload
	mov	ebx, dword ptr [edi + 4*ebx]
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	movzx	edx, byte ptr [ebx + edx]
	mov	ebx, eax
	shr	ebx, 4
	and	ebx, dword ptr [esi]            # 4-byte Folded Reload
	mov	dword ptr [esi + 44], edx       # 4-byte Spill
	mov	edx, eax
	and	edx, 15
	mov	ebx, dword ptr [edi + 4*ebx]
	mov	edi, dword ptr [esi + 44]       # 4-byte Reload
	movzx	edx, byte ptr [ebx + edx]
	shl	edi, 16
	mov	ebx, eax
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	or	ecx, edi
	add	ebx, 4
	mov	edi, dword ptr [esi]            # 4-byte Reload
	shl	edx, 24
	or	ecx, edx
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	dword ptr [esi + 120], ecx
	lea	ecx, [edx - 8]
	cmp	edx, 5
	mov	dword ptr [esi + 64], ecx
	mov	ecx, 3
	cmove	ebx, ecx
	cmp	edx, 6
	mov	ecx, 2
	cmove	ebx, ecx
	cmp	edx, 7
	mov	ecx, 1
	cmove	ebx, ecx
	cmp	edx, 8
	mov	ecx, 0
	cmove	ebx, ecx
	lea	ecx, [ebx + 3]
	mov	dword ptr [esi + 60], ebx
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	mov	edx, dword ptr [eax + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	lea	ecx, [ebx + 2]
	mov	edx, ecx
	and	ecx, 15
	shr	edx, 4
	and	edx, edi
	lea	edi, [ebx + 1]
	mov	edx, dword ptr [eax + 4*edx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, edi
	and	edi, 15
	shr	edx, 4
	and	edx, dword ptr [esi]            # 4-byte Folded Reload
	shl	ecx, 8
	add	ecx, dword ptr [esi + 8]        # 4-byte Folded Reload
	mov	edx, dword ptr [eax + 4*edx]
	movzx	edx, byte ptr [edx + edi]
	mov	edi, ebx
	shr	edi, 4
	and	edi, dword ptr [esi]            # 4-byte Folded Reload
	shl	edx, 16
	or	ecx, edx
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [eax + 4*edi]
	mov	eax, ebx
	add	ebx, 5
	and	eax, 15
	movzx	eax, byte ptr [edi + eax]
	mov	edi, 2
	shl	eax, 24
	or	ecx, eax
	cmp	edx, 9
	mov	eax, 3
	mov	dword ptr [esi + 124], ecx
	mov	ecx, 4
	cmovne	ecx, ebx
	cmp	edx, 10
	mov	ebx, 1
	cmove	ecx, eax
	cmp	edx, 11
	cmove	ecx, edi
	cmp	edx, 12
	mov	edi, 0
	cmove	ecx, ebx
	cmp	edx, 13
	cmove	ecx, edi
	add	edx, -13
	mov	dword ptr [esi + 60], ecx
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	dword ptr [esi + 64], edx
	jmp	LBB33_37
	.p2align	4, 0x90
LBB33_45:                               #   in Loop: Header=BB33_37 Depth=1
	mov	ecx, dword ptr [esi + 8]        # 4-byte Reload
	and	edx, 15
	movzx	ecx, byte ptr [edi + ecx]
	mov	byte ptr [eax + edx], cl
	inc	dword ptr [esi + 144]
	mov	edx, 0
	mov	ecx, dword ptr [esi + 60]
	mov	eax, dword ptr [esi + 64]
	inc	ecx
	dec	eax
	cmove	ecx, edx
	mov	dword ptr [esi + 64], eax
	mov	dword ptr [esi + 12], eax       # 4-byte Spill
	mov	dword ptr [esi + 60], ecx
LBB33_37:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 56]
	mov	edi, dword ptr [esi + 52]
	mov	ebx, ecx
	shr	ebx, 4
	lea	edx, [eax + 268435455]
	mov	dword ptr [esi], edi            # 4-byte Spill
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	and	ebx, edx
	mov	eax, edx
	mov	edx, ecx
	mov	edi, dword ptr [edi + 4*ebx]
	and	edx, 15
	mov	dword ptr [esi + 8], edx        # 4-byte Spill
	cmp	byte ptr [edi + edx], 0
	je	LBB33_46
# %bb.38:                               #   in Loop: Header=BB33_37 Depth=1
	mov	ecx, dword ptr [esi + 140]
	mov	eax, dword ptr [esi + 144]
	lea	edx, [eax + ecx]
	test	dl, 15
	jne	LBB33_42
# %bb.39:                               #   in Loop: Header=BB33_37 Depth=1
	lea	edx, [eax + 16]
	shr	edx, 4
	cmp	dword ptr [esi + 136], edx
	ja	LBB33_42
# %bb.40:                               #   in Loop: Header=BB33_37 Depth=1
	mov	dword ptr [esi], edi            # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 128]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.41:                               #   in Loop: Header=BB33_37 Depth=1
	mov	ecx, dword ptr [esi + 140]
	mov	eax, dword ptr [esi + 144]
	mov	edi, dword ptr [esi]            # 4-byte Reload
	.p2align	4, 0x90
LBB33_42:                               #   in Loop: Header=BB33_37 Depth=1
	mov	ebx, dword ptr [esi + 136]
	mov	edx, ebx
	add	ebx, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 132]
	mov	dword ptr [esi + 140], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	ebx, eax
	mov	eax, dword ptr [ecx + 4*ebx]
	test	eax, eax
	jne	LBB33_45
# %bb.43:                               #   in Loop: Header=BB33_37 Depth=1
	mov	dword ptr [esi + 12], ebx       # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi], edi            # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.44:                               #   in Loop: Header=BB33_37 Depth=1
	mov	ecx, dword ptr [esi + 132]
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 132]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
	jmp	LBB33_45
LBB33_46:
	mov	ebx, dword ptr [esi + 12]       # 4-byte Reload
	inc	ecx
	xor	edi, edi
	mov	edx, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [esi + 44], eax       # 4-byte Spill
	dec	ebx
	cmove	ecx, edi
	mov	dword ptr [esi + 64], ebx
	mov	ebx, ecx
	mov	dword ptr [esi + 60], ecx
	mov	edi, ecx
	shr	ebx, 4
	and	edi, 15
	and	ebx, eax
	lea	eax, [ecx + 1]
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	bl, byte ptr [ebx + edi]
	mov	edi, dword ptr [esi + 44]       # 4-byte Reload
	mov	byte ptr [esi + 148], bl
	mov	ebx, eax
	and	eax, 15
	shr	ebx, 4
	and	ebx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	bl, byte ptr [ebx + eax]
	lea	eax, [ecx + 2]
	mov	byte ptr [esi + 149], bl
	mov	ebx, eax
	and	eax, 15
	shr	ebx, 4
	and	ebx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	bl, byte ptr [ebx + eax]
	lea	eax, [ecx + 3]
	add	ecx, 4
	mov	byte ptr [esi + 150], bl
	mov	ebx, eax
	and	eax, 15
	shr	ebx, 4
	and	ebx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	bl, byte ptr [ebx + eax]
	cmp	edx, 2
	mov	eax, dword ptr [esi]            # 4-byte Reload
	mov	byte ptr [esi + 151], bl
	mov	ebx, 3
	cmovne	ebx, ecx
	mov	ecx, edx
	cmp	edx, 3
	mov	edx, 2
	cmovne	edx, ebx
	cmp	ecx, 4
	mov	ebx, 1
	cmovne	ebx, edx
	cmp	ecx, 5
	mov	edx, 0
	cmove	ebx, edx
	lea	edx, [ecx - 5]
	mov	dword ptr [esi + 64], edx
	mov	edx, ebx
	mov	dword ptr [esi + 60], ebx
	shr	edx, 4
	and	edx, edi
	mov	edi, ebx
	inc	ebx
	mov	edx, dword ptr [eax + 4*edx]
	and	edi, 15
	cmp	ecx, 6
	mov	dl, byte ptr [edx + edi]
	mov	byte ptr [esi + 156], dl
	mov	edx, 0
	cmove	ebx, edx
	mov	dword ptr [esi + 60], ebx
	inc	ebx
	add	ecx, -7
	jmp	LBB33_47
	.p2align	4, 0x90
LBB33_53:                               #   in Loop: Header=BB33_47 Depth=1
	mov	dword ptr [esi + 12], edi       # 4-byte Spill
LBB33_56:                               #   in Loop: Header=BB33_47 Depth=1
	mov	edx, dword ptr [esi + 60]
	mov	eax, dword ptr [esi + 56]
	mov	ebx, dword ptr [esi + 52]
	mov	dword ptr [esi + 172], ecx
	inc	dword ptr [esi + 176]
	mov	edi, edx
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	add	eax, 268435455
	mov	dword ptr [esi], ebx            # 4-byte Spill
	shr	edi, 4
	mov	dword ptr [esi + 44], eax       # 4-byte Spill
	and	edi, eax
	mov	eax, ecx
	mov	ecx, edx
	inc	edx
	mov	edi, dword ptr [ebx + 4*edi]
	and	ecx, 15
	mov	ebx, edx
	and	eax, 7
	movzx	ecx, byte ptr [edi + ecx]
	mov	edi, dword ptr [esi + 8]        # 4-byte Reload
	mov	byte ptr [esi + 104], cl        # 1-byte Spill
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [ecx + 4*edi]
	mov	ecx, edx
	movzx	edx, byte ptr [esi + 104]       # 1-byte Folded Reload
	shr	ecx, 4
	and	ecx, dword ptr [esi + 44]       # 4-byte Folded Reload
	mov	byte ptr [edi + 2*eax], dl
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	edx, ebx
	and	edx, 15
	mov	ecx, dword ptr [edi + 4*ecx]
	movzx	ecx, byte ptr [ecx + edx]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	byte ptr [edx + 2*eax + 1], cl
	mov	edx, 0
	mov	ecx, dword ptr [esi + 64]
	cmp	ecx, 1
	cmove	ebx, edx
	mov	dword ptr [esi + 60], ebx
	inc	ebx
	add	ecx, -2
LBB33_47:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	cmove	ebx, edx
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [esi + 64], ecx
	mov	edx, ebx
	mov	dword ptr [esi + 60], ebx
	shr	edx, 4
	dec	eax
	and	eax, edx
	mov	edx, ebx
	mov	eax, dword ptr [edi + 4*eax]
	and	edx, 15
	cmp	byte ptr [eax + edx], 0
	je	LBB33_57
# %bb.48:                               #   in Loop: Header=BB33_47 Depth=1
	mov	eax, dword ptr [esi + 172]
	test	al, 7
	jne	LBB33_52
# %bb.49:                               #   in Loop: Header=BB33_47 Depth=1
	mov	ecx, dword ptr [esi + 176]
	add	ecx, 8
	shr	ecx, 3
	cmp	dword ptr [esi + 168], ecx
	ja	LBB33_52
# %bb.50:                               #   in Loop: Header=BB33_47 Depth=1
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 160]
	push	1
	call	"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
# %bb.51:                               #   in Loop: Header=BB33_47 Depth=1
	mov	eax, dword ptr [esi + 172]
	.p2align	4, 0x90
LBB33_52:                               #   in Loop: Header=BB33_47 Depth=1
	mov	edx, dword ptr [esi + 168]
	mov	edi, dword ptr [esi + 164]
	lea	ecx, [8*edx - 1]
	and	ecx, eax
	lea	eax, [8*edx]
	mov	dword ptr [esi + 172], ecx
	cmove	ecx, eax
	add	edx, 536870911
	dec	ecx
	mov	eax, ecx
	shr	eax, 3
	and	edx, eax
	cmp	dword ptr [edi + 4*edx], 0
	mov	dword ptr [esi + 8], edx        # 4-byte Spill
	jne	LBB33_53
# %bb.54:                               #   in Loop: Header=BB33_47 Depth=1
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	mov	dword ptr [esi], ecx            # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.55:                               #   in Loop: Header=BB33_47 Depth=1
	mov	ecx, dword ptr [esi + 164]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	ecx, dword ptr [esi + 168]
	mov	eax, dword ptr [esi + 164]
	dec	ecx
	mov	dword ptr [esi + 12], eax       # 4-byte Spill
	and	ecx, dword ptr [esi + 4]        # 4-byte Folded Reload
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	jmp	LBB33_56
LBB33_57:
	inc	ebx
	xor	eax, eax
	dec	ecx
	xorps	xmm0, xmm0
	mov	dword ptr [esi + 44], esp       # 4-byte Spill
	mov	dword ptr [esi + 4], 0          # 4-byte Folded Spill
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 344], 15
	cmove	ebx, eax
	mov	dword ptr [esi + 64], ecx
	mov	dword ptr [esi + 12], ecx       # 4-byte Spill
	movaps	xmmword ptr [esi + 80], xmm0
	mov	dword ptr [esi + 60], ebx
	mov	dword ptr [esi], ebx            # 4-byte Spill
	mov	eax, dword ptr [esi + 48]
	mov	dword ptr [esi + 8], eax        # 4-byte Spill
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.58:
	mov	ecx, eax
	lea	eax, [esi + 80]
	mov	dword ptr [ecx], eax
	mov	eax, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [esi + 80], ecx
	mov	dword ptr [esi + 104], ecx      # 4-byte Spill
	test	eax, eax
	je	LBB33_59
# %bb.60:
	mov	eax, dword ptr [eax]
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [esi]            # 4-byte Reload
	test	eax, eax
	je	LBB33_62
# %bb.61:
	mov	eax, dword ptr [eax]
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
LBB33_62:
	test	ecx, ecx
	jne	LBB33_63
	jmp	LBB33_66
LBB33_59:
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edi, dword ptr [esi]            # 4-byte Reload
	test	ecx, ecx
	je	LBB33_66
LBB33_63:
	add	ecx, edi
	mov	dword ptr [esi + 12], ecx       # 4-byte Spill
	.p2align	4, 0x90
LBB33_64:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	mov	ecx, edi
	mov	dword ptr [esi], edi            # 4-byte Spill
	and	edi, 15
	shr	ecx, 4
	mov	eax, dword ptr [eax]
	mov	edx, dword ptr [eax + 4]
	mov	eax, dword ptr [eax + 8]
	dec	eax
	and	eax, ecx
	lea	ecx, [esi + 80]
	add	edi, dword ptr [edx + 4*eax]
	mov	dword ptr [esi + 344], 17
	push	edi
	call	"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z"
# %bb.65:                               #   in Loop: Header=BB33_64 Depth=1
	mov	eax, dword ptr [esi]            # 4-byte Reload
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	inc	eax
	cmp	eax, ecx
	mov	edi, eax
	jne	LBB33_64
LBB33_66:
	mov	esp, dword ptr [esi + 44]       # 4-byte Reload
	cmp	dword ptr [esi + 196], 0
	je	LBB33_68
# %bb.67:
	mov	dword ptr [esi + 192], 0
	mov	dword ptr [esi + 196], 0
LBB33_68:
	mov	eax, dword ptr [esi + 184]
	mov	edi, dword ptr [esi + 188]
	.p2align	4, 0x90
LBB33_69:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_85
# %bb.70:                               #   in Loop: Header=BB33_69 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_69
# %bb.71:                               #   in Loop: Header=BB33_69 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 184]
	jmp	LBB33_69
LBB33_85:
	test	eax, eax
	je	LBB33_93
# %bb.86:
	mov	ecx, dword ptr [esi + 188]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_92
# %bb.87:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_88
# %bb.91:
	add	ecx, 35
	mov	eax, edx
LBB33_92:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_93:
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 184], 0
	mov	ecx, dword ptr [esi + 80]
	mov	eax, dword ptr [esi + 180]
	test	ecx, ecx
	mov	dword ptr [esi + 180], ecx
	mov	dword ptr [esi + 80], eax
	je	LBB33_95
# %bb.94:
	lea	edx, [esi + 180]
	mov	dword ptr [ecx], edx
LBB33_95:
	test	eax, eax
	je	LBB33_97
# %bb.96:
	lea	ecx, [esi + 80]
	mov	dword ptr [eax], ecx
	mov	dword ptr [esi + 344], 15
LBB33_97:
	movups	xmm0, xmmword ptr [esi + 84]
	mov	dword ptr [esi + 96], 0
	mov	eax, dword ptr [esi + 80]
	movups	xmmword ptr [esi + 184], xmm0
	xorps	xmm0, xmm0
	movaps	xmmword ptr [esi + 80], xmm0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	dword ptr [esi + 344], 15
	push	offset "??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.98:
	push	offset "??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.99:
	mov	ecx, eax
	push	dword ptr [esi + 116]
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.100:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.101:
	push	offset "??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.102:
	mov	ecx, eax
	push	dword ptr [esi + 120]
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.103:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.104:
	push	offset "??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.105:
	mov	ecx, eax
	push	dword ptr [esi + 124]
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.106:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.107:
	push	offset "??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.108:
	mov	eax, dword ptr [esi + 128]
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 140]
	mov	edi, eax
	add	eax, dword ptr [esi + 144]
	cmp	edi, eax
	je	LBB33_110
	.p2align	4, 0x90
LBB33_120:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [esi + 4]        # 4-byte Reload
	mov	ecx, edi
	mov	dword ptr [esi], edi            # 4-byte Spill
	shr	ecx, 4
	mov	eax, dword ptr [eax]
	mov	edx, dword ptr [eax + 8]
	mov	eax, dword ptr [eax + 4]
	dec	edx
	and	edx, ecx
	mov	ecx, edi
	mov	eax, dword ptr [eax + 4*edx]
	and	ecx, 15
	movsx	eax, byte ptr [eax + ecx]
	push	eax
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	add	esp, 8
# %bb.121:                              #   in Loop: Header=BB33_120 Depth=1
	mov	edi, dword ptr [esi]            # 4-byte Reload
	mov	eax, dword ptr [esi + 140]
	inc	edi
	add	eax, dword ptr [esi + 144]
	cmp	edi, eax
	jne	LBB33_120
LBB33_110:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.111:
	push	offset "??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.112:
	mov	ecx, dword ptr [eax]
	mov	edx, -3585
	mov	ecx, dword ptr [ecx + 4]
	and	edx, dword ptr [eax + ecx + 20]
	or	edx, 2048
	mov	dword ptr [eax + ecx + 20], edx
	mov	ecx, eax
	movzx	edx, byte ptr [esi + 148]
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.113:
	movzx	edx, byte ptr [esi + 149]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.114:
	movzx	edx, byte ptr [esi + 150]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.115:
	movzx	edx, byte ptr [esi + 151]
	mov	ecx, eax
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.116:
	mov	ecx, dword ptr [eax]
	mov	edx, -3585
	mov	ecx, dword ptr [ecx + 4]
	and	edx, dword ptr [eax + ecx + 20]
	or	edx, 512
	mov	dword ptr [eax + ecx + 20], edx
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.117:
	push	offset "??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.118:
	movzx	ecx, byte ptr [esi + 156]
	lea	edx, [ecx + 2*ecx]
	mov	ecx, dword ptr [esi + 8*edx + 248]
	cmp	dword ptr [esi + 8*edx + 252], 15
	jbe	LBB33_119
# %bb.122:
	mov	edx, dword ptr [esi + 8*edx + 232]
	jmp	LBB33_123
LBB33_119:
	lea	edx, [esi + 8*edx + 232]
LBB33_123:
	push	ecx
	push	edx
	push	eax
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.124:
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.125:
	push	offset "??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.126:
	mov	eax, dword ptr [esi + 160]
	xor	ecx, ecx
	mov	dword ptr [esi + 8], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 172]
	mov	edi, eax
	jmp	LBB33_127
	.p2align	4, 0x90
LBB33_174:                              #   in Loop: Header=BB33_127 Depth=1
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	mov	eax, edx
LBB33_177:                              #   in Loop: Header=BB33_127 Depth=1
	cmp	eax, ecx
	mov	ecx, dword ptr [esi + 204]      # 4-byte Reload
	mov	eax, 1
	mov	edi, dword ptr [esi + 104]      # 4-byte Reload
	movzx	ecx, cl
	cmove	ecx, eax
	mov	eax, dword ptr [esi + 172]
	inc	edi
LBB33_127:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_141 Depth 2
                                        #     Child Loop BB33_173 Depth 2
	add	eax, dword ptr [esi + 176]
	cmp	edi, eax
	je	LBB33_128
# %bb.136:                              #   in Loop: Header=BB33_127 Depth=1
	mov	eax, dword ptr ["?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
	mov	dword ptr [esi + 204], ecx      # 4-byte Spill
	mov	edx, -3585
	mov	dword ptr [esi + 104], edi      # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20]
	and	ecx, edx
	mov	edx, edi
	and	edi, 7
	or	ecx, 2048
	shr	edx, 3
	mov	dword ptr [esi + 44], edi       # 4-byte Spill
	mov	dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20], ecx
	mov	eax, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	eax, dword ptr [eax]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [eax + 8]
	dec	eax
	and	eax, edx
	mov	edx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+12]
	mov	eax, dword ptr [ecx + 4*eax]
	mov	ecx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+16]
	movzx	eax, word ptr [eax + 2*edi]
	mov	edi, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"]
	mov	dword ptr [esi], ecx            # 4-byte Spill
	test	edi, edi
	je	LBB33_137
# %bb.138:                              #   in Loop: Header=BB33_127 Depth=1
	mov	ebx, dword ptr [edi]
	cmp	dword ptr [esi], 0              # 4-byte Folded Reload
	jne	LBB33_140
	jmp	LBB33_143
	.p2align	4, 0x90
LBB33_137:                              #   in Loop: Header=BB33_127 Depth=1
	xor	ebx, ebx
	cmp	dword ptr [esi], 0              # 4-byte Folded Reload
	je	LBB33_143
LBB33_140:                              #   in Loop: Header=BB33_127 Depth=1
	mov	edi, dword ptr [ebx + 8]
	shl	eax, 16
	mov	ebx, dword ptr [ebx + 4]
	add	dword ptr [esi], edx            # 4-byte Folded Spill
	bswap	eax
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	mov	eax, 536870911
	add	edi, eax
	.p2align	4, 0x90
LBB33_141:                              #   Parent Loop BB33_127 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	ecx, edx
	mov	eax, edx
	shr	ecx, 3
	and	eax, 7
	and	ecx, edi
	mov	ecx, dword ptr [ebx + 4*ecx]
	movzx	eax, word ptr [ecx + 2*eax]
	cmp	dword ptr [esi + 4], eax        # 4-byte Folded Reload
	je	LBB33_144
# %bb.142:                              #   in Loop: Header=BB33_141 Depth=2
	inc	edx
	cmp	edx, dword ptr [esi]            # 4-byte Folded Reload
	jne	LBB33_141
	jmp	LBB33_143
	.p2align	4, 0x90
LBB33_144:                              #   in Loop: Header=BB33_127 Depth=1
	cmp	edx, dword ptr [esi]            # 4-byte Folded Reload
	mov	dword ptr [esi + 344], 15
	jne	LBB33_145
	.p2align	4, 0x90
LBB33_143:                              #   in Loop: Header=BB33_127 Depth=1
	mov	dword ptr [esi + 344], 15
	push	119
	push	119
	push	221
	lea	eax, [esi + 80]
	push	eax
	call	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	add	esp, 16
LBB33_146:                              #   in Loop: Header=BB33_127 Depth=1
	mov	eax, dword ptr [esi + 96]
	cmp	dword ptr [esi + 100], 15
	lea	ecx, [esi + 80]
	jbe	LBB33_148
# %bb.147:                              #   in Loop: Header=BB33_127 Depth=1
	mov	ecx, dword ptr [esi + 80]
LBB33_148:                              #   in Loop: Header=BB33_127 Depth=1
	mov	dword ptr [esi + 344], 16
	push	eax
	push	ecx
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	add	esp, 12
# %bb.149:                              #   in Loop: Header=BB33_127 Depth=1
	mov	ecx, dword ptr [esi + 8]        # 4-byte Reload
	mov	ecx, dword ptr [ecx]
	mov	edx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [ecx + 8]
	dec	ecx
	and	ecx, dword ptr [esi + 12]       # 4-byte Folded Reload
	mov	ecx, dword ptr [edx + 4*ecx]
	mov	edx, dword ptr [esi + 44]       # 4-byte Reload
	movzx	edx, word ptr [ecx + 2*edx]
	mov	ecx, eax
	shl	edx, 16
	bswap	edx
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.150:                              #   in Loop: Header=BB33_127 Depth=1
	push	offset "??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.151:                              #   in Loop: Header=BB33_127 Depth=1
	mov	eax, dword ptr [esi + 100]
	mov	ebx, dword ptr [esi + 104]      # 4-byte Reload
	cmp	eax, 16
	jb	LBB33_159
# %bb.152:                              #   in Loop: Header=BB33_127 Depth=1
	mov	ecx, dword ptr [esi + 80]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB33_158
# %bb.153:                              #   in Loop: Header=BB33_127 Depth=1
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB33_154
# %bb.157:                              #   in Loop: Header=BB33_127 Depth=1
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB33_158:                              #   in Loop: Header=BB33_127 Depth=1
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_159:                              #   in Loop: Header=BB33_127 Depth=1
	mov	eax, dword ptr [esi + 172]
	mov	ecx, dword ptr [esi + 176]
	lea	eax, [eax + ecx - 1]
	cmp	eax, ebx
	jne	LBB33_160
# %bb.167:                              #   in Loop: Header=BB33_127 Depth=1
	mov	dword ptr [esi + 344], 15
	push	offset "??_C@_03NIEPJMFE@?5?$HN?6?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB33_168
	.p2align	4, 0x90
LBB33_160:                              #   in Loop: Header=BB33_127 Depth=1
	mov	dword ptr [esi + 344], 15
	push	offset "??_C@_02KEGNLNML@?0?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
LBB33_168:                              #   in Loop: Header=BB33_127 Depth=1
	mov	eax, dword ptr [esi + 8]        # 4-byte Reload
	mov	edx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+12]
	mov	eax, dword ptr [eax]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [eax + 8]
	dec	eax
	and	eax, dword ptr [esi + 12]       # 4-byte Folded Reload
	mov	eax, dword ptr [ecx + 4*eax]
	mov	ecx, dword ptr [esi + 44]       # 4-byte Reload
	movzx	edi, word ptr [eax + 2*ecx]
	mov	ecx, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"]
	mov	eax, dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+16]
	test	ecx, ecx
	je	LBB33_169
# %bb.170:                              #   in Loop: Header=BB33_127 Depth=1
	mov	ebx, dword ptr [ecx]
	lea	ecx, [eax + edx]
	test	eax, eax
	mov	eax, ecx
	jne	LBB33_172
	jmp	LBB33_177
	.p2align	4, 0x90
LBB33_169:                              #   in Loop: Header=BB33_127 Depth=1
	xor	ebx, ebx
	lea	ecx, [eax + edx]
	test	eax, eax
	mov	eax, ecx
	je	LBB33_177
LBB33_172:                              #   in Loop: Header=BB33_127 Depth=1
	mov	dword ptr [esi], ecx            # 4-byte Spill
	mov	ecx, dword ptr [ebx + 8]
	mov	ebx, dword ptr [ebx + 4]
	shl	edi, 16
	mov	eax, 536870911
	bswap	edi
	mov	dword ptr [esi + 4], edi        # 4-byte Spill
	add	ecx, eax
	.p2align	4, 0x90
LBB33_173:                              #   Parent Loop BB33_127 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	eax, edx
	mov	edi, edx
	shr	eax, 3
	and	edi, 7
	and	eax, ecx
	mov	eax, dword ptr [ebx + 4*eax]
	movzx	eax, word ptr [eax + 2*edi]
	cmp	dword ptr [esi + 4], eax        # 4-byte Folded Reload
	je	LBB33_174
# %bb.175:                              #   in Loop: Header=BB33_173 Depth=2
	inc	edx
	cmp	edx, dword ptr [esi]            # 4-byte Folded Reload
	jne	LBB33_173
# %bb.176:                              #   in Loop: Header=BB33_127 Depth=1
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	mov	eax, ecx
	jmp	LBB33_177
LBB33_145:                              #   in Loop: Header=BB33_127 Depth=1
	push	119
	push	221
	push	119
	lea	eax, [esi + 80]
	push	eax
	call	"?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	add	esp, 16
	jmp	LBB33_146
LBB33_128:
	test	cl, 1
	mov	dword ptr [esi + 344], 15
	jne	LBB33_129
# %bb.181:
	lea	eax, [esi + 108]
	push	eax
	call	"?ext0101_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z"
	add	esp, 4
# %bb.182:
	lea	eax, [esi + 108]
	push	eax
	call	"?ext0102_registerAll@@YAXAAV?$map@IP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@ZU?$less@I@2@V?$allocator@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@2@@std@@@Z"
	add	esp, 4
# %bb.183:
	xor	ecx, ecx
	jmp	LBB33_184
	.p2align	4, 0x90
LBB33_187:                              #   in Loop: Header=BB33_184 Depth=1
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	inc	ecx
LBB33_184:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_186 Depth 2
	mov	eax, dword ptr [esi + 120]
	mov	dword ptr [esi + 12], ecx       # 4-byte Spill
	cmp	ecx, eax
	jae	LBB33_188
# %bb.185:                              #   in Loop: Header=BB33_184 Depth=1
	xor	eax, eax
	jmp	LBB33_186
	.p2align	4, 0x90
LBB33_220:                              #   in Loop: Header=BB33_186 Depth=2
	and	edx, 15
	mov	byte ptr [eax + edx], 0
	mov	eax, dword ptr [esi]            # 4-byte Reload
	inc	dword ptr [esi + 32]
	inc	eax
LBB33_186:                              #   Parent Loop BB33_184 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmp	eax, dword ptr [esi + 124]
	mov	dword ptr [esi], eax            # 4-byte Spill
	jae	LBB33_187
# %bb.192:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	lea	edx, [eax + ecx]
	test	dl, 15
	jne	LBB33_196
# %bb.193:                              #   in Loop: Header=BB33_186 Depth=2
	lea	edx, [eax + 16]
	shr	edx, 4
	cmp	dword ptr [esi + 24], edx
	ja	LBB33_196
# %bb.194:                              #   in Loop: Header=BB33_186 Depth=2
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 16]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.195:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	.p2align	4, 0x90
LBB33_196:                              #   in Loop: Header=BB33_186 Depth=2
	mov	edi, dword ptr [esi + 24]
	mov	edx, edi
	add	edi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	dword ptr [esi + 28], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	edi, eax
	mov	eax, dword ptr [ecx + 4*edi]
	test	eax, eax
	jne	LBB33_199
# %bb.197:                              #   in Loop: Header=BB33_186 Depth=2
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.198:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 20]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
LBB33_199:                              #   in Loop: Header=BB33_186 Depth=2
	and	edx, 15
	mov	byte ptr [eax + edx], 0
	mov	edx, dword ptr [esi + 32]
	mov	ecx, dword ptr [esi + 28]
	lea	ebx, [ecx + edx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 32], eax
	jne	LBB33_203
# %bb.200:                              #   in Loop: Header=BB33_186 Depth=2
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 24], edx
	ja	LBB33_203
# %bb.201:                              #   in Loop: Header=BB33_186 Depth=2
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 16]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.202:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	.p2align	4, 0x90
LBB33_203:                              #   in Loop: Header=BB33_186 Depth=2
	mov	edi, dword ptr [esi + 24]
	mov	edx, edi
	add	edi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	dword ptr [esi + 28], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	edi, eax
	mov	eax, dword ptr [ecx + 4*edi]
	test	eax, eax
	jne	LBB33_206
# %bb.204:                              #   in Loop: Header=BB33_186 Depth=2
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.205:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 20]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
LBB33_206:                              #   in Loop: Header=BB33_186 Depth=2
	and	edx, 15
	mov	byte ptr [eax + edx], 0
	mov	edx, dword ptr [esi + 32]
	mov	ecx, dword ptr [esi + 28]
	lea	ebx, [ecx + edx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 32], eax
	jne	LBB33_210
# %bb.207:                              #   in Loop: Header=BB33_186 Depth=2
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 24], edx
	ja	LBB33_210
# %bb.208:                              #   in Loop: Header=BB33_186 Depth=2
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 16]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.209:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	.p2align	4, 0x90
LBB33_210:                              #   in Loop: Header=BB33_186 Depth=2
	mov	edi, dword ptr [esi + 24]
	mov	edx, edi
	add	edi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	dword ptr [esi + 28], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	edi, eax
	mov	eax, dword ptr [ecx + 4*edi]
	test	eax, eax
	jne	LBB33_213
# %bb.211:                              #   in Loop: Header=BB33_186 Depth=2
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.212:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 20]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
LBB33_213:                              #   in Loop: Header=BB33_186 Depth=2
	and	edx, 15
	mov	byte ptr [eax + edx], 0
	mov	edx, dword ptr [esi + 32]
	mov	ecx, dword ptr [esi + 28]
	lea	ebx, [ecx + edx + 1]
	lea	eax, [edx + 1]
	test	bl, 15
	mov	dword ptr [esi + 32], eax
	jne	LBB33_217
# %bb.214:                              #   in Loop: Header=BB33_186 Depth=2
	add	edx, 17
	shr	edx, 4
	cmp	dword ptr [esi + 24], edx
	ja	LBB33_217
# %bb.215:                              #   in Loop: Header=BB33_186 Depth=2
	mov	dword ptr [esi + 344], 15
	lea	ecx, [esi + 16]
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.216:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 28]
	mov	eax, dword ptr [esi + 32]
	.p2align	4, 0x90
LBB33_217:                              #   in Loop: Header=BB33_186 Depth=2
	mov	edi, dword ptr [esi + 24]
	mov	edx, edi
	add	edi, 268435455
	shl	edx, 4
	dec	edx
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	dword ptr [esi + 28], edx
	add	edx, eax
	mov	eax, edx
	shr	eax, 4
	and	edi, eax
	mov	eax, dword ptr [ecx + 4*edi]
	test	eax, eax
	jne	LBB33_220
# %bb.218:                              #   in Loop: Header=BB33_186 Depth=2
	mov	dword ptr [esi + 8], edi        # 4-byte Spill
	mov	dword ptr [esi + 4], edx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.219:                              #   in Loop: Header=BB33_186 Depth=2
	mov	ecx, dword ptr [esi + 20]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	dword ptr [ecx + 4*edx], eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
	jmp	LBB33_220
LBB33_129:
	push	offset "??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
	jmp	LBB33_130
LBB33_188:
	test	eax, eax
	je	LBB33_224
# %bb.189:
	mov	ebx, dword ptr [esi + 124]
	xor	ecx, ecx
	jmp	LBB33_190
	.p2align	4, 0x90
LBB33_191:                              #   in Loop: Header=BB33_190 Depth=1
	xor	ebx, ebx
LBB33_223:                              #   in Loop: Header=BB33_190 Depth=1
	mov	ecx, dword ptr [esi + 8]        # 4-byte Reload
	inc	ecx
	cmp	ecx, eax
	jae	LBB33_224
LBB33_190:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_222 Depth 2
	test	ebx, ebx
	mov	dword ptr [esi + 8], ecx        # 4-byte Spill
	je	LBB33_191
# %bb.221:                              #   in Loop: Header=BB33_190 Depth=1
	lea	ecx, [4*ecx]
	mov	dword ptr [esi], ecx            # 4-byte Spill
	xor	ecx, ecx
	.p2align	4, 0x90
LBB33_222:                              #   Parent Loop BB33_190 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lea	ebx, [4*ecx]
	mov	dword ptr [esi + 4], ecx        # 4-byte Spill
	mov	ecx, dword ptr [esi + 28]
	mov	edx, dword ptr [esi + 24]
	mov	edi, 268435455
	imul	eax, ebx
	add	ecx, dword ptr [esi]            # 4-byte Folded Reload
	add	edx, edi
	mov	edi, 268435455
	add	ecx, eax
	mov	eax, ecx
	and	ecx, 15
	shr	eax, 4
	and	edx, eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*edx]
	movzx	edx, byte ptr [esi + 148]
	mov	byte ptr [eax + ecx], dl
	mov	eax, dword ptr [esi + 120]
	mov	edx, dword ptr [esi + 24]
	imul	eax, ebx
	add	edx, edi
	mov	edi, 268435455
	add	eax, dword ptr [esi]            # 4-byte Folded Reload
	or	eax, 1
	add	eax, dword ptr [esi + 28]
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	ecx, dword ptr [ecx + 4*edx]
	movzx	edx, byte ptr [esi + 149]
	mov	byte ptr [ecx + eax], dl
	mov	eax, dword ptr [esi + 120]
	mov	edx, dword ptr [esi + 24]
	imul	eax, ebx
	add	edx, edi
	mov	edi, 268435455
	add	eax, dword ptr [esi]            # 4-byte Folded Reload
	or	eax, 2
	add	eax, dword ptr [esi + 28]
	mov	ecx, eax
	and	eax, 15
	shr	ecx, 4
	and	edx, ecx
	mov	ecx, dword ptr [esi + 20]
	mov	ecx, dword ptr [ecx + 4*edx]
	movzx	edx, byte ptr [esi + 150]
	mov	byte ptr [ecx + eax], dl
	mov	edx, dword ptr [esi + 4]        # 4-byte Reload
	imul	ebx, dword ptr [esi + 120]
	mov	ecx, dword ptr [esi + 24]
	inc	edx
	add	ebx, dword ptr [esi]            # 4-byte Folded Reload
	add	ecx, edi
	or	ebx, 3
	add	ebx, dword ptr [esi + 28]
	mov	eax, ebx
	and	ebx, 15
	shr	eax, 4
	and	ecx, eax
	mov	eax, dword ptr [esi + 20]
	mov	eax, dword ptr [eax + 4*ecx]
	movzx	ecx, byte ptr [esi + 151]
	mov	byte ptr [eax + ebx], cl
	mov	ecx, edx
	mov	ebx, dword ptr [esi + 124]
	mov	eax, dword ptr [esi + 120]
	cmp	edx, ebx
	jb	LBB33_222
	jmp	LBB33_223
	.p2align	4, 0x90
LBB33_226:                              #   in Loop: Header=BB33_224 Depth=1
	inc	edi
	xor	ecx, ecx
	dec	eax
	cmovne	ecx, edi
	mov	dword ptr [esi + 196], eax
	mov	dword ptr [esi + 192], ecx
LBB33_224:                              # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_233 Depth 2
	mov	eax, dword ptr [esi + 196]
	test	eax, eax
	je	LBB33_243
# %bb.225:                              #   in Loop: Header=BB33_224 Depth=1
	mov	edi, dword ptr [esi + 192]
	mov	ecx, 268435455
	mov	edx, dword ptr [esi + 184]
	add	ecx, dword ptr [esi + 188]
	mov	ebx, edi
	mov	dword ptr [esi + 8], edx        # 4-byte Spill
	shr	ebx, 4
	mov	dword ptr [esi + 4], ecx        # 4-byte Spill
	and	ebx, ecx
	mov	ecx, edi
	mov	ebx, dword ptr [edx + 4*ebx]
	and	ecx, 15
	movzx	ecx, byte ptr [ebx + ecx]
	cmp	ecx, 255
	je	LBB33_226
# %bb.227:                              #   in Loop: Header=BB33_224 Depth=1
	mov	dword ptr [esi + 12], ecx       # 4-byte Spill
	lea	ecx, [edi + 3]
	mov	edx, dword ptr [esi + 8]        # 4-byte Reload
	mov	ebx, ecx
	and	ecx, 15
	shr	ebx, 4
	and	ebx, dword ptr [esi + 4]        # 4-byte Folded Reload
	mov	ebx, dword ptr [edx + 4*ebx]
	movzx	ecx, byte ptr [ebx + ecx]
	mov	dword ptr [esi + 44], ecx       # 4-byte Spill
	lea	ecx, [edi + 2]
	mov	ebx, ecx
	and	ecx, 15
	shr	ebx, 4
	and	ebx, dword ptr [esi + 4]        # 4-byte Folded Reload
	mov	ebx, dword ptr [edx + 4*ebx]
	movzx	ecx, byte ptr [ebx + ecx]
	mov	dword ptr [esi], ecx            # 4-byte Spill
	lea	ecx, [edi + 1]
	add	edi, 4
	mov	ebx, ecx
	and	ecx, 15
	shr	ebx, 4
	and	ebx, dword ptr [esi + 4]        # 4-byte Folded Reload
	cmp	eax, 1
	mov	edx, dword ptr [edx + 4*ebx]
	movzx	ecx, byte ptr [edx + ecx]
	mov	edx, 1
	mov	dword ptr [esi + 4], ecx        # 4-byte Spill
	mov	ecx, 3
	cmovne	ecx, edi
	cmp	eax, 2
	cmove	ecx, eax
	cmp	eax, 3
	cmovne	edx, ecx
	xor	ecx, ecx
	cmp	eax, 4
	cmovne	ecx, edx
	add	eax, -4
	mov	dword ptr [esi + 192], ecx
	mov	dword ptr [esi + 196], eax
	mov	eax, dword ptr ["?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
	mov	ecx, -3585
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + 344], 15
	and	ecx, dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20]
	or	ecx, 2048
	mov	dword ptr [eax + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"+20], ecx
	push	offset "??_C@_0O@HFECNAJH@Instruction?3?5?$AA@"
	push	offset "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.228:                              #   in Loop: Header=BB33_224 Depth=1
	mov	ecx, dword ptr [esi + 12]       # 4-byte Reload
	mov	edx, dword ptr [esi]            # 4-byte Reload
	mov	edi, dword ptr [esi + 4]        # 4-byte Reload
	shl	ecx, 24
	shl	edx, 8
	shl	edi, 16
	add	ecx, dword ptr [esi + 44]       # 4-byte Folded Reload
	or	edx, ecx
	mov	ecx, eax
	or	edx, edi
	mov	dword ptr [esi], edx            # 4-byte Spill
	push	edx
	call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.229:                              #   in Loop: Header=BB33_224 Depth=1
	push	offset "??_C@_01EEMJAFIK@?6?$AA@"
	push	eax
	call	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	add	esp, 8
# %bb.230:                              #   in Loop: Header=BB33_224 Depth=1
	mov	eax, dword ptr [esi + 108]
	xor	edx, edx
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	cmp	byte ptr [ebx + 13], 0
	je	LBB33_232
# %bb.231:                              #   in Loop: Header=BB33_224 Depth=1
	mov	edi, dword ptr [esi]            # 4-byte Reload
	cmp	byte ptr [eax + 13], 0
	jne	LBB33_237
	jmp	LBB33_236
	.p2align	4, 0x90
LBB33_232:                              #   in Loop: Header=BB33_224 Depth=1
	mov	edi, dword ptr [esi]            # 4-byte Reload
	.p2align	4, 0x90
LBB33_233:                              #   Parent Loop BB33_224 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	mov	edx, dword ptr [ebx + 16]
	mov	ecx, ebx
	xor	ebx, ebx
	cmp	edx, edi
	setb	bl
	cmovae	eax, ecx
	mov	ebx, dword ptr [ecx + 8*ebx]
	cmp	byte ptr [ebx + 13], 0
	je	LBB33_233
# %bb.234:                              #   in Loop: Header=BB33_224 Depth=1
	cmp	edx, edi
	mov	edx, 0
	mov	ebx, ecx
	setae	dl
	cmp	byte ptr [eax + 13], 0
	jne	LBB33_237
LBB33_236:                              #   in Loop: Header=BB33_224 Depth=1
	cmp	edi, dword ptr [eax + 16]
	jae	LBB33_242
LBB33_237:                              #   in Loop: Header=BB33_224 Depth=1
	cmp	dword ptr [esi + 112], 178956970
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	dword ptr [esi + 8], ebx        # 4-byte Spill
	mov	dword ptr [esi + 344], 15
	je	LBB33_238
# %bb.240:                              #   in Loop: Header=BB33_224 Depth=1
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.241:                              #   in Loop: Header=BB33_224 Depth=1
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [eax + 16], ecx
	mov	ecx, dword ptr [esi + 4]        # 4-byte Reload
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ecx
	mov	dword ptr [eax + 8], ecx
	mov	word ptr [eax + 12], 0
	lea	ecx, [esi + 108]
	push	eax
	push	dword ptr [esi + 12]            # 4-byte Folded Reload
	push	dword ptr [esi + 8]             # 4-byte Folded Reload
	call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
LBB33_242:                              #   in Loop: Header=BB33_224 Depth=1
	mov	eax, dword ptr [eax + 20]
	lea	ecx, [esi + 116]
	mov	dword ptr [esi + 344], 15
	push	ecx
	lea	ecx, [esi + 16]
	push	ecx
	call	eax
	add	esp, 8
	jmp	LBB33_224
LBB33_243:
	mov	edx, dword ptr [esi + 224]
	mov	eax, edx
	and	eax, -4
	cmp	eax, 2147483644
	je	LBB33_244
# %bb.246:
	mov	eax, dword ptr [esi + 120]
	mov	ecx, dword ptr [esi + 208]
	lea	ebx, [edx + 4]
	lea	edi, [esi + 80]
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 100], 0
	mov	dword ptr [esi], 15             # 4-byte Folded Spill
	cmp	ebx, 16
	mov	dword ptr [esi + 4], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 124]
	mov	dword ptr [esi + 8], eax        # 4-byte Spill
	mov	eax, dword ptr [esi + 228]
	jb	LBB33_256
# %bb.247:
	mov	dword ptr [esi + 104], ecx      # 4-byte Spill
	mov	ecx, ebx
	mov	dword ptr [esi + 204], eax      # 4-byte Spill
	mov	dword ptr [esi + 12], edx       # 4-byte Spill
	mov	dword ptr [esi + 44], ebx       # 4-byte Spill
	or	ecx, 15
	js	LBB33_248
# %bb.249:
	cmp	ecx, 22
	mov	edi, 22
	mov	dword ptr [esi + 344], 15
	cmova	edi, ecx
	lea	eax, [edi + 1]
	cmp	edi, 4095
	jb	LBB33_253
# %bb.250:
	mov	dword ptr [esi], ecx            # 4-byte Spill
	jmp	LBB33_251
LBB33_248:
	mov	dword ptr [esi], 2147483647     # 4-byte Folded Spill
	mov	eax, -2147483648
LBB33_251:
	add	eax, 35
	mov	dword ptr [esi + 344], 15
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.252:
	mov	edi, eax
	add	edi, 35
	and	edi, -32
	mov	dword ptr [edi - 4], eax
	jmp	LBB33_255
LBB33_253:
	mov	dword ptr [esi], edi            # 4-byte Spill
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.254:
	mov	edi, eax
LBB33_255:
	mov	edx, dword ptr [esi + 12]       # 4-byte Reload
	mov	ebx, dword ptr [esi + 44]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 104]      # 4-byte Reload
	mov	eax, dword ptr [esi + 204]      # 4-byte Reload
	mov	dword ptr [esi + 80], edi
LBB33_256:
	cmp	eax, 15
	lea	eax, [esi + 208]
	mov	dword ptr [esi + 96], ebx
	cmova	eax, ecx
	mov	ecx, dword ptr [esi]            # 4-byte Reload
	mov	dword ptr [esi + 100], ecx
	push	edx
	push	eax
	push	edi
	mov	ebx, edx
	call	_memcpy
	add	esp, 12
	mov	dword ptr [edi + ebx], 1735290926
	mov	byte ptr [edi + ebx + 4], 0
	lea	ecx, [esi + 80]
	cmp	dword ptr [esi + 100], 15
	jbe	LBB33_258
# %bb.257:
	mov	ecx, dword ptr [esi + 80]
LBB33_258:
	mov	dword ptr [esi + 344], 18
	push	dword ptr [esi + 8]             # 4-byte Folded Reload
	push	dword ptr [esi + 4]             # 4-byte Folded Reload
	lea	eax, [esi + 16]
	push	eax
	push	ecx
	call	"?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	add	esp, 16
# %bb.259:
	mov	eax, dword ptr [esi + 100]
	cmp	eax, 16
	jb	LBB33_130
# %bb.260:
	mov	ecx, dword ptr [esi + 80]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB33_266
# %bb.261:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB33_262
# %bb.265:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB33_266:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_130:
	cmp	dword ptr [esi + 32], 0
	je	LBB33_132
# %bb.131:
	mov	dword ptr [esi + 28], 0
	mov	dword ptr [esi + 32], 0
LBB33_132:
	mov	eax, dword ptr [esi + 20]
	mov	edi, dword ptr [esi + 24]
	.p2align	4, 0x90
LBB33_133:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_273
# %bb.134:                              #   in Loop: Header=BB33_133 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_133
# %bb.135:                              #   in Loop: Header=BB33_133 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 20]
	jmp	LBB33_133
LBB33_273:
	test	eax, eax
	je	LBB33_281
# %bb.274:
	mov	ecx, dword ptr [esi + 24]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_280
# %bb.275:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_276
# %bb.279:
	add	ecx, 35
	mov	eax, edx
LBB33_280:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_281:
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 20], 0
	mov	eax, dword ptr [esi + 16]
	mov	dword ptr [esi + 16], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 108]
	lea	ecx, [esi + 108]
	push	dword ptr [eax + 4]
	push	ecx
	call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
	push	24
	push	dword ptr [esi + 108]
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 324]
	cmp	eax, 15
	jbe	LBB33_303
# %bb.282:
	mov	ecx, dword ptr [esi + 304]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB33_302
# %bb.283:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB33_284
# %bb.301:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB33_302:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_303:
	mov	dword ptr [esi + 320], 0
	mov	dword ptr [esi + 324], 15
	mov	byte ptr [esi + 304], 0
	mov	eax, dword ptr [esi + 300]
	cmp	eax, 15
	jbe	LBB33_308
# %bb.304:
	mov	ecx, dword ptr [esi + 280]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_307
# %bb.305:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB33_284
# %bb.306:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_307:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_308:
	mov	dword ptr [esi + 296], 0
	mov	dword ptr [esi + 300], 15
	mov	byte ptr [esi + 280], 0
	mov	eax, dword ptr [esi + 276]
	cmp	eax, 16
	jb	LBB33_313
# %bb.309:
	mov	ecx, dword ptr [esi + 256]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_312
# %bb.310:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB33_284
# %bb.311:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_312:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_313:
	mov	dword ptr [esi + 272], 0
	mov	dword ptr [esi + 276], 15
	mov	byte ptr [esi + 256], 0
	mov	eax, dword ptr [esi + 252]
	cmp	eax, 16
	jb	LBB33_318
# %bb.314:
	mov	ecx, dword ptr [esi + 232]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_317
# %bb.315:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB33_284
# %bb.316:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_317:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_318:
	cmp	dword ptr [esi + 196], 0
	je	LBB33_320
# %bb.319:
	mov	dword ptr [esi + 192], 0
	mov	dword ptr [esi + 196], 0
LBB33_320:
	mov	eax, dword ptr [esi + 184]
	mov	edi, dword ptr [esi + 188]
	.p2align	4, 0x90
LBB33_321:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_322
# %bb.327:                              #   in Loop: Header=BB33_321 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_321
# %bb.328:                              #   in Loop: Header=BB33_321 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 184]
	jmp	LBB33_321
LBB33_322:
	test	eax, eax
	je	LBB33_332
# %bb.323:
	mov	ecx, dword ptr [esi + 188]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_331
# %bb.324:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_325
# %bb.330:
	add	ecx, 35
	mov	eax, edx
LBB33_331:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_332:
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 184], 0
	mov	eax, dword ptr [esi + 180]
	mov	dword ptr [esi + 180], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 176], 0
	je	LBB33_334
# %bb.333:
	mov	dword ptr [esi + 172], 0
	mov	dword ptr [esi + 176], 0
LBB33_334:
	mov	eax, dword ptr [esi + 164]
	mov	edi, dword ptr [esi + 168]
	.p2align	4, 0x90
LBB33_335:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_336
# %bb.341:                              #   in Loop: Header=BB33_335 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_335
# %bb.342:                              #   in Loop: Header=BB33_335 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 164]
	jmp	LBB33_335
LBB33_336:
	test	eax, eax
	je	LBB33_346
# %bb.337:
	mov	ecx, dword ptr [esi + 168]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_345
# %bb.338:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_339
# %bb.344:
	add	ecx, 35
	mov	eax, edx
LBB33_345:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_346:
	mov	dword ptr [esi + 168], 0
	mov	dword ptr [esi + 164], 0
	mov	eax, dword ptr [esi + 160]
	mov	dword ptr [esi + 160], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 144], 0
	je	LBB33_348
# %bb.347:
	mov	dword ptr [esi + 140], 0
	mov	dword ptr [esi + 144], 0
LBB33_348:
	mov	eax, dword ptr [esi + 132]
	mov	edi, dword ptr [esi + 136]
	.p2align	4, 0x90
LBB33_349:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_350
# %bb.355:                              #   in Loop: Header=BB33_349 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_349
# %bb.356:                              #   in Loop: Header=BB33_349 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 132]
	jmp	LBB33_349
LBB33_350:
	test	eax, eax
	je	LBB33_360
# %bb.351:
	mov	ecx, dword ptr [esi + 136]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_359
# %bb.352:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_353
# %bb.358:
	add	ecx, 35
	mov	eax, edx
LBB33_359:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_360:
	mov	dword ptr [esi + 136], 0
	mov	dword ptr [esi + 132], 0
	mov	eax, dword ptr [esi + 128]
	mov	dword ptr [esi + 128], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 64], 0
	je	LBB33_362
# %bb.361:
	mov	dword ptr [esi + 60], 0
	mov	dword ptr [esi + 64], 0
LBB33_362:
	mov	eax, dword ptr [esi + 52]
	mov	edi, dword ptr [esi + 56]
	.p2align	4, 0x90
LBB33_363:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_364
# %bb.369:                              #   in Loop: Header=BB33_363 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_363
# %bb.370:                              #   in Loop: Header=BB33_363 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 52]
	jmp	LBB33_363
LBB33_364:
	test	eax, eax
	je	LBB33_374
# %bb.365:
	mov	ecx, dword ptr [esi + 56]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_373
# %bb.366:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_367
# %bb.372:
	add	ecx, 35
	mov	eax, edx
LBB33_373:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_374:
	mov	dword ptr [esi + 56], 0
	mov	dword ptr [esi + 52], 0
	mov	eax, dword ptr [esi + 48]
	mov	dword ptr [esi + 48], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 228]
	cmp	eax, 16
	jb	LBB33_382
# %bb.375:
	mov	ecx, dword ptr [esi + 208]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB33_381
# %bb.376:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB33_377
# %bb.380:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB33_381:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_382:
	mov	eax, dword ptr [esi + 336]
	mov	dword ptr fs:[0], eax
	xor	eax, eax
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB33_154:
	mov	dword ptr [esi + 344], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.155:
LBB33_238:
	call	"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.239:
LBB33_284:
	mov	dword ptr [esi + 344], 5
	call	__invalid_parameter_noinfo_noreturn
# %bb.285:
LBB33_276:
	mov	dword ptr [esi + 344], 4
	call	__invalid_parameter_noinfo_noreturn
# %bb.277:
LBB33_325:
	mov	dword ptr [esi + 344], 6
	call	__invalid_parameter_noinfo_noreturn
# %bb.326:
LBB33_339:
	mov	dword ptr [esi + 344], 7
	call	__invalid_parameter_noinfo_noreturn
# %bb.340:
LBB33_353:
	mov	dword ptr [esi + 344], 8
	call	__invalid_parameter_noinfo_noreturn
# %bb.354:
LBB33_367:
	mov	dword ptr [esi + 344], 9
	call	__invalid_parameter_noinfo_noreturn
# %bb.368:
LBB33_244:
	mov	dword ptr [esi + 344], 15
	call	"?_Xlen_string@std@@YAXXZ"
# %bb.245:
LBB33_377:
	mov	dword ptr [esi + 344], 10
	call	__invalid_parameter_noinfo_noreturn
# %bb.378:
LBB33_25:
	mov	dword ptr [esi + 344], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.26:
LBB33_88:
	mov	dword ptr [esi + 344], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.89:
LBB33_262:
	mov	dword ptr [esi + 344], 3
	call	__invalid_parameter_noinfo_noreturn
# %bb.263:
	.def	 "?dtor$29@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$29@?0?main@4HA":
LBB33_29:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$72@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$72@?0?main@4HA":
LBB33_72:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	cmp	dword ptr [esi + 96], 0
	je	LBB33_74
# %bb.73:
	mov	dword ptr [esi + 92], 0
	mov	dword ptr [esi + 96], 0
LBB33_74:
	mov	eax, dword ptr [esi + 84]
	mov	edi, dword ptr [esi + 88]
LBB33_75:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_76
# %bb.80:                               #   in Loop: Header=BB33_75 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_75
# %bb.81:                               #   in Loop: Header=BB33_75 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 84]
	jmp	LBB33_75
LBB33_76:
	test	eax, eax
	je	LBB33_84
# %bb.77:
	mov	ecx, dword ptr [esi + 88]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_83
# %bb.78:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_79
# %bb.82:
	add	ecx, 35
	mov	eax, edx
LBB33_83:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_84:
	mov	dword ptr [esi + 88], 0
	mov	dword ptr [esi + 84], 0
	push	8
	push	dword ptr [esi + 104]           # 4-byte Folded Reload
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB33_79:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$90@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$90@?0?main@4HA":
LBB33_90:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$156@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$156@?0?main@4HA":
LBB33_156:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$161@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$161@?0?main@4HA":
LBB33_161:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 100]
	cmp	eax, 16
	jb	LBB33_166
# %bb.162:
	mov	ecx, dword ptr [esi + 80]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_165
# %bb.163:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB33_456
# %bb.164:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_165:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_166:
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 100], 15
	mov	byte ptr [esi + 80], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB33_456:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$264@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$264@?0?main@4HA":
LBB33_264:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$267@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$267@?0?main@4HA":
LBB33_267:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 100]
	cmp	eax, 16
	jb	LBB33_272
# %bb.268:
	mov	ecx, dword ptr [esi + 80]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_271
# %bb.269:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB33_457
# %bb.270:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_271:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_272:
	mov	dword ptr [esi + 96], 0
	mov	dword ptr [esi + 100], 15
	mov	byte ptr [esi + 80], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB33_457:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$278@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$278@?0?main@4HA":
LBB33_278:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$286@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$286@?0?main@4HA":
LBB33_286:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	cmp	dword ptr [esi + 32], 0
	je	LBB33_288
# %bb.287:
	mov	dword ptr [esi + 28], 0
	mov	dword ptr [esi + 32], 0
LBB33_288:
	mov	eax, dword ptr [esi + 20]
	mov	edi, dword ptr [esi + 24]
LBB33_289:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_290
# %bb.294:                              #   in Loop: Header=BB33_289 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_289
# %bb.295:                              #   in Loop: Header=BB33_289 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 20]
	jmp	LBB33_289
LBB33_290:
	test	eax, eax
	je	LBB33_298
# %bb.291:
	mov	ecx, dword ptr [esi + 24]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_297
# %bb.292:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_293
# %bb.296:
	add	ecx, 35
	mov	eax, edx
LBB33_297:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_298:
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 20], 0
	mov	eax, dword ptr [esi + 16]
	mov	dword ptr [esi + 16], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB33_293:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$299@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$299@?0?main@4HA":
LBB33_299:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 108]
	lea	ecx, [esi + 108]
	push	dword ptr [eax + 4]
	push	ecx
	call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
	push	24
	push	dword ptr [esi + 108]
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$300@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$300@?0?main@4HA":
LBB33_300:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$329@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$329@?0?main@4HA":
LBB33_329:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$343@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$343@?0?main@4HA":
LBB33_343:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$357@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$357@?0?main@4HA":
LBB33_357:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$371@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$371@?0?main@4HA":
LBB33_371:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$379@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$379@?0?main@4HA":
LBB33_379:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	call	___std_terminate
	.def	 "?dtor$383@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$383@?0?main@4HA":
LBB33_383:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 324]
	cmp	eax, 15
	jbe	LBB33_388
# %bb.384:
	mov	ecx, dword ptr [esi + 304]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_387
# %bb.385:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB33_458
# %bb.386:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_387:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_388:
	mov	dword ptr [esi + 320], 0
	mov	dword ptr [esi + 324], 15
	mov	byte ptr [esi + 304], 0
	mov	eax, dword ptr [esi + 300]
	cmp	eax, 15
	jbe	LBB33_393
# %bb.389:
	mov	ecx, dword ptr [esi + 280]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_392
# %bb.390:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB33_458
# %bb.391:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_392:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_393:
	mov	dword ptr [esi + 296], 0
	mov	dword ptr [esi + 300], 15
	mov	byte ptr [esi + 280], 0
	mov	eax, dword ptr [esi + 276]
	cmp	eax, 16
	jb	LBB33_398
# %bb.394:
	mov	ecx, dword ptr [esi + 256]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_397
# %bb.395:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB33_458
# %bb.396:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_397:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_398:
	mov	dword ptr [esi + 272], 0
	mov	dword ptr [esi + 276], 15
	mov	byte ptr [esi + 256], 0
	mov	eax, dword ptr [esi + 252]
	cmp	eax, 16
	jb	LBB33_403
# %bb.399:
	mov	ecx, dword ptr [esi + 232]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_402
# %bb.400:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 31
	ja	LBB33_458
# %bb.401:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_402:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_403:
	cmp	dword ptr [esi + 196], 0
	je	LBB33_405
# %bb.404:
	mov	dword ptr [esi + 192], 0
	mov	dword ptr [esi + 196], 0
LBB33_405:
	mov	eax, dword ptr [esi + 184]
	mov	edi, dword ptr [esi + 188]
LBB33_406:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_407
# %bb.418:                              #   in Loop: Header=BB33_406 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_406
# %bb.419:                              #   in Loop: Header=BB33_406 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 184]
	jmp	LBB33_406
LBB33_407:
	test	eax, eax
	je	LBB33_412
# %bb.408:
	mov	ecx, dword ptr [esi + 188]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_411
# %bb.409:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_458
# %bb.410:
	add	ecx, 35
	mov	eax, edx
LBB33_411:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_412:
	mov	dword ptr [esi + 188], 0
	mov	dword ptr [esi + 184], 0
	mov	eax, dword ptr [esi + 180]
	mov	dword ptr [esi + 180], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 176], 0
	je	LBB33_414
# %bb.413:
	mov	dword ptr [esi + 172], 0
	mov	dword ptr [esi + 176], 0
LBB33_414:
	mov	eax, dword ptr [esi + 164]
	mov	edi, dword ptr [esi + 168]
LBB33_415:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_420
# %bb.416:                              #   in Loop: Header=BB33_415 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_415
# %bb.417:                              #   in Loop: Header=BB33_415 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 164]
	jmp	LBB33_415
LBB33_420:
	test	eax, eax
	je	LBB33_425
# %bb.421:
	mov	ecx, dword ptr [esi + 168]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_424
# %bb.422:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_458
# %bb.423:
	add	ecx, 35
	mov	eax, edx
LBB33_424:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_425:
	mov	dword ptr [esi + 168], 0
	mov	dword ptr [esi + 164], 0
	mov	eax, dword ptr [esi + 160]
	mov	dword ptr [esi + 160], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	dword ptr [esi + 144], 0
	je	LBB33_427
# %bb.426:
	mov	dword ptr [esi + 140], 0
	mov	dword ptr [esi + 144], 0
LBB33_427:
	mov	eax, dword ptr [esi + 132]
	mov	edi, dword ptr [esi + 136]
LBB33_428:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_429
# %bb.435:                              #   in Loop: Header=BB33_428 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_428
# %bb.436:                              #   in Loop: Header=BB33_428 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 132]
	jmp	LBB33_428
LBB33_429:
	test	eax, eax
	je	LBB33_434
# %bb.430:
	mov	ecx, dword ptr [esi + 136]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_433
# %bb.431:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_458
# %bb.432:
	add	ecx, 35
	mov	eax, edx
LBB33_433:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_434:
	mov	dword ptr [esi + 136], 0
	mov	dword ptr [esi + 132], 0
	mov	eax, dword ptr [esi + 128]
	mov	dword ptr [esi + 128], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB33_458:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$437@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$437@?0?main@4HA":
LBB33_437:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	cmp	dword ptr [esi + 64], 0
	je	LBB33_439
# %bb.438:
	mov	dword ptr [esi + 60], 0
	mov	dword ptr [esi + 64], 0
LBB33_439:
	mov	eax, dword ptr [esi + 52]
	mov	edi, dword ptr [esi + 56]
LBB33_440:                              # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB33_441
# %bb.445:                              #   in Loop: Header=BB33_440 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB33_440
# %bb.446:                              #   in Loop: Header=BB33_440 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 52]
	jmp	LBB33_440
LBB33_441:
	test	eax, eax
	je	LBB33_449
# %bb.442:
	mov	ecx, dword ptr [esi + 56]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB33_448
# %bb.443:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB33_444
# %bb.447:
	add	ecx, 35
	mov	eax, edx
LBB33_448:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_449:
	mov	dword ptr [esi + 56], 0
	mov	dword ptr [esi + 52], 0
	mov	eax, dword ptr [esi + 48]
	mov	dword ptr [esi + 48], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB33_444:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$450@?0?main@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$450@?0?main@4HA":
LBB33_450:
	push	ebp
	sub	esp, 16
	lea	esi, [ebp - 348]
	mov	ebp, dword ptr [esi + 328]
	mov	eax, dword ptr [esi + 228]
	cmp	eax, 16
	jb	LBB33_455
# %bb.451:
	mov	ecx, dword ptr [esi + 208]
	lea	edi, [eax + 1]
	cmp	edi, 4096
	jb	LBB33_454
# %bb.452:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB33_459
# %bb.453:
	add	eax, 36
	mov	ecx, edx
	mov	edi, eax
LBB33_454:
	push	edi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB33_455:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB33_459:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end10:
	.section	.xdata,"dr"
	.p2align	2
L__ehtable$main:
	.long	429065506                       # MagicNumber
	.long	19                              # MaxState
	.long	($stateUnwindMap$main)          # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
$stateUnwindMap$main:
	.long	-1                              # ToState
	.long	"?dtor$29@?0?main@4HA"          # Action
	.long	-1                              # ToState
	.long	"?dtor$90@?0?main@4HA"          # Action
	.long	-1                              # ToState
	.long	"?dtor$156@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$264@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$278@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$300@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$329@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$343@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$357@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$371@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$379@?0?main@4HA"         # Action
	.long	-1                              # ToState
	.long	"?dtor$450@?0?main@4HA"         # Action
	.long	11                              # ToState
	.long	"?dtor$437@?0?main@4HA"         # Action
	.long	12                              # ToState
	.long	"?dtor$383@?0?main@4HA"         # Action
	.long	13                              # ToState
	.long	"?dtor$299@?0?main@4HA"         # Action
	.long	14                              # ToState
	.long	"?dtor$286@?0?main@4HA"         # Action
	.long	15                              # ToState
	.long	"?dtor$161@?0?main@4HA"         # Action
	.long	15                              # ToState
	.long	"?dtor$72@?0?main@4HA"          # Action
	.long	15                              # ToState
	.long	"?dtor$267@?0?main@4HA"         # Action
	.text
                                        # -- End function
	.def	 "??0fileInfo@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0fileInfo@@QAE@XZ"
	.globl	"??0fileInfo@@QAE@XZ"           # -- Begin function ??0fileInfo@@QAE@XZ
	.p2align	4, 0x90
"??0fileInfo@@QAE@XZ":                  # @"??0fileInfo@@QAE@XZ"
Lfunc_begin11:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 28
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0fileInfo@@QAE@XZ"
	mov	edi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	lea	esi, [edi + 12]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [edi + 16], 0
	mov	dword ptr [edi + 12], 0
	mov	dword ptr [edi + 24], 0
	mov	dword ptr [edi + 20], 0
	mov	dword ptr [edi + 28], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [edi + 12], eax
	mov	dword ptr [eax], esi
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	mov	dword ptr [edi + 48], 0
	mov	dword ptr [edi + 44], 0
	mov	dword ptr [edi + 56], 0
	mov	dword ptr [edi + 52], 0
	mov	dword ptr [edi + 60], 0
	mov	dword ptr [edi + 36], 0
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.1:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax + 4], 0
	lea	edx, [ecx + 44]
	mov	dword ptr [ecx + 44], eax
	mov	dword ptr [eax], edx
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	mov	dword ptr [ecx + 68], 0
	mov	dword ptr [ecx + 64], 0
	mov	dword ptr [ecx + 76], 0
	mov	dword ptr [ecx + 72], 0
	mov	dword ptr [ecx + 80], 0
	mov	dword ptr [ebp - 16], 1
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.2:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax + 4], 0
	lea	ecx, [edx + 64]
	mov	dword ptr [edx + 64], eax
	mov	dword ptr [eax], ecx
	mov	byte ptr [edx + 84], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edx
	add	esp, 28
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$3@?0???0fileInfo@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???0fileInfo@@QAE@XZ@4HA":
LBB34_3:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, esi
	call	"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	mov	eax, dword ptr [esi]
	mov	dword ptr [esi], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$4@?0???0fileInfo@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???0fileInfo@@QAE@XZ@4HA":
LBB34_4:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, esi
	call	"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	mov	eax, dword ptr [esi]
	mov	dword ptr [esi], 0
	push	8
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end11:
	.section	.xdata,"dr",associative,"??0fileInfo@@QAE@XZ"
	.p2align	2
"L__ehtable$??0fileInfo@@QAE@XZ":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??0fileInfo@@QAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0fileInfo@@QAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???0fileInfo@@QAE@XZ@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$3@?0???0fileInfo@@QAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??0fileInfo@@QAE@XZ"
                                        # -- End function
	.def	 "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.globl	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z" # -- Begin function ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	.p2align	4, 0x90
"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z": # @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
Lfunc_begin12:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 64
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 40], esi
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + edx + 56]
	test	ecx, ecx
	je	LBB35_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
LBB35_2:
	cmp	dword ptr [esi + edx + 12], 0
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	je	LBB35_9
# %bb.3:
	xor	edi, edi
	mov	byte ptr [ebp - 36], 0
	jmp	LBB35_4
LBB35_9:
	mov	ecx, dword ptr [esi + edx + 60]
	test	ecx, ecx
	je	LBB35_11
# %bb.10:
	cmp	ecx, esi
	je	LBB35_11
# %bb.15:
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edi, edi
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [esi + ecx + 12], 0
	sete	byte ptr [ebp - 36]
	jne	LBB35_4
	jmp	LBB35_17
LBB35_11:
	mov	byte ptr [ebp - 36], 1
LBB35_17:
	mov	eax, dword ptr [eax + 4]
	mov	eax, dword ptr [esi + eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 64], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 68]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.18:
	mov	ecx, dword ptr [ebp - 64]
	mov	edi, dword ptr [ebp + 8]
	mov	esi, eax
	test	ecx, ecx
	je	LBB35_21
# %bb.19:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB35_21
# %bb.20:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB35_21:
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebx]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [ebx + eax]
	movsx	edx, byte ptr [ebx + eax + 64]
	mov	eax, dword ptr [ebx + eax + 56]
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 36]
	mov	dword ptr [ebp - 16], 5
	sub	esp, 24
	movsd	xmm0, qword ptr [ebp - 48]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 4], xmm0
	mov	dword ptr [esp + 12], ecx
	lea	ecx, [ebp - 76]
	mov	dword ptr [esp + 20], edi
	mov	dword ptr [esp + 16], edx
	mov	dword ptr [esp], ecx
	mov	ecx, esi
	call	eax
# %bb.22:
	movzx	edi, byte ptr [ebp - 76]
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
LBB35_4:
	mov	eax, dword ptr [esi]
	xor	ecx, ecx
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [esi + edx + 56], 0
	mov	eax, dword ptr [esi + edx + 12]
	sete	cl
	and	eax, 23
	shl	ecx, 2
	or	ecx, edi
	or	eax, ecx
	mov	dword ptr [esi + edx + 12], eax
	and	eax, dword ptr [esi + edx + 16]
	jne	LBB35_5
# %bb.33:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB35_35
# %bb.34:
	mov	ecx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB35_35:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB35_37
# %bb.36:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB35_37:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 64
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB35_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB35_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB35_7:
	test	al, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 68]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 68], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 68]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.32:
LBB35_31:                               # Block address taken
	add	ebp, 12
	xor	edi, edi
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB35_4
	.def	 "?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB35_12:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB35_14
# %bb.13:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB35_14:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB35_23:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 64]
	test	ecx, ecx
	je	LBB35_26
# %bb.24:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB35_26
# %bb.25:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB35_26:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB35_27:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB35_28
# %bb.30:
	mov	eax, offset LBB35_31
	add	esp, 24
	pop	ebp
	ret                                     # CATCHRET
LBB35_28:
	mov	dword ptr [ebp - 16], 6
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.29:
	.def	 "?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB35_38:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB35_39:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA":
LBB35_40:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB35_42
# %bb.41:
	mov	ecx, dword ptr [ebp - 40]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB35_42:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB35_44
# %bb.43:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB35_44:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end12:
	.section	.xdata,"dr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.p2align	2
"L__ehtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z":
	.long	429065506                       # MagicNumber
	.long	7                               # MaxState
	.long	("$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$38@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$39@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$40@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$23@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z":
	.long	5                               # TryLow
	.long	5                               # TryHigh
	.long	6                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z") # HandlerArray
"$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$27@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z@4HA" # Handler
	.section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
                                        # -- End function
	.def	 "??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ"
	.globl	"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ
	.p2align	4, 0x90
"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
	mov	dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"], 0
	ret
                                        # -- End function
	.def	 "??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
	.globl	"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
	.p2align	4, 0x90
"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
	mov	dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"], 0
	ret
                                        # -- End function
	.def	 "??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
	.globl	"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
	.p2align	4, 0x90
"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
	mov	dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"], 0
	ret
                                        # -- End function
	.def	 "??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.globl	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z" # -- Begin function ??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z
	.p2align	4, 0x90
"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z": # @"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
Lfunc_begin13:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 24
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	js	LBB39_18
# %bb.1:
	mov	ebx, dword ptr [esi + 20]
	mov	ecx, edx
	mov	eax, -2147483648
	mov	dword ptr [ebp - 32], 2147483647 # 4-byte Folded Spill
	or	ecx, 15
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	js	LBB39_5
# %bb.2:
	mov	edx, ebx
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, ebx
	jb	LBB39_5
# %bb.3:
	add	edx, ebx
	cmp	ecx, edx
	cmovae	edx, ecx
	lea	eax, [edx + 1]
	cmp	eax, 4096
	jb	LBB39_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	jae	LBB39_19
LBB39_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB39_9:
	mov	ebx, dword ptr [ebp + 8]
	mov	eax, dword ptr [ebp + 16]
	mov	dword ptr [esi + 16], ebx
	mov	dword ptr [esi + 20], edx
	push	ebx
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12
	mov	byte ptr [edi + ebx], 0
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	ebx, 16
	jb	LBB39_17
# %bb.10:
	mov	eax, dword ptr [esi]
	lea	ecx, [ebx + 1]
	cmp	ecx, 4096
	jb	LBB39_16
# %bb.11:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB39_12
# %bb.15:
	add	ebx, 36
	mov	eax, edx
	mov	ecx, ebx
LBB39_16:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB39_17:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 24
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB39_6:
	test	eax, eax
	je	LBB39_7
# %bb.8:
	push	eax
	mov	edi, edx
	call	"??2@YAPAXI@Z"
	mov	edx, edi
	add	esp, 4
	mov	edi, eax
	jmp	LBB39_9
LBB39_7:
	xor	edi, edi
	mov	edx, -1
	jmp	LBB39_9
LBB39_18:
	call	"?_Xlen_string@std@@YAXXZ"
LBB39_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB39_19:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z@4HA":
LBB39_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end13:
	.section	.xdata,"dr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
                                        # -- End function
	.def	 "?_Xlen_string@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen_string@std@@YAXXZ"
	.globl	"?_Xlen_string@std@@YAXXZ"      # -- Begin function ?_Xlen_string@std@@YAXXZ
	.p2align	4, 0x90
"?_Xlen_string@std@@YAXXZ":             # @"?_Xlen_string@std@@YAXXZ"
# %bb.0:
	push	offset "??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "?_Throw_bad_array_new_length@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Throw_bad_array_new_length@std@@YAXXZ"
	.globl	"?_Throw_bad_array_new_length@std@@YAXXZ" # -- Begin function ?_Throw_bad_array_new_length@std@@YAXXZ
	.p2align	4, 0x90
"?_Throw_bad_array_new_length@std@@YAXXZ": # @"?_Throw_bad_array_new_length@std@@YAXXZ"
# %bb.0:
	sub	esp, 12
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 4], offset "??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
	mov	dword ptr [esp], offset "??_7bad_array_new_length@std@@6B@"
	mov	eax, esp
	push	offset "__TI3?AVbad_array_new_length@std@@"
	push	eax
	call	__CxxThrowException@8
                                        # -- End function
	.def	 "??0bad_array_new_length@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.globl	"??0bad_array_new_length@std@@QAE@ABV01@@Z" # -- Begin function ??0bad_array_new_length@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0bad_array_new_length@std@@QAE@ABV01@@Z": # @"??0bad_array_new_length@std@@QAE@ABV01@@Z"
Lfunc_begin14:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7bad_array_new_length@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA":
LBB42_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end14:
	.section	.xdata,"dr",associative,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0bad_array_new_length@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0bad_array_new_length@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0bad_array_new_length@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0bad_array_new_length@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0bad_alloc@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.globl	"??0bad_alloc@std@@QAE@ABV01@@Z" # -- Begin function ??0bad_alloc@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0bad_alloc@std@@QAE@ABV01@@Z":       # @"??0bad_alloc@std@@QAE@ABV01@@Z"
Lfunc_begin15:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7bad_alloc@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA":
LBB43_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end15:
	.section	.xdata,"dr",associative,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0bad_alloc@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0bad_alloc@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0bad_alloc@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0bad_alloc@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0bad_alloc@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0exception@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0exception@std@@QAE@ABV01@@Z"
	.globl	"??0exception@std@@QAE@ABV01@@Z" # -- Begin function ??0exception@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0exception@std@@QAE@ABV01@@Z":       # @"??0exception@std@@QAE@ABV01@@Z"
Lfunc_begin16:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA":
LBB44_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end16:
	.section	.xdata,"dr",associative,"??0exception@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0exception@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0exception@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0exception@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0exception@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0exception@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??_Gbad_array_new_length@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.globl	"??_Gbad_array_new_length@std@@UAEPAXI@Z" # -- Begin function ??_Gbad_array_new_length@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gbad_array_new_length@std@@UAEPAXI@Z": # @"??_Gbad_array_new_length@std@@UAEPAXI@Z"
Lfunc_begin17:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB45_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB45_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA":
LBB45_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end17:
	.section	.xdata,"dr",associative,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gbad_array_new_length@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gbad_array_new_length@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gbad_array_new_length@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gbad_array_new_length@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "?what@exception@std@@UBEPBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?what@exception@std@@UBEPBDXZ"
	.globl	"?what@exception@std@@UBEPBDXZ" # -- Begin function ?what@exception@std@@UBEPBDXZ
	.p2align	4, 0x90
"?what@exception@std@@UBEPBDXZ":        # @"?what@exception@std@@UBEPBDXZ"
# %bb.0:
	mov	ecx, dword ptr [ecx + 4]
	mov	eax, offset "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	test	ecx, ecx
	cmovne	eax, ecx
	ret
                                        # -- End function
	.def	 "??_Gbad_alloc@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.globl	"??_Gbad_alloc@std@@UAEPAXI@Z"  # -- Begin function ??_Gbad_alloc@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gbad_alloc@std@@UAEPAXI@Z":         # @"??_Gbad_alloc@std@@UAEPAXI@Z"
Lfunc_begin18:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB47_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB47_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA":
LBB47_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end18:
	.section	.xdata,"dr",associative,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gbad_alloc@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gbad_alloc@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gbad_alloc@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gbad_alloc@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gbad_alloc@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??_Gexception@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gexception@std@@UAEPAXI@Z"
	.globl	"??_Gexception@std@@UAEPAXI@Z"  # -- Begin function ??_Gexception@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gexception@std@@UAEPAXI@Z":         # @"??_Gexception@std@@UAEPAXI@Z"
Lfunc_begin19:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB48_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB48_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA":
LBB48_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end19:
	.section	.xdata,"dr",associative,"??_Gexception@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gexception@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gexception@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gexception@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gexception@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gexception@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.globl	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ" # -- Begin function ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	.p2align	4, 0x90
"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ": # @"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
Lfunc_begin20:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [esi], offset "??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	cmp	dword ptr [esi + 76], 0
	je	LBB49_3
# %bb.1:
	mov	eax, dword ptr [esi + 12]
	lea	ecx, [esi + 60]
	cmp	dword ptr [eax], ecx
	je	LBB49_2
LBB49_3:
	cmp	byte ptr [esi + 72], 0
	je	LBB49_19
LBB49_4:
	cmp	dword ptr [esi + 76], 0
	je	LBB49_18
# %bb.5:
	cmp	dword ptr [esi + 56], 0
	je	LBB49_17
# %bb.6:
	cmp	byte ptr [esi + 61], 0
	je	LBB49_17
# %bb.7:
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	ecx, esi
	push	-1
	call	dword ptr ["??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"+12]
# %bb.8:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	je	LBB49_17
# %bb.9:
	mov	ecx, dword ptr [esi + 56]
	lea	edx, [esi + 64]
	lea	eax, [ebp - 36]
	lea	edi, [ebp - 36]
	lea	ebx, [ebp - 68]
	mov	esi, dword ptr [ecx]
	push	edi
	push	eax
	push	ebx
	push	edx
	call	dword ptr [esi + 32]
# %bb.10:
	cmp	eax, 3
	je	LBB49_16
# %bb.11:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, 1
	lea	ecx, [ebp - 68]
	je	LBB49_14
# %bb.12:
	test	eax, eax
	jne	LBB49_17
# %bb.13:
	mov	byte ptr [esi + 61], 0
LBB49_14:
	mov	eax, dword ptr [ebp - 36]
	sub	eax, ecx
	je	LBB49_17
# %bb.15:
	push	dword ptr [esi + 76]
	push	eax
	push	1
	push	ecx
	call	_fwrite
	add	esp, 16
	jmp	LBB49_17
LBB49_2:
	mov	ecx, dword ptr [esi + 80]
	mov	edx, dword ptr [esi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [esi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [esi + 44]
	mov	dword ptr [eax], edx
	cmp	byte ptr [esi + 72], 0
	jne	LBB49_4
	jmp	LBB49_19
LBB49_16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	byte ptr [esi + 61], 0
LBB49_17:
	push	dword ptr [esi + 76]
	call	_fclose
	add	esp, 4
LBB49_18:
	lea	eax, [esi + 4]
	mov	byte ptr [esi + 72], 0
	mov	byte ptr [esi + 61], 0
	mov	dword ptr [esi + 12], eax
	lea	eax, [esi + 8]
	mov	dword ptr [esi + 16], eax
	lea	eax, [esi + 20]
	mov	dword ptr [esi + 28], eax
	lea	eax, [esi + 24]
	mov	dword ptr [esi + 32], eax
	lea	eax, [esi + 36]
	mov	dword ptr [esi + 44], eax
	lea	eax, [esi + 40]
	mov	dword ptr [esi + 48], eax
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 40], 0
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 36], 0
	mov	dword ptr [esi + 76], 0
	mov	eax, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"]
	mov	ecx, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"+4]
	mov	dword ptr [esi + 68], ecx
	mov	dword ptr [esi + 64], eax
	mov	dword ptr [esi + 56], 0
LBB49_19:
	mov	dword ptr [esi], offset "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	mov	esi, dword ptr [esi + 52]
	test	esi, esi
	je	LBB49_24
# %bb.20:
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB49_23
# %bb.21:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB49_23
# %bb.22:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB49_23:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB49_24:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$25@?0???1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$25@?0???1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ@4HA":
LBB49_25:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	call	"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	call	___std_terminate
Lfunc_end20:
	.section	.xdata,"dr",associative,"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.p2align	2
"L__ehtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$25@?0???1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
                                        # -- End function
	.def	 "??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.globl	"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z" # -- Begin function ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	.p2align	4, 0x90
"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z": # @"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
Lfunc_begin21:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	sub	esi, dword ptr [esi - 4]
	mov	eax, dword ptr [esi - 112]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + eax - 112], offset "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	mov	eax, dword ptr [esi - 112]
	mov	eax, dword ptr [eax + 4]
	lea	ecx, [eax - 112]
	mov	dword ptr [esi + eax - 116], ecx
	lea	ecx, [esi - 96]
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	mov	dword ptr [esi], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	push	esi
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	add	esi, -112
	cmp	dword ptr [ebp + 8], 0
	je	LBB50_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB50_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA":
LBB50_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end21:
	.section	.xdata,"dr",associative,"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.p2align	2
"L__ehtable$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
                                        # -- End function
	.def	 "??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.globl	"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ" # -- Begin function ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
	.p2align	4, 0x90
"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ": # @"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
# %bb.0:
	push	esi
	mov	dword ptr [ecx], offset "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	mov	esi, dword ptr [ecx + 52]
	test	esi, esi
	je	LBB51_5
# %bb.1:
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB51_4
# %bb.2:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB51_4
# %bb.3:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB51_4:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB51_5:
	pop	esi
	ret
                                        # -- End function
	.def	 "??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.globl	"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z" # -- Begin function ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z": # @"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
# %bb.0:
	push	esi
	mov	esi, ecx
	call	"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	cmp	dword ptr [esp + 8], 0
	je	LBB52_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB52_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.globl	"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ" # -- Begin function ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	.p2align	4, 0x90
"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ": # @"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
# %bb.0:
	mov	eax, dword ptr [ecx + 76]
	test	eax, eax
	je	LBB53_2
# %bb.1:
	push	eax
	call	__lock_file
	add	esp, 4
LBB53_2:
	ret
                                        # -- End function
	.def	 "?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.globl	"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ" # -- Begin function ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	.p2align	4, 0x90
"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ": # @"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
# %bb.0:
	mov	eax, dword ptr [ecx + 76]
	test	eax, eax
	je	LBB54_2
# %bb.1:
	push	eax
	call	__unlock_file
	add	esp, 4
LBB54_2:
	ret
                                        # -- End function
	.def	 "?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.globl	"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z" # -- Begin function ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	.p2align	4, 0x90
"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z": # @"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 44
	mov	ebx, dword ptr [esp + 64]
	cmp	ebx, -1
	je	LBB55_1
# %bb.2:
	mov	eax, dword ptr [ecx + 32]
	mov	esi, ecx
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB55_5
# %bb.3:
	mov	edx, dword ptr [esi + 48]
	mov	edi, dword ptr [edx]
	test	edi, edi
	jle	LBB55_5
# %bb.4:
	dec	edi
	lea	esi, [ecx + 1]
	mov	dword ptr [edx], edi
	mov	dword ptr [eax], esi
	mov	byte ptr [ecx], bl
	jmp	LBB55_19
LBB55_5:
	cmp	dword ptr [esi + 76], 0
	je	LBB55_6
# %bb.7:
	mov	eax, dword ptr [esi + 12]
	lea	ecx, [esi + 60]
	cmp	dword ptr [eax], ecx
	je	LBB55_8
# %bb.9:
	mov	ecx, dword ptr [esi + 56]
	test	ecx, ecx
	je	LBB55_10
LBB55_11:
	mov	byte ptr [esp + 3], bl
	lea	edi, [esi + 64]
	lea	edx, [esp + 4]
	lea	eax, [esp + 12]
	mov	ebp, dword ptr [ecx]
	push	edx
	lea	edx, [esp + 48]
	push	edx
	push	eax
	lea	eax, [esp + 20]
	push	eax
	lea	eax, [esp + 20]
	push	eax
	lea	eax, [esp + 23]
	push	eax
	push	edi
	call	dword ptr [ebp + 28]
	mov	edi, -1
	cmp	eax, 2
	jae	LBB55_12
# %bb.14:
	mov	ebp, dword ptr [esp + 4]
	lea	eax, [esp + 12]
	sub	ebp, eax
	je	LBB55_16
# %bb.15:
	push	dword ptr [esi + 76]
	push	ebp
	push	1
	push	eax
	call	_fwrite
	add	esp, 16
	cmp	ebp, eax
	jne	LBB55_18
LBB55_16:
	mov	byte ptr [esi + 61], 1
	lea	eax, [esp + 3]
	cmp	dword ptr [esp + 8], eax
	mov	eax, -1
	jmp	LBB55_17
LBB55_1:
	xor	ebx, ebx
	jmp	LBB55_19
LBB55_6:
	mov	ebx, -1
	jmp	LBB55_19
LBB55_8:
	mov	ecx, dword ptr [esi + 80]
	mov	edx, dword ptr [esi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [esi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [esi + 44]
	mov	dword ptr [eax], edx
	mov	ecx, dword ptr [esi + 56]
	test	ecx, ecx
	jne	LBB55_11
LBB55_10:
	movsx	eax, bl
	push	dword ptr [esi + 76]
	push	eax
	call	_fputc
	add	esp, 8
	cmp	eax, -1
	cmovne	eax, ebx
	jmp	LBB55_20
LBB55_12:
	cmp	eax, 3
	jne	LBB55_18
# %bb.13:
	movsx	eax, byte ptr [esp + 3]
	push	dword ptr [esi + 76]
	push	eax
	call	_fputc
	add	esp, 8
	cmp	eax, -1
LBB55_17:
	cmove	ebx, eax
	mov	edi, ebx
LBB55_18:
	mov	ebx, edi
LBB55_19:
	mov	eax, ebx
LBB55_20:
	add	esp, 44
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
                                        # -- End function
	.def	 "?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.globl	"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z" # -- Begin function ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	.p2align	4, 0x90
"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z": # @"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	eax, dword ptr [ecx + 28]
	mov	esi, ecx
	mov	ebx, dword ptr [esp + 16]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB56_6
# %bb.1:
	mov	edx, dword ptr [esi + 12]
	cmp	dword ptr [edx], ecx
	jae	LBB56_6
# %bb.2:
	cmp	ebx, -1
	je	LBB56_3
# %bb.4:
	movzx	edx, byte ptr [ecx - 1]
	cmp	edx, ebx
	je	LBB56_5
LBB56_6:
	cmp	ebx, -1
	mov	edi, -1
	je	LBB56_16
# %bb.7:
	mov	edx, dword ptr [esi + 76]
	test	edx, edx
	je	LBB56_16
# %bb.8:
	cmp	dword ptr [esi + 56], 0
	je	LBB56_9
# %bb.11:
	lea	edx, [esi + 60]
	cmp	ecx, edx
	je	LBB56_16
LBB56_12:
	mov	byte ptr [esi + 60], bl
	mov	ecx, dword ptr [esi + 12]
	mov	edi, dword ptr [ecx]
	cmp	edi, edx
	je	LBB56_14
# %bb.13:
	mov	dword ptr [esi + 80], edi
	mov	eax, dword ptr [eax]
	mov	edi, dword ptr [esi + 44]
	add	eax, dword ptr [edi]
	mov	dword ptr [esi + 84], eax
LBB56_14:
	mov	dword ptr [ecx], edx
	mov	eax, dword ptr [esi + 28]
	mov	dword ptr [eax], edx
	mov	eax, dword ptr [esi + 44]
	mov	dword ptr [eax], 1
	jmp	LBB56_15
LBB56_9:
	movzx	eax, bl
	push	edx
	push	eax
	call	_ungetc
	add	esp, 8
	cmp	eax, -1
	jne	LBB56_15
# %bb.10:
	mov	eax, dword ptr [esi + 28]
	mov	ecx, dword ptr [eax]
	lea	edx, [esi + 60]
	cmp	ecx, edx
	jne	LBB56_12
	jmp	LBB56_16
LBB56_3:
	xor	ebx, ebx
LBB56_5:
	mov	edx, dword ptr [esi + 44]
	dec	ecx
	inc	dword ptr [edx]
	mov	dword ptr [eax], ecx
LBB56_15:
	mov	edi, ebx
LBB56_16:
	mov	eax, edi
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ"
	.globl	"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ" # -- Begin function ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	.p2align	4, 0x90
"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ": # @"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ"
# %bb.0:
	xor	eax, eax
	xor	edx, edx
	ret
                                        # -- End function
	.def	 "?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	push	edi
	push	esi
	mov	eax, dword ptr [ecx + 28]
	mov	esi, ecx
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB58_3
# %bb.1:
	mov	ecx, dword ptr [esi + 44]
	cmp	dword ptr [ecx], 0
	jle	LBB58_3
# %bb.2:
	movzx	edi, byte ptr [eax]
	mov	eax, edi
	pop	esi
	pop	edi
	ret
LBB58_3:
	mov	eax, dword ptr [esi]
	mov	ecx, esi
	call	dword ptr [eax + 28]
	cmp	eax, -1
	je	LBB58_4
# %bb.5:
	mov	edi, eax
	mov	eax, dword ptr [esi]
	mov	ecx, esi
	push	edi
	call	dword ptr [eax + 16]
	mov	eax, edi
	pop	esi
	pop	edi
	ret
LBB58_4:
	mov	edi, -1
	mov	eax, edi
	pop	esi
	pop	edi
	ret
                                        # -- End function
	.def	 "?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
Lfunc_begin22:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 60
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	mov	edi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [edi + 28]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB59_3
# %bb.1:
	mov	edx, dword ptr [edi + 44]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jle	LBB59_3
# %bb.2:
	dec	esi
	mov	dword ptr [edx], esi
	lea	esi, [ecx + 1]
	mov	dword ptr [eax], esi
	movzx	esi, byte ptr [ecx]
	jmp	LBB59_43
LBB59_3:
	cmp	dword ptr [edi + 76], 0
	je	LBB59_23
# %bb.4:
	mov	eax, dword ptr [edi + 12]
	lea	ecx, [edi + 60]
	cmp	dword ptr [eax], ecx
	je	LBB59_24
# %bb.5:
	cmp	dword ptr [edi + 56], 0
	je	LBB59_25
LBB59_6:
	mov	dword ptr [ebp - 36], 15
	mov	dword ptr [ebp - 40], 0
	mov	byte ptr [ebp - 56], 0
	push	dword ptr [edi + 76]
	call	_fgetc
	add	esp, 4
	cmp	eax, -1
	je	LBB59_29
# %bb.7:
	lea	ecx, [edi + 64]
	mov	dword ptr [ebp - 64], edi       # 4-byte Spill
	mov	dword ptr [ebp - 72], ecx       # 4-byte Spill
	jmp	LBB59_11
	.p2align	4, 0x90
LBB59_8:                                #   in Loop: Header=BB59_11 Depth=1
	mov	ecx, dword ptr [ebp - 40]
	lea	edx, [ebp - 56]
LBB59_9:                                #   in Loop: Header=BB59_11 Depth=1
	sub	eax, edx
	cmp	ecx, eax
	cmovb	eax, ecx
	sub	ecx, eax
	add	eax, edx
	mov	dword ptr [ebp - 40], ecx
	inc	ecx
	push	ecx
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	push	dword ptr [edi + 76]
	call	_fgetc
	add	esp, 4
	cmp	eax, -1
	je	LBB59_29
LBB59_11:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [ebp - 40]
	mov	edx, dword ptr [ebp - 36]
	cmp	ecx, edx
	jae	LBB59_15
# %bb.12:                               #   in Loop: Header=BB59_11 Depth=1
	lea	esi, [ecx + 1]
	cmp	edx, 15
	lea	edx, [ebp - 56]
	mov	dword ptr [ebp - 40], esi
	jbe	LBB59_14
# %bb.13:                               #   in Loop: Header=BB59_11 Depth=1
	mov	edx, dword ptr [ebp - 56]
LBB59_14:                               #   in Loop: Header=BB59_11 Depth=1
	mov	byte ptr [edx + ecx], al
	mov	byte ptr [edx + ecx + 1], 0
	mov	dword ptr [ebp - 16], 0
	jmp	LBB59_16
	.p2align	4, 0x90
LBB59_15:                               #   in Loop: Header=BB59_11 Depth=1
	mov	dword ptr [ebp - 16], 0
	sub	esp, 12
	movzx	ecx, byte ptr [ebp - 68]
	movsx	eax, al
	mov	byte ptr [esp + 4], cl
	lea	ecx, [ebp - 56]
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [esp], 1
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	mov	edi, dword ptr [ebp - 64]       # 4-byte Reload
LBB59_16:                               #   in Loop: Header=BB59_11 Depth=1
	mov	ecx, dword ptr [edi + 56]
	cmp	dword ptr [ebp - 36], 15
	lea	eax, [ebp - 56]
	jbe	LBB59_18
# %bb.17:                               #   in Loop: Header=BB59_11 Depth=1
	mov	eax, dword ptr [ebp - 56]
LBB59_18:                               #   in Loop: Header=BB59_11 Depth=1
	mov	edx, dword ptr [ebp - 40]
	mov	esi, dword ptr [ecx]
	lea	edi, [ebp - 68]
	add	edx, eax
	push	edi
	lea	edi, [ebp - 28]
	push	edi
	lea	edi, [ebp - 29]
	push	edi
	lea	edi, [ebp - 60]
	push	edi
	push	edx
	push	eax
	push	dword ptr [ebp - 72]            # 4-byte Folded Reload
	call	dword ptr [esi + 24]
	mov	edi, dword ptr [ebp - 64]       # 4-byte Reload
# %bb.19:                               #   in Loop: Header=BB59_11 Depth=1
	cmp	eax, 2
	jae	LBB59_26
# %bb.20:                               #   in Loop: Header=BB59_11 Depth=1
	lea	eax, [ebp - 29]
	cmp	dword ptr [ebp - 68], eax
	jne	LBB59_30
# %bb.21:                               #   in Loop: Header=BB59_11 Depth=1
	mov	eax, dword ptr [ebp - 60]
	cmp	dword ptr [ebp - 36], 15
	jbe	LBB59_8
# %bb.22:                               #   in Loop: Header=BB59_11 Depth=1
	mov	edx, dword ptr [ebp - 56]
	mov	ecx, dword ptr [ebp - 40]
	jmp	LBB59_9
LBB59_23:
	mov	esi, -1
	jmp	LBB59_43
LBB59_24:
	mov	ecx, dword ptr [edi + 80]
	mov	edx, dword ptr [edi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [edi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [edi + 44]
	mov	dword ptr [eax], edx
	cmp	dword ptr [edi + 56], 0
	jne	LBB59_6
LBB59_25:
	push	dword ptr [edi + 76]
	call	_fgetc
	add	esp, 4
	mov	edx, dword ptr [ebp - 24]
	cmp	eax, -1
	movzx	ecx, al
	cmovne	eax, ecx
	mov	dword ptr fs:[0], edx
	jmp	LBB59_44
LBB59_26:
	cmp	eax, 3
	jne	LBB59_29
# %bb.27:
	cmp	dword ptr [ebp - 36], 15
	jbe	LBB59_37
# %bb.28:
	mov	eax, dword ptr [ebp - 56]
	jmp	LBB59_38
LBB59_29:
	mov	esi, -1
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jae	LBB59_39
	jmp	LBB59_43
LBB59_30:
	cmp	dword ptr [ebp - 36], 15
	jbe	LBB59_32
# %bb.31:
	mov	esi, dword ptr [ebp - 56]
	jmp	LBB59_33
LBB59_32:
	lea	esi, [ebp - 56]
LBB59_33:
	add	esi, dword ptr [ebp - 40]
	mov	eax, dword ptr [ebp - 60]
	sub	esi, eax
	test	esi, esi
	jle	LBB59_36
# %bb.34:
	movsx	eax, byte ptr [esi + eax - 1]
	push	dword ptr [edi + 76]
	push	eax
	call	_ungetc
	add	esp, 8
	cmp	esi, 1
	je	LBB59_36
	.p2align	4, 0x90
LBB59_35:                               # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebp - 60]
	movsx	eax, byte ptr [eax + esi - 2]
	push	dword ptr [edi + 76]
	push	eax
	call	_ungetc
	add	esp, 8
	dec	esi
	cmp	esi, 1
	jg	LBB59_35
LBB59_36:
	movzx	esi, byte ptr [ebp - 29]
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jae	LBB59_39
	jmp	LBB59_43
LBB59_37:
	lea	eax, [ebp - 56]
LBB59_38:
	movsx	esi, byte ptr [eax]
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jb	LBB59_43
LBB59_39:
	mov	ecx, dword ptr [ebp - 56]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB59_42
# %bb.40:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB59_45
# %bb.41:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB59_42:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB59_43:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
LBB59_44:
	add	esp, 60
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB59_45:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.46:
	.def	 "?dtor$47@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$47@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA":
LBB59_47:
	push	ebp
	sub	esp, 28
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$48@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$48@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA":
LBB59_48:
	push	ebp
	sub	esp, 28
	add	ebp, 12
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jb	LBB59_53
# %bb.49:
	mov	ecx, dword ptr [ebp - 56]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB59_52
# %bb.50:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB59_54
# %bb.51:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB59_52:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB59_53:
	add	esp, 28
	pop	ebp
	ret                                     # CLEANUPRET
LBB59_54:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end22:
	.section	.xdata,"dr",associative,"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.p2align	2
"L__ehtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ":
	.long	-1                              # ToState
	.long	"?dtor$48@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$47@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ@4HA" # Action
	.section	.text,"xr",discard,"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
                                        # -- End function
	.def	 "?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
	.globl	"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z" # -- Begin function ?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	.p2align	4, 0x90
"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z": # @"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	edi, dword ptr [esp + 36]
	mov	ebx, dword ptr [esp + 32]
	cmp	ebx, 1
	mov	eax, edi
	sbb	eax, 0
	jl	LBB60_1
# %bb.2:
	mov	edx, dword ptr [esp + 28]
	cmp	dword ptr [ecx + 56], 0
	mov	ebp, ecx
	je	LBB60_11
# %bb.3:
	mov	esi, ebx
	mov	dword ptr [esp + 4], ebp        # 4-byte Spill
	jmp	LBB60_4
	.p2align	4, 0x90
LBB60_6:                                #   in Loop: Header=BB60_4 Depth=1
	mov	ebp, ebx
	sar	ebp, 31
	cmp	ebx, esi
	mov	ecx, ebp
	sbb	ecx, edi
	cmovge	ebp, edi
	cmovge	ebx, esi
	push	ebx
	push	eax
	push	edx
	mov	dword ptr [esp + 12], edx       # 4-byte Spill
	call	_memcpy
	mov	edx, dword ptr [esp + 12]       # 4-byte Reload
	add	esp, 12
	add	edx, ebx
	sub	esi, ebx
	sbb	edi, ebp
	mov	ebp, dword ptr [esp + 4]        # 4-byte Reload
	mov	eax, dword ptr [ebp + 44]
	sub	dword ptr [eax], ebx
	mov	eax, dword ptr [ebp + 28]
	add	dword ptr [eax], ebx
LBB60_9:                                #   in Loop: Header=BB60_4 Depth=1
	mov	eax, esi
	neg	eax
	mov	eax, 0
	sbb	eax, edi
	jge	LBB60_10
LBB60_4:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebp + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB60_7
# %bb.5:                                #   in Loop: Header=BB60_4 Depth=1
	mov	ecx, dword ptr [ebp + 44]
	mov	ebx, dword ptr [ecx]
	test	ebx, ebx
	jg	LBB60_6
LBB60_7:                                #   in Loop: Header=BB60_4 Depth=1
	mov	eax, dword ptr [ebp]
	mov	ecx, ebp
	mov	ebx, edx
	call	dword ptr [eax + 28]
	cmp	eax, -1
	je	LBB60_10
# %bb.8:                                #   in Loop: Header=BB60_4 Depth=1
	mov	edx, ebx
	mov	byte ptr [ebx], al
	inc	edx
	add	esi, -1
	adc	edi, -1
	jmp	LBB60_9
LBB60_10:
	mov	ebx, dword ptr [esp + 32]
	mov	eax, dword ptr [esp + 36]
	sub	ebx, esi
	sbb	eax, edi
	mov	edi, eax
	jmp	LBB60_27
LBB60_1:
	xor	ebx, ebx
	xor	edi, edi
	jmp	LBB60_27
LBB60_11:
	mov	eax, dword ptr [ebp + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB60_12
# %bb.13:
	mov	ecx, dword ptr [ebp + 44]
	mov	edi, dword ptr [ecx]
	test	edi, edi
	je	LBB60_14
# %bb.15:
	cmp	edi, ebx
	cmovae	edi, ebx
	push	edi
	push	eax
	push	edx
	mov	esi, edx
	call	_memcpy
	mov	edx, esi
	add	esp, 12
	mov	eax, dword ptr [ebp + 44]
	mov	esi, ebx
	add	edx, edi
	sub	esi, edi
	sub	dword ptr [eax], edi
	mov	eax, dword ptr [ebp + 28]
	add	dword ptr [eax], edi
	jmp	LBB60_16
LBB60_12:
	mov	esi, ebx
	cmp	dword ptr [ebp + 76], 0
	jne	LBB60_18
	jmp	LBB60_26
LBB60_14:
	mov	esi, ebx
LBB60_16:
	mov	edi, dword ptr [esp + 36]
	cmp	dword ptr [ebp + 76], 0
	je	LBB60_26
LBB60_18:
	mov	eax, dword ptr [ebp + 12]
	lea	ecx, [ebp + 60]
	cmp	dword ptr [eax], ecx
	jne	LBB60_20
# %bb.19:
	mov	ecx, dword ptr [ebp + 80]
	mov	dword ptr [esp], edx            # 4-byte Spill
	mov	edx, dword ptr [ebp + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [ebp + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [ebp + 44]
	mov	dword ptr [eax], edx
	mov	edx, dword ptr [esp]            # 4-byte Reload
	.p2align	4, 0x90
LBB60_20:                               # =>This Inner Loop Header: Depth=1
	cmp	esi, 4096
	jb	LBB60_22
# %bb.21:                               #   in Loop: Header=BB60_20 Depth=1
	push	dword ptr [ebp + 76]
	push	4095
	push	1
	push	edx
	mov	ebx, edx
	call	_fread
	mov	edx, ebx
	add	esp, 16
	add	edx, eax
	sub	esi, eax
	cmp	eax, 4095
	je	LBB60_20
	jmp	LBB60_25
LBB60_22:
	test	esi, esi
	je	LBB60_23
# %bb.24:
	push	dword ptr [ebp + 76]
	push	esi
	push	1
	push	edx
	call	_fread
	add	esp, 16
	sub	esi, eax
	jmp	LBB60_25
LBB60_23:
	xor	esi, esi
LBB60_25:
	mov	ebx, dword ptr [esp + 32]
LBB60_26:
	sub	ebx, esi
	sbb	edi, 0
LBB60_27:
	mov	eax, ebx
	mov	edx, edi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
	.globl	"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z" # -- Begin function ?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	.p2align	4, 0x90
"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z": # @"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	esi, dword ptr [esp + 40]
	mov	edi, dword ptr [esp + 36]
	mov	ebx, dword ptr [esp + 32]
	cmp	dword ptr [ecx + 56], 0
	je	LBB61_9
# %bb.1:
	cmp	edi, 1
	mov	eax, esi
	mov	edx, edi
	sbb	eax, 0
	jl	LBB61_20
# %bb.2:
	mov	dword ptr [esp], ecx            # 4-byte Spill
	mov	edx, dword ptr [esp + 36]
	mov	esi, dword ptr [esp + 40]
	mov	edi, dword ptr [esp]            # 4-byte Reload
	jmp	LBB61_5
	.p2align	4, 0x90
LBB61_3:                                #   in Loop: Header=BB61_5 Depth=1
	mov	edi, ebx
	mov	ebx, ebp
	sar	ebx, 31
	cmp	ebp, edx
	mov	ecx, ebx
	sbb	ecx, esi
	cmovge	ebx, esi
	cmovge	ebp, edx
	push	ebp
	push	edi
	push	eax
	mov	dword ptr [esp + 16], esi       # 4-byte Spill
	mov	esi, edx
	call	_memcpy
	mov	edx, esi
	mov	esi, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	edi, ebp
	sub	edx, ebp
	sbb	esi, ebx
	mov	ebx, edi
	mov	edi, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [edi + 48]
	sub	dword ptr [eax], ebp
	mov	eax, dword ptr [edi + 32]
	add	dword ptr [eax], ebp
LBB61_4:                                #   in Loop: Header=BB61_5 Depth=1
	mov	eax, edx
	neg	eax
	mov	eax, 0
	sbb	eax, esi
	jge	LBB61_20
LBB61_5:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [edi + 32]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB61_7
# %bb.6:                                #   in Loop: Header=BB61_5 Depth=1
	mov	ecx, dword ptr [edi + 48]
	mov	ebp, dword ptr [ecx]
	test	ebp, ebp
	jg	LBB61_3
LBB61_7:                                #   in Loop: Header=BB61_5 Depth=1
	movzx	eax, byte ptr [ebx]
	mov	ebp, edx
	mov	edx, dword ptr [edi]
	mov	ecx, edi
	push	eax
	call	dword ptr [edx + 12]
	cmp	eax, -1
	je	LBB61_13
# %bb.8:                                #   in Loop: Header=BB61_5 Depth=1
	mov	edx, ebp
	inc	ebx
	add	edx, -1
	adc	esi, -1
	jmp	LBB61_4
LBB61_9:
	mov	eax, dword ptr [ecx + 32]
	mov	ebp, ecx
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB61_15
# %bb.10:
	cmp	edi, 1
	mov	ecx, esi
	sbb	ecx, 0
	jl	LBB61_15
# %bb.11:
	mov	ecx, dword ptr [ebp + 48]
	mov	ebx, ebp
	mov	ebp, dword ptr [ecx]
	test	ebp, ebp
	jle	LBB61_14
# %bb.12:
	mov	edx, ebp
	mov	ecx, esi
	sar	edx, 31
	cmp	edi, ebp
	sbb	ecx, edx
	cmovl	edx, esi
	cmovl	ebp, edi
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	push	ebp
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	mov	ebx, dword ptr [esp + 36]
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	add	ebx, ebp
	sub	edi, ebp
	mov	dword ptr [esp + 4], ebx        # 4-byte Spill
	sbb	esi, dword ptr [esp + 8]        # 4-byte Folded Reload
	mov	eax, dword ptr [ecx + 48]
	sub	dword ptr [eax], ebp
	mov	eax, dword ptr [ecx + 32]
	add	dword ptr [eax], ebp
	mov	ebp, ecx
	jmp	LBB61_15
LBB61_13:
	mov	edx, ebp
	jmp	LBB61_20
LBB61_14:
	mov	ebp, ebx
LBB61_15:
	cmp	edi, 1
	mov	eax, esi
	mov	ecx, edi
	sbb	eax, 0
	jl	LBB61_19
# %bb.16:
	mov	eax, dword ptr [ebp + 76]
	test	eax, eax
	je	LBB61_19
# %bb.17:
	push	eax
	mov	edi, esi
	mov	esi, ecx
	push	ecx
	push	1
	push	dword ptr [esp + 16]            # 4-byte Folded Reload
	call	_fwrite
	mov	edx, esi
	mov	esi, edi
	add	esp, 16
	sub	edx, eax
	sbb	esi, 0
	jmp	LBB61_20
LBB61_19:
	mov	edx, ecx
LBB61_20:
	mov	eax, dword ptr [esp + 36]
	sub	eax, edx
	mov	edx, dword ptr [esp + 40]
	sbb	edx, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
	.globl	"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z" # -- Begin function ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	.p2align	4, 0x90
"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z": # @"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 56
	mov	esi, dword ptr [ebp + 8]
	mov	edx, dword ptr [ebp + 16]
	mov	ebx, dword ptr [ebp + 12]
	cmp	dword ptr [ebp + 20], 1
	mov	edi, ecx
	lea	ecx, [ecx + 60]
	mov	dword ptr [esp + 8], ecx        # 4-byte Spill
	jne	LBB62_3
# %bb.1:
	mov	eax, dword ptr [edi + 28]
	cmp	dword ptr [eax], ecx
	jne	LBB62_3
# %bb.2:
	xor	eax, eax
	cmp	dword ptr [edi + 56], 0
	sete	al
	sub	ebx, eax
	sbb	edx, 0
LBB62_3:
	cmp	dword ptr [edi + 76], 0
	je	LBB62_18
# %bb.4:
	cmp	dword ptr [edi + 56], 0
	je	LBB62_14
# %bb.5:
	cmp	byte ptr [edi + 61], 0
	je	LBB62_14
# %bb.6:
	mov	eax, dword ptr [edi]
	mov	ecx, edi
	push	-1
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	call	dword ptr [eax + 12]
	cmp	eax, -1
	je	LBB62_18
# %bb.7:
	mov	ecx, dword ptr [edi + 56]
	lea	edx, [edi + 64]
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp], eax            # 4-byte Spill
	lea	eax, [esp + 12]
	push	eax
	lea	eax, [esp + 52]
	push	eax
	lea	eax, [esp + 24]
	push	eax
	push	edx
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	call	dword ptr [eax + 32]
	cmp	eax, 3
	je	LBB62_23
# %bb.8:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	cmp	eax, 1
	lea	ecx, [esp + 16]
	je	LBB62_11
# %bb.9:
	test	eax, eax
	jne	LBB62_18
# %bb.10:
	mov	byte ptr [edi + 61], 0
LBB62_11:
	mov	eax, dword ptr [esp + 12]
	sub	eax, ecx
	je	LBB62_13
# %bb.12:
	push	dword ptr [edi + 76]
	push	eax
	push	1
	push	ecx
	mov	dword ptr [esp + 16], eax       # 4-byte Spill
	call	_fwrite
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	add	esp, 16
	cmp	dword ptr [esp], eax            # 4-byte Folded Reload
	jne	LBB62_18
LBB62_13:
	cmp	byte ptr [edi + 61], 0
	jne	LBB62_18
	jmp	LBB62_14
LBB62_23:
	mov	edx, dword ptr [esp + 4]        # 4-byte Reload
	mov	byte ptr [edi + 61], 0
LBB62_14:
	cmp	dword ptr [ebp + 20], 1
	jne	LBB62_16
# %bb.15:
	mov	eax, ebx
	or	eax, edx
	je	LBB62_17
LBB62_16:
	push	dword ptr [ebp + 20]
	push	edx
	push	ebx
	push	dword ptr [edi + 76]
	call	__fseeki64
	add	esp, 16
	test	eax, eax
	jne	LBB62_18
LBB62_17:
	lea	eax, [esp + 16]
	push	eax
	push	dword ptr [edi + 76]
	call	_fgetpos
	add	esp, 8
	test	eax, eax
	je	LBB62_19
LBB62_18:
	mov	dword ptr [esi + 4], -1
	mov	dword ptr [esi], -1
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 16], 0
LBB62_22:
	mov	eax, esi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	20
LBB62_19:
	mov	eax, dword ptr [edi + 12]
	mov	ecx, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [eax], ecx
	jne	LBB62_21
# %bb.20:
	mov	ecx, dword ptr [edi + 80]
	mov	edx, dword ptr [edi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [edi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [edi + 44]
	mov	dword ptr [eax], edx
LBB62_21:
	mov	edx, dword ptr [edi + 64]
	mov	eax, dword ptr [esp + 16]
	mov	edi, dword ptr [edi + 68]
	mov	ecx, dword ptr [esp + 20]
	mov	dword ptr [esi], eax
	mov	dword ptr [esi + 4], ecx
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], edx
	mov	dword ptr [esi + 20], edi
	jmp	LBB62_22
                                        # -- End function
	.def	 "?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
	.globl	"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z" # -- Begin function ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	.p2align	4, 0x90
"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z": # @"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	and	esp, -8
	sub	esp, 64
	mov	eax, dword ptr [ebp + 20]
	mov	edi, ecx
	mov	ecx, dword ptr [ebp + 24]
	mov	edx, dword ptr [ebp + 32]
	mov	esi, dword ptr [ebp + 8]
	mov	ebx, dword ptr [ebp + 28]
	add	eax, dword ptr [ebp + 12]
	mov	dword ptr [esp + 20], edx       # 4-byte Spill
	adc	ecx, dword ptr [ebp + 16]
	mov	dword ptr [esp + 8], eax
	mov	dword ptr [esp + 12], ecx
	cmp	dword ptr [edi + 76], 0
	je	LBB63_12
# %bb.1:
	cmp	dword ptr [edi + 56], 0
	je	LBB63_11
# %bb.2:
	cmp	byte ptr [edi + 61], 0
	je	LBB63_11
# %bb.3:
	mov	eax, dword ptr [edi]
	mov	ecx, edi
	push	-1
	call	dword ptr [eax + 12]
	cmp	eax, -1
	je	LBB63_12
# %bb.4:
	mov	ecx, dword ptr [edi + 56]
	lea	edx, [edi + 64]
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	lea	eax, [esp + 24]
	push	eax
	lea	eax, [esp + 64]
	push	eax
	lea	eax, [esp + 36]
	push	eax
	push	edx
	mov	eax, dword ptr [esp + 20]       # 4-byte Reload
	call	dword ptr [eax + 32]
	cmp	eax, 3
	je	LBB63_17
# %bb.5:
	cmp	eax, 1
	lea	ecx, [esp + 28]
	je	LBB63_8
# %bb.6:
	test	eax, eax
	jne	LBB63_12
# %bb.7:
	mov	byte ptr [edi + 61], 0
LBB63_8:
	mov	eax, dword ptr [esp + 24]
	sub	eax, ecx
	je	LBB63_10
# %bb.9:
	push	dword ptr [edi + 76]
	push	eax
	push	1
	push	ecx
	mov	dword ptr [esp + 20], eax       # 4-byte Spill
	call	_fwrite
	add	esp, 16
	cmp	dword ptr [esp + 4], eax        # 4-byte Folded Reload
	jne	LBB63_12
LBB63_10:
	cmp	byte ptr [edi + 61], 0
	jne	LBB63_12
	jmp	LBB63_11
LBB63_17:
	mov	byte ptr [edi + 61], 0
LBB63_11:
	lea	eax, [esp + 8]
	push	eax
	push	dword ptr [edi + 76]
	call	_fsetpos
	add	esp, 8
	test	eax, eax
	je	LBB63_13
LBB63_12:
	mov	dword ptr [esi + 4], -1
	mov	dword ptr [esi], -1
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 16], 0
LBB63_16:
	mov	eax, esi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	32
LBB63_13:
	mov	edx, dword ptr [esp + 20]       # 4-byte Reload
	mov	dword ptr [edi + 64], ebx
	lea	ecx, [edi + 60]
	mov	dword ptr [edi + 68], edx
	mov	eax, dword ptr [edi + 12]
	cmp	dword ptr [eax], ecx
	jne	LBB63_15
# %bb.14:
	mov	ecx, dword ptr [edi + 80]
	mov	edx, dword ptr [edi + 84]
	mov	dword ptr [eax], ecx
	sub	edx, ecx
	mov	eax, dword ptr [edi + 28]
	mov	dword ptr [eax], ecx
	mov	eax, dword ptr [edi + 44]
	mov	dword ptr [eax], edx
	mov	ebx, dword ptr [edi + 64]
	mov	edx, dword ptr [edi + 68]
LBB63_15:
	mov	eax, dword ptr [esp + 8]
	mov	ecx, dword ptr [esp + 12]
	mov	dword ptr [esi], eax
	mov	dword ptr [esi + 4], ecx
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], ebx
	mov	dword ptr [esi + 20], edx
	jmp	LBB63_16
                                        # -- End function
	.def	 "?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z"
	.globl	"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z" # -- Begin function ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	.p2align	4, 0x90
"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z": # @"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	eax, dword ptr [ecx + 76]
	xor	edi, edi
	test	eax, eax
	je	LBB64_5
# %bb.1:
	mov	edx, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 40]
	mov	ebx, dword ptr [esp + 32]
	mov	esi, ecx
	xor	ecx, ecx
	or	ebp, edx
	or	ebp, ebx
	sete	cl
	shl	ecx, 2
	push	edx
	push	ecx
	push	ebx
	push	eax
	call	_setvbuf
	add	esp, 16
	test	eax, eax
	jne	LBB64_5
# %bb.2:
	mov	edi, dword ptr [esi + 76]
	lea	eax, [esi + 4]
	lea	ecx, [esi + 8]
	mov	byte ptr [esi + 72], 1
	mov	byte ptr [esi + 61], 0
	lea	edx, [esi + 20]
	mov	dword ptr [esi + 12], eax
	mov	dword ptr [esi + 16], ecx
	lea	ecx, [esi + 24]
	mov	dword ptr [esi + 28], edx
	lea	edx, [esi + 36]
	mov	dword ptr [esi + 32], ecx
	lea	ecx, [esi + 40]
	mov	dword ptr [esi + 44], edx
	mov	dword ptr [esi + 48], ecx
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 40], 0
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 36], 0
	test	edi, edi
	je	LBB64_4
# %bb.3:
	mov	eax, esp
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp], 0
	lea	ecx, [esp + 4]
	lea	edx, [esp + 8]
	push	eax
	push	ecx
	push	edx
	push	edi
	call	__get_stream_buffer_pointers
	add	esp, 16
	mov	eax, dword ptr [esp]
	mov	ecx, dword ptr [esp + 4]
	mov	edx, dword ptr [esp + 8]
	mov	dword ptr [esi + 12], edx
	mov	dword ptr [esi + 16], edx
	mov	dword ptr [esi + 28], ecx
	mov	dword ptr [esi + 32], ecx
	mov	dword ptr [esi + 44], eax
	mov	dword ptr [esi + 48], eax
LBB64_4:
	mov	dword ptr [esi + 76], edi
	mov	edi, esi
	mov	eax, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"]
	mov	ecx, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"+4]
	mov	dword ptr [esi + 68], ecx
	mov	dword ptr [esi + 64], eax
	mov	dword ptr [esi + 56], 0
LBB64_5:
	mov	eax, edi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	push	esi
	cmp	dword ptr [ecx + 76], 0
	je	LBB65_3
# %bb.1:
	mov	eax, dword ptr [ecx]
	mov	esi, ecx
	push	-1
	call	dword ptr [eax + 12]
	cmp	eax, -1
	je	LBB65_3
# %bb.2:
	push	dword ptr [esi + 76]
	call	_fflush
	add	esp, 4
	sar	eax, 31
	pop	esi
	ret
LBB65_3:
	xor	eax, eax
	pop	esi
	ret
                                        # -- End function
	.def	 "?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"
	.globl	"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z" # -- Begin function ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
	.p2align	4, 0x90
"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z": # @"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"
# %bb.0:
	push	edi
	push	esi
	mov	esi, ecx
	push	dword ptr [esp + 12]
	call	"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	add	esp, 4
	mov	edi, eax
	mov	eax, dword ptr [eax]
	mov	ecx, edi
	call	dword ptr [eax + 12]
	test	al, al
	je	LBB66_2
# %bb.1:
	mov	dword ptr [esi + 56], 0
	pop	esi
	pop	edi
	ret	4
LBB66_2:
	lea	eax, [esi + 4]
	lea	ecx, [esi + 8]
	mov	dword ptr [esi + 56], edi
	lea	edx, [esi + 20]
	mov	dword ptr [esi + 12], eax
	mov	dword ptr [esi + 16], ecx
	lea	ecx, [esi + 24]
	mov	dword ptr [esi + 28], edx
	lea	edx, [esi + 36]
	mov	dword ptr [esi + 32], ecx
	lea	ecx, [esi + 40]
	mov	dword ptr [esi + 44], edx
	mov	dword ptr [esi + 48], ecx
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 24], 0
	mov	dword ptr [esi + 40], 0
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [esi + 36], 0
	pop	esi
	pop	edi
	ret	4
                                        # -- End function
	.def	 "??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.globl	"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z" # -- Begin function ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z": # @"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	dword ptr [ecx], offset "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	mov	edi, dword ptr [esp + 16]
	mov	esi, ecx
	mov	ebx, dword ptr [ecx + 52]
	test	ebx, ebx
	je	LBB67_5
# %bb.1:
	mov	ecx, dword ptr [ebx + 4]
	test	ecx, ecx
	je	LBB67_4
# %bb.2:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB67_4
# %bb.3:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB67_4:
	push	ebx
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB67_5:
	test	edi, edi
	je	LBB67_7
# %bb.6:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB67_7:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.globl	"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ" # -- Begin function ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	.p2align	4, 0x90
"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ": # @"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
# %bb.0:
	ret
                                        # -- End function
	.def	 "?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.globl	"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ" # -- Begin function ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	.p2align	4, 0x90
"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ": # @"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
# %bb.0:
	ret
                                        # -- End function
	.def	 "?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.globl	"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z" # -- Begin function ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	.p2align	4, 0x90
"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z": # @"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
# %bb.0:
	mov	eax, -1
	ret	4
                                        # -- End function
	.def	 "?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.globl	"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z" # -- Begin function ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	.p2align	4, 0x90
"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z": # @"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
# %bb.0:
	mov	eax, -1
	ret	4
                                        # -- End function
	.def	 "?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	mov	eax, -1
	ret
                                        # -- End function
	.def	 "?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	push	esi
	mov	eax, dword ptr [ecx]
	mov	esi, ecx
	call	dword ptr [eax + 24]
	cmp	eax, -1
	je	LBB73_1
# %bb.2:
	mov	eax, dword ptr [esi + 44]
	dec	dword ptr [eax]
	mov	eax, dword ptr [esi + 28]
	mov	ecx, dword ptr [eax]
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	eax, byte ptr [ecx]
	pop	esi
	ret
LBB73_1:
	mov	eax, -1
	pop	esi
	ret
                                        # -- End function
	.def	 "?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
	.globl	"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z" # -- Begin function ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	.p2align	4, 0x90
"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z": # @"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	esi, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 32]
	cmp	ebp, 1
	mov	eax, esi
	sbb	eax, 0
	jl	LBB74_8
# %bb.1:
	mov	edx, dword ptr [esp + 28]
	mov	ebp, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 36]
	mov	ebx, ecx
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jmp	LBB74_2
	.p2align	4, 0x90
LBB74_4:                                #   in Loop: Header=BB74_2 Depth=1
	mov	ebx, edi
	sar	ebx, 31
	cmp	edi, ebp
	mov	ecx, ebx
	sbb	ecx, esi
	cmovge	ebx, esi
	cmovge	edi, ebp
	push	edi
	push	eax
	push	edx
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	call	_memcpy
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	edx, edi
	sub	ebp, edi
	sbb	esi, ebx
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [ebx + 44]
	sub	dword ptr [eax], edi
	mov	eax, dword ptr [ebx + 28]
	add	dword ptr [eax], edi
LBB74_7:                                #   in Loop: Header=BB74_2 Depth=1
	mov	eax, ebp
	neg	eax
	mov	eax, 0
	sbb	eax, esi
	jge	LBB74_8
LBB74_2:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB74_5
# %bb.3:                                #   in Loop: Header=BB74_2 Depth=1
	mov	ecx, dword ptr [ebx + 44]
	mov	edi, dword ptr [ecx]
	test	edi, edi
	jg	LBB74_4
LBB74_5:                                #   in Loop: Header=BB74_2 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	edi, edx
	call	dword ptr [eax + 28]
	cmp	eax, -1
	je	LBB74_8
# %bb.6:                                #   in Loop: Header=BB74_2 Depth=1
	mov	edx, edi
	mov	byte ptr [edi], al
	inc	edx
	add	ebp, -1
	adc	esi, -1
	jmp	LBB74_7
LBB74_8:
	mov	eax, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 36]
	sub	eax, ebp
	sbb	edx, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
	.globl	"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z" # -- Begin function ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	.p2align	4, 0x90
"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z": # @"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 8
	mov	esi, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 32]
	cmp	ebp, 1
	mov	eax, esi
	sbb	eax, 0
	jl	LBB75_8
# %bb.1:
	mov	edx, dword ptr [esp + 28]
	mov	ebp, dword ptr [esp + 32]
	mov	esi, dword ptr [esp + 36]
	mov	ebx, ecx
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jmp	LBB75_2
	.p2align	4, 0x90
LBB75_4:                                #   in Loop: Header=BB75_2 Depth=1
	mov	ebx, edi
	sar	ebx, 31
	cmp	edi, ebp
	mov	ecx, ebx
	sbb	ecx, esi
	cmovge	ebx, esi
	cmovge	edi, ebp
	push	edi
	push	edx
	push	eax
	mov	dword ptr [esp + 16], edx       # 4-byte Spill
	call	_memcpy
	mov	edx, dword ptr [esp + 16]       # 4-byte Reload
	add	esp, 12
	add	edx, edi
	sub	ebp, edi
	sbb	esi, ebx
	mov	ebx, dword ptr [esp]            # 4-byte Reload
	mov	eax, dword ptr [ebx + 48]
	sub	dword ptr [eax], edi
	mov	eax, dword ptr [ebx + 32]
	add	dword ptr [eax], edi
LBB75_7:                                #   in Loop: Header=BB75_2 Depth=1
	mov	eax, ebp
	neg	eax
	mov	eax, 0
	sbb	eax, esi
	jge	LBB75_8
LBB75_2:                                # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB75_5
# %bb.3:                                #   in Loop: Header=BB75_2 Depth=1
	mov	ecx, dword ptr [ebx + 48]
	mov	edi, dword ptr [ecx]
	test	edi, edi
	jg	LBB75_4
LBB75_5:                                #   in Loop: Header=BB75_2 Depth=1
	movzx	eax, byte ptr [edx]
	mov	edi, edx
	mov	edx, dword ptr [ebx]
	mov	ecx, ebx
	push	eax
	call	dword ptr [edx + 12]
	cmp	eax, -1
	je	LBB75_8
# %bb.6:                                #   in Loop: Header=BB75_2 Depth=1
	inc	edi
	add	ebp, -1
	adc	esi, -1
	mov	edx, edi
	jmp	LBB75_7
LBB75_8:
	mov	eax, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 36]
	sub	eax, ebp
	sbb	edx, esi
	add	esp, 8
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
                                        # -- End function
	.def	 "?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
	.globl	"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z" # -- Begin function ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	.p2align	4, 0x90
"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z": # @"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	dword ptr [eax + 4], -1
	mov	dword ptr [eax], -1
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	ret	20
                                        # -- End function
	.def	 "?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
	.globl	"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z" # -- Begin function ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	.p2align	4, 0x90
"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z": # @"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	dword ptr [eax + 4], -1
	mov	dword ptr [eax], -1
	mov	dword ptr [eax + 12], 0
	mov	dword ptr [eax + 8], 0
	mov	dword ptr [eax + 20], 0
	mov	dword ptr [eax + 16], 0
	ret	32
                                        # -- End function
	.def	 "?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z"
	.globl	"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z" # -- Begin function ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	.p2align	4, 0x90
"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z": # @"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z"
# %bb.0:
	mov	eax, ecx
	ret	12
                                        # -- End function
	.def	 "?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.globl	"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ" # -- Begin function ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	.p2align	4, 0x90
"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	xor	eax, eax
	ret
                                        # -- End function
	.def	 "?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"
	.globl	"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z" # -- Begin function ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
	.p2align	4, 0x90
"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z": # @"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"
# %bb.0:
	ret	4
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
Lfunc_begin23:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	lea	eax, [ebp - 24]
	mov	esi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], 2147483647 # 4-byte Folded Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	edx, dword ptr [ecx + 16]
	sub	eax, edx
	cmp	eax, esi
	jb	LBB81_19
# %bb.1:
	mov	ebx, dword ptr [ecx + 20]
	add	esi, edx
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	mov	ecx, esi
	or	ecx, 15
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	js	LBB81_5
# %bb.2:
	mov	edx, ebx
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, ebx
	jb	LBB81_5
# %bb.3:
	add	edx, dword ptr [ebp - 32]       # 4-byte Folded Reload
	cmp	ecx, edx
	mov	ebx, edx
	cmovae	ebx, ecx
	lea	eax, [ebx + 1]
	cmp	eax, 4096
	jb	LBB81_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	jae	LBB81_20
LBB81_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB81_9:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	ecx, 16
	mov	dword ptr [eax + 16], esi
	mov	dword ptr [eax + 20], ebx
	jb	LBB81_17
# %bb.10:
	mov	esi, dword ptr [eax]
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	push	ebx
	push	esi
	push	edi
	call	_memcpy
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
	mov	al, byte ptr [ebp + 16]
	mov	byte ptr [edi + ebx], al
	lea	eax, [edx + 1]
	mov	byte ptr [edi + ebx + 1], 0
	cmp	eax, 4096
	jb	LBB81_16
# %bb.11:
	mov	ecx, dword ptr [esi - 4]
	add	esi, -4
	sub	esi, ecx
	cmp	esi, 32
	jae	LBB81_12
# %bb.15:
	add	edx, 36
	mov	esi, ecx
	mov	eax, edx
LBB81_16:
	push	eax
	push	esi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	jmp	LBB81_18
LBB81_17:
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	push	ebx
	push	eax
	push	edi
	mov	esi, eax
	call	_memcpy
	add	esp, 12
	mov	al, byte ptr [ebp + 16]
	mov	byte ptr [edi + ebx], al
	mov	byte ptr [edi + ebx + 1], 0
LBB81_18:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB81_6:
	test	eax, eax
	je	LBB81_7
# %bb.8:
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edi, eax
	jmp	LBB81_9
LBB81_7:
	xor	edi, edi
	mov	ebx, -1
	jmp	LBB81_9
LBB81_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB81_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB81_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z@4HA":
LBB81_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end23:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
                                        # -- End function
	.def	 "?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
	.globl	"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ" # -- Begin function ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
	.p2align	4, 0x90
"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ": # @"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
# %bb.0:
	push	offset "??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"
	call	"?_Xout_of_range@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.globl	"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z" # -- Begin function ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
	.p2align	4, 0x90
"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z": # @"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
Lfunc_begin24:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	lea	ecx, [ebp - 36]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	mov	edx, dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"]
	mov	edi, dword ptr ["?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B"]
	test	edx, edx
	je	LBB83_1
# %bb.4:
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + 12], edx
	ja	LBB83_5
	jmp	LBB83_6
LBB83_1:
	lea	ecx, [ebp - 92]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	cmp	dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"], 0
	jne	LBB83_3
# %bb.2:
	mov	eax, dword ptr ["?_Id_cnt@id@locale@std@@0HA"]
	inc	eax
	mov	dword ptr ["?_Id_cnt@id@locale@std@@0HA"], eax
	mov	dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"], eax
LBB83_3:
	lea	ecx, [ebp - 92]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	edx, dword ptr ["?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"]
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + 12], edx
	jbe	LBB83_6
LBB83_5:
	mov	ecx, dword ptr [eax + 8]
	mov	esi, dword ptr [ecx + 4*edx]
	test	esi, esi
	jne	LBB83_18
LBB83_6:
	cmp	byte ptr [eax + 20], 0
	je	LBB83_10
# %bb.7:
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"
# %bb.8:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	dword ptr [eax + 12], ecx
	jbe	LBB83_10
# %bb.9:
	mov	eax, dword ptr [eax + 8]
	mov	esi, dword ptr [eax + 4*ecx]
	test	esi, esi
	jne	LBB83_18
LBB83_10:
	test	edi, edi
	mov	esi, edi
	jne	LBB83_18
# %bb.11:
	mov	dword ptr [ebp - 16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.12:
	mov	ecx, eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	test	eax, eax
	je	LBB83_13
# %bb.14:
	mov	ecx, dword ptr [eax + 24]
	add	eax, 28
	test	ecx, ecx
	cmovne	eax, ecx
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 92]
	push	eax
	call	"??0_Locinfo@std@@QAE@PBD@Z"
	jmp	LBB83_16
LBB83_13:
	mov	eax, offset "??_C@_00CNPNBAHC@?$AA@"
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 92]
	push	eax
	call	"??0_Locinfo@std@@QAE@PBD@Z"
LBB83_16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [ebp - 92]
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi], offset "??_7?$codecvt@DDU_Mbstatet@@@std@@6B@"
	call	"??1_Locinfo@std@@QAE@XZ"
	mov	dword ptr [ebp - 16], 2
	push	esi
	call	"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"
	add	esp, 4
# %bb.17:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [esi]
	mov	ecx, esi
	call	dword ptr [eax + 4]
	mov	dword ptr ["?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B"], esi
LBB83_18:
	lea	ecx, [ebp - 36]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$19@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA":
LBB83_19:
	push	ebp
	push	eax
	add	ebp, 12
	lea	ecx, [ebp - 36]
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$20@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA":
LBB83_20:
	push	ebp
	push	eax
	add	ebp, 12
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??3@YAXPAX@Z"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$21@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA":
LBB83_21:
	push	ebp
	push	eax
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	push	1
	call	dword ptr [eax]
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end24:
	.section	.xdata,"dr",associative,"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.p2align	2
"L__ehtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z":
	.long	-1                              # ToState
	.long	"?dtor$19@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$20@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$21@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
                                        # -- End function
	.def	 "?_Throw_bad_cast@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Throw_bad_cast@std@@YAXXZ"
	.globl	"?_Throw_bad_cast@std@@YAXXZ"   # -- Begin function ?_Throw_bad_cast@std@@YAXXZ
	.p2align	4, 0x90
"?_Throw_bad_cast@std@@YAXXZ":          # @"?_Throw_bad_cast@std@@YAXXZ"
# %bb.0:
	sub	esp, 12
	mov	dword ptr [esp + 8], 0
	mov	dword ptr [esp + 4], offset "??_C@_08EPJLHIJG@bad?5cast?$AA@"
	mov	dword ptr [esp], offset "??_7bad_cast@std@@6B@"
	mov	eax, esp
	push	offset "__TI2?AVbad_cast@std@@"
	push	eax
	call	__CxxThrowException@8
                                        # -- End function
	.def	 "??0_Locinfo@std@@QAE@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0_Locinfo@std@@QAE@PBD@Z"
	.globl	"??0_Locinfo@std@@QAE@PBD@Z"    # -- Begin function ??0_Locinfo@std@@QAE@PBD@Z
	.p2align	4, 0x90
"??0_Locinfo@std@@QAE@PBD@Z":           # @"??0_Locinfo@std@@QAE@PBD@Z"
Lfunc_begin25:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0_Locinfo@std@@QAE@PBD@Z"
	mov	edi, ecx
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	ecx, edi
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	test	esi, esi
	mov	dword ptr [edi + 4], 0
	mov	byte ptr [edi + 8], 0
	mov	dword ptr [edi + 12], 0
	mov	byte ptr [edi + 16], 0
	mov	dword ptr [edi + 20], 0
	mov	word ptr [edi + 24], 0
	mov	dword ptr [edi + 28], 0
	mov	word ptr [edi + 32], 0
	mov	dword ptr [edi + 36], 0
	mov	byte ptr [edi + 40], 0
	mov	dword ptr [edi + 44], 0
	mov	byte ptr [edi + 48], 0
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	je	LBB85_3
# %bb.1:
	mov	dword ptr [ebp - 16], 0
	push	esi
	push	edi
	call	"?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z"
	add	esp, 8
# %bb.2:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB85_3:
	mov	dword ptr [ebp - 16], 0
	push	offset "??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"
	call	"?_Xruntime_error@std@@YAXPBD@Z"
	add	esp, 4
# %bb.4:
	.def	 "?dtor$5@?0???0_Locinfo@std@@QAE@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$5@?0???0_Locinfo@std@@QAE@PBD@Z@4HA":
LBB85_5:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	esi, eax
	mov	eax, dword ptr [eax + 44]
	test	eax, eax
	je	LBB85_7
# %bb.6:
	push	eax
	call	_free
	add	esp, 4
LBB85_7:
	mov	dword ptr [esi + 44], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 36]
	test	eax, eax
	je	LBB85_9
# %bb.8:
	push	eax
	call	_free
	add	esp, 4
LBB85_9:
	mov	dword ptr [esi + 36], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 28]
	test	eax, eax
	je	LBB85_11
# %bb.10:
	push	eax
	call	_free
	add	esp, 4
LBB85_11:
	mov	dword ptr [esi + 28], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 20]
	test	eax, eax
	je	LBB85_13
# %bb.12:
	push	eax
	call	_free
	add	esp, 4
LBB85_13:
	mov	dword ptr [esi + 20], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 12]
	test	eax, eax
	je	LBB85_15
# %bb.14:
	push	eax
	call	_free
	add	esp, 4
LBB85_15:
	mov	dword ptr [esi + 12], 0
	mov	eax, esi
	mov	eax, dword ptr [esi + 4]
	test	eax, eax
	je	LBB85_17
# %bb.16:
	push	eax
	call	_free
	add	esp, 4
LBB85_17:
	mov	ecx, esi
	mov	dword ptr [esi + 4], 0
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end25:
	.section	.xdata,"dr",associative,"??0_Locinfo@std@@QAE@PBD@Z"
	.p2align	2
"L__ehtable$??0_Locinfo@std@@QAE@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0_Locinfo@std@@QAE@PBD@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0_Locinfo@std@@QAE@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$5@?0???0_Locinfo@std@@QAE@PBD@Z@4HA" # Action
	.section	.text,"xr",discard,"??0_Locinfo@std@@QAE@PBD@Z"
                                        # -- End function
	.def	 "??1_Locinfo@std@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1_Locinfo@std@@QAE@XZ"
	.globl	"??1_Locinfo@std@@QAE@XZ"       # -- Begin function ??1_Locinfo@std@@QAE@XZ
	.p2align	4, 0x90
"??1_Locinfo@std@@QAE@XZ":              # @"??1_Locinfo@std@@QAE@XZ"
Lfunc_begin26:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1_Locinfo@std@@QAE@XZ"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	"?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [esi + 44]
	test	eax, eax
	je	LBB86_3
# %bb.2:
	push	eax
	call	_free
	add	esp, 4
LBB86_3:
	mov	dword ptr [esi + 44], 0
	mov	eax, dword ptr [esi + 36]
	test	eax, eax
	je	LBB86_5
# %bb.4:
	push	eax
	call	_free
	add	esp, 4
LBB86_5:
	mov	dword ptr [esi + 36], 0
	mov	eax, dword ptr [esi + 28]
	test	eax, eax
	je	LBB86_7
# %bb.6:
	push	eax
	call	_free
	add	esp, 4
LBB86_7:
	mov	dword ptr [esi + 28], 0
	mov	eax, dword ptr [esi + 20]
	test	eax, eax
	je	LBB86_9
# %bb.8:
	push	eax
	call	_free
	add	esp, 4
LBB86_9:
	mov	dword ptr [esi + 20], 0
	mov	eax, dword ptr [esi + 12]
	test	eax, eax
	je	LBB86_11
# %bb.10:
	push	eax
	call	_free
	add	esp, 4
LBB86_11:
	mov	dword ptr [esi + 12], 0
	mov	eax, dword ptr [esi + 4]
	test	eax, eax
	je	LBB86_13
# %bb.12:
	push	eax
	call	_free
	add	esp, 4
LBB86_13:
	mov	ecx, esi
	mov	dword ptr [esi + 4], 0
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$14@?0???1_Locinfo@std@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???1_Locinfo@std@@QAE@XZ@4HA":
LBB86_14:
	push	ebp
	push	eax
	add	ebp, 12
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [esi + 44]
	call	"??1?$_Yarn@D@std@@QAE@XZ"
	lea	ecx, [esi + 36]
	call	"??1?$_Yarn@D@std@@QAE@XZ"
	lea	ecx, [esi + 28]
	call	"??1?$_Yarn@_W@std@@QAE@XZ"
	lea	ecx, [esi + 20]
	call	"??1?$_Yarn@_W@std@@QAE@XZ"
	lea	ecx, [esi + 12]
	call	"??1?$_Yarn@D@std@@QAE@XZ"
	lea	ecx, [esi + 4]
	call	"??1?$_Yarn@D@std@@QAE@XZ"
	mov	ecx, esi
	call	"??1_Lockit@std@@QAE@XZ"
	call	___std_terminate
Lfunc_end26:
	.section	.xdata,"dr",associative,"??1_Locinfo@std@@QAE@XZ"
	.p2align	2
"L__ehtable$??1_Locinfo@std@@QAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1_Locinfo@std@@QAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1_Locinfo@std@@QAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???1_Locinfo@std@@QAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1_Locinfo@std@@QAE@XZ"
                                        # -- End function
	.def	 "??1?$_Yarn@D@std@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$_Yarn@D@std@@QAE@XZ"
	.globl	"??1?$_Yarn@D@std@@QAE@XZ"      # -- Begin function ??1?$_Yarn@D@std@@QAE@XZ
	.p2align	4, 0x90
"??1?$_Yarn@D@std@@QAE@XZ":             # @"??1?$_Yarn@D@std@@QAE@XZ"
# %bb.0:
	push	esi
	mov	eax, dword ptr [ecx]
	mov	esi, ecx
	test	eax, eax
	je	LBB87_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB87_2:
	mov	dword ptr [esi], 0
	pop	esi
	ret
                                        # -- End function
	.def	 "??1?$_Yarn@_W@std@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1?$_Yarn@_W@std@@QAE@XZ"
	.globl	"??1?$_Yarn@_W@std@@QAE@XZ"     # -- Begin function ??1?$_Yarn@_W@std@@QAE@XZ
	.p2align	4, 0x90
"??1?$_Yarn@_W@std@@QAE@XZ":            # @"??1?$_Yarn@_W@std@@QAE@XZ"
# %bb.0:
	push	esi
	mov	eax, dword ptr [ecx]
	mov	esi, ecx
	test	eax, eax
	je	LBB88_2
# %bb.1:
	push	eax
	call	_free
	add	esp, 4
LBB88_2:
	mov	dword ptr [esi], 0
	pop	esi
	ret
                                        # -- End function
	.def	 "??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z"
	.globl	"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z" # -- Begin function ??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z": # @"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB89_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB89_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?_Incref@facet@locale@std@@UAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Incref@facet@locale@std@@UAEXXZ"
	.globl	"?_Incref@facet@locale@std@@UAEXXZ" # -- Begin function ?_Incref@facet@locale@std@@UAEXXZ
	.p2align	4, 0x90
"?_Incref@facet@locale@std@@UAEXXZ":    # @"?_Incref@facet@locale@std@@UAEXXZ"
# %bb.0:
	lock		inc	dword ptr [ecx + 4]
	ret
                                        # -- End function
	.def	 "?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.globl	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ" # -- Begin function ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	.p2align	4, 0x90
"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ": # @"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
# %bb.0:
	xor	eax, eax
	lock		dec	dword ptr [ecx + 4]
	cmove	eax, ecx
	ret
                                        # -- End function
	.def	 "?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ"
	.globl	"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ" # -- Begin function ?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ
	.p2align	4, 0x90
"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ": # @"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ"
# %bb.0:
	mov	al, 1
	ret
                                        # -- End function
	.def	 "?do_max_length@codecvt_base@std@@MBEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_max_length@codecvt_base@std@@MBEHXZ"
	.globl	"?do_max_length@codecvt_base@std@@MBEHXZ" # -- Begin function ?do_max_length@codecvt_base@std@@MBEHXZ
	.p2align	4, 0x90
"?do_max_length@codecvt_base@std@@MBEHXZ": # @"?do_max_length@codecvt_base@std@@MBEHXZ"
# %bb.0:
	mov	eax, 1
	ret
                                        # -- End function
	.def	 "?do_encoding@codecvt_base@std@@MBEHXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_encoding@codecvt_base@std@@MBEHXZ"
	.globl	"?do_encoding@codecvt_base@std@@MBEHXZ" # -- Begin function ?do_encoding@codecvt_base@std@@MBEHXZ
	.p2align	4, 0x90
"?do_encoding@codecvt_base@std@@MBEHXZ": # @"?do_encoding@codecvt_base@std@@MBEHXZ"
# %bb.0:
	mov	eax, 1
	ret
                                        # -- End function
	.def	 "?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
	.globl	"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z" # -- Begin function ?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
	.p2align	4, 0x90
"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z": # @"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 24]
	mov	ecx, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 12]
	mov	esi, dword ptr [esp + 20]
	mov	dword ptr [esi], edx
	mov	dword ptr [ecx], eax
	mov	eax, 3
	pop	esi
	ret	28
                                        # -- End function
	.def	 "?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
	.globl	"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z" # -- Begin function ?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
	.p2align	4, 0x90
"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z": # @"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 24]
	mov	ecx, dword ptr [esp + 32]
	mov	edx, dword ptr [esp + 12]
	mov	esi, dword ptr [esp + 20]
	mov	dword ptr [esi], edx
	mov	dword ptr [ecx], eax
	mov	eax, 3
	pop	esi
	ret	28
                                        # -- End function
	.def	 "?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z"
	.globl	"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z" # -- Begin function ?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
	.p2align	4, 0x90
"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z": # @"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 8]
	mov	ecx, dword ptr [esp + 16]
	mov	dword ptr [ecx], eax
	mov	eax, 3
	ret	16
                                        # -- End function
	.def	 "?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z"
	.globl	"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z" # -- Begin function ?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
	.p2align	4, 0x90
"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z": # @"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 12]
	mov	ecx, dword ptr [esp + 16]
	sub	eax, dword ptr [esp + 8]
	cmp	eax, ecx
	cmovae	eax, ecx
	ret	16
                                        # -- End function
	.def	 "??_Gcodecvt_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gcodecvt_base@std@@UAEPAXI@Z"
	.globl	"??_Gcodecvt_base@std@@UAEPAXI@Z" # -- Begin function ??_Gcodecvt_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gcodecvt_base@std@@UAEPAXI@Z":      # @"??_Gcodecvt_base@std@@UAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB99_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB99_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?do_always_noconv@codecvt_base@std@@MBE_NXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_always_noconv@codecvt_base@std@@MBE_NXZ"
	.globl	"?do_always_noconv@codecvt_base@std@@MBE_NXZ" # -- Begin function ?do_always_noconv@codecvt_base@std@@MBE_NXZ
	.p2align	4, 0x90
"?do_always_noconv@codecvt_base@std@@MBE_NXZ": # @"?do_always_noconv@codecvt_base@std@@MBE_NXZ"
# %bb.0:
	xor	eax, eax
	ret
                                        # -- End function
	.def	 "??_Gfacet@locale@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gfacet@locale@std@@MAEPAXI@Z"
	.globl	"??_Gfacet@locale@std@@MAEPAXI@Z" # -- Begin function ??_Gfacet@locale@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_Gfacet@locale@std@@MAEPAXI@Z":      # @"??_Gfacet@locale@std@@MAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB101_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB101_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "??_G_Facet_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G_Facet_base@std@@UAEPAXI@Z"
	.globl	"??_G_Facet_base@std@@UAEPAXI@Z" # -- Begin function ??_G_Facet_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G_Facet_base@std@@UAEPAXI@Z":       # @"??_G_Facet_base@std@@UAEPAXI@Z"
# %bb.0:
	ud2
                                        # -- End function
	.def	 "??0bad_cast@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0bad_cast@std@@QAE@ABV01@@Z"
	.globl	"??0bad_cast@std@@QAE@ABV01@@Z" # -- Begin function ??0bad_cast@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0bad_cast@std@@QAE@ABV01@@Z":        # @"??0bad_cast@std@@QAE@ABV01@@Z"
Lfunc_begin27:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7bad_cast@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0bad_cast@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0bad_cast@std@@QAE@ABV01@@Z@4HA":
LBB103_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end27:
	.section	.xdata,"dr",associative,"??0bad_cast@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0bad_cast@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0bad_cast@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0bad_cast@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0bad_cast@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0bad_cast@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??1exception@std@@UAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1exception@std@@UAE@XZ"
	.globl	"??1exception@std@@UAE@XZ"      # -- Begin function ??1exception@std@@UAE@XZ
	.p2align	4, 0x90
"??1exception@std@@UAE@XZ":             # @"??1exception@std@@UAE@XZ"
Lfunc_begin28:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1exception@std@@UAE@XZ"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	add	ecx, 4
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$2@?0???1exception@std@@UAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???1exception@std@@UAE@XZ@4HA":
LBB104_2:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end28:
	.section	.xdata,"dr",associative,"??1exception@std@@UAE@XZ"
	.p2align	2
"L__ehtable$??1exception@std@@UAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1exception@std@@UAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1exception@std@@UAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???1exception@std@@UAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1exception@std@@UAE@XZ"
                                        # -- End function
	.def	 "??_Gbad_cast@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gbad_cast@std@@UAEPAXI@Z"
	.globl	"??_Gbad_cast@std@@UAEPAXI@Z"   # -- Begin function ??_Gbad_cast@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gbad_cast@std@@UAEPAXI@Z":          # @"??_Gbad_cast@std@@UAEPAXI@Z"
Lfunc_begin29:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB105_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB105_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gbad_cast@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gbad_cast@std@@UAEPAXI@Z@4HA":
LBB105_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end29:
	.section	.xdata,"dr",associative,"??_Gbad_cast@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gbad_cast@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gbad_cast@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gbad_cast@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gbad_cast@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gbad_cast@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??_Gios_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gios_base@std@@UAEPAXI@Z"
	.globl	"??_Gios_base@std@@UAEPAXI@Z"   # -- Begin function ??_Gios_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gios_base@std@@UAEPAXI@Z":          # @"??_Gios_base@std@@UAEPAXI@Z"
Lfunc_begin30:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gios_base@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB106_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB106_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gios_base@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gios_base@std@@UAEPAXI@Z@4HA":
LBB106_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end30:
	.section	.xdata,"dr",associative,"??_Gios_base@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gios_base@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gios_base@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gios_base@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gios_base@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gios_base@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.globl	"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ" # -- Begin function ?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ
	.p2align	4, 0x90
"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ": # @"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
Lfunc_begin31:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [esi + 16], 0
	je	LBB107_2
# %bb.1:
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], 0
LBB107_2:
	mov	eax, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	.p2align	4, 0x90
LBB107_3:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB107_4
# %bb.9:                                #   in Loop: Header=BB107_3 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB107_3
# %bb.10:                               #   in Loop: Header=BB107_3 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 4]
	jmp	LBB107_3
LBB107_4:
	test	eax, eax
	je	LBB107_14
# %bb.5:
	mov	ecx, dword ptr [esi + 8]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB107_13
# %bb.6:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB107_7
# %bb.12:
	add	ecx, 35
	mov	eax, edx
LBB107_13:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB107_14:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB107_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$11@?0??_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ@4HA":
LBB107_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end31:
	.section	.xdata,"dr",associative,"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.p2align	2
"L__ehtable$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ@4HA" # Action
	.section	.text,"xr",discard,"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
                                        # -- End function
	.def	 "??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
	.globl	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z" # -- Begin function ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z
	.p2align	4, 0x90
"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z": # @"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	ebx, dword ptr [esp + 24]
	cmp	byte ptr [ebx + 13], 0
	jne	LBB108_3
# %bb.1:
	mov	edi, dword ptr [esp + 20]
	mov	esi, ecx
	.p2align	4, 0x90
LBB108_2:                               # =>This Inner Loop Header: Depth=1
	mov	ecx, esi
	push	dword ptr [ebx + 8]
	push	edi
	call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@1@@Z"
	mov	ebp, dword ptr [ebx]
	push	24
	push	ebx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	cmp	byte ptr [ebp + 13], 0
	mov	ebx, ebp
	je	LBB108_2
LBB108_3:
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
Lfunc_begin32:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	mov	ebx, ecx
	lea	eax, [ebp - 24]
	mov	esi, dword ptr [ebp + 8]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	ecx, dword ptr [ebx + 16]
	sub	eax, ecx
	cmp	eax, esi
	jb	LBB109_19
# %bb.1:
	mov	edi, dword ptr [ebx + 20]
	add	esi, ecx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	dword ptr [ebp - 32], 2147483647 # 4-byte Folded Spill
	mov	ecx, esi
	or	ecx, 15
	js	LBB109_5
# %bb.2:
	mov	edx, edi
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	esi, edi
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, esi
	mov	edi, esi
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	jb	LBB109_5
# %bb.3:
	add	edx, edi
	cmp	ecx, edx
	cmovae	edx, ecx
	lea	eax, [edx + 1]
	cmp	eax, 4096
	jb	LBB109_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	jae	LBB109_20
LBB109_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
LBB109_9:
	mov	dword ptr [ebx + 16], esi
	mov	esi, dword ptr [ebp + 16]
	cmp	edi, 16
	mov	dword ptr [ebx + 20], edx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	jb	LBB109_17
# %bb.10:
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	mov	edi, dword ptr [ebx]
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	push	esi
	push	edi
	push	ecx
	mov	ebx, ecx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp + 24]
	add	ebx, esi
	push	eax
	push	dword ptr [ebp + 20]
	push	ebx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	ebx, dword ptr [ebp + 24]
	sub	eax, esi
	add	esi, edi
	inc	eax
	push	eax
	push	esi
	push	ebx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	edx, eax
	inc	eax
	cmp	eax, 4096
	jb	LBB109_16
# %bb.11:
	mov	ecx, dword ptr [edi - 4]
	add	edi, -4
	sub	edi, ecx
	cmp	edi, 32
	jae	LBB109_12
# %bb.15:
	mov	eax, edx
	mov	edi, ecx
	add	eax, 36
LBB109_16:
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	push	eax
	push	edi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB109_18
LBB109_17:
	push	esi
	push	ebx
	push	ecx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	lea	edi, [eax + esi]
	mov	eax, dword ptr [ebp + 24]
	push	eax
	push	dword ptr [ebp + 20]
	push	edi
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	edi, dword ptr [ebp + 24]
	sub	eax, esi
	add	esi, ebx
	inc	eax
	push	eax
	push	esi
	push	edi
	call	_memcpy
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
LBB109_18:
	mov	dword ptr [ebx], eax
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, ebx
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	20
LBB109_6:
	test	eax, eax
	je	LBB109_7
# %bb.8:
	push	eax
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	call	"??2@YAPAXI@Z"
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 4
	mov	ecx, eax
	jmp	LBB109_9
LBB109_7:
	xor	ecx, ecx
	mov	edx, -1
	jmp	LBB109_9
LBB109_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB109_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB109_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z@4HA":
LBB109_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end32:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
Lfunc_begin33:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], 2147483647 # 4-byte Folded Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	ebx, dword ptr [ecx + 16]
	sub	eax, ebx
	cmp	eax, edi
	jb	LBB110_19
# %bb.1:
	mov	esi, dword ptr [ecx + 20]
	add	edi, ebx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	ecx, edi
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	or	ecx, 15
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	js	LBB110_5
# %bb.2:
	mov	edx, esi
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, esi
	jb	LBB110_5
# %bb.3:
	add	edx, dword ptr [ebp - 32]       # 4-byte Folded Reload
	cmp	ecx, edx
	mov	esi, edx
	cmovae	esi, ecx
	lea	eax, [esi + 1]
	cmp	eax, 4096
	jb	LBB110_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	jae	LBB110_20
LBB110_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB110_9:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	edx, 16
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], esi
	jb	LBB110_17
# %bb.10:
	mov	esi, dword ptr [eax]
	push	ebx
	push	esi
	push	edi
	call	_memcpy
	add	esp, 12
	mov	ecx, dword ptr [ebp + 20]
	lea	eax, [edi + ebx]
	push	ecx
	push	dword ptr [ebp + 16]
	push	eax
	call	_memcpy
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
	add	ebx, dword ptr [ebp + 20]
	lea	eax, [edx + 1]
	cmp	eax, 4096
	mov	byte ptr [edi + ebx], 0
	jb	LBB110_16
# %bb.11:
	mov	ecx, dword ptr [esi - 4]
	add	esi, -4
	sub	esi, ecx
	cmp	esi, 32
	jae	LBB110_12
# %bb.15:
	add	edx, 36
	mov	esi, ecx
	mov	eax, edx
LBB110_16:
	push	eax
	push	esi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB110_18
LBB110_17:
	push	ebx
	push	eax
	push	edi
	mov	esi, eax
	call	_memcpy
	add	esp, 12
	mov	ecx, dword ptr [ebp + 20]
	lea	eax, [edi + ebx]
	push	ecx
	push	dword ptr [ebp + 16]
	push	eax
	call	_memcpy
	add	esp, 12
	add	ebx, dword ptr [ebp + 20]
	mov	byte ptr [edi + ebx], 0
LBB110_18:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	16
LBB110_6:
	test	eax, eax
	je	LBB110_7
# %bb.8:
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edi, eax
	jmp	LBB110_9
LBB110_7:
	xor	edi, edi
	mov	esi, -1
	jmp	LBB110_9
LBB110_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB110_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB110_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z@4HA":
LBB110_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end33:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
                                        # -- End function
	.def	 "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z"
	.globl	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z" # -- Begin function ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
	.p2align	4, 0x90
"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z": # @"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 12
	mov	ebx, dword ptr [esp + 36]
	mov	ebp, dword ptr [esp + 40]
	mov	dword ptr [ecx + 16], 0
	mov	dword ptr [ecx + 20], 0
	mov	esi, ecx
	mov	eax, dword ptr [ebx + 20]
	mov	edx, dword ptr [ebx + 16]
	mov	edi, dword ptr [ebp + 16]
	mov	ecx, eax
	sub	ecx, edx
	cmp	edi, ecx
	mov	ecx, dword ptr [ebp + 20]
	lea	ebp, [edi + edx]
	mov	dword ptr [esp], ebp            # 4-byte Spill
	ja	LBB111_7
# %bb.1:
	cmp	ecx, eax
	ja	LBB111_7
# %bb.2:
	movsd	xmm0, qword ptr [ebx + 16]      # xmm0 = mem[0],zero
	mov	eax, esi
	movsd	qword ptr [esi + 16], xmm0
	movsd	xmm0, qword ptr [ebx]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [ebx + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [esi + 8], xmm1
	movsd	qword ptr [esi], xmm0
	mov	dword ptr [ebx + 16], 0
	mov	dword ptr [ebx + 20], 15
	mov	byte ptr [ebx], 0
	cmp	dword ptr [esi + 20], 16
	jb	LBB111_4
# %bb.3:
	mov	eax, dword ptr [esi]
LBB111_4:
	mov	ecx, dword ptr [esp + 40]
	inc	edi
	cmp	dword ptr [ecx + 20], 15
	jbe	LBB111_6
# %bb.5:
	mov	ecx, dword ptr [ecx]
LBB111_6:
	add	eax, edx
	push	edi
	push	ecx
	push	eax
	jmp	LBB111_11
LBB111_7:
	sub	ecx, edi
	mov	dword ptr [esp + 8], edx        # 4-byte Spill
	cmp	edx, ecx
	jbe	LBB111_8
# %bb.12:
	mov	eax, 2147483647
	sub	eax, edx
	cmp	eax, edi
	jb	LBB111_25
# %bb.13:
	mov	ecx, dword ptr [esp]            # 4-byte Reload
	or	ecx, 15
	js	LBB111_14
# %bb.15:
	cmp	ecx, 22
	mov	ebp, 22
	cmova	ebp, ecx
	lea	eax, [ebp + 1]
	cmp	ebp, 4095
	jb	LBB111_18
# %bb.16:
	mov	dword ptr [esp + 4], ecx        # 4-byte Spill
	jmp	LBB111_17
LBB111_8:
	mov	eax, dword ptr [esp + 40]
	inc	edi
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [esi + 16], xmm0
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [esi + 8], xmm1
	movsd	qword ptr [esi], xmm0
	mov	dword ptr [eax + 16], 0
	mov	dword ptr [eax + 20], 15
	mov	byte ptr [eax], 0
	mov	ebp, dword ptr [esi]
	lea	eax, [ebp + edx]
	push	edi
	push	ebp
	push	eax
	call	_memmove
	add	esp, 12
	cmp	dword ptr [ebx + 20], 15
	jbe	LBB111_10
# %bb.9:
	mov	ebx, dword ptr [ebx]
LBB111_10:
	push	dword ptr [esp + 8]             # 4-byte Folded Reload
	push	ebx
	push	ebp
LBB111_11:
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esi + 16], eax
	jmp	LBB111_24
LBB111_14:
	mov	dword ptr [esp + 4], 2147483647 # 4-byte Folded Spill
	mov	eax, -2147483648
LBB111_17:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ebp, [eax + 35]
	and	ebp, -32
	mov	dword ptr [ebp - 4], eax
	jmp	LBB111_19
LBB111_18:
	mov	dword ptr [esp + 4], ebp        # 4-byte Spill
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ebp, eax
LBB111_19:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esi], ebp
	mov	dword ptr [esi + 16], eax
	mov	eax, dword ptr [esp + 4]        # 4-byte Reload
	mov	dword ptr [esi + 20], eax
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	cmp	dword ptr [ebx + 20], 15
	jbe	LBB111_21
# %bb.20:
	mov	ebx, dword ptr [ebx]
LBB111_21:
	push	eax
	push	ebx
	push	ebp
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [esp + 40]
	inc	edi
	cmp	dword ptr [eax + 20], 15
	jbe	LBB111_23
# %bb.22:
	mov	eax, dword ptr [eax]
LBB111_23:
	add	ebp, dword ptr [esp + 8]        # 4-byte Folded Reload
	push	edi
	push	eax
	push	ebp
	call	_memcpy
	add	esp, 12
LBB111_24:
	mov	eax, esi
	add	esp, 12
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB111_25:
	call	"?_Xlen_string@std@@YAXXZ"
                                        # -- End function
	.def	 "??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z"
	.globl	"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z" # -- Begin function ??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z
	.p2align	4, 0x90
"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z": # @"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, ecx
	mov	eax, dword ptr [ecx + 12]
	mov	ecx, dword ptr [ecx + 16]
	lea	edx, [ecx + eax]
	test	dl, 7
	jne	LBB112_3
# %bb.1:
	lea	edx, [ecx + 8]
	shr	edx, 3
	cmp	dword ptr [esi + 8], edx
	ja	LBB112_3
# %bb.2:
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	mov	eax, dword ptr [esi + 12]
	mov	ecx, dword ptr [esi + 16]
LBB112_3:
	mov	ebp, dword ptr [esi + 8]
	mov	edi, dword ptr [esi + 4]
	mov	edx, dword ptr [esp + 24]
	lea	ebx, [8*ebp - 1]
	add	ebp, 536870911
	and	ebx, eax
	mov	dword ptr [esi + 12], ebx
	add	ebx, ecx
	mov	eax, ebx
	shr	eax, 3
	and	ebp, eax
	mov	eax, edi
	mov	edi, dword ptr [edi + 4*ebp]
	test	edi, edi
	je	LBB112_5
# %bb.4:
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	eax, ebx
	jmp	LBB112_6
LBB112_5:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	ecx, dword ptr [esi + 16]
	mov	edi, dword ptr [eax + 4*ebp]
	mov	dword ptr [esp], eax            # 4-byte Spill
	mov	eax, dword ptr [esi + 12]
	mov	ebp, dword ptr [esi + 8]
	add	eax, ecx
	dec	ebp
	mov	edx, eax
	shr	edx, 3
	and	ebp, edx
	mov	edx, dword ptr [esp + 24]
LBB112_6:
	movzx	edx, word ptr [edx]
	and	ebx, 7
	and	eax, 7
	inc	ecx
	add	eax, eax
	mov	word ptr [edi + 2*ebx], dx
	mov	edx, dword ptr [esp]            # 4-byte Reload
	mov	dword ptr [esi + 16], ecx
	add	eax, dword ptr [edx + 4*ebp]
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
                                        # -- End function
	.def	 "?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.globl	"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z" # -- Begin function ?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z
	.p2align	4, 0x90
"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z": # @"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
Lfunc_begin34:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 1
	mov	edx, dword ptr [ecx + 8]
	test	edx, edx
	cmovne	eax, edx
	cmp	eax, 8
	jb	LBB113_3
	.p2align	4, 0x90
LBB113_2:
	mov	ebx, eax
	sub	ebx, edx
	cmp	ebx, edi
	jae	LBB113_5
LBB113_3:                               # =>This Inner Loop Header: Depth=1
	mov	esi, 268435455
	sub	esi, eax
	cmp	esi, eax
	jb	LBB113_22
# %bb.4:                                #   in Loop: Header=BB113_3 Depth=1
	add	eax, eax
	cmp	eax, 8
	jae	LBB113_2
	jmp	LBB113_3
LBB113_5:
	cmp	eax, 1073741824
	jae	LBB113_23
# %bb.6:
	mov	edi, dword ptr [ecx + 12]
	lea	edx, [4*eax]
	cmp	eax, 1024
	jb	LBB113_9
# %bb.7:
	cmp	eax, 1073741816
	mov	dword ptr [ebp - 16], -1
	jae	LBB113_24
# %bb.8:
	mov	esi, ecx
	add	edx, 35
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
	jmp	LBB113_10
LBB113_9:
	mov	esi, ecx
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
LBB113_10:
	shr	edi, 3
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [esi + 4]
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	lea	edx, [ecx + 4*edi]
	mov	ecx, dword ptr [esi + 8]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*edi]
	sub	esi, eax
	push	esi
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	mov	ecx, ebx
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	sub	ecx, edi
	mov	eax, dword ptr [eax + 4]
	jae	LBB113_11
# %bb.12:
	lea	ecx, [4*ebx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*ebx]
	sub	esi, eax
	push	esi
	push	eax
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
	call	_memmove
	add	esp, 12
	add	esi, edi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	push	esi
	jmp	LBB113_13
LBB113_11:
	mov	edi, ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [4*ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
	lea	eax, [esi + 4*eax]
	push	edi
	push	0
	push	eax
	call	_memset
	add	esp, 12
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
LBB113_13:
	call	_memset
	add	esp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB113_21
# %bb.14:
	mov	eax, dword ptr [esi + 8]
	shl	eax, 2
	cmp	eax, 4096
	jb	LBB113_20
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB113_16
# %bb.19:
	add	eax, 35
	mov	ecx, edx
LBB113_20:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB113_21:
	mov	dword ptr [esi + 4], edi
	add	dword ptr [esi + 8], ebx
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB113_22:
	mov	dword ptr [ebp - 16], -1
	call	"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ"
LBB113_23:
	mov	dword ptr [ebp - 16], -1
LBB113_24:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB113_16:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.17:
	.def	 "?dtor$18@?0??_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z@4HA":
LBB113_18:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end34:
	.section	.xdata,"dr",associative,"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.p2align	2
"L__ehtable$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
                                        # -- End function
	.def	 "?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ"
	.globl	"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ" # -- Begin function ?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ
	.p2align	4, 0x90
"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ": # @"?_Xlen@?$deque@GV?$allocator@G@std@@@std@@ABEXXZ"
# %bb.0:
	push	offset "??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.globl	"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ" # -- Begin function ?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ
	.p2align	4, 0x90
"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ": # @"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
Lfunc_begin35:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [esi + 16], 0
	je	LBB115_2
# %bb.1:
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], 0
LBB115_2:
	mov	eax, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	.p2align	4, 0x90
LBB115_3:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB115_4
# %bb.9:                                #   in Loop: Header=BB115_3 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB115_3
# %bb.10:                               #   in Loop: Header=BB115_3 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 4]
	jmp	LBB115_3
LBB115_4:
	test	eax, eax
	je	LBB115_14
# %bb.5:
	mov	ecx, dword ptr [esi + 8]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB115_13
# %bb.6:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB115_7
# %bb.12:
	add	ecx, 35
	mov	eax, edx
LBB115_13:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB115_14:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB115_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$11@?0??_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ@4HA":
LBB115_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end35:
	.section	.xdata,"dr",associative,"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.p2align	2
"L__ehtable$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ@4HA" # Action
	.section	.text,"xr",discard,"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
                                        # -- End function
	.def	 "?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.globl	"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z" # -- Begin function ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	.p2align	4, 0x90
"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z": # @"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
Lfunc_begin36:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 60
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	mov	ebx, ecx
	lea	eax, [ebp - 24]
	xor	edi, edi
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [ebx + 76], 0
	je	LBB116_1
LBB116_9:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 60
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB116_1:
	push	dword ptr [ebp + 16]
	push	dword ptr [ebp + 12]
	push	dword ptr [ebp + 8]
	call	"?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z"
	add	esp, 12
	test	eax, eax
	je	LBB116_9
# %bb.2:
	mov	esi, eax
	lea	eax, [ebx + 4]
	mov	byte ptr [ebx + 72], 1
	mov	byte ptr [ebx + 61], 0
	lea	ecx, [ebp - 48]
	lea	edi, [ebp - 40]
	mov	dword ptr [ebp - 72], eax       # 4-byte Spill
	mov	dword ptr [ebx + 12], eax
	lea	eax, [ebx + 8]
	mov	dword ptr [ebp - 68], eax       # 4-byte Spill
	mov	dword ptr [ebx + 16], eax
	lea	eax, [ebx + 20]
	mov	dword ptr [ebp - 64], eax       # 4-byte Spill
	mov	dword ptr [ebx + 28], eax
	lea	eax, [ebx + 24]
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	mov	dword ptr [ebx + 32], eax
	lea	eax, [ebx + 36]
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	mov	dword ptr [ebx + 44], eax
	lea	eax, [ebx + 40]
	mov	dword ptr [ebx + 48], eax
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	lea	eax, [ebp - 44]
	mov	dword ptr [ebx + 8], 0
	mov	dword ptr [ebx + 24], 0
	mov	dword ptr [ebx + 40], 0
	mov	dword ptr [ebx + 4], 0
	mov	dword ptr [ebx + 20], 0
	mov	dword ptr [ebx + 36], 0
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 44], 0
	push	eax
	push	ecx
	push	edi
	push	esi
	call	__get_stream_buffer_pointers
	add	esp, 16
	mov	eax, dword ptr [ebp - 44]
	mov	ecx, dword ptr [ebp - 48]
	mov	edx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	dword ptr [ebx + 12], edx
	mov	dword ptr [ebx + 16], edx
	mov	dword ptr [ebx + 28], ecx
	mov	dword ptr [ebx + 32], ecx
	mov	dword ptr [ebx + 44], eax
	mov	dword ptr [ebx + 48], eax
	mov	dword ptr [ebx + 76], esi
	mov	eax, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"]
	mov	ecx, dword ptr ["?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"+4]
	mov	dword ptr [ebx + 68], ecx
	mov	dword ptr [ebx + 64], eax
	mov	dword ptr [ebx + 56], 0
	mov	eax, dword ptr [ebx + 52]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 36], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	dword ptr [ebp - 16], 0
	push	edi
	call	"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.3:
	mov	esi, eax
	mov	eax, dword ptr [eax]
	mov	ecx, esi
	call	dword ptr [eax + 12]
	test	al, al
	je	LBB116_5
# %bb.4:
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [edi + 56], 0
	mov	ecx, dword ptr [ebp - 36]
	test	ecx, ecx
	jne	LBB116_7
	jmp	LBB116_9
LBB116_5:
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 72]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 68]       # 4-byte Reload
	mov	edx, dword ptr [ebp - 64]       # 4-byte Reload
	mov	dword ptr [edi + 56], esi
	mov	dword ptr [edi + 12], eax
	mov	dword ptr [edi + 16], ecx
	mov	ecx, dword ptr [ebp - 60]       # 4-byte Reload
	mov	dword ptr [edi + 28], edx
	mov	edx, dword ptr [ebp - 56]       # 4-byte Reload
	mov	dword ptr [edi + 32], ecx
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	dword ptr [edi + 44], edx
	mov	dword ptr [edi + 48], ecx
	mov	dword ptr [edi + 8], 0
	mov	dword ptr [edi + 24], 0
	mov	dword ptr [edi + 40], 0
	mov	dword ptr [edi + 4], 0
	mov	dword ptr [edi + 20], 0
	mov	dword ptr [edi + 36], 0
	mov	ecx, dword ptr [ebp - 36]
	test	ecx, ecx
	je	LBB116_9
LBB116_7:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB116_9
# %bb.8:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
	jmp	LBB116_9
	.def	 "?dtor$10@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$10@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z@4HA":
LBB116_10:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 36]
	test	ecx, ecx
	je	LBB116_13
# %bb.11:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB116_13
# %bb.12:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB116_13:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end36:
	.section	.xdata,"dr",associative,"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.p2align	2
"L__ehtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z":
	.long	-1                              # ToState
	.long	"?dtor$10@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z@4HA" # Action
	.section	.text,"xr",discard,"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
                                        # -- End function
	.def	 "??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.globl	"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z" # -- Begin function ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z": # @"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
Lfunc_begin37:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	ecx
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB117_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB117_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z@4HA":
LBB117_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end37:
	.section	.xdata,"dr",associative,"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@00000201000000000000000000000000 # -- Begin function ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
	.section	.rdata,"dr",discard,__xmm@00000201000000000000000000000000
	.p2align	4
__xmm@00000201000000000000000000000000:
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	513                             # 0x201
	.section	.text,"xr",discard,"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.globl	"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.p2align	4, 0x90
"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z": # @"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
Lfunc_begin38:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 52
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	movaps	xmm0, xmmword ptr [__xmm@00000201000000000000000000000000] # xmm0 = [0,0,0,513]
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ecx + 48], 0
	mov	dword ptr [ecx + 28], 0
	mov	dword ptr [ecx + 24], 6
	movups	xmmword ptr [ecx + 8], xmm0
	mov	dword ptr [ecx + 36], 0
	mov	dword ptr [ecx + 32], 0
	mov	dword ptr [ecx + 44], 0
	mov	dword ptr [ecx + 40], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	push	1
	call	"?_Init@locale@std@@CAPAV_Locimp@12@_N@Z"
	add	esp, 4
# %bb.1:
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [esi + 4], eax
	mov	dword ptr [edx + 48], esi
	mov	dword ptr [edx + 56], ecx
	mov	dword ptr [edx + 60], 0
	mov	dword ptr [ebp - 60], eax
	mov	ecx, eax
	mov	edx, dword ptr [eax]
	call	dword ptr [edx + 4]
	lea	eax, [ebp - 64]
	mov	dword ptr [ebp - 16], 1
	push	eax
	call	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.2:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	32
	call	dword ptr [edx + 32]
# %bb.3:
	mov	ecx, dword ptr [ebp - 60]
	mov	ebx, eax
	test	ecx, ecx
	je	LBB118_6
# %bb.4:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB118_6
# %bb.5:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB118_6:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	byte ptr [edx + 64], bl
	cmp	dword ptr [edx + 56], 0
	jne	LBB118_15
# %bb.7:
	mov	eax, dword ptr [edx + 12]
	and	eax, 19
	or	eax, 4
	mov	dword ptr [edx + 12], eax
	mov	ecx, dword ptr [edx + 16]
	and	eax, ecx
	jne	LBB118_8
LBB118_15:
	cmp	byte ptr [ebp + 12], 0
	je	LBB118_17
# %bb.16:
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"?_Addstd@ios_base@std@@SAXPAV12@@Z"
	add	esp, 4
LBB118_17:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 52
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
LBB118_8:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB118_10
# %bb.9:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB118_10:
	test	al, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	lea	esi, [ebp - 64]
	mov	dword ptr [ebp - 44], 1
	mov	dword ptr [ebp - 40], offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	mov	dword ptr [ebp - 16], -1
	cmove	edx, eax
	test	cl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	mov	ecx, esi
	cmove	eax, edx
	lea	edx, [ebp - 44]
	push	edx
	push	eax
	call	"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	push	esi
	call	__CxxThrowException@8
	.def	 "?dtor$11@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA":
LBB118_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 60]
	test	ecx, ecx
	je	LBB118_14
# %bb.12:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB118_14
# %bb.13:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB118_14:
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$18@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA":
LBB118_18:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end38:
	.section	.xdata,"dr",associative,"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.p2align	2
"L__ehtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$11@?0??init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z@4HA" # Action
	.section	.text,"xr",discard,"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
                                        # -- End function
	.def	 "??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.globl	"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z" # -- Begin function ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	.p2align	4, 0x90
"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z": # @"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
Lfunc_begin39:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	sub	ecx, dword ptr [ecx - 4]
	mov	dword ptr [ecx], offset "??_7ios_base@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	push	ecx
	call	"?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z"
	add	esp, 4
# %bb.1:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	add	esi, -24
	cmp	dword ptr [ebp + 8], 0
	je	LBB119_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB119_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA":
LBB119_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end39:
	.section	.xdata,"dr",associative,"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.p2align	2
"L__ehtable$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
                                        # -- End function
	.def	 "??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
	.globl	"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z" # -- Begin function ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	.p2align	4, 0x90
"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z": # @"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
# %bb.0:
	push	esi
	mov	eax, dword ptr [esp + 12]
	mov	esi, ecx
	push	dword ptr [esp + 8]
	push	dword ptr [eax + 4]
	push	dword ptr [eax]
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	mov	dword ptr [esi], offset "??_7failure@ios_base@std@@6B@"
	mov	eax, esi
	pop	esi
	ret	8
                                        # -- End function
	.def	 "??0failure@ios_base@std@@QAE@ABV012@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0failure@ios_base@std@@QAE@ABV012@@Z"
	.globl	"??0failure@ios_base@std@@QAE@ABV012@@Z" # -- Begin function ??0failure@ios_base@std@@QAE@ABV012@@Z
	.p2align	4, 0x90
"??0failure@ios_base@std@@QAE@ABV012@@Z": # @"??0failure@ios_base@std@@QAE@ABV012@@Z"
Lfunc_begin40:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	lea	ecx, [esi + 4]
	mov	dword ptr [ebp - 16], 0
	push	eax
	push	ecx
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [eax], offset "??_7_System_error@std@@6B@"
	mov	edx, dword ptr [ecx + 12]
	mov	ecx, dword ptr [ecx + 16]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 12], edx
	mov	dword ptr [eax], offset "??_7failure@ios_base@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0failure@ios_base@std@@QAE@ABV012@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0failure@ios_base@std@@QAE@ABV012@@Z@4HA":
LBB121_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end40:
	.section	.xdata,"dr",associative,"??0failure@ios_base@std@@QAE@ABV012@@Z"
	.p2align	2
"L__ehtable$??0failure@ios_base@std@@QAE@ABV012@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0failure@ios_base@std@@QAE@ABV012@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0failure@ios_base@std@@QAE@ABV012@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0failure@ios_base@std@@QAE@ABV012@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0failure@ios_base@std@@QAE@ABV012@@Z"
                                        # -- End function
	.def	 "??0system_error@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0system_error@std@@QAE@ABV01@@Z"
	.globl	"??0system_error@std@@QAE@ABV01@@Z" # -- Begin function ??0system_error@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0system_error@std@@QAE@ABV01@@Z":    # @"??0system_error@std@@QAE@ABV01@@Z"
Lfunc_begin41:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0system_error@std@@QAE@ABV01@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	lea	ecx, [esi + 4]
	mov	dword ptr [ebp - 16], 0
	push	eax
	push	ecx
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [eax], offset "??_7_System_error@std@@6B@"
	mov	edx, dword ptr [ecx + 12]
	mov	ecx, dword ptr [ecx + 16]
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 12], edx
	mov	dword ptr [eax], offset "??_7system_error@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0system_error@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0system_error@std@@QAE@ABV01@@Z@4HA":
LBB122_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end41:
	.section	.xdata,"dr",associative,"??0system_error@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0system_error@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0system_error@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0system_error@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0system_error@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0system_error@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0_System_error@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0_System_error@std@@QAE@ABV01@@Z"
	.globl	"??0_System_error@std@@QAE@ABV01@@Z" # -- Begin function ??0_System_error@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0_System_error@std@@QAE@ABV01@@Z":   # @"??0_System_error@std@@QAE@ABV01@@Z"
Lfunc_begin42:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0_System_error@std@@QAE@ABV01@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	lea	ecx, [esi + 4]
	mov	dword ptr [ebp - 16], 0
	push	eax
	push	ecx
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 8]
	mov	dword ptr [eax], offset "??_7_System_error@std@@6B@"
	movsd	xmm0, qword ptr [ecx + 12]      # xmm0 = mem[0],zero
	movsd	qword ptr [eax + 12], xmm0
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0_System_error@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0_System_error@std@@QAE@ABV01@@Z@4HA":
LBB123_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end42:
	.section	.xdata,"dr",associative,"??0_System_error@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0_System_error@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0_System_error@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0_System_error@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0_System_error@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0_System_error@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??0runtime_error@std@@QAE@ABV01@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0runtime_error@std@@QAE@ABV01@@Z"
	.globl	"??0runtime_error@std@@QAE@ABV01@@Z" # -- Begin function ??0runtime_error@std@@QAE@ABV01@@Z
	.p2align	4, 0x90
"??0runtime_error@std@@QAE@ABV01@@Z":   # @"??0runtime_error@std@@QAE@ABV01@@Z"
Lfunc_begin43:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z"
	mov	eax, dword ptr [ebp + 8]
	lea	esi, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	add	eax, 4
	mov	dword ptr [ebp - 24], edx
	lea	edx, [ecx + 4]
	mov	dword ptr fs:[0], esi
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 16], 0
	push	edx
	push	eax
	call	___std_exception_copy
	add	esp, 8
# %bb.1:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7runtime_error@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$2@?0???0runtime_error@std@@QAE@ABV01@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$2@?0???0runtime_error@std@@QAE@ABV01@@Z@4HA":
LBB124_2:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end43:
	.section	.xdata,"dr",associative,"??0runtime_error@std@@QAE@ABV01@@Z"
	.p2align	2
"L__ehtable$??0runtime_error@std@@QAE@ABV01@@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??0runtime_error@std@@QAE@ABV01@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0runtime_error@std@@QAE@ABV01@@Z":
	.long	-1                              # ToState
	.long	"?dtor$2@?0???0runtime_error@std@@QAE@ABV01@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0runtime_error@std@@QAE@ABV01@@Z"
                                        # -- End function
	.def	 "??_G_Iostream_error_category2@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G_Iostream_error_category2@std@@UAEPAXI@Z"
	.globl	"??_G_Iostream_error_category2@std@@UAEPAXI@Z" # -- Begin function ??_G_Iostream_error_category2@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G_Iostream_error_category2@std@@UAEPAXI@Z": # @"??_G_Iostream_error_category2@std@@UAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB125_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB125_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?name@_Iostream_error_category2@std@@UBEPBDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?name@_Iostream_error_category2@std@@UBEPBDXZ"
	.globl	"?name@_Iostream_error_category2@std@@UBEPBDXZ" # -- Begin function ?name@_Iostream_error_category2@std@@UBEPBDXZ
	.p2align	4, 0x90
"?name@_Iostream_error_category2@std@@UBEPBDXZ": # @"?name@_Iostream_error_category2@std@@UBEPBDXZ"
# %bb.0:
	mov	eax, offset "??_C@_08LLGCOLLL@iostream?$AA@"
	ret
                                        # -- End function
	.def	 "?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
	.globl	"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z" # -- Begin function ?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	.p2align	4, 0x90
"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z": # @"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	eax, dword ptr [esp + 40]
	mov	esi, dword ptr [esp + 36]
	cmp	eax, 1
	jne	LBB127_2
# %bb.1:
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	mov	al, byte ptr [esp + 12]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], offset "?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
	mov	dword ptr [esp], 21
	jmp	LBB127_5
LBB127_2:
	mov	dword ptr [esp], eax
	call	"?_Syserror_map@std@@YAPBDH@Z"
	mov	edi, eax
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	mov	dword ptr [esp], eax
	call	_strlen
	mov	ebx, eax
	cmp	eax, 15
	jbe	LBB127_3
# %bb.4:
	mov	al, byte ptr [esp + 16]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], ebx
LBB127_5:
	mov	ecx, esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	sub	esp, 12
	jmp	LBB127_6
LBB127_3:
	mov	dword ptr [esi + 16], ebx
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], esi
	call	_memmove
	mov	byte ptr [esi + ebx], 0
LBB127_6:
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	ret	8
                                        # -- End function
	.def	 "?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z"
	.globl	"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z" # -- Begin function ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	.p2align	4, 0x90
"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z": # @"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	edx, dword ptr [esp + 8]
	mov	dword ptr [eax], edx
	mov	dword ptr [eax + 4], ecx
	ret	8
                                        # -- End function
	.def	 "?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z"
	.globl	"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z" # -- Begin function ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	.p2align	4, 0x90
"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z": # @"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z"
# %bb.0:
	mov	eax, dword ptr [esp + 4]
	mov	ecx, dword ptr [ecx + 4]
	mov	edx, dword ptr [eax]
	mov	eax, dword ptr [eax + 4]
	xor	ecx, dword ptr [eax + 4]
	xor	edx, dword ptr [esp + 8]
	or	edx, ecx
	sete	al
	ret	8
                                        # -- End function
	.def	 "?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z"
	.globl	"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z" # -- Begin function ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
	.p2align	4, 0x90
"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z": # @"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z"
# %bb.0:
	push	esi
	sub	esp, 8
	mov	esi, dword ptr [esp + 20]
	mov	eax, dword ptr [ecx]
	mov	edx, esp
	push	dword ptr [esp + 16]
	push	edx
	call	dword ptr [eax + 12]
	mov	ecx, dword ptr [esp + 4]
	mov	eax, dword ptr [esp]
	mov	edx, dword ptr [esi + 4]
	mov	ecx, dword ptr [ecx + 4]
	xor	eax, dword ptr [esi]
	xor	ecx, dword ptr [edx + 4]
	or	eax, ecx
	sete	al
	add	esp, 8
	pop	esi
	ret	8
                                        # -- End function
	.def	 "??0system_error@std@@QAE@Verror_code@1@PBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.globl	"??0system_error@std@@QAE@Verror_code@1@PBD@Z" # -- Begin function ??0system_error@std@@QAE@Verror_code@1@PBD@Z
	.p2align	4, 0x90
"??0system_error@std@@QAE@Verror_code@1@PBD@Z": # @"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
Lfunc_begin44:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 48
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	mov	edi, dword ptr [ebp + 16]
	mov	ebx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	mov	eax, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], eax
	lea	eax, [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 40], 15
	mov	dword ptr [ebp - 44], 0
	mov	byte ptr [ebp - 60], 0
	push	edi
	call	_strlen
	add	esp, 4
	mov	esi, eax
	cmp	eax, 15
	jbe	LBB131_1
# %bb.2:
	sub	esp, 12
	mov	al, byte ptr [ebp - 32]
	lea	ecx, [ebp - 60]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp], esi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB131_3
LBB131_1:
	mov	dword ptr [ebp - 44], esi
	lea	eax, [ebp - 60]
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12
	mov	byte ptr [ebp + esi - 60], 0
LBB131_3:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	lea	eax, [ebp - 60]
	mov	dword ptr [ebp - 16], 1
	push	eax
	push	dword ptr [ebp + 12]
	push	ebx
	call	"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
# %bb.4:
	mov	eax, dword ptr [ebp - 40]
	cmp	eax, 16
	jb	LBB131_12
# %bb.5:
	mov	ecx, dword ptr [ebp - 60]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB131_11
# %bb.6:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB131_7
# %bb.10:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB131_11:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB131_12:
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [eax], offset "??_7system_error@std@@6B@"
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
	add	esp, 48
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB131_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$9@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA":
LBB131_9:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$13@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$13@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA":
LBB131_13:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	cmp	eax, 16
	jb	LBB131_18
# %bb.14:
	mov	ecx, dword ptr [ebp - 60]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB131_17
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB131_19
# %bb.16:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB131_17:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB131_18:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
LBB131_19:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end44:
	.section	.xdata,"dr",associative,"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.p2align	2
"L__ehtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??0system_error@std@@QAE@Verror_code@1@PBD@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0system_error@std@@QAE@Verror_code@1@PBD@Z":
	.long	-1                              # ToState
	.long	"?dtor$9@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$13@?0???0system_error@std@@QAE@Verror_code@1@PBD@Z@4HA" # Action
	.section	.text,"xr",discard,"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
                                        # -- End function
	.def	 "??_Gfailure@ios_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.globl	"??_Gfailure@ios_base@std@@UAEPAXI@Z" # -- Begin function ??_Gfailure@ios_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gfailure@ios_base@std@@UAEPAXI@Z":  # @"??_Gfailure@ios_base@std@@UAEPAXI@Z"
Lfunc_begin45:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB132_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB132_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gfailure@ios_base@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gfailure@ios_base@std@@UAEPAXI@Z@4HA":
LBB132_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end45:
	.section	.xdata,"dr",associative,"??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gfailure@ios_base@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gfailure@ios_base@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gfailure@ios_base@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gfailure@ios_base@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gfailure@ios_base@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.globl	"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z" # -- Begin function ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	.p2align	4, 0x90
"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z": # @"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
Lfunc_begin46:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 64
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	mov	esi, dword ptr [ebp + 16]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 44], esp       # 4-byte Spill
	mov	eax, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], eax
	lea	eax, [ebp - 24]
	mov	dword ptr fs:[0], eax
	push	eax
	sub	esp, 32
	mov	edi, esp
	mov	dword ptr [edi + 28], 0
	mov	dword ptr [edi + 32], 0
	mov	eax, dword ptr [esi + 16]
	cmp	dword ptr [esi + 20], 15
	jbe	LBB133_2
# %bb.1:
	mov	esi, dword ptr [esi]
LBB133_2:
	mov	ebx, edi
	add	ebx, 12
	cmp	eax, 15
	ja	LBB133_4
# %bb.3:
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [esi + 8]       # xmm1 = mem[0],zero
	mov	ecx, 15
	movsd	qword ptr [ebx + 8], xmm1
	movsd	qword ptr [ebx], xmm0
	jmp	LBB133_8
LBB133_4:
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	or	eax, 15
	mov	ecx, 2147483647
	cmp	eax, 2147483647
	cmovb	ecx, eax
	cmp	ecx, 4095
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	jb	LBB133_6
# %bb.5:
	lea	eax, [ecx + 36]
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
	add	eax, 35
	and	eax, -32
	mov	dword ptr [eax - 4], ecx
	jmp	LBB133_7
LBB133_6:
	lea	eax, [ecx + 1]
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
LBB133_7:
	mov	dword ptr [ebx], eax
	mov	ebx, dword ptr [ebp - 40]       # 4-byte Reload
	lea	ecx, [ebx + 1]
	push	ecx
	push	esi
	push	eax
	call	_memcpy
	mov	eax, ebx
	add	esp, 12
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
LBB133_8:
	mov	dword ptr [edi + 28], eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [edi + 32], ecx
	lea	esi, [ebp - 76]
	mov	dword ptr [edi + 4], eax
	mov	eax, dword ptr [ebp + 12]
	mov	dword ptr [edi + 8], eax
	mov	dword ptr [edi], esi
	call	"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	add	esp, 36
	mov	esp, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	dword ptr [ebp - 56], 15
	jbe	LBB133_10
# %bb.9:
	mov	esi, dword ptr [ebp - 76]
LBB133_10:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ecx + 8], 0
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ebp - 52], esi
	mov	byte ptr [ebp - 48], 1
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 52]
	push	eax
	push	ecx
	call	___std_exception_copy
	add	esp, 8
# %bb.11:
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [edi], offset "??_7runtime_error@std@@6B@"
	mov	eax, dword ptr [ebp - 56]
	cmp	eax, 16
	jb	LBB133_19
# %bb.12:
	mov	ecx, dword ptr [ebp - 76]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB133_18
# %bb.13:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB133_14
# %bb.17:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB133_18:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB133_19:
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [edi], offset "??_7_System_error@std@@6B@"
	mov	dword ptr [edi + 12], eax
	mov	eax, dword ptr [ebp + 12]
	mov	dword ptr [edi + 16], eax
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	lea	esp, [ebp - 12]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB133_14:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.15:
	.def	 "?dtor$16@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$16@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA":
LBB133_16:
	push	ebp
	sub	esp, 36
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$20@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA":
LBB133_20:
	push	ebp
	sub	esp, 36
	add	ebp, 12
	call	___std_terminate
Lfunc_end46:
	.section	.xdata,"dr",associative,"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.p2align	2
"L__ehtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z":
	.long	-1                              # ToState
	.long	"?dtor$20@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$16@?0???0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA" # Action
	.section	.text,"xr",discard,"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
                                        # -- End function
	.def	 "??_Gsystem_error@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gsystem_error@std@@UAEPAXI@Z"
	.globl	"??_Gsystem_error@std@@UAEPAXI@Z" # -- Begin function ??_Gsystem_error@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gsystem_error@std@@UAEPAXI@Z":      # @"??_Gsystem_error@std@@UAEPAXI@Z"
Lfunc_begin47:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB134_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB134_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gsystem_error@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gsystem_error@std@@UAEPAXI@Z@4HA":
LBB134_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end47:
	.section	.xdata,"dr",associative,"??_Gsystem_error@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gsystem_error@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gsystem_error@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gsystem_error@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gsystem_error@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gsystem_error@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.globl	"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z" # -- Begin function ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	.p2align	4, 0x90
"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z": # @"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
Lfunc_begin48:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 48
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	lea	eax, [ebp - 24]
	lea	esi, [ebp + 8]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp + 36]
	test	eax, eax
	je	LBB135_7
# %bb.1:
	mov	ecx, dword ptr [esi + 32]
	mov	edx, ecx
	sub	edx, eax
	cmp	edx, 2
	jae	LBB135_2
# %bb.5:
	mov	dword ptr [ebp - 16], 1
	sub	esp, 16
	mov	al, byte ptr [ebp - 56]
	lea	ecx, [ebp + 20]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 12], 2
	mov	dword ptr [esp + 8], offset "??_C@_02LMMGGCAJ@?3?5?$AA@"
	mov	dword ptr [esp], 2
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	jmp	LBB135_6
LBB135_2:
	lea	edx, [eax + 2]
	cmp	ecx, 16
	lea	ecx, [ebp + 20]
	mov	dword ptr [esi + 28], edx
	jb	LBB135_4
# %bb.3:
	lea	ecx, [ebp + 20]
	mov	ecx, dword ptr [ecx]
LBB135_4:
	mov	word ptr [ecx + eax], 8250
	mov	byte ptr [ecx + eax + 2], 0
LBB135_6:
	lea	esi, [ebp + 8]
	mov	dword ptr [ebp - 16], 1
LBB135_7:
	mov	ecx, dword ptr [esi + 8]
	mov	eax, dword ptr [esi + 4]
	lea	esi, [ebp - 56]
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 8]
	mov	dword ptr [ebp - 16], 1
	push	eax
	push	esi
	call	edx
# %bb.8:
	mov	eax, dword ptr [ebp - 40]
	cmp	dword ptr [ebp - 36], 15
	lea	ebx, [ebp - 56]
	jbe	LBB135_10
# %bb.9:
	mov	ebx, dword ptr [ebp - 56]
LBB135_10:
	lea	edi, [ebp + 8]
	mov	edx, dword ptr [edi + 32]
	mov	ecx, dword ptr [edi + 28]
	mov	esi, edx
	sub	esi, ecx
	cmp	esi, eax
	jae	LBB135_11
# %bb.14:
	mov	dword ptr [ebp - 16], 2
	sub	esp, 16
	mov	cl, byte ptr [ebp - 32]
	mov	byte ptr [esp + 4], cl
	lea	ecx, [ebp + 20]
	mov	dword ptr [esp + 12], eax
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], eax
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
# %bb.15:
	mov	eax, dword ptr [ebp - 36]
	lea	edi, [ebp + 8]
	cmp	eax, 16
	jae	LBB135_16
	jmp	LBB135_23
LBB135_11:
	lea	esi, [ecx + eax]
	cmp	edx, 16
	mov	dword ptr [edi + 28], esi
	lea	edi, [ebp + 20]
	jb	LBB135_13
# %bb.12:
	lea	edx, [ebp + 20]
	mov	edi, dword ptr [edx]
LBB135_13:
	add	ecx, edi
	push	eax
	push	ebx
	push	ecx
	call	_memmove
	add	esp, 12
	mov	byte ptr [edi + esi], 0
	mov	eax, dword ptr [ebp - 36]
	lea	edi, [ebp + 8]
	cmp	eax, 16
	jb	LBB135_23
LBB135_16:
	mov	ecx, dword ptr [ebp - 56]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB135_22
# %bb.17:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB135_18
# %bb.21:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB135_22:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB135_23:
	mov	ecx, dword ptr [ebp - 60]       # 4-byte Reload
	lea	eax, [ebp + 20]
	mov	dword ptr [ecx + 16], 0
	mov	dword ptr [ecx + 20], 0
	movsd	xmm0, qword ptr [eax + 16]      # xmm0 = mem[0],zero
	movsd	qword ptr [ecx + 16], xmm0
	movsd	xmm0, qword ptr [eax]           # xmm0 = mem[0],zero
	movsd	xmm1, qword ptr [eax + 8]       # xmm1 = mem[0],zero
	movsd	qword ptr [ecx + 8], xmm1
	movsd	qword ptr [ecx], xmm0
	mov	dword ptr [edi + 28], 0
	mov	dword ptr [edi + 32], 15
	mov	byte ptr [edi + 12], 0
	mov	ecx, dword ptr [ebp - 24]
	mov	eax, dword ptr [edi]
	mov	dword ptr fs:[0], ecx
	add	esp, 48
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB135_18:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.19:
	.def	 "?dtor$20@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA":
LBB135_20:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$24@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$24@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA":
LBB135_24:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	mov	eax, dword ptr [ebp - 36]
	cmp	eax, 16
	jb	LBB135_29
# %bb.25:
	mov	ecx, dword ptr [ebp - 56]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB135_28
# %bb.26:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB135_36
# %bb.27:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB135_28:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB135_29:
	mov	dword ptr [ebp - 40], 0
	mov	dword ptr [ebp - 36], 15
	mov	byte ptr [ebp - 56], 0
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB135_36:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$30@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$30@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA":
LBB135_30:
	push	ebp
	sub	esp, 16
	add	ebp, 12
	lea	eax, [ebp + 8]
	mov	eax, dword ptr [eax + 32]
	cmp	eax, 16
	jb	LBB135_35
# %bb.31:
	lea	ecx, [ebp + 20]
	lea	esi, [eax + 1]
	mov	ecx, dword ptr [ecx]
	cmp	esi, 4096
	jb	LBB135_34
# %bb.32:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB135_37
# %bb.33:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB135_34:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB135_35:
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
LBB135_37:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end48:
	.section	.xdata,"dr",associative,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.p2align	2
"L__ehtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z":
	.long	-1                              # ToState
	.long	"?dtor$20@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$30@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA" # Action
	.long	1                               # ToState
	.long	"?dtor$24@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
                                        # -- End function
	.def	 "??_G_System_error@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G_System_error@std@@UAEPAXI@Z"
	.globl	"??_G_System_error@std@@UAEPAXI@Z" # -- Begin function ??_G_System_error@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_G_System_error@std@@UAEPAXI@Z":     # @"??_G_System_error@std@@UAEPAXI@Z"
Lfunc_begin49:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_G_System_error@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB136_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB136_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_G_System_error@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_G_System_error@std@@UAEPAXI@Z@4HA":
LBB136_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end49:
	.section	.xdata,"dr",associative,"??_G_System_error@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_G_System_error@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_G_System_error@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_G_System_error@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_G_System_error@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_G_System_error@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??_Gruntime_error@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gruntime_error@std@@UAEPAXI@Z"
	.globl	"??_Gruntime_error@std@@UAEPAXI@Z" # -- Begin function ??_Gruntime_error@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gruntime_error@std@@UAEPAXI@Z":     # @"??_Gruntime_error@std@@UAEPAXI@Z"
Lfunc_begin50:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 20
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z"
	lea	eax, [ebp - 24]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	lea	eax, [ecx + 4]
	mov	dword ptr [ecx], offset "??_7exception@std@@6B@"
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	___std_exception_destroy
	add	esp, 4
# %bb.1:
	cmp	dword ptr [ebp + 8], 0
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	je	LBB137_3
# %bb.2:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB137_3:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 20
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
	.def	 "?dtor$4@?0???_Gruntime_error@std@@UAEPAXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$4@?0???_Gruntime_error@std@@UAEPAXI@Z@4HA":
LBB137_4:
	push	ebp
	push	eax
	add	ebp, 12
	call	___std_terminate
Lfunc_end50:
	.section	.xdata,"dr",associative,"??_Gruntime_error@std@@UAEPAXI@Z"
	.p2align	2
"L__ehtable$??_Gruntime_error@std@@UAEPAXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??_Gruntime_error@std@@UAEPAXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??_Gruntime_error@std@@UAEPAXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$4@?0???_Gruntime_error@std@@UAEPAXI@Z@4HA" # Action
	.section	.text,"xr",discard,"??_Gruntime_error@std@@UAEPAXI@Z"
                                        # -- End function
	.def	 "??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.globl	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z" # -- Begin function ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	.p2align	4, 0x90
"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z": # @"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
Lfunc_begin51:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	lea	ecx, [ebp - 40]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	mov	edx, dword ptr ["?id@?$ctype@D@std@@2V0locale@2@A"]
	mov	eax, dword ptr ["?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B"]
	test	edx, edx
	mov	dword ptr [ebp - 36], eax
	je	LBB138_1
# %bb.4:
	mov	eax, dword ptr [edi + 4]
	cmp	dword ptr [eax + 12], edx
	ja	LBB138_5
	jmp	LBB138_6
LBB138_1:
	lea	ecx, [ebp - 44]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	cmp	dword ptr ["?id@?$ctype@D@std@@2V0locale@2@A"], 0
	jne	LBB138_3
# %bb.2:
	mov	eax, dword ptr ["?_Id_cnt@id@locale@std@@0HA"]
	inc	eax
	mov	dword ptr ["?_Id_cnt@id@locale@std@@0HA"], eax
	mov	dword ptr ["?id@?$ctype@D@std@@2V0locale@2@A"], eax
LBB138_3:
	lea	ecx, [ebp - 44]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	edx, dword ptr ["?id@?$ctype@D@std@@2V0locale@2@A"]
	mov	eax, dword ptr [edi + 4]
	cmp	dword ptr [eax + 12], edx
	jbe	LBB138_6
LBB138_5:
	mov	ecx, dword ptr [eax + 8]
	mov	esi, dword ptr [ecx + 4*edx]
	test	esi, esi
	jne	LBB138_17
LBB138_6:
	cmp	byte ptr [eax + 20], 0
	je	LBB138_10
# %bb.7:
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"
# %bb.8:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	cmp	dword ptr [eax + 12], ecx
	jbe	LBB138_10
# %bb.9:
	mov	eax, dword ptr [eax + 8]
	mov	esi, dword ptr [eax + 4*ecx]
	test	esi, esi
	jne	LBB138_17
LBB138_10:
	mov	esi, dword ptr [ebp - 36]
	test	esi, esi
	jne	LBB138_17
# %bb.11:
	lea	eax, [ebp - 36]
	mov	dword ptr [ebp - 16], 0
	push	edi
	push	eax
	call	"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	add	esp, 8
# %bb.12:
	cmp	eax, -1
	je	LBB138_13
# %bb.15:
	mov	eax, dword ptr [ebp - 36]
	mov	dword ptr [ebp - 16], 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	push	eax
	call	"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"
	add	esp, 4
# %bb.16:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	esi, dword ptr [ebp - 36]
	mov	dword ptr ["?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B"], esi
LBB138_17:
	lea	ecx, [ebp - 40]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB138_13:
	call	"?_Throw_bad_cast@std@@YAXXZ"
# %bb.14:
	.def	 "?dtor$18@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA":
LBB138_18:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	cmp	dword ptr [ebp - 32], 0         # 4-byte Folded Reload
	je	LBB138_20
# %bb.19:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	push	1
	call	dword ptr [eax]
LBB138_20:
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$21@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA":
LBB138_21:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end51:
	.section	.xdata,"dr",associative,"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.p2align	2
"L__ehtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z":
	.long	-1                              # ToState
	.long	"?dtor$21@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$18@?0???$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
                                        # -- End function
	.def	 "?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.globl	"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z" # -- Begin function ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	.p2align	4, 0x90
"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z": # @"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
Lfunc_begin52:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 88
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB139_8
# %bb.1:
	cmp	dword ptr [edx], 0
	jne	LBB139_8
# %bb.2:
	mov	esi, dword ptr [ebp + 12]
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [esi + 4]
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	test	edx, edx
	je	LBB139_3
# %bb.4:
	mov	ecx, dword ptr [edx + 24]
	add	edx, 28
	test	ecx, ecx
	cmovne	edx, ecx
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 100]
	push	edx
	call	"??0_Locinfo@std@@QAE@PBD@Z"
	jmp	LBB139_6
LBB139_3:
	mov	edx, offset "??_C@_00CNPNBAHC@?$AA@"
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 100]
	push	edx
	call	"??0_Locinfo@std@@QAE@PBD@Z"
LBB139_6:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [ebp - 16], 1
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [eax], offset "??_7?$ctype@D@std@@6B@"
	lea	eax, [ebp - 48]
	push	eax
	call	__Getctype
	add	esp, 4
# %bb.7:
	movsd	xmm0, qword ptr [ebp - 48]      # xmm0 = mem[0],zero
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	movsd	xmm1, qword ptr [ebp - 40]      # xmm1 = mem[0],zero
	mov	eax, dword ptr [ebp + 8]
	movsd	qword ptr [ecx + 16], xmm1
	movsd	qword ptr [ecx + 8], xmm0
	mov	dword ptr [eax], ecx
	lea	ecx, [ebp - 100]
	call	"??1_Locinfo@std@@QAE@XZ"
LBB139_8:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, 2
	add	esp, 88
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$9@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA":
LBB139_9:
	push	ebp
	push	eax
	add	ebp, 12
	lea	ecx, [ebp - 100]
	call	"??1_Locinfo@std@@QAE@XZ"
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$10@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$10@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA":
LBB139_10:
	push	ebp
	push	eax
	add	ebp, 12
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??3@YAXPAX@Z"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end52:
	.section	.xdata,"dr",associative,"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.p2align	2
"L__ehtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z":
	.long	-1                              # ToState
	.long	"?dtor$10@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$9@?0??_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
                                        # -- End function
	.def	 "??_G?$ctype@D@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$ctype@D@std@@MAEPAXI@Z"
	.globl	"??_G?$ctype@D@std@@MAEPAXI@Z"  # -- Begin function ??_G?$ctype@D@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_G?$ctype@D@std@@MAEPAXI@Z":         # @"??_G?$ctype@D@std@@MAEPAXI@Z"
# %bb.0:
	push	edi
	push	esi
	mov	dword ptr [ecx], offset "??_7?$ctype@D@std@@6B@"
	mov	edi, dword ptr [esp + 12]
	mov	esi, ecx
	cmp	dword ptr [ecx + 16], 0
	jle	LBB140_2
# %bb.1:
	push	dword ptr [esi + 12]
	call	_free
LBB140_5:
	add	esp, 4
	jmp	LBB140_6
LBB140_2:
	js	LBB140_3
LBB140_6:
	push	dword ptr [esi + 20]
	call	_free
	add	esp, 4
	test	edi, edi
	je	LBB140_8
# %bb.7:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB140_8:
	mov	eax, esi
	pop	esi
	pop	edi
	ret	4
LBB140_3:
	mov	eax, dword ptr [esi + 12]
	test	eax, eax
	je	LBB140_6
# %bb.4:
	push	eax
	call	"??_V@YAXPAX@Z"
	jmp	LBB140_5
                                        # -- End function
	.def	 "?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z"
	.globl	"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z" # -- Begin function ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	.p2align	4, 0x90
"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z": # @"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	ebx, dword ptr [esp + 20]
	mov	esi, dword ptr [esp + 16]
	cmp	esi, ebx
	je	LBB141_4
# %bb.1:
	mov	edi, ecx
	add	edi, 8
	.p2align	4, 0x90
LBB141_2:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi]
	push	edi
	push	eax
	call	__Tolower
	add	esp, 8
	mov	byte ptr [esi], al
	inc	esi
	cmp	ebx, esi
	jne	LBB141_2
# %bb.3:
	mov	esi, ebx
LBB141_4:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	ret	8
                                        # -- End function
	.def	 "?do_tolower@?$ctype@D@std@@MBEDD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_tolower@?$ctype@D@std@@MBEDD@Z"
	.globl	"?do_tolower@?$ctype@D@std@@MBEDD@Z" # -- Begin function ?do_tolower@?$ctype@D@std@@MBEDD@Z
	.p2align	4, 0x90
"?do_tolower@?$ctype@D@std@@MBEDD@Z":   # @"?do_tolower@?$ctype@D@std@@MBEDD@Z"
# %bb.0:
	movzx	eax, byte ptr [esp + 4]
	add	ecx, 8
	push	ecx
	push	eax
	call	__Tolower
	add	esp, 8
                                        # kill: def $al killed $al killed $eax
	ret	4
                                        # -- End function
	.def	 "?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z"
	.globl	"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z" # -- Begin function ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	.p2align	4, 0x90
"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z": # @"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	mov	ebx, dword ptr [esp + 20]
	mov	esi, dword ptr [esp + 16]
	cmp	esi, ebx
	je	LBB143_4
# %bb.1:
	mov	edi, ecx
	add	edi, 8
	.p2align	4, 0x90
LBB143_2:                               # =>This Inner Loop Header: Depth=1
	movzx	eax, byte ptr [esi]
	push	edi
	push	eax
	call	__Toupper
	add	esp, 8
	mov	byte ptr [esi], al
	inc	esi
	cmp	ebx, esi
	jne	LBB143_2
# %bb.3:
	mov	esi, ebx
LBB143_4:
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebx
	ret	8
                                        # -- End function
	.def	 "?do_toupper@?$ctype@D@std@@MBEDD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_toupper@?$ctype@D@std@@MBEDD@Z"
	.globl	"?do_toupper@?$ctype@D@std@@MBEDD@Z" # -- Begin function ?do_toupper@?$ctype@D@std@@MBEDD@Z
	.p2align	4, 0x90
"?do_toupper@?$ctype@D@std@@MBEDD@Z":   # @"?do_toupper@?$ctype@D@std@@MBEDD@Z"
# %bb.0:
	movzx	eax, byte ptr [esp + 4]
	add	ecx, 8
	push	ecx
	push	eax
	call	__Toupper
	add	esp, 8
                                        # kill: def $al killed $al killed $eax
	ret	4
                                        # -- End function
	.def	 "?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z"
	.globl	"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z" # -- Begin function ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	.p2align	4, 0x90
"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z": # @"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z"
# %bb.0:
	push	esi
	mov	esi, dword ptr [esp + 12]
	mov	eax, dword ptr [esp + 8]
	mov	ecx, esi
	sub	ecx, eax
	push	ecx
	push	eax
	push	dword ptr [esp + 24]
	call	_memcpy
	add	esp, 12
	mov	eax, esi
	pop	esi
	ret	12
                                        # -- End function
	.def	 "?do_widen@?$ctype@D@std@@MBEDD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_widen@?$ctype@D@std@@MBEDD@Z"
	.globl	"?do_widen@?$ctype@D@std@@MBEDD@Z" # -- Begin function ?do_widen@?$ctype@D@std@@MBEDD@Z
	.p2align	4, 0x90
"?do_widen@?$ctype@D@std@@MBEDD@Z":     # @"?do_widen@?$ctype@D@std@@MBEDD@Z"
# %bb.0:
	mov	al, byte ptr [esp + 4]
	ret	4
                                        # -- End function
	.def	 "?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z"
	.globl	"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z" # -- Begin function ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	.p2align	4, 0x90
"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z": # @"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z"
# %bb.0:
	push	esi
	mov	esi, dword ptr [esp + 12]
	mov	eax, dword ptr [esp + 8]
	mov	ecx, esi
	sub	ecx, eax
	push	ecx
	push	eax
	push	dword ptr [esp + 28]
	call	_memcpy
	add	esp, 12
	mov	eax, esi
	pop	esi
	ret	16
                                        # -- End function
	.def	 "?do_narrow@?$ctype@D@std@@MBEDDD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_narrow@?$ctype@D@std@@MBEDDD@Z"
	.globl	"?do_narrow@?$ctype@D@std@@MBEDDD@Z" # -- Begin function ?do_narrow@?$ctype@D@std@@MBEDDD@Z
	.p2align	4, 0x90
"?do_narrow@?$ctype@D@std@@MBEDDD@Z":   # @"?do_narrow@?$ctype@D@std@@MBEDDD@Z"
# %bb.0:
	mov	al, byte ptr [esp + 4]
	ret	8
                                        # -- End function
	.def	 "??_Gctype_base@std@@UAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_Gctype_base@std@@UAEPAXI@Z"
	.globl	"??_Gctype_base@std@@UAEPAXI@Z" # -- Begin function ??_Gctype_base@std@@UAEPAXI@Z
	.p2align	4, 0x90
"??_Gctype_base@std@@UAEPAXI@Z":        # @"??_Gctype_base@std@@UAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB149_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB149_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.globl	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z" # -- Begin function ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
	.p2align	4, 0x90
"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z": # @"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
Lfunc_begin53:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [esi + ecx + 12]
	test	eax, eax
	je	LBB150_3
# %bb.1:
	xor	edx, edx
	cmp	dword ptr [esi + ecx + 56], 0
	sete	dl
	and	eax, 21
	shl	edx, 2
	or	eax, edx
	or	eax, 2
	mov	dword ptr [esi + ecx + 12], eax
	mov	ecx, dword ptr [esi + ecx + 16]
	and	eax, ecx
	jne	LBB150_31
# %bb.2:
	xor	eax, eax
	jmp	LBB150_30
LBB150_3:
	mov	ecx, dword ptr [esi + ecx + 60]
	mov	bl, byte ptr [ebp + 8]
	test	ecx, ecx
	je	LBB150_5
# %bb.4:
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
LBB150_5:
	test	bl, bl
	jne	LBB150_29
# %bb.6:
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	test	byte ptr [esi + eax + 20], 1
	je	LBB150_29
# %bb.7:
	mov	eax, dword ptr [esi + eax + 48]
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 64], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 68]
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	add	esp, 4
	mov	dword ptr [ebp - 48], eax       # 4-byte Spill
# %bb.8:
	mov	ecx, dword ptr [ebp - 64]
	test	ecx, ecx
	je	LBB150_11
# %bb.9:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB150_11
# %bb.10:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB150_11:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	mov	eax, dword ptr [ecx + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB150_14
# %bb.12:
	mov	edx, dword ptr [ecx + 44]
	cmp	dword ptr [edx], 0
	jle	LBB150_14
# %bb.13:
	movzx	eax, byte ptr [eax]
	jmp	LBB150_16
LBB150_14:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 24]
	mov	dword ptr [ebp - 16], 1
	call	eax
	jmp	LBB150_16
	.p2align	4, 0x90
LBB150_15:                              #   in Loop: Header=BB150_16 Depth=1
	dec	esi
	lea	ecx, [edi + 1]
	mov	dword ptr [edx], esi
	mov	dword ptr [eax], ecx
	movzx	eax, byte ptr [edi + 1]
LBB150_16:                              # =>This Inner Loop Header: Depth=1
	cmp	eax, -1
	je	LBB150_28
# %bb.17:                               #   in Loop: Header=BB150_16 Depth=1
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	eax, al
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ecx + 12]
	test	byte ptr [ecx + 2*eax], 72
	je	LBB150_29
# %bb.18:                               #   in Loop: Header=BB150_16 Depth=1
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	mov	eax, dword ptr [ecx + 28]
	mov	edi, dword ptr [eax]
	test	edi, edi
	je	LBB150_22
# %bb.19:                               #   in Loop: Header=BB150_16 Depth=1
	mov	edx, dword ptr [ecx + 44]
	mov	esi, dword ptr [edx]
	cmp	esi, 2
	jge	LBB150_15
# %bb.20:                               #   in Loop: Header=BB150_16 Depth=1
	cmp	esi, 1
	jne	LBB150_22
# %bb.21:                               #   in Loop: Header=BB150_16 Depth=1
	inc	edi
	mov	dword ptr [edx], 0
	mov	dword ptr [eax], edi
	jmp	LBB150_24
	.p2align	4, 0x90
LBB150_22:                              #   in Loop: Header=BB150_16 Depth=1
	mov	eax, dword ptr [ecx]
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 28]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
# %bb.23:                               #   in Loop: Header=BB150_16 Depth=1
	mov	edx, eax
	mov	eax, -1
	cmp	edx, -1
	je	LBB150_16
LBB150_24:                              #   in Loop: Header=BB150_16 Depth=1
	mov	eax, dword ptr [ecx + 28]
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB150_27
# %bb.25:                               #   in Loop: Header=BB150_16 Depth=1
	mov	edx, dword ptr [ecx + 44]
	cmp	dword ptr [edx], 0
	jle	LBB150_27
# %bb.26:                               #   in Loop: Header=BB150_16 Depth=1
	movzx	eax, byte ptr [eax]
	jmp	LBB150_16
	.p2align	4, 0x90
LBB150_27:                              #   in Loop: Header=BB150_16 Depth=1
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 24]
	mov	dword ptr [ebp - 16], 1
	call	eax
	jmp	LBB150_16
LBB150_28:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	xor	ecx, ecx
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [esi + edx + 56], 0
	mov	eax, dword ptr [esi + edx + 12]
	sete	cl
	and	eax, 20
	shl	ecx, 2
	or	eax, ecx
	or	eax, 3
	mov	dword ptr [esi + edx + 12], eax
	mov	ecx, dword ptr [esi + edx + 16]
	and	eax, ecx
	jne	LBB150_36
LBB150_29:
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	cmp	dword ptr [esi + eax + 12], 0
	sete	al
LBB150_30:
	mov	ecx, dword ptr [ebp - 24]
                                        # kill: def $al killed $al killed $eax
	mov	dword ptr fs:[0], ecx
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB150_31:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB150_33
# %bb.32:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB150_33:
	test	cl, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 40], 1
	mov	dword ptr [ebp - 36], offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
LBB150_34:
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	eax, edx
	lea	edx, [ebp - 40]
	lea	esi, [ebp - 68]
	mov	ecx, esi
	push	edx
	push	eax
	call	"??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	push	esi
	call	__CxxThrowException@8
LBB150_36:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB150_38
# %bb.37:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], -1
LBB150_38:
	test	cl, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 40], 1
	mov	dword ptr [ebp - 36], offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	mov	dword ptr [ebp - 16], -1
	jmp	LBB150_34
LBB150_46:                              # Block address taken
	add	ebp, 12
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB150_29
	.def	 "?dtor$39@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$39@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA":
LBB150_39:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 64]
	test	ecx, ecx
	je	LBB150_42
# %bb.40:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB150_42
# %bb.41:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB150_42:
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$43@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$43@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA":
LBB150_43:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	dword ptr [ebp - 28], esp
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB150_45
# %bb.44:
	mov	eax, offset LBB150_46
	add	esp, 8
	pop	ebp
	ret                                     # CATCHRET
LBB150_45:
	mov	dword ptr [ebp - 16], 2
	push	0
	push	0
	call	__CxxThrowException@8
Lfunc_end53:
	.section	.xdata,"dr",associative,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.p2align	2
"L__ehtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z":
	.long	-1                              # ToState
	.long	"?dtor$39@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA" # Action
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
"$tryMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z":
	.long	1                               # TryLow
	.long	1                               # TryHigh
	.long	2                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z") # HandlerArray
"$handlerMap$0$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$43@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z@4HA" # Handler
	.section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
                                        # -- End function
	.def	 "?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.globl	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ" # -- Begin function ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	.p2align	4, 0x90
"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ": # @"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
Lfunc_begin54:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 52
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	edi, dword ptr [esi + eax + 56]
	test	edi, edi
	je	LBB151_7
# %bb.1:
	mov	dword ptr [ebp - 40], esi
	mov	ecx, edi
	mov	eax, dword ptr [edi]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [esi]
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	cmp	dword ptr [esi + eax + 12], 0
	je	LBB151_8
# %bb.2:
	mov	byte ptr [ebp - 36], 0
	jmp	LBB151_3
LBB151_8:
	mov	ecx, dword ptr [esi + eax + 60]
	test	ecx, ecx
	je	LBB151_10
# %bb.9:
	cmp	ecx, esi
	je	LBB151_10
# %bb.14:
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.15:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	cmp	dword ptr [esi + eax + 12], 0
	sete	byte ptr [ebp - 36]
	jne	LBB151_3
	jmp	LBB151_16
LBB151_10:
	mov	byte ptr [ebp - 36], 1
LBB151_16:
	mov	eax, dword ptr [edi]
	mov	ecx, edi
	mov	eax, dword ptr [eax + 52]
	mov	dword ptr [ebp - 16], 3
	call	eax
# %bb.17:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB151_3
# %bb.18:
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [esi + ecx + 12]
	and	eax, 19
	or	eax, 4
	mov	dword ptr [esi + ecx + 12], eax
	mov	ecx, dword ptr [esi + ecx + 16]
	and	eax, ecx
	jne	LBB151_19
LBB151_3:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB151_5
# %bb.4:
	mov	ecx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB151_5:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB151_7
# %bb.6:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
LBB151_7:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 52
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB151_19:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB151_21
# %bb.20:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB151_21:
	test	al, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	cmove	edx, eax
	test	cl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 64]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.22:
	mov	dword ptr [ebp - 64], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 64]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.23:
	.def	 "?dtor$11@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA":
LBB151_11:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB151_13
# %bb.12:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB151_13:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$24@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$24@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA":
LBB151_24:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$25@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$25@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA":
LBB151_25:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$26@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$26@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA":
LBB151_26:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB151_28
# %bb.27:
	mov	ecx, dword ptr [ebp - 40]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB151_28:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB151_30
# %bb.29:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB151_30:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end54:
	.section	.xdata,"dr",associative,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.p2align	2
"L__ehtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ":
	.long	429065506                       # MagicNumber
	.long	4                               # MaxState
	.long	("$stateUnwindMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$24@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$25@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$26@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ@4HA" # Action
	.section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
                                        # -- End function
	.def	 "??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.globl	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ" # -- Begin function ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	.p2align	4, 0x90
"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ": # @"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
Lfunc_begin55:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ecx]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB152_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 0
	call	eax
LBB152_2:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ@4HA":
LBB152_3:
	push	ebp
	add	ebp, 12
	call	___std_terminate
Lfunc_end55:
	.section	.xdata,"dr",associative,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.p2align	2
"L__ehtable$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ":
	.long	-1                              # ToState
	.long	"?dtor$3@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ@4HA" # Action
	.section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
                                        # -- End function
	.def	 "?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.globl	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ" # -- Begin function ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	.p2align	4, 0x90
"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ": # @"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
Lfunc_begin56:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 40
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	lea	eax, [ebp - 24]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	cmp	dword ptr [ecx + eax + 12], 0
	jne	LBB153_12
# %bb.1:
	test	byte ptr [ecx + eax + 20], 2
	je	LBB153_12
# %bb.2:
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ecx + eax + 56]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 52]
	mov	dword ptr [ebp - 16], 0
	call	eax
# %bb.3:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB153_12
# %bb.4:
	mov	eax, dword ptr [edx]
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [edx + ecx + 12]
	and	eax, 19
	or	eax, 4
	mov	dword ptr [edx + ecx + 12], eax
	mov	ecx, dword ptr [edx + ecx + 16]
	and	eax, ecx
	jne	LBB153_5
LBB153_12:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 40
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB153_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB153_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
LBB153_7:
	test	al, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	cmove	edx, eax
	test	cl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 52]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 52], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 52]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.9:
LBB153_11:                              # Block address taken
	add	ebp, 12
	jmp	LBB153_12
	.def	 "?catch$10@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$10@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ@4HA":
LBB153_10:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, offset LBB153_11
	mov	dword ptr [ebp - 28], esp
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
Lfunc_end56:
	.section	.xdata,"dr",associative,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.p2align	2
"L__ehtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ":
	.long	-1                              # ToState
	.long	0                               # Action
	.long	-1                              # ToState
	.long	0                               # Action
"$tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ":
	.long	0                               # TryLow
	.long	0                               # TryHigh
	.long	1                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ") # HandlerArray
"$handlerMap$0$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$10@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ@4HA" # Handler
	.section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
                                        # -- End function
	.def	 "?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.globl	"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ" # -- Begin function ?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ
	.p2align	4, 0x90
"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ": # @"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
Lfunc_begin57:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 16
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	cmp	dword ptr [esi + 16], 0
	je	LBB154_2
# %bb.1:
	mov	dword ptr [esi + 12], 0
	mov	dword ptr [esi + 16], 0
LBB154_2:
	mov	eax, dword ptr [esi + 4]
	mov	edi, dword ptr [esi + 8]
	.p2align	4, 0x90
LBB154_3:                               # =>This Inner Loop Header: Depth=1
	test	edi, edi
	je	LBB154_4
# %bb.9:                                #   in Loop: Header=BB154_3 Depth=1
	mov	ecx, dword ptr [eax + 4*edi - 4]
	dec	edi
	test	ecx, ecx
	je	LBB154_3
# %bb.10:                               #   in Loop: Header=BB154_3 Depth=1
	push	16
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [esi + 4]
	jmp	LBB154_3
LBB154_4:
	test	eax, eax
	je	LBB154_14
# %bb.5:
	mov	ecx, dword ptr [esi + 8]
	shl	ecx, 2
	cmp	ecx, 4096
	jb	LBB154_13
# %bb.6:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB154_7
# %bb.12:
	add	ecx, 35
	mov	eax, edx
LBB154_13:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB154_14:
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 16
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB154_7:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.8:
	.def	 "?dtor$11@?0??_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$11@?0??_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ@4HA":
LBB154_11:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	call	___std_terminate
Lfunc_end57:
	.section	.xdata,"dr",associative,"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.p2align	2
"L__ehtable$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ":
	.long	-1                              # ToState
	.long	"?dtor$11@?0??_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ@4HA" # Action
	.section	.text,"xr",discard,"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
                                        # -- End function
	.def	 "??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.globl	"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z" # -- Begin function ??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z
	.p2align	4, 0x90
"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z": # @"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
Lfunc_begin58:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 36
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	test	ecx, ecx
	je	LBB155_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
LBB155_2:
	mov	dword ptr [ebp - 16], 0
	mov	ecx, esi
	push	0
	call	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
# %bb.3:
	mov	ebx, dword ptr [ebp + 8]
	xor	esi, esi
	test	al, al
	je	LBB155_19
# %bb.4:
	mov	eax, dword ptr [ebx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ebx + eax + 56]
	mov	eax, dword ptr [ecx + 28]
	mov	edx, dword ptr [eax]
	test	edx, edx
	je	LBB155_16
# %bb.5:
	mov	esi, dword ptr [ecx + 44]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jle	LBB155_16
# %bb.6:
	dec	edi
	lea	ecx, [edx + 1]
	mov	dword ptr [esi], edi
	mov	dword ptr [eax], ecx
	movzx	eax, byte ptr [edx]
	jmp	LBB155_7
LBB155_16:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 28]
	mov	dword ptr [ebp - 16], 3
	call	eax
# %bb.17:
	mov	ebx, dword ptr [ebp + 8]
	cmp	eax, -1
	je	LBB155_18
LBB155_7:
	mov	ecx, dword ptr [ebp + 12]
	xor	esi, esi
	mov	byte ptr [ecx], al
	jmp	LBB155_19
LBB155_18:
	mov	esi, 3
LBB155_19:
	mov	eax, dword ptr [ebx]
	xor	ecx, ecx
	mov	edx, dword ptr [eax + 4]
	cmp	dword ptr [ebx + edx + 56], 0
	mov	eax, dword ptr [ebx + edx + 12]
	sete	cl
	and	eax, 23
	shl	ecx, 2
	or	ecx, esi
	or	eax, ecx
	mov	dword ptr [ebx + edx + 12], eax
	and	eax, dword ptr [ebx + edx + 16]
	jne	LBB155_20
# %bb.25:
	mov	eax, dword ptr [ebx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ebx + eax + 56]
	test	ecx, ecx
	je	LBB155_27
# %bb.26:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	ebx, dword ptr [ebp + 8]
LBB155_27:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, ebx
	add	esp, 36
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB155_20:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB155_22
# %bb.21:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 2
LBB155_22:
	test	al, 2
	mov	ecx, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 2
	cmove	edx, ecx
	test	al, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 48]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.23:
	mov	dword ptr [ebp - 48], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 48]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.24:
LBB155_15:                              # Block address taken
	add	ebp, 12
	xor	esi, esi
	mov	ebx, dword ptr [ebp + 8]
	jmp	LBB155_19
	.def	 "?dtor$8@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$8@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA":
LBB155_8:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	ecx, dword ptr [ebp + 8]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB155_10
# %bb.9:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB155_10:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$11@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$11@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA":
LBB155_11:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB155_12
# %bb.14:
	mov	eax, offset LBB155_15
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
LBB155_12:
	mov	dword ptr [ebp - 16], 4
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.13:
	.def	 "?dtor$28@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$28@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA":
LBB155_28:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	ecx, dword ptr [ebp + 8]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [ecx + eax + 56]
	test	ecx, ecx
	je	LBB155_30
# %bb.29:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB155_30:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$31@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$31@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA":
LBB155_31:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end58:
	.section	.xdata,"dr",associative,"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.p2align	2
"L__ehtable$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z":
	.long	429065506                       # MagicNumber
	.long	5                               # MaxState
	.long	("$stateUnwindMap$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z":
	.long	-1                              # ToState
	.long	"?dtor$8@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$31@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$28@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA" # Action
	.long	2                               # ToState
	.long	0                               # Action
	.long	2                               # ToState
	.long	0                               # Action
"$tryMap$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z":
	.long	3                               # TryLow
	.long	3                               # TryHigh
	.long	4                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z") # HandlerArray
"$handlerMap$0$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$11@?0???$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
                                        # -- End function
	.def	 "??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z"
	.globl	"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z" # -- Begin function ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z
	.p2align	4, 0x90
"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z": # @"??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@0@V10@00@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	ecx, dword ptr [esp + 56]
	mov	esi, dword ptr [esp + 52]
	mov	ebx, dword ptr [esp + 64]
	lea	edx, [esp + 52]
	mov	dword ptr [esp + 12], 0         # 4-byte Folded Spill
	mov	dword ptr [esp + 8], 0          # 4-byte Folded Spill
	test	ecx, ecx
	je	LBB156_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp + 8], eax        # 4-byte Spill
LBB156_2:
	mov	ecx, dword ptr [edx + 16]
	mov	ebp, dword ptr [edx + 24]
	test	ecx, ecx
	je	LBB156_4
# %bb.3:
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp + 12], eax       # 4-byte Spill
LBB156_4:
	mov	ecx, dword ptr [edx + 28]
	mov	edi, dword ptr [edx + 36]
	test	ecx, ecx
	je	LBB156_7
# %bb.5:
	mov	eax, dword ptr [ecx]
	mov	dword ptr [esp + 4], eax        # 4-byte Spill
	cmp	ebx, ebp
	jne	LBB156_8
LBB156_6:
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [edx + 28]
	test	eax, eax
	jne	LBB156_23
	jmp	LBB156_29
LBB156_7:
	mov	dword ptr [esp + 4], 0          # 4-byte Folded Spill
	cmp	ebx, ebp
	je	LBB156_6
LBB156_8:
	mov	eax, edi
	sub	eax, ebp
	jne	LBB156_12
# %bb.9:
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [edx + 4]
	test	eax, eax
	je	LBB156_28
# %bb.10:
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB156_27
# %bb.11:
	mov	eax, dword ptr [eax]
	mov	edi, ebx
	mov	dword ptr [esi], eax
	jmp	LBB156_29
LBB156_12:
	mov	dword ptr [esp + 16], edi       # 4-byte Spill
	lea	edi, [ebp - 1]
	mov	ecx, ebx
	mov	dword ptr [esp + 24], eax       # 4-byte Spill
	mov	dword ptr [esp + 28], esi       # 4-byte Spill
	mov	dword ptr [esp + 20], ebp       # 4-byte Spill
	mov	dword ptr [esp], ebx            # 4-byte Spill
	.p2align	4, 0x90
LBB156_13:                              # =>This Inner Loop Header: Depth=1
	cmp	edi, ecx
	je	LBB156_15
# %bb.14:                               #   in Loop: Header=BB156_13 Depth=1
	mov	eax, dword ptr [esp + 12]       # 4-byte Reload
	mov	edx, edi
	shr	edx, 4
	mov	esi, dword ptr [eax + 8]
	mov	ebp, dword ptr [eax + 4]
	mov	eax, dword ptr [esp + 8]        # 4-byte Reload
	mov	ebx, dword ptr [eax + 4]
	mov	eax, dword ptr [eax + 8]
	dec	esi
	and	esi, edx
	mov	edx, edi
	mov	esi, dword ptr [ebp + 4*esi]
	mov	ebp, ecx
	and	edx, 15
	shr	ebp, 4
	dec	eax
	and	eax, ebp
	mov	ebp, ecx
	inc	ecx
	mov	eax, dword ptr [ebx + 4*eax]
	and	ebp, 15
	movzx	ebx, byte ptr [esi + edx]
	cmp	edi, ecx
	lea	edi, [edi - 1]
	mov	bh, byte ptr [eax + ebp]
	mov	byte ptr [eax + ebp], bl
	mov	byte ptr [esi + edx], bh
	jne	LBB156_13
LBB156_15:
	mov	eax, dword ptr [esp + 16]       # 4-byte Reload
	mov	ebp, dword ptr [esp + 20]       # 4-byte Reload
	lea	edx, [eax - 1]
	.p2align	4, 0x90
LBB156_16:                              # =>This Inner Loop Header: Depth=1
	cmp	edx, ebp
	je	LBB156_18
# %bb.17:                               #   in Loop: Header=BB156_16 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebx, dword ptr [esp + 12]       # 4-byte Reload
	mov	eax, edx
	shr	eax, 4
	mov	ecx, dword ptr [esi + 4]
	mov	esi, dword ptr [esi + 8]
	mov	edi, dword ptr [ebx + 4]
	mov	ebx, dword ptr [ebx + 8]
	dec	esi
	dec	ebx
	and	esi, eax
	mov	eax, edx
	mov	ecx, dword ptr [ecx + 4*esi]
	mov	esi, ebp
	and	eax, 15
	shr	esi, 4
	and	ebx, esi
	mov	esi, ebp
	inc	ebp
	mov	edi, dword ptr [edi + 4*ebx]
	and	esi, 15
	cmp	edx, ebp
	lea	edx, [edx - 1]
	mov	bh, byte ptr [ecx + eax]
	mov	bl, byte ptr [edi + esi]
	mov	byte ptr [edi + esi], bh
	mov	byte ptr [ecx + eax], bl
	jne	LBB156_16
LBB156_18:
	mov	ebp, dword ptr [esp + 16]       # 4-byte Reload
	cmp	dword ptr [esp], ebp            # 4-byte Folded Reload
	je	LBB156_22
# %bb.19:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	dec	ebp
	.p2align	4, 0x90
LBB156_20:                              # =>This Inner Loop Header: Depth=1
	cmp	ebp, eax
	je	LBB156_22
# %bb.21:                               #   in Loop: Header=BB156_20 Depth=1
	mov	esi, dword ptr [esp + 4]        # 4-byte Reload
	mov	ebx, dword ptr [esp + 8]        # 4-byte Reload
	mov	ecx, ebp
	shr	ecx, 4
	mov	edx, dword ptr [esi + 4]
	mov	esi, dword ptr [esi + 8]
	mov	edi, dword ptr [ebx + 4]
	mov	ebx, dword ptr [ebx + 8]
	dec	esi
	dec	ebx
	and	esi, ecx
	mov	ecx, ebp
	mov	edx, dword ptr [edx + 4*esi]
	mov	esi, eax
	and	ecx, 15
	shr	esi, 4
	and	ebx, esi
	mov	esi, eax
	inc	eax
	mov	edi, dword ptr [edi + 4*ebx]
	and	esi, 15
	cmp	ebp, eax
	lea	ebp, [ebp - 1]
	mov	bh, byte ptr [edx + ecx]
	mov	bl, byte ptr [edi + esi]
	mov	byte ptr [edi + esi], bh
	mov	byte ptr [edx + ecx], bl
	jne	LBB156_20
LBB156_22:
	mov	edi, dword ptr [esp + 24]       # 4-byte Reload
	mov	esi, dword ptr [esp + 28]       # 4-byte Reload
	lea	edx, [esp + 52]
	add	edi, dword ptr [esp]            # 4-byte Folded Reload
	mov	dword ptr [edx + 12], edi
	mov	dword ptr [esi], 0
	mov	dword ptr [esi + 4], 0
	mov	eax, dword ptr [edx + 4]
	test	eax, eax
	je	LBB156_29
LBB156_23:
	mov	eax, dword ptr [eax]
	test	eax, eax
	je	LBB156_25
# %bb.24:
	mov	eax, dword ptr [eax]
	mov	dword ptr [esi], eax
	jmp	LBB156_29
LBB156_25:
	mov	dword ptr [esi], 0
	jmp	LBB156_29
LBB156_27:
	mov	dword ptr [esi], 0
LBB156_28:
	mov	edi, ebx
LBB156_29:
	mov	dword ptr [esi + 8], edi
	mov	eax, dword ptr [edx]
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.globl	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z" # -- Begin function ?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z
	.p2align	4, 0x90
"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z": # @"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
Lfunc_begin59:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 1
	mov	edx, dword ptr [ecx + 8]
	test	edx, edx
	cmovne	eax, edx
	cmp	eax, 8
	jb	LBB157_3
	.p2align	4, 0x90
LBB157_2:
	mov	ebx, eax
	sub	ebx, edx
	cmp	ebx, edi
	jae	LBB157_5
LBB157_3:                               # =>This Inner Loop Header: Depth=1
	mov	esi, 134217727
	sub	esi, eax
	cmp	esi, eax
	jb	LBB157_22
# %bb.4:                                #   in Loop: Header=BB157_3 Depth=1
	add	eax, eax
	cmp	eax, 8
	jae	LBB157_2
	jmp	LBB157_3
LBB157_5:
	cmp	eax, 1073741824
	jae	LBB157_23
# %bb.6:
	mov	edi, dword ptr [ecx + 12]
	lea	edx, [4*eax]
	cmp	eax, 1024
	jb	LBB157_9
# %bb.7:
	cmp	eax, 1073741816
	mov	dword ptr [ebp - 16], -1
	jae	LBB157_24
# %bb.8:
	mov	esi, ecx
	add	edx, 35
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
	jmp	LBB157_10
LBB157_9:
	mov	esi, ecx
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
LBB157_10:
	shr	edi, 4
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [esi + 4]
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	lea	edx, [ecx + 4*edi]
	mov	ecx, dword ptr [esi + 8]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*edi]
	sub	esi, eax
	push	esi
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	mov	ecx, ebx
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	sub	ecx, edi
	mov	eax, dword ptr [eax + 4]
	jae	LBB157_11
# %bb.12:
	lea	ecx, [4*ebx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*ebx]
	sub	esi, eax
	push	esi
	push	eax
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
	call	_memmove
	add	esp, 12
	add	esi, edi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	push	esi
	jmp	LBB157_13
LBB157_11:
	mov	edi, ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [4*ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
	lea	eax, [esi + 4*eax]
	push	edi
	push	0
	push	eax
	call	_memset
	add	esp, 12
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
LBB157_13:
	call	_memset
	add	esp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB157_21
# %bb.14:
	mov	eax, dword ptr [esi + 8]
	shl	eax, 2
	cmp	eax, 4096
	jb	LBB157_20
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB157_16
# %bb.19:
	add	eax, 35
	mov	ecx, edx
LBB157_20:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB157_21:
	mov	dword ptr [esi + 4], edi
	add	dword ptr [esi + 8], ebx
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB157_22:
	mov	dword ptr [ebp - 16], -1
	call	"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ"
LBB157_23:
	mov	dword ptr [ebp - 16], -1
LBB157_24:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB157_16:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.17:
	.def	 "?dtor$18@?0??_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z@4HA":
LBB157_18:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end59:
	.section	.xdata,"dr",associative,"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.p2align	2
"L__ehtable$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
                                        # -- End function
	.def	 "?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ"
	.globl	"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ" # -- Begin function ?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ
	.p2align	4, 0x90
"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ": # @"?_Xlen@?$deque@EV?$allocator@E@std@@@std@@ABEXXZ"
# %bb.0:
	push	offset "??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
	.globl	"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
	.p2align	4, 0x90
"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ": # @"?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ"
# %bb.0:
	push	offset "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.globl	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z" # -- Begin function ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	.p2align	4, 0x90
"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z": # @"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
Lfunc_begin60:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	lea	ecx, [ebp - 36]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	mov	edx, dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"]
	mov	edi, dword ptr ["?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B"]
	test	edx, edx
	je	LBB160_1
# %bb.4:
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + 12], edx
	ja	LBB160_5
	jmp	LBB160_6
LBB160_1:
	lea	ecx, [ebp - 92]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	cmp	dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"], 0
	jne	LBB160_3
# %bb.2:
	mov	eax, dword ptr ["?_Id_cnt@id@locale@std@@0HA"]
	inc	eax
	mov	dword ptr ["?_Id_cnt@id@locale@std@@0HA"], eax
	mov	dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"], eax
LBB160_3:
	lea	ecx, [ebp - 92]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	edx, dword ptr ["?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"]
	mov	eax, dword ptr [esi + 4]
	cmp	dword ptr [eax + 12], edx
	jbe	LBB160_6
LBB160_5:
	mov	ecx, dword ptr [eax + 8]
	mov	esi, dword ptr [ecx + 4*edx]
	test	esi, esi
	jne	LBB160_18
LBB160_6:
	cmp	byte ptr [eax + 20], 0
	je	LBB160_10
# %bb.7:
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"
# %bb.8:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	dword ptr [eax + 12], ecx
	jbe	LBB160_10
# %bb.9:
	mov	eax, dword ptr [eax + 8]
	mov	esi, dword ptr [eax + 4*ecx]
	test	esi, esi
	jne	LBB160_18
LBB160_10:
	test	edi, edi
	mov	esi, edi
	jne	LBB160_18
# %bb.11:
	mov	dword ptr [ebp - 16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
# %bb.12:
	mov	ecx, eax
	mov	eax, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	test	eax, eax
	je	LBB160_13
# %bb.14:
	mov	ecx, dword ptr [eax + 24]
	add	eax, 28
	test	ecx, ecx
	cmovne	eax, ecx
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 92]
	push	eax
	call	"??0_Locinfo@std@@QAE@PBD@Z"
	jmp	LBB160_16
LBB160_13:
	mov	eax, offset "??_C@_00CNPNBAHC@?$AA@"
	mov	dword ptr [ebp - 16], 1
	lea	ecx, [ebp - 92]
	push	eax
	call	"??0_Locinfo@std@@QAE@PBD@Z"
LBB160_16:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [ebp - 92]
	mov	dword ptr [esi + 4], 0
	mov	dword ptr [esi], offset "??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	call	"??1_Locinfo@std@@QAE@XZ"
	mov	dword ptr [ebp - 16], 2
	push	esi
	call	"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"
	add	esp, 4
# %bb.17:
	mov	esi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [esi]
	mov	ecx, esi
	call	dword ptr [eax + 4]
	mov	dword ptr ["?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B"], esi
LBB160_18:
	lea	ecx, [ebp - 36]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$19@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$19@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA":
LBB160_19:
	push	ebp
	push	eax
	add	ebp, 12
	lea	ecx, [ebp - 36]
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$20@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$20@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA":
LBB160_20:
	push	ebp
	push	eax
	add	ebp, 12
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??3@YAXPAX@Z"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$21@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA":
LBB160_21:
	push	ebp
	push	eax
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	push	1
	call	dword ptr [eax]
	add	esp, 4
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end60:
	.section	.xdata,"dr",associative,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.p2align	2
"L__ehtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z":
	.long	-1                              # ToState
	.long	"?dtor$19@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$20@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$21@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
                                        # -- End function
	.def	 "??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z"
	.globl	"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z" # -- Begin function ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z": # @"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z"
# %bb.0:
	push	esi
	cmp	dword ptr [esp + 8], 0
	mov	esi, ecx
	je	LBB161_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB161_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 72
	mov	edi, dword ptr [esp + 92]
	movsx	ebp, byte ptr [esp + 108]
	mov	esi, ecx
	lea	ebx, [esp + 8]
	push	dword ptr [esp + 112]
	push	offset "??_C@_02BBAHNLBA@?$CFp?$AA@"
	push	64
	push	ebx
	call	_sprintf_s
	add	esp, 16
	mov	ecx, dword ptr [esp + 96]
	mov	edx, dword ptr [esp + 100]
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 32]      # xmm0 = mem[0],zero
	mov	ecx, dword ptr [esp + 136]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 24], ebx
	mov	dword ptr [esp + 20], ebp
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], esi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 72
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	24
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z";
	.scl	2;
	.type	32;
	.endef
	.globl	__xmm@7fffffffffffffff7fffffffffffffff # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	.section	.rdata,"dr",discard,__xmm@7fffffffffffffff7fffffffffffffff
	.p2align	4
__xmm@7fffffffffffffff7fffffffffffffff:
	.quad	0x7fffffffffffffff              # double NaN
	.quad	0x7fffffffffffffff              # double NaN
	.globl	__real@4202a05f20000000
	.section	.rdata,"dr",discard,__real@4202a05f20000000
	.p2align	3
__real@4202a05f20000000:
	.quad	0x4202a05f20000000              # double 1.0E+10
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
Lfunc_begin61:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 100
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	mov	dword ptr [ebp - 72], ecx       # 4-byte Spill
	mov	ebx, dword ptr [ebp + 20]
	lea	eax, [ebp - 24]
	mov	edi, 6
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	movapd	xmm0, xmmword ptr [__xmm@7fffffffffffffff7fffffffffffffff] # xmm0 = [NaN,NaN]
	mov	ecx, dword ptr fs:[0]
	andpd	xmm0, xmm1
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 32], 15
	mov	dword ptr [ebp - 36], 0
	mov	byte ptr [ebp - 52], 0
	mov	ecx, 12288
	and	ecx, dword ptr [ebx + 20]
	mov	edx, dword ptr [ebx + 24]
	cmp	ecx, 8192
	mov	esi, edx
	cmove	edi, edx
	xor	eax, eax
	neg	esi
	mov	esi, 0
	sbb	esi, dword ptr [ebx + 28]
	cmovl	edi, edx
	ucomisd	xmm0, qword ptr [__real@4202a05f20000000]
	jbe	LBB163_1
# %bb.2:
	cmp	ecx, 8192
	mov	esi, edi
	jne	LBB163_4
# %bb.3:
	lea	eax, [ebp - 56]
	movsd	qword ptr [esp], xmm1
	mov	dword ptr [esp + 8], eax
	call	_frexp
	fstp	st(0)
	mov	eax, dword ptr [ebp - 56]
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	mov	ecx, eax
	neg	ecx
	cmovl	ecx, eax
	imul	eax, ecx, 30103
	mov	ecx, 175921861
	shr	eax, 5
	mul	ecx
	mov	eax, dword ptr [ebp - 36]
	mov	esi, edx
	shr	esi, 7
	add	esi, edi
LBB163_4:
	add	esi, 50
	mov	ecx, esi
	sub	ecx, eax
	jbe	LBB163_5
LBB163_9:
	mov	edx, dword ptr [ebp - 32]
	mov	dword ptr [ebp - 68], edi       # 4-byte Spill
	mov	edi, edx
	sub	edi, eax
	cmp	edi, ecx
	jae	LBB163_10
# %bb.14:
	mov	dword ptr [ebp - 16], 1
	mov	al, byte ptr [ebp - 56]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ecx
	mov	dword ptr [esp], ecx
	lea	ecx, [ebp - 52]
	mov	dword ptr [esp + 12], 0
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	sub	esp, 16
	mov	ebx, dword ptr [ebp + 20]
	jmp	LBB163_15
LBB163_1:
	mov	esi, edi
	add	esi, 50
	mov	ecx, esi
	sub	ecx, eax
	ja	LBB163_9
LBB163_5:
	cmp	dword ptr [ebp - 32], 15
	jbe	LBB163_6
# %bb.7:
	mov	eax, dword ptr [ebp - 52]
	jmp	LBB163_8
LBB163_10:
	cmp	edx, 15
	mov	dword ptr [ebp - 36], esi
	jbe	LBB163_11
# %bb.12:
	mov	edi, dword ptr [ebp - 52]
	jmp	LBB163_13
LBB163_6:
	lea	eax, [ebp - 52]
LBB163_8:
	mov	dword ptr [ebp - 36], esi
	mov	byte ptr [eax + esi], 0
	mov	ecx, dword ptr [ebx + 20]
	mov	byte ptr [ebp - 64], 37
	test	cl, 32
	jne	LBB163_18
LBB163_17:
	lea	eax, [ebp - 63]
	test	cl, 16
	jne	LBB163_20
	jmp	LBB163_21
LBB163_11:
	lea	edi, [ebp - 52]
LBB163_13:
	add	eax, edi
	mov	dword ptr [esp + 8], ecx
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp], eax
	call	_memset
	mov	byte ptr [edi + esi], 0
LBB163_15:
	mov	edi, dword ptr [ebp - 68]       # 4-byte Reload
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	mov	ecx, dword ptr [ebx + 20]
	mov	byte ptr [ebp - 64], 37
	test	cl, 32
	je	LBB163_17
LBB163_18:
	lea	eax, [ebp - 62]
	mov	byte ptr [ebp - 63], 43
	test	cl, 16
	je	LBB163_21
LBB163_20:
	mov	byte ptr [eax], 35
	inc	eax
LBB163_21:
	mov	edx, ecx
	mov	word ptr [eax], 10798
	mov	byte ptr [eax + 2], 76
	and	edx, 12288
	test	cl, 4
	jne	LBB163_22
# %bb.24:
	mov	cl, 102
	cmp	edx, 8192
	je	LBB163_27
# %bb.25:
	cmp	edx, 4096
	setne	cl
	add	cl, cl
	or	cl, 101
	cmp	edx, 12288
	movzx	edx, cl
	mov	ecx, 97
	jmp	LBB163_26
LBB163_22:
	mov	cl, 102
	cmp	edx, 8192
	je	LBB163_27
# %bb.23:
	cmp	edx, 4096
	setne	cl
	add	cl, cl
	or	cl, 69
	cmp	edx, 12288
	movzx	edx, cl
	mov	ecx, 65
LBB163_26:
	cmovne	ecx, edx
	mov	dword ptr [ebp - 16], 1
LBB163_27:
	mov	byte ptr [eax + 3], cl
	mov	byte ptr [eax + 4], 0
	mov	eax, dword ptr [ebp - 36]
	cmp	dword ptr [ebp - 32], 15
	jbe	LBB163_28
# %bb.29:
	mov	ecx, dword ptr [ebp - 52]
	jmp	LBB163_30
LBB163_28:
	lea	ecx, [ebp - 52]
LBB163_30:
	lea	edx, [ebp - 64]
	mov	dword ptr [ebp - 16], 1
	movsd	qword ptr [esp + 16], xmm1
	mov	dword ptr [esp + 12], edi
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], ecx
	mov	dword ptr [esp + 8], edx
	call	_sprintf_s
	mov	edi, dword ptr [ebp + 20]
# %bb.31:
	mov	ebx, dword ptr [ebp + 8]
	mov	cl, byte ptr [ebp + 24]
	cmp	dword ptr [ebp - 32], 15
	lea	esi, [ebp + 12]
	jbe	LBB163_32
# %bb.33:
	mov	edx, dword ptr [ebp - 52]
	jmp	LBB163_34
LBB163_32:
	lea	edx, [ebp - 52]
LBB163_34:
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 80], xmm0
	movsd	xmm0, qword ptr [ebp - 80]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 24], edx
	movsx	edx, cl
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 16], edi
	mov	dword ptr [esp + 4], ebx
	mov	ecx, dword ptr [ebp - 72]       # 4-byte Reload
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp], ecx
	call	"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
# %bb.35:
	mov	eax, dword ptr [ebp - 32]
	mov	edi, dword ptr [ebp + 8]
	cmp	eax, 16
	jb	LBB163_43
# %bb.36:
	mov	ecx, dword ptr [ebp - 52]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB163_42
# %bb.37:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB163_38
# %bb.41:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB163_42:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB163_43:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 100
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	28
LBB163_38:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.39:
	.def	 "?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA":
LBB163_40:
	push	ebp
	sub	esp, 32
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA":
LBB163_44:
	push	ebp
	sub	esp, 32
	add	ebp, 12
	mov	eax, dword ptr [ebp - 32]
	cmp	eax, 16
	jb	LBB163_49
# %bb.45:
	mov	ecx, dword ptr [ebp - 52]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB163_48
# %bb.46:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB163_50
# %bb.47:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB163_48:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB163_49:
	add	esp, 32
	pop	ebp
	ret                                     # CLEANUPRET
LBB163_50:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end61:
	.section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.p2align	2
"L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z":
	.long	-1                              # ToState
	.long	"?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z@4HA" # Action
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
Lfunc_begin62:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 100
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	mov	dword ptr [ebp - 72], ecx       # 4-byte Spill
	mov	ebx, dword ptr [ebp + 20]
	lea	eax, [ebp - 24]
	mov	edi, 6
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	movapd	xmm0, xmmword ptr [__xmm@7fffffffffffffff7fffffffffffffff] # xmm0 = [NaN,NaN]
	mov	ecx, dword ptr fs:[0]
	andpd	xmm0, xmm1
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 32], 15
	mov	dword ptr [ebp - 36], 0
	mov	byte ptr [ebp - 52], 0
	mov	ecx, 12288
	and	ecx, dword ptr [ebx + 20]
	mov	edx, dword ptr [ebx + 24]
	cmp	ecx, 8192
	mov	esi, edx
	cmove	edi, edx
	xor	eax, eax
	neg	esi
	mov	esi, 0
	sbb	esi, dword ptr [ebx + 28]
	cmovl	edi, edx
	ucomisd	xmm0, qword ptr [__real@4202a05f20000000]
	jbe	LBB164_1
# %bb.2:
	cmp	ecx, 8192
	mov	esi, edi
	jne	LBB164_4
# %bb.3:
	lea	eax, [ebp - 56]
	movsd	qword ptr [esp], xmm1
	mov	dword ptr [esp + 8], eax
	call	_frexp
	fstp	st(0)
	mov	eax, dword ptr [ebp - 56]
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	mov	ecx, eax
	neg	ecx
	cmovl	ecx, eax
	imul	eax, ecx, 30103
	mov	ecx, 175921861
	shr	eax, 5
	mul	ecx
	mov	eax, dword ptr [ebp - 36]
	mov	esi, edx
	shr	esi, 7
	add	esi, edi
LBB164_4:
	add	esi, 50
	mov	ecx, esi
	sub	ecx, eax
	jbe	LBB164_5
LBB164_9:
	mov	edx, dword ptr [ebp - 32]
	mov	dword ptr [ebp - 68], edi       # 4-byte Spill
	mov	edi, edx
	sub	edi, eax
	cmp	edi, ecx
	jae	LBB164_10
# %bb.14:
	mov	dword ptr [ebp - 16], 1
	mov	al, byte ptr [ebp - 56]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ecx
	mov	dword ptr [esp], ecx
	lea	ecx, [ebp - 52]
	mov	dword ptr [esp + 12], 0
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	sub	esp, 16
	mov	ebx, dword ptr [ebp + 20]
	jmp	LBB164_15
LBB164_1:
	mov	esi, edi
	add	esi, 50
	mov	ecx, esi
	sub	ecx, eax
	ja	LBB164_9
LBB164_5:
	cmp	dword ptr [ebp - 32], 15
	jbe	LBB164_6
# %bb.7:
	mov	eax, dword ptr [ebp - 52]
	jmp	LBB164_8
LBB164_10:
	cmp	edx, 15
	mov	dword ptr [ebp - 36], esi
	jbe	LBB164_11
# %bb.12:
	mov	edi, dword ptr [ebp - 52]
	jmp	LBB164_13
LBB164_6:
	lea	eax, [ebp - 52]
LBB164_8:
	mov	dword ptr [ebp - 36], esi
	mov	byte ptr [eax + esi], 0
	mov	edx, dword ptr [ebx + 20]
	mov	byte ptr [ebp - 64], 37
	test	dl, 32
	jne	LBB164_18
LBB164_17:
	lea	eax, [ebp - 63]
	test	dl, 16
	jne	LBB164_20
	jmp	LBB164_21
LBB164_11:
	lea	edi, [ebp - 52]
LBB164_13:
	add	eax, edi
	mov	dword ptr [esp + 8], ecx
	mov	dword ptr [esp + 4], 0
	mov	dword ptr [esp], eax
	call	_memset
	mov	byte ptr [edi + esi], 0
LBB164_15:
	mov	edi, dword ptr [ebp - 68]       # 4-byte Reload
	movsd	xmm1, qword ptr [ebp + 28]      # xmm1 = mem[0],zero
	mov	edx, dword ptr [ebx + 20]
	mov	byte ptr [ebp - 64], 37
	test	dl, 32
	je	LBB164_17
LBB164_18:
	lea	eax, [ebp - 62]
	mov	byte ptr [ebp - 63], 43
	test	dl, 16
	je	LBB164_21
LBB164_20:
	mov	byte ptr [eax], 35
	inc	eax
LBB164_21:
	mov	ecx, edx
	mov	word ptr [eax], 10798
	and	ecx, 12288
	test	dl, 4
	jne	LBB164_22
# %bb.24:
	mov	dl, 102
	cmp	ecx, 8192
	je	LBB164_27
# %bb.25:
	cmp	ecx, 4096
	setne	dl
	add	dl, dl
	or	dl, 101
	cmp	ecx, 12288
	movzx	ecx, dl
	mov	edx, 97
	jmp	LBB164_26
LBB164_22:
	mov	dl, 102
	cmp	ecx, 8192
	je	LBB164_27
# %bb.23:
	cmp	ecx, 4096
	setne	dl
	add	dl, dl
	or	dl, 69
	cmp	ecx, 12288
	movzx	ecx, dl
	mov	edx, 65
LBB164_26:
	cmovne	edx, ecx
	mov	dword ptr [ebp - 16], 1
LBB164_27:
	mov	byte ptr [eax + 2], dl
	mov	byte ptr [eax + 3], 0
	mov	eax, dword ptr [ebp - 36]
	cmp	dword ptr [ebp - 32], 15
	jbe	LBB164_28
# %bb.29:
	mov	ecx, dword ptr [ebp - 52]
	jmp	LBB164_30
LBB164_28:
	lea	ecx, [ebp - 52]
LBB164_30:
	lea	edx, [ebp - 64]
	mov	dword ptr [ebp - 16], 1
	movsd	qword ptr [esp + 16], xmm1
	mov	dword ptr [esp + 12], edi
	mov	dword ptr [esp + 4], eax
	mov	dword ptr [esp], ecx
	mov	dword ptr [esp + 8], edx
	call	_sprintf_s
	mov	edi, dword ptr [ebp + 20]
# %bb.31:
	mov	ebx, dword ptr [ebp + 8]
	mov	cl, byte ptr [ebp + 24]
	cmp	dword ptr [ebp - 32], 15
	lea	esi, [ebp + 12]
	jbe	LBB164_32
# %bb.33:
	mov	edx, dword ptr [ebp - 52]
	jmp	LBB164_34
LBB164_32:
	lea	edx, [ebp - 52]
LBB164_34:
	movsd	xmm0, qword ptr [esi]           # xmm0 = mem[0],zero
	movsd	qword ptr [ebp - 80], xmm0
	movsd	xmm0, qword ptr [ebp - 80]      # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 24], edx
	movsx	edx, cl
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 16], edi
	mov	dword ptr [esp + 4], ebx
	mov	ecx, dword ptr [ebp - 72]       # 4-byte Reload
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp], ecx
	call	"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
# %bb.35:
	mov	eax, dword ptr [ebp - 32]
	mov	edi, dword ptr [ebp + 8]
	cmp	eax, 16
	jb	LBB164_43
# %bb.36:
	mov	ecx, dword ptr [ebp - 52]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB164_42
# %bb.37:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB164_38
# %bb.41:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB164_42:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB164_43:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 100
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	28
LBB164_38:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.39:
	.def	 "?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA":
LBB164_40:
	push	ebp
	sub	esp, 32
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA":
LBB164_44:
	push	ebp
	sub	esp, 32
	add	ebp, 12
	mov	eax, dword ptr [ebp - 32]
	cmp	eax, 16
	jb	LBB164_49
# %bb.45:
	mov	ecx, dword ptr [ebp - 52]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB164_48
# %bb.46:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB164_50
# %bb.47:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB164_48:
	mov	dword ptr [esp + 4], edx
	mov	dword ptr [esp], ecx
	call	"??3@YAXPAXI@Z"
LBB164_49:
	add	esp, 32
	pop	ebp
	ret                                     # CLEANUPRET
LBB164_50:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end62:
	.section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.p2align	2
"L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z":
	.long	-1                              # ToState
	.long	"?dtor$40@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$44@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z@4HA" # Action
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	eax, dword ptr [esp + 112]
	mov	esi, ecx
	mov	edx, dword ptr [eax + 20]
	mov	byte ptr [esp], 37
	test	dl, 32
	jne	LBB165_2
# %bb.1:
	lea	eax, [esp + 1]
	test	dl, 8
	jne	LBB165_4
	jmp	LBB165_5
LBB165_2:
	lea	eax, [esp + 2]
	mov	byte ptr [esp + 1], 43
	test	dl, 8
	je	LBB165_5
LBB165_4:
	mov	byte ptr [eax], 35
	inc	eax
LBB165_5:
	mov	ebx, dword ptr [esp + 124]
	mov	ebp, dword ptr [esp + 120]
	mov	ecx, edx
	mov	word ptr [eax], 13897
	mov	byte ptr [eax + 2], 52
	and	ecx, 3584
	cmp	ecx, 1024
	je	LBB165_6
# %bb.7:
	cmp	ecx, 2048
	jne	LBB165_8
# %bb.9:
	test	dl, 4
	sete	cl
	shl	cl, 5
	or	cl, 88
	jmp	LBB165_10
LBB165_6:
	mov	cl, 111
	jmp	LBB165_10
LBB165_8:
	mov	cl, 117
LBB165_10:
	mov	byte ptr [eax + 3], cl
	mov	byte ptr [eax + 4], 0
	mov	eax, esp
	lea	edi, [esp + 16]
	push	ebx
	push	ebp
	push	eax
	push	64
	push	edi
	call	_sprintf_s
	add	esp, 20
	lea	ecx, [esp + 104]
	movsd	xmm0, qword ptr [ecx]           # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 40]      # xmm0 = mem[0],zero
	movsx	edx, byte ptr [esp + 148]
	mov	ecx, dword ptr [esp + 144]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 24], edi
	mov	edi, dword ptr [esp + 132]
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp], esi
	mov	dword ptr [esp + 4], edi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	28
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	eax, dword ptr [esp + 112]
	mov	esi, ecx
	mov	edx, dword ptr [eax + 20]
	mov	byte ptr [esp], 37
	test	dl, 32
	jne	LBB166_2
# %bb.1:
	lea	eax, [esp + 1]
	test	dl, 8
	jne	LBB166_4
	jmp	LBB166_5
LBB166_2:
	lea	eax, [esp + 2]
	mov	byte ptr [esp + 1], 43
	test	dl, 8
	je	LBB166_5
LBB166_4:
	mov	byte ptr [eax], 35
	inc	eax
LBB166_5:
	mov	ebx, dword ptr [esp + 124]
	mov	ebp, dword ptr [esp + 120]
	mov	ecx, edx
	mov	word ptr [eax], 13897
	mov	byte ptr [eax + 2], 52
	and	ecx, 3584
	cmp	ecx, 1024
	je	LBB166_6
# %bb.7:
	cmp	ecx, 2048
	jne	LBB166_8
# %bb.9:
	test	dl, 4
	sete	cl
	shl	cl, 5
	or	cl, 88
	jmp	LBB166_10
LBB166_6:
	mov	cl, 111
	jmp	LBB166_10
LBB166_8:
	mov	cl, 100
LBB166_10:
	mov	byte ptr [eax + 3], cl
	mov	byte ptr [eax + 4], 0
	mov	eax, esp
	lea	edi, [esp + 16]
	push	ebx
	push	ebp
	push	eax
	push	64
	push	edi
	call	_sprintf_s
	add	esp, 20
	lea	ecx, [esp + 104]
	movsd	xmm0, qword ptr [ecx]           # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 40]      # xmm0 = mem[0],zero
	movsx	edx, byte ptr [esp + 148]
	mov	ecx, dword ptr [esp + 144]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 24], edi
	mov	edi, dword ptr [esp + 132]
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp], esi
	mov	dword ptr [esp + 4], edi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	28
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	eax, dword ptr [esp + 112]
	mov	esi, ecx
	mov	ebx, dword ptr [eax + 20]
	mov	byte ptr [esp + 2], 37
	test	bl, 32
	jne	LBB167_2
# %bb.1:
	lea	eax, [esp + 3]
	mov	edi, dword ptr [esp + 100]
	test	bl, 8
	jne	LBB167_4
	jmp	LBB167_5
LBB167_2:
	lea	eax, [esp + 4]
	mov	byte ptr [esp + 3], 43
	mov	edi, dword ptr [esp + 100]
	test	bl, 8
	je	LBB167_5
LBB167_4:
	mov	byte ptr [eax], 35
	inc	eax
LBB167_5:
	mov	edx, dword ptr [esp + 120]
	mov	ecx, ebx
	lea	ebp, [esp + 104]
	mov	byte ptr [eax], 108
	and	ecx, 3584
	cmp	ecx, 1024
	je	LBB167_6
# %bb.7:
	cmp	ecx, 2048
	jne	LBB167_8
# %bb.9:
	test	bl, 4
	sete	cl
	shl	cl, 5
	or	cl, 88
	jmp	LBB167_10
LBB167_6:
	mov	cl, 111
	jmp	LBB167_10
LBB167_8:
	mov	cl, 117
LBB167_10:
	mov	byte ptr [eax + 1], cl
	mov	byte ptr [eax + 2], 0
	lea	eax, [esp + 2]
	lea	ebx, [esp + 16]
	push	edx
	push	eax
	push	64
	push	ebx
	call	_sprintf_s
	add	esp, 16
	movsd	xmm0, qword ptr [ebp]           # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 40]      # xmm0 = mem[0],zero
	movsx	edx, byte ptr [esp + 148]
	mov	ecx, dword ptr [esp + 144]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 24], ebx
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], esi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	24
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	sub	esp, 80
	mov	eax, dword ptr [esp + 112]
	mov	esi, ecx
	mov	ebx, dword ptr [eax + 20]
	mov	byte ptr [esp + 2], 37
	test	bl, 32
	jne	LBB168_2
# %bb.1:
	lea	eax, [esp + 3]
	mov	edi, dword ptr [esp + 100]
	test	bl, 8
	jne	LBB168_4
	jmp	LBB168_5
LBB168_2:
	lea	eax, [esp + 4]
	mov	byte ptr [esp + 3], 43
	mov	edi, dword ptr [esp + 100]
	test	bl, 8
	je	LBB168_5
LBB168_4:
	mov	byte ptr [eax], 35
	inc	eax
LBB168_5:
	mov	edx, dword ptr [esp + 120]
	mov	ecx, ebx
	lea	ebp, [esp + 104]
	mov	byte ptr [eax], 108
	and	ecx, 3584
	cmp	ecx, 1024
	je	LBB168_6
# %bb.7:
	cmp	ecx, 2048
	jne	LBB168_8
# %bb.9:
	test	bl, 4
	sete	cl
	shl	cl, 5
	or	cl, 88
	jmp	LBB168_10
LBB168_6:
	mov	cl, 111
	jmp	LBB168_10
LBB168_8:
	mov	cl, 100
LBB168_10:
	mov	byte ptr [eax + 1], cl
	mov	byte ptr [eax + 2], 0
	lea	eax, [esp + 2]
	lea	ebx, [esp + 16]
	push	edx
	push	eax
	push	64
	push	ebx
	call	_sprintf_s
	add	esp, 16
	movsd	xmm0, qword ptr [ebp]           # xmm0 = mem[0],zero
	movsd	qword ptr [esp + 8], xmm0
	sub	esp, 32
	movsd	xmm0, qword ptr [esp + 40]      # xmm0 = mem[0],zero
	movsx	edx, byte ptr [esp + 148]
	mov	ecx, dword ptr [esp + 144]
	movsd	qword ptr [esp + 8], xmm0
	mov	dword ptr [esp + 28], eax
	mov	dword ptr [esp + 24], ebx
	mov	dword ptr [esp + 20], edx
	mov	dword ptr [esp + 16], ecx
	mov	dword ptr [esp + 4], edi
	mov	dword ptr [esp], esi
	call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	add	esp, 32
	mov	eax, edi
	add	esp, 80
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	24
                                        # -- End function
	.def	 "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	.p2align	4, 0x90
"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
Lfunc_begin63:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 96
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	mov	edx, dword ptr [ebp + 20]
	mov	esi, dword ptr [ebp + 8]
	mov	eax, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], eax
	lea	eax, [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edx
	lea	edx, [ebp + 12]
	test	byte ptr [eax + 21], 64
	jne	LBB169_2
# %bb.1:
	movsd	xmm0, qword ptr [edx]           # xmm0 = mem[0],zero
	mov	edi, eax
	movzx	eax, byte ptr [ebp + 28]
	movsd	qword ptr [ebp - 108], xmm0
	mov	edx, dword ptr [ecx]
	sub	esp, 24
	movsd	xmm0, qword ptr [ebp - 108]     # xmm0 = mem[0],zero
	movsx	ebx, byte ptr [ebp + 24]
	movsd	qword ptr [esp + 4], xmm0
	mov	dword ptr [esp + 20], eax
	mov	dword ptr [esp + 16], ebx
	mov	dword ptr [esp + 12], edi
	mov	dword ptr [esp], esi
	call	dword ptr [edx + 36]
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	jmp	LBB169_47
LBB169_2:
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 68], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 72]
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.3:
	mov	ecx, dword ptr [ebp - 68]
	mov	bl, byte ptr [ebp + 28]
	mov	esi, eax
	test	ecx, ecx
	je	LBB169_6
# %bb.4:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB169_6
# %bb.5:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB169_6:
	test	bl, bl
	mov	dword ptr [ebp - 52], 15
	mov	dword ptr [ebp - 56], 0
	mov	byte ptr [ebp - 72], 0
	je	LBB169_8
# %bb.7:
	mov	eax, dword ptr [esi]
	lea	edx, [ebp - 100]
	mov	ecx, esi
	mov	eax, dword ptr [eax + 28]
	mov	dword ptr [ebp - 16], 2
	push	edx
	call	eax
	jmp	LBB169_9
LBB169_8:
	mov	eax, dword ptr [esi]
	lea	edx, [ebp - 100]
	mov	ecx, esi
	mov	eax, dword ptr [eax + 24]
	mov	dword ptr [ebp - 16], 2
	push	edx
	call	eax
LBB169_9:
	movsd	xmm0, qword ptr [ebp - 84]      # xmm0 = mem[0],zero
	movsd	xmm2, qword ptr [ebp - 100]     # xmm2 = mem[0],zero
	movsd	xmm1, qword ptr [ebp - 92]      # xmm1 = mem[0],zero
	mov	edx, dword ptr [ebp + 20]
	xor	ecx, ecx
	movsd	qword ptr [ebp - 56], xmm0
	movsd	qword ptr [ebp - 64], xmm1
	movsd	qword ptr [ebp - 72], xmm2
	mov	eax, dword ptr [edx + 32]
	mov	edi, dword ptr [ebp - 56]
	mov	esi, eax
	mov	dword ptr [ebp - 76], edi       # 4-byte Spill
	sub	esi, edi
	cmovb	esi, ecx
	cmp	eax, 1
	mov	eax, dword ptr [edx + 36]
	sbb	eax, 0
	mov	eax, 448
	cmovl	esi, ecx
	and	eax, dword ptr [edx + 20]
	lea	edx, [ebp + 12]
	mov	ebx, dword ptr [edx + 4]
	mov	ecx, dword ptr [edx]
	cmp	eax, 64
	mov	dword ptr [ebp - 48], ebx       # 4-byte Spill
	jne	LBB169_11
# %bb.10:
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	jmp	LBB169_21
LBB169_11:
	mov	eax, ecx
	test	esi, esi
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	je	LBB169_20
# %bb.12:
	test	ebx, ebx
	je	LBB169_19
# %bb.13:
	movzx	eax, byte ptr [ebp + 24]
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	jmp	LBB169_15
	.p2align	4, 0x90
LBB169_14:                              #   in Loop: Header=BB169_15 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 24]
	mov	byte ptr [ecx], dl
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	dec	esi
	je	LBB169_20
LBB169_15:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB169_17
# %bb.16:                               #   in Loop: Header=BB169_15 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB169_14
LBB169_17:                              #   in Loop: Header=BB169_15 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 2
	push	dword ptr [ebp - 44]            # 4-byte Folded Reload
	call	eax
# %bb.18:                               #   in Loop: Header=BB169_15 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	dec	esi
	jne	LBB169_15
	jmp	LBB169_20
LBB169_19:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB169_20:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	dword ptr [ebp - 36], 0         # 4-byte Folded Spill
	and	ecx, -256
	or	ecx, eax
	lea	eax, [ebp + 12]
	mov	dword ptr [eax + 4], ebx
	mov	dword ptr [eax], ecx
LBB169_21:
	mov	eax, ecx
	cmp	dword ptr [ebp - 76], 0         # 4-byte Folded Reload
	mov	ecx, eax
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	je	LBB169_32
# %bb.23:
	test	ebx, ebx
	je	LBB169_31
# %bb.24:
	cmp	dword ptr [ebp - 52], 15
	lea	eax, [ebp - 72]
	jbe	LBB169_27
# %bb.25:
	mov	eax, dword ptr [ebp - 72]
	jmp	LBB169_27
	.p2align	4, 0x90
LBB169_26:                              #   in Loop: Header=BB169_27 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	inc	eax
	dec	dword ptr [ebp - 76]            # 4-byte Folded Spill
	je	LBB169_32
LBB169_27:                              # =>This Inner Loop Header: Depth=1
	mov	ecx, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	movzx	eax, byte ptr [eax]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB169_29
# %bb.28:                               #   in Loop: Header=BB169_27 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB169_26
LBB169_29:                              #   in Loop: Header=BB169_27 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 2
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.30:                               #   in Loop: Header=BB169_27 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	inc	eax
	dec	dword ptr [ebp - 76]            # 4-byte Folded Spill
	jne	LBB169_27
	jmp	LBB169_32
LBB169_31:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB169_32:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	lea	edx, [ebp + 12]
	mov	dword ptr [edx + 4], ebx
	and	ecx, -256
	or	eax, ecx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	dword ptr [edx], eax
	mov	eax, dword ptr [ebp + 20]
	mov	dword ptr [eax + 36], 0
	mov	dword ptr [eax + 32], 0
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	test	eax, eax
	je	LBB169_41
# %bb.33:
	test	ebx, ebx
	je	LBB169_40
# %bb.34:
	movzx	ecx, byte ptr [ebp + 24]
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	jmp	LBB169_36
	.p2align	4, 0x90
LBB169_35:                              #   in Loop: Header=BB169_36 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 24]
	mov	byte ptr [ecx], dl
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	dec	eax
	je	LBB169_41
LBB169_36:                              # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB169_38
# %bb.37:                               #   in Loop: Header=BB169_36 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB169_35
LBB169_38:                              #   in Loop: Header=BB169_36 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 2
	push	dword ptr [ebp - 44]            # 4-byte Folded Reload
	call	eax
# %bb.39:                               #   in Loop: Header=BB169_36 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp - 36]       # 4-byte Reload
	dec	eax
	jne	LBB169_36
	jmp	LBB169_41
LBB169_40:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB169_41:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 52]
	or	ecx, eax
	mov	eax, dword ptr [ebp + 8]
	cmp	edi, 16
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ebx
	jb	LBB169_46
# %bb.42:
	mov	ecx, dword ptr [ebp - 72]
	lea	edx, [edi + 1]
	cmp	edx, 4096
	jb	LBB169_45
# %bb.43:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB169_48
# %bb.44:
	add	edi, 36
	mov	ecx, esi
	mov	edx, edi
LBB169_45:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [ebp + 8]
LBB169_46:
	mov	ecx, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], ecx
LBB169_47:
	add	esp, 96
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	24
LBB169_48:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.49:
	.def	 "?dtor$50@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$50@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA":
LBB169_50:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$51@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$51@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA":
LBB169_51:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 68]
	test	ecx, ecx
	je	LBB169_54
# %bb.52:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB169_54
# %bb.53:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB169_54:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$55@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$55@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA":
LBB169_55:
	push	ebp
	sub	esp, 24
	add	ebp, 12
	mov	eax, dword ptr [ebp - 52]
	cmp	eax, 16
	jb	LBB169_60
# %bb.56:
	mov	ecx, dword ptr [ebp - 72]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB169_59
# %bb.57:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB169_61
# %bb.58:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB169_59:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB169_60:
	add	esp, 24
	pop	ebp
	ret                                     # CLEANUPRET
LBB169_61:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end63:
	.section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.p2align	2
"L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z":
	.long	429065506                       # MagicNumber
	.long	3                               # MaxState
	.long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z":
	.long	-1                              # ToState
	.long	"?dtor$51@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$50@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$55@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z@4HA" # Action
	.section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
                                        # -- End function
	.def	 "?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.globl	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z" # -- Begin function ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	.p2align	4, 0x90
"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z": # @"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
Lfunc_begin64:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 100
	mov	esi, dword ptr [ebp + 36]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	mov	edi, dword ptr [ebp + 32]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	esi, esi
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB170_2
# %bb.1:
	mov	al, byte ptr [edi]
	add	al, -43
	test	al, -3
	sete	al
	jmp	LBB170_3
LBB170_2:
	xor	eax, eax
LBB170_3:
	mov	edx, dword ptr [ebp + 24]
	movzx	ecx, al
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	ecx, 3584
	and	ecx, dword ptr [edx + 20]
	cmp	ecx, 2048
	jne	LBB170_8
# %bb.4:
	movzx	ecx, al
	lea	eax, [ecx + 2]
	cmp	eax, esi
	ja	LBB170_8
# %bb.5:
	mov	edx, dword ptr [ebp - 40]       # 4-byte Reload
	cmp	byte ptr [edi + edx], 48
	jne	LBB170_8
# %bb.6:
	mov	cl, byte ptr [ecx + edi + 1]
	or	cl, 32
	cmp	cl, 120
	jne	LBB170_8
# %bb.7:
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
LBB170_8:
	mov	eax, dword ptr [ebp + 24]
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 80], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 84]
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	push	eax
	call	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.9:
	mov	ecx, dword ptr [ebp - 80]
	mov	edi, dword ptr [ebp + 36]
	mov	esi, eax
	test	ecx, ecx
	je	LBB170_12
# %bb.10:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB170_12
# %bb.11:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB170_12:
	cmp	edi, 15
	mov	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 68], 0
	mov	byte ptr [ebp - 84], 0
	jbe	LBB170_14
# %bb.13:
	mov	dword ptr [ebp - 16], -1
	sub	esp, 12
	mov	al, byte ptr [ebp - 112]
	lea	ecx, [ebp - 84]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp], edi
	mov	dword ptr [esp + 8], 0
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	cmp	dword ptr [ebp - 64], 15
	ja	LBB170_15
	jmp	LBB170_16
LBB170_14:
	mov	dword ptr [ebp - 68], edi
	push	edi
	push	0
	lea	eax, [ebp - 84]
	push	eax
	call	_memset
	add	esp, 12
	mov	byte ptr [ebp + edi - 84], 0
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB170_16
LBB170_15:
	mov	eax, dword ptr [ebp - 84]
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
LBB170_16:
	mov	ecx, dword ptr [esi]
	mov	ebx, dword ptr [ebp + 32]
	mov	edx, dword ptr [ecx + 28]
	lea	eax, [ebx + edi]
	mov	dword ptr [ebp - 16], 3
	mov	ecx, esi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	eax
	push	ebx
	call	edx
# %bb.17:
	mov	eax, dword ptr [ebp + 24]
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 108], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 112]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.18:
	mov	ecx, dword ptr [ebp - 108]
	mov	esi, eax
	test	ecx, ecx
	je	LBB170_21
# %bb.19:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB170_21
# %bb.20:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB170_21:
	mov	eax, dword ptr [esi]
	lea	edx, [ebp - 112]
	mov	dword ptr [ebp - 56], esi       # 4-byte Spill
	mov	ecx, esi
	mov	eax, dword ptr [eax + 20]
	mov	dword ptr [ebp - 16], 3
	push	edx
	call	eax
# %bb.22:
	cmp	dword ptr [ebp - 92], 15
	lea	edx, [ebp - 112]
	jbe	LBB170_24
# %bb.23:
	mov	edx, dword ptr [ebp - 112]
LBB170_24:
	mov	al, byte ptr [edx]
	mov	ecx, dword ptr [ebp - 56]       # 4-byte Reload
	dec	al
	cmp	al, 125
	ja	LBB170_36
# %bb.25:
	mov	eax, dword ptr [ecx]
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	mov	eax, dword ptr [eax + 16]
	mov	dword ptr [ebp - 16], 5
	call	eax
	mov	byte ptr [ebp - 56], al         # 1-byte Spill
# %bb.26:
	movsx	eax, byte ptr [ebp - 56]        # 1-byte Folded Reload
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	lea	ebx, [ebp - 84]
	mov	dword ptr [ebp - 48], eax       # 4-byte Spill
	jmp	LBB170_29
	.p2align	4, 0x90
LBB170_27:                              #   in Loop: Header=BB170_29 Depth=1
	inc	eax
	lea	ecx, [esi + edi]
	lea	edx, [esi + edi + 1]
	push	eax
	push	ecx
	push	edx
	call	_memmove
	add	esp, 12
	movzx	eax, byte ptr [ebp - 56]        # 1-byte Folded Reload
	mov	byte ptr [esi + edi], al
LBB170_28:                              #   in Loop: Header=BB170_29 Depth=1
	mov	edx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	byte ptr [edx + 1], 0
	lea	eax, [edx + 1]
	cmovg	edx, eax
LBB170_29:                              # =>This Inner Loop Header: Depth=1
	movsx	eax, byte ptr [edx]
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, eax
	dec	cl
	cmp	cl, 125
	ja	LBB170_36
# %bb.30:                               #   in Loop: Header=BB170_29 Depth=1
	mov	ecx, edi
	sub	ecx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	cmp	ecx, eax
	jbe	LBB170_36
# %bb.31:                               #   in Loop: Header=BB170_29 Depth=1
	mov	ecx, dword ptr [ebp - 68]
	sub	edi, eax
	mov	eax, ecx
	sub	eax, edi
	jb	LBB170_131
# %bb.32:                               #   in Loop: Header=BB170_29 Depth=1
	mov	dword ptr [ebp - 36], edx       # 4-byte Spill
	mov	edx, dword ptr [ebp - 64]
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	cmp	edx, ecx
	jne	LBB170_34
# %bb.33:                               #   in Loop: Header=BB170_29 Depth=1
	mov	dword ptr [ebp - 16], 5
	sub	esp, 20
	movzx	eax, byte ptr [ebp - 88]
	mov	ecx, ebx
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp], 1
	mov	eax, dword ptr [ebp - 48]       # 4-byte Reload
	mov	dword ptr [esp + 16], eax
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	lea	ebx, [ebp - 84]
	jmp	LBB170_28
	.p2align	4, 0x90
LBB170_34:                              #   in Loop: Header=BB170_29 Depth=1
	inc	ecx
	cmp	edx, 15
	mov	esi, ebx
	mov	dword ptr [ebp - 68], ecx
	jbe	LBB170_27
# %bb.35:                               #   in Loop: Header=BB170_29 Depth=1
	mov	esi, dword ptr [ebp - 84]
	jmp	LBB170_27
LBB170_36:
	mov	edx, dword ptr [ebp + 24]
	mov	esi, dword ptr [ebp - 68]
	xor	ecx, ecx
	mov	eax, dword ptr [edx + 32]
	mov	dword ptr [ebp - 56], esi       # 4-byte Spill
	mov	edi, eax
	sub	edi, esi
	cmovb	edi, ecx
	cmp	eax, 1
	mov	eax, dword ptr [edx + 36]
	sbb	eax, 0
	mov	eax, 448
	cmovl	edi, ecx
	and	eax, dword ptr [edx + 20]
	mov	dword ptr [ebp - 48], edi       # 4-byte Spill
	cmp	eax, 64
	je	LBB170_42
# %bb.37:
	cmp	eax, 256
	jne	LBB170_46
# %bb.38:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	je	LBB170_56
# %bb.39:
	test	ebx, ebx
	je	LBB170_55
# %bb.40:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB170_107
# %bb.41:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB170_108
LBB170_42:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	je	LBB170_54
# %bb.43:
	test	ebx, ebx
	je	LBB170_64
# %bb.44:
	cmp	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 60], ecx       # 4-byte Spill
	jbe	LBB170_115
# %bb.45:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB170_116
LBB170_46:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 48], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	je	LBB170_67
# %bb.47:
	test	ebx, ebx
	je	LBB170_66
# %bb.48:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	jmp	LBB170_50
	.p2align	4, 0x90
LBB170_49:                              #   in Loop: Header=BB170_50 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	je	LBB170_67
LBB170_50:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB170_52
# %bb.51:                               #   in Loop: Header=BB170_50 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB170_49
LBB170_52:                              #   in Loop: Header=BB170_50 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	call	eax
# %bb.53:                               #   in Loop: Header=BB170_50 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	jne	LBB170_50
	jmp	LBB170_67
LBB170_54:
	mov	dword ptr [ebp - 60], ecx       # 4-byte Spill
	jmp	LBB170_65
LBB170_55:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB170_56:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	cmp	dword ptr [ebp - 48], 0         # 4-byte Folded Reload
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	je	LBB170_72
# %bb.57:
	test	ebx, ebx
	je	LBB170_71
# %bb.58:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	jmp	LBB170_60
	.p2align	4, 0x90
LBB170_59:                              #   in Loop: Header=BB170_60 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	je	LBB170_72
LBB170_60:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB170_62
# %bb.61:                               #   in Loop: Header=BB170_60 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB170_59
LBB170_62:                              #   in Loop: Header=BB170_60 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	call	eax
# %bb.63:                               #   in Loop: Header=BB170_60 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	jne	LBB170_60
	jmp	LBB170_72
LBB170_64:
	mov	al, 1
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
LBB170_65:
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	ecx, byte ptr [ebp - 60]        # 1-byte Folded Reload
	lea	edx, [ebp + 16]
	mov	dword ptr [edx + 4], ebx
	and	eax, -256
	jmp	LBB170_73
LBB170_66:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB170_67:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	je	LBB170_72
# %bb.68:
	test	ebx, ebx
	je	LBB170_71
# %bb.69:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB170_123
# %bb.70:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB170_124
LBB170_71:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB170_72:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	lea	edx, [ebp + 16]
	mov	dword ptr [ebp - 48], 0         # 4-byte Folded Spill
	mov	dword ptr [edx + 4], ebx
LBB170_73:
	or	ecx, eax
	mov	dword ptr [edx], ecx
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	sub	eax, dword ptr [ebp - 40]       # 4-byte Folded Reload
	je	LBB170_79
# %bb.75:
	test	ebx, ebx
	je	LBB170_78
# %bb.76:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB170_99
# %bb.77:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB170_100
LBB170_78:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB170_79:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	cmp	dword ptr [ebp - 48], 0         # 4-byte Folded Reload
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	mov	ecx, dword ptr [ebp + 24]
	mov	dword ptr [ecx + 36], 0
	mov	dword ptr [ecx + 32], 0
	je	LBB170_88
# %bb.80:
	test	ebx, ebx
	je	LBB170_87
# %bb.81:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	jmp	LBB170_83
	.p2align	4, 0x90
LBB170_82:                              #   in Loop: Header=BB170_83 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	je	LBB170_88
LBB170_83:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB170_85
# %bb.84:                               #   in Loop: Header=BB170_83 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB170_82
LBB170_85:                              #   in Loop: Header=BB170_83 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 56]            # 4-byte Folded Reload
	call	eax
# %bb.86:                               #   in Loop: Header=BB170_83 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 48]            # 4-byte Folded Spill
	jne	LBB170_83
	jmp	LBB170_88
LBB170_87:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB170_88:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	mov	esi, dword ptr [ebp + 12]
	or	ecx, eax
	mov	eax, dword ptr [ebp - 92]
	mov	dword ptr [esi], ecx
	mov	dword ptr [esi + 4], ebx
	cmp	eax, 16
	jb	LBB170_93
# %bb.89:
	mov	ecx, dword ptr [ebp - 112]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB170_92
# %bb.90:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB170_133
# %bb.91:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB170_92:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB170_93:
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB170_98
# %bb.94:
	mov	ecx, dword ptr [ebp - 84]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB170_97
# %bb.95:
	mov	edi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edi
	cmp	ecx, 32
	jae	LBB170_135
# %bb.96:
	add	eax, 36
	mov	ecx, edi
	mov	edx, eax
LBB170_97:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB170_98:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 100
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB170_99:
	lea	ecx, [ebp - 84]
LBB170_100:
	add	ecx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	jmp	LBB170_103
	.p2align	4, 0x90
LBB170_101:                             #   in Loop: Header=BB170_103 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB170_102:                             #   in Loop: Header=BB170_103 Depth=1
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB170_79
LBB170_103:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB170_105
# %bb.104:                              #   in Loop: Header=BB170_103 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB170_101
LBB170_105:                             #   in Loop: Header=BB170_103 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.106:                              #   in Loop: Header=BB170_103 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB170_102
LBB170_107:
	lea	ecx, [ebp - 84]
LBB170_108:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB170_111
	.p2align	4, 0x90
LBB170_109:                             #   in Loop: Header=BB170_111 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB170_110:                             #   in Loop: Header=BB170_111 Depth=1
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB170_56
LBB170_111:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB170_113
# %bb.112:                              #   in Loop: Header=BB170_111 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB170_109
LBB170_113:                             #   in Loop: Header=BB170_111 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.114:                              #   in Loop: Header=BB170_111 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB170_110
LBB170_115:
	lea	ecx, [ebp - 84]
LBB170_116:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	jmp	LBB170_119
	.p2align	4, 0x90
LBB170_117:                             #   in Loop: Header=BB170_119 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB170_118:                             #   in Loop: Header=BB170_119 Depth=1
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB170_65
LBB170_119:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB170_121
# %bb.120:                              #   in Loop: Header=BB170_119 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB170_117
LBB170_121:                             #   in Loop: Header=BB170_119 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.122:                              #   in Loop: Header=BB170_119 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	jmp	LBB170_118
LBB170_123:
	lea	ecx, [ebp - 84]
LBB170_124:
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB170_127
	.p2align	4, 0x90
LBB170_125:                             #   in Loop: Header=BB170_127 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB170_126:                             #   in Loop: Header=BB170_127 Depth=1
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB170_72
LBB170_127:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB170_129
# %bb.128:                              #   in Loop: Header=BB170_127 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB170_125
LBB170_129:                             #   in Loop: Header=BB170_127 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.130:                              #   in Loop: Header=BB170_127 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB170_126
LBB170_131:
	mov	dword ptr [ebp - 16], 5
	call	"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
# %bb.132:
LBB170_133:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.134:
LBB170_135:
	mov	dword ptr [ebp - 16], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.136:
	.def	 "?dtor$137@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$137@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB170_137:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$138@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$138@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB170_138:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$139@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$139@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB170_139:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 108]
	test	ecx, ecx
	je	LBB170_142
# %bb.140:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB170_142
# %bb.141:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB170_142:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$143@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$143@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB170_143:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 80]
	test	ecx, ecx
	je	LBB170_146
# %bb.144:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB170_146
# %bb.145:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB170_146:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$147@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$147@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB170_147:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 92]
	cmp	eax, 16
	jb	LBB170_152
# %bb.148:
	mov	ecx, dword ptr [ebp - 112]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB170_151
# %bb.149:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB170_153
# %bb.150:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB170_151:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB170_152:
	mov	dword ptr [ebp - 96], 0
	mov	dword ptr [ebp - 92], 15
	mov	byte ptr [ebp - 112], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB170_153:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$154@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$154@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA":
LBB170_154:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB170_159
# %bb.155:
	mov	ecx, dword ptr [ebp - 84]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB170_158
# %bb.156:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB170_160
# %bb.157:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB170_158:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB170_159:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB170_160:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end64:
	.section	.xdata,"dr",associative,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.p2align	2
"L__ehtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z":
	.long	-1                              # ToState
	.long	"?dtor$143@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$138@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$137@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$154@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$139@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$147@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
                                        # -- End function
	.def	 _sprintf_s;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,_sprintf_s
	.globl	_sprintf_s                      # -- Begin function sprintf_s
	.p2align	4, 0x90
_sprintf_s:                             # @sprintf_s
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [esp + 24]
	mov	edi, dword ptr [esp + 28]
	mov	ebx, dword ptr [esp + 32]
	lea	ebp, [esp + 36]
	mov	dword ptr [esp], ebp
	call	___local_stdio_printf_options
	push	ebp
	push	0
	push	ebx
	push	edi
	push	esi
	push	dword ptr [eax + 4]
	push	dword ptr [eax]
	call	___stdio_common_vsprintf_s
	add	esp, 28
	cmp	eax, -2
	mov	ecx, -1
	cmovle	eax, ecx
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
                                        # -- End function
	.def	 "??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.globl	"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z" # -- Begin function ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	.p2align	4, 0x90
"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z": # @"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
Lfunc_begin65:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	lea	ecx, [ebp - 40]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	mov	edx, dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"]
	mov	eax, dword ptr ["?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B"]
	test	edx, edx
	mov	dword ptr [ebp - 36], eax
	je	LBB172_1
# %bb.4:
	mov	eax, dword ptr [edi + 4]
	cmp	dword ptr [eax + 12], edx
	ja	LBB172_5
	jmp	LBB172_6
LBB172_1:
	lea	ecx, [ebp - 44]
	push	0
	call	"??0_Lockit@std@@QAE@H@Z"
	cmp	dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"], 0
	jne	LBB172_3
# %bb.2:
	mov	eax, dword ptr ["?_Id_cnt@id@locale@std@@0HA"]
	inc	eax
	mov	dword ptr ["?_Id_cnt@id@locale@std@@0HA"], eax
	mov	dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"], eax
LBB172_3:
	lea	ecx, [ebp - 44]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	edx, dword ptr ["?id@?$numpunct@D@std@@2V0locale@2@A"]
	mov	eax, dword ptr [edi + 4]
	cmp	dword ptr [eax + 12], edx
	jbe	LBB172_6
LBB172_5:
	mov	ecx, dword ptr [eax + 8]
	mov	esi, dword ptr [ecx + 4*edx]
	test	esi, esi
	jne	LBB172_17
LBB172_6:
	cmp	byte ptr [eax + 20], 0
	je	LBB172_10
# %bb.7:
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ"
# %bb.8:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [ebp + 8]
	cmp	dword ptr [eax + 12], ecx
	jbe	LBB172_10
# %bb.9:
	mov	eax, dword ptr [eax + 8]
	mov	esi, dword ptr [eax + 4*ecx]
	test	esi, esi
	jne	LBB172_17
LBB172_10:
	mov	esi, dword ptr [ebp - 36]
	test	esi, esi
	jne	LBB172_17
# %bb.11:
	lea	eax, [ebp - 36]
	mov	dword ptr [ebp - 16], 0
	push	edi
	push	eax
	call	"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	add	esp, 8
# %bb.12:
	cmp	eax, -1
	je	LBB172_13
# %bb.15:
	mov	eax, dword ptr [ebp - 36]
	mov	dword ptr [ebp - 16], 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	push	eax
	call	"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"
	add	esp, 4
# %bb.16:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	esi, dword ptr [ebp - 36]
	mov	dword ptr ["?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B"], esi
LBB172_17:
	lea	ecx, [ebp - 40]
	call	"??1_Lockit@std@@QAE@XZ"
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB172_13:
	call	"?_Throw_bad_cast@std@@YAXXZ"
# %bb.14:
	.def	 "?dtor$18@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA":
LBB172_18:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	cmp	dword ptr [ebp - 32], 0         # 4-byte Folded Reload
	je	LBB172_20
# %bb.19:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	push	1
	call	dword ptr [eax]
LBB172_20:
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$21@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$21@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA":
LBB172_21:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Lockit@std@@QAE@XZ"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end65:
	.section	.xdata,"dr",associative,"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.p2align	2
"L__ehtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z":
	.long	-1                              # ToState
	.long	"?dtor$21@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$18@?0???$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z@4HA" # Action
	.section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
                                        # -- End function
	.def	 "??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.globl	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z" # -- Begin function ??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z
	.p2align	4, 0x90
"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z": # @"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
Lfunc_begin66:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 24
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	js	LBB173_18
# %bb.1:
	mov	ebx, dword ptr [esi + 20]
	mov	ecx, edx
	mov	eax, -2147483648
	mov	dword ptr [ebp - 32], 2147483647 # 4-byte Folded Spill
	or	ecx, 15
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	js	LBB173_5
# %bb.2:
	mov	edx, ebx
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, ebx
	jb	LBB173_5
# %bb.3:
	add	edx, ebx
	cmp	ecx, edx
	cmovae	edx, ecx
	lea	eax, [edx + 1]
	cmp	eax, 4096
	jb	LBB173_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	jae	LBB173_19
LBB173_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB173_9:
	mov	al, byte ptr [ebp + 16]
	mov	ebx, dword ptr [ebp + 8]
	mov	dword ptr [esi + 16], ebx
	mov	dword ptr [esi + 20], edx
	movzx	eax, al
	push	ebx
	push	eax
	push	edi
	call	_memset
	add	esp, 12
	mov	byte ptr [edi + ebx], 0
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	cmp	ebx, 16
	jb	LBB173_17
# %bb.10:
	mov	eax, dword ptr [esi]
	lea	ecx, [ebx + 1]
	cmp	ecx, 4096
	jb	LBB173_16
# %bb.11:
	mov	edx, dword ptr [eax - 4]
	add	eax, -4
	sub	eax, edx
	cmp	eax, 32
	jae	LBB173_12
# %bb.15:
	add	ebx, 36
	mov	eax, edx
	mov	ecx, ebx
LBB173_16:
	push	ecx
	push	eax
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB173_17:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 24
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB173_6:
	test	eax, eax
	je	LBB173_7
# %bb.8:
	push	eax
	mov	edi, edx
	call	"??2@YAPAXI@Z"
	mov	edx, edi
	add	esp, 4
	mov	edi, eax
	jmp	LBB173_9
LBB173_7:
	xor	edi, edi
	mov	edx, -1
	jmp	LBB173_9
LBB173_18:
	call	"?_Xlen_string@std@@YAXXZ"
LBB173_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB173_19:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z@4HA":
LBB173_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end66:
	.section	.xdata,"dr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
                                        # -- End function
	.def	 "?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.globl	"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z" # -- Begin function ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	.p2align	4, 0x90
"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z": # @"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
Lfunc_begin67:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 72
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edx, edx
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB174_8
# %bb.1:
	cmp	dword ptr [edx], 0
	jne	LBB174_8
# %bb.2:
	mov	esi, dword ptr [ebp + 12]
	push	24
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [esi + 4]
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	test	edx, edx
	je	LBB174_3
# %bb.4:
	mov	ecx, dword ptr [edx + 24]
	add	edx, 28
	test	ecx, ecx
	cmovne	edx, ecx
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 84]
	push	edx
	call	"??0_Locinfo@std@@QAE@PBD@Z"
	jmp	LBB174_6
LBB174_3:
	mov	edx, offset "??_C@_00CNPNBAHC@?$AA@"
	mov	dword ptr [ebp - 16], 0
	lea	ecx, [ebp - 84]
	push	edx
	call	"??0_Locinfo@std@@QAE@PBD@Z"
LBB174_6:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [ebp - 16], 1
	mov	dword ptr [ecx + 4], 0
	mov	dword ptr [ecx], offset "??_7?$numpunct@D@std@@6B@"
	push	1
	lea	eax, [ebp - 84]
	push	eax
	call	"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
# %bb.7:
	mov	eax, dword ptr [ebp + 8]
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [eax], ecx
	lea	ecx, [ebp - 84]
	call	"??1_Locinfo@std@@QAE@XZ"
LBB174_8:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, 4
	add	esp, 72
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$9@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$9@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA":
LBB174_9:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	lea	ecx, [ebp - 84]
	call	"??1_Locinfo@std@@QAE@XZ"
	add	esp, 8
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$10@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$10@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA":
LBB174_10:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	push	dword ptr [ebp - 32]            # 4-byte Folded Reload
	call	"??3@YAXPAX@Z"
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end67:
	.section	.xdata,"dr",associative,"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.p2align	2
"L__ehtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z":
	.long	429065506                       # MagicNumber
	.long	2                               # MaxState
	.long	("$stateUnwindMap$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z":
	.long	-1                              # ToState
	.long	"?dtor$10@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA" # Action
	.long	0                               # ToState
	.long	"?dtor$9@?0??_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
                                        # -- End function
	.def	 "?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.globl	"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z" # -- Begin function ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	.p2align	4, 0x90
"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z": # @"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
Lfunc_begin68:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 120
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	mov	esi, ecx
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	call	_localeconv
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	lea	eax, [ebp - 132]
	push	eax
	call	__Getcvt
	add	esp, 4
	lea	eax, [ebp - 88]
	mov	dword ptr [esi + 8], 0
	mov	dword ptr [esi + 16], 0
	mov	dword ptr [esi + 20], 0
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	push	eax
	call	__Getcvt
	add	esp, 4
# %bb.1:
	mov	bh, byte ptr [ebp + 12]
	mov	edi, offset "??_C@_00CNPNBAHC@?$AA@"
	test	bh, bh
	jne	LBB175_3
# %bb.2:
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	edi, dword ptr [eax + 8]
LBB175_3:
	push	edi
	call	_strlen
	add	esp, 4
	mov	esi, eax
	inc	esi
	push	1
	push	esi
	call	_calloc
	add	esp, 8
	test	eax, eax
	je	LBB175_18
# %bb.4:
	test	esi, esi
	je	LBB175_14
# %bb.5:
	cmp	esi, 31
	jbe	LBB175_6
# %bb.9:
	lea	ecx, [edi + esi]
	cmp	eax, ecx
	jae	LBB175_11
# %bb.10:
	lea	ecx, [eax + esi]
	cmp	edi, ecx
	jae	LBB175_11
LBB175_6:
	mov	ecx, eax
	mov	edx, edi
LBB175_7:
	xor	edi, edi
	.p2align	4, 0x90
LBB175_8:                               # =>This Inner Loop Header: Depth=1
	mov	bl, byte ptr [edx + edi]
	mov	byte ptr [ecx + edi], bl
	inc	edi
	cmp	esi, edi
	jne	LBB175_8
LBB175_14:
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	dword ptr [esi + 8], eax
	push	1
	push	6
	call	_calloc
	add	esp, 8
	test	eax, eax
	je	LBB175_20
# %bb.15:
	mov	dword ptr [eax], 1936482662
	mov	byte ptr [eax + 4], 101
	mov	dword ptr [esi + 16], eax
	push	1
	push	5
	call	_calloc
	add	esp, 8
	test	eax, eax
	je	LBB175_22
# %bb.16:
	test	bh, bh
	mov	dword ptr [eax], 1702195828
	mov	dword ptr [esi + 20], eax
	je	LBB175_24
# %bb.17:
	mov	byte ptr [esi + 12], 46
	mov	al, 44
	jmp	LBB175_25
LBB175_24:
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	al, byte ptr [eax]
	mov	byte ptr [esi + 12], al
	mov	eax, dword ptr [ecx + 4]
	mov	al, byte ptr [eax]
LBB175_25:
	mov	byte ptr [esi + 13], al
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 120
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	8
LBB175_11:
	mov	edx, esi
	mov	ecx, eax
	mov	dword ptr [ebp - 44], esi       # 4-byte Spill
	and	esi, 31
	xor	ebx, ebx
	and	edx, -32
	add	ecx, edx
	mov	dword ptr [ebp - 40], edx       # 4-byte Spill
	add	edx, edi
	.p2align	4, 0x90
LBB175_12:                              # =>This Inner Loop Header: Depth=1
	movups	xmm0, xmmword ptr [edi + ebx]
	movups	xmm1, xmmword ptr [edi + ebx + 16]
	movups	xmmword ptr [eax + ebx], xmm0
	movups	xmmword ptr [eax + ebx + 16], xmm1
	add	ebx, 32
	cmp	dword ptr [ebp - 40], ebx       # 4-byte Folded Reload
	jne	LBB175_12
# %bb.13:
	mov	edi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	bh, byte ptr [ebp + 12]
	cmp	dword ptr [ebp - 44], edi       # 4-byte Folded Reload
	jne	LBB175_7
	jmp	LBB175_14
LBB175_18:
	call	"?_Xbad_alloc@std@@YAXXZ"
# %bb.19:
LBB175_20:
	mov	dword ptr [ebp - 16], 0
	call	"?_Xbad_alloc@std@@YAXXZ"
# %bb.21:
LBB175_22:
	mov	dword ptr [ebp - 16], 0
	call	"?_Xbad_alloc@std@@YAXXZ"
# %bb.23:
	.def	 "?dtor$26@?0??_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$26@?0??_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z@4HA":
LBB175_26:
	push	ebp
	sub	esp, 8
	add	ebp, 12
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	push	dword ptr [esi + 8]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 16]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 20]
	call	_free
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end68:
	.section	.xdata,"dr",associative,"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.p2align	2
"L__ehtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z":
	.long	-1                              # ToState
	.long	"?dtor$26@?0??_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
                                        # -- End function
	.def	 "??_G?$numpunct@D@std@@MAEPAXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??_G?$numpunct@D@std@@MAEPAXI@Z"
	.globl	"??_G?$numpunct@D@std@@MAEPAXI@Z" # -- Begin function ??_G?$numpunct@D@std@@MAEPAXI@Z
	.p2align	4, 0x90
"??_G?$numpunct@D@std@@MAEPAXI@Z":      # @"??_G?$numpunct@D@std@@MAEPAXI@Z"
# %bb.0:
	push	esi
	mov	esi, ecx
	mov	dword ptr [ecx], offset "??_7?$numpunct@D@std@@6B@"
	push	dword ptr [ecx + 8]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 16]
	call	_free
	add	esp, 4
	push	dword ptr [esi + 20]
	call	_free
	add	esp, 4
	cmp	dword ptr [esp + 8], 0
	je	LBB176_2
# %bb.1:
	push	esi
	call	"??3@YAXPAX@Z"
	add	esp, 4
LBB176_2:
	mov	eax, esi
	pop	esi
	ret	4
                                        # -- End function
	.def	 "?do_decimal_point@?$numpunct@D@std@@MBEDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_decimal_point@?$numpunct@D@std@@MBEDXZ"
	.globl	"?do_decimal_point@?$numpunct@D@std@@MBEDXZ" # -- Begin function ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	.p2align	4, 0x90
"?do_decimal_point@?$numpunct@D@std@@MBEDXZ": # @"?do_decimal_point@?$numpunct@D@std@@MBEDXZ"
# %bb.0:
	mov	al, byte ptr [ecx + 12]
	ret
                                        # -- End function
	.def	 "?do_thousands_sep@?$numpunct@D@std@@MBEDXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ"
	.globl	"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ" # -- Begin function ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	.p2align	4, 0x90
"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ": # @"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ"
# %bb.0:
	mov	al, byte ptr [ecx + 13]
	ret
                                        # -- End function
	.def	 "?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.globl	"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	.p2align	4, 0x90
"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [esp + 20]
	mov	ebx, dword ptr [ecx + 8]
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	push	ebx
	call	_strlen
	add	esp, 4
	mov	edi, eax
	cmp	eax, 15
	jbe	LBB179_1
# %bb.2:
	sub	esp, 12
	mov	al, byte ptr [esp + 12]
	mov	ecx, esi
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], edi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB179_3
LBB179_1:
	mov	dword ptr [esi + 16], edi
	push	edi
	push	ebx
	push	esi
	call	_memmove
	add	esp, 12
	mov	byte ptr [esi + edi], 0
LBB179_3:
	mov	eax, esi
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.globl	"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	.p2align	4, 0x90
"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [esp + 20]
	mov	ebx, dword ptr [ecx + 16]
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	push	ebx
	call	_strlen
	add	esp, 4
	mov	edi, eax
	cmp	eax, 15
	jbe	LBB180_1
# %bb.2:
	sub	esp, 12
	mov	al, byte ptr [esp + 12]
	mov	ecx, esi
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], edi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB180_3
LBB180_1:
	mov	dword ptr [esi + 16], edi
	push	edi
	push	ebx
	push	esi
	call	_memmove
	add	esp, 12
	mov	byte ptr [esi + edi], 0
LBB180_3:
	mov	eax, esi
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.globl	"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	.p2align	4, 0x90
"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
	push	ebx
	push	edi
	push	esi
	push	eax
	mov	esi, dword ptr [esp + 20]
	mov	ebx, dword ptr [ecx + 20]
	mov	dword ptr [esi + 20], 15
	mov	dword ptr [esi + 16], 0
	mov	byte ptr [esi], 0
	push	ebx
	call	_strlen
	add	esp, 4
	mov	edi, eax
	cmp	eax, 15
	jbe	LBB181_1
# %bb.2:
	sub	esp, 12
	mov	al, byte ptr [esp + 12]
	mov	ecx, esi
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], ebx
	mov	dword ptr [esp], edi
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	LBB181_3
LBB181_1:
	mov	dword ptr [esi + 16], edi
	push	edi
	push	ebx
	push	esi
	call	_memmove
	add	esp, 12
	mov	byte ptr [esi + edi], 0
LBB181_3:
	mov	eax, esi
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	ret	4
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
Lfunc_begin69:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	mov	ebx, ecx
	lea	eax, [ebp - 24]
	mov	esi, dword ptr [ebp + 8]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	ecx, dword ptr [ebx + 16]
	sub	eax, ecx
	cmp	eax, esi
	jb	LBB182_19
# %bb.1:
	mov	edi, dword ptr [ebx + 20]
	add	esi, ecx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	dword ptr [ebp - 32], 2147483647 # 4-byte Folded Spill
	mov	ecx, esi
	or	ecx, 15
	js	LBB182_5
# %bb.2:
	mov	edx, edi
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	mov	esi, edi
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, esi
	mov	edi, esi
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	jb	LBB182_5
# %bb.3:
	add	edx, edi
	cmp	ecx, edx
	cmovae	edx, ecx
	lea	eax, [edx + 1]
	cmp	eax, 4096
	jb	LBB182_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	jae	LBB182_20
LBB182_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
LBB182_9:
	mov	dword ptr [ebx + 16], esi
	mov	esi, dword ptr [ebp + 16]
	cmp	edi, 16
	mov	dword ptr [ebx + 20], edx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	jb	LBB182_17
# %bb.10:
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	mov	edi, dword ptr [ebx]
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	push	esi
	push	edi
	push	ecx
	mov	ebx, ecx
	call	_memcpy
	add	esp, 12
	movzx	eax, byte ptr [ebp + 24]
	mov	ecx, dword ptr [ebp + 20]
	add	ebx, esi
	push	ecx
	push	eax
	push	ebx
	call	_memset
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	ebx, dword ptr [ebp + 20]
	sub	eax, esi
	add	esi, edi
	inc	eax
	push	eax
	push	esi
	push	ebx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	edx, eax
	inc	eax
	cmp	eax, 4096
	jb	LBB182_16
# %bb.11:
	mov	ecx, dword ptr [edi - 4]
	add	edi, -4
	sub	edi, ecx
	cmp	edi, 32
	jae	LBB182_12
# %bb.15:
	mov	eax, edx
	mov	edi, ecx
	add	eax, 36
LBB182_16:
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	push	eax
	push	edi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB182_18
LBB182_17:
	push	esi
	push	ebx
	push	ecx
	call	_memcpy
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp + 20]
	lea	edi, [eax + esi]
	movzx	eax, byte ptr [ebp + 24]
	push	ecx
	push	eax
	push	edi
	call	_memset
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	edi, dword ptr [ebp + 20]
	sub	eax, esi
	add	esi, ebx
	inc	eax
	push	eax
	push	esi
	push	edi
	call	_memcpy
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
LBB182_18:
	mov	dword ptr [ebx], eax
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, ebx
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	20
LBB182_6:
	test	eax, eax
	je	LBB182_7
# %bb.8:
	push	eax
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	call	"??2@YAPAXI@Z"
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 4
	mov	ecx, eax
	jmp	LBB182_9
LBB182_7:
	xor	ecx, ecx
	mov	edx, -1
	jmp	LBB182_9
LBB182_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB182_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB182_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z@4HA":
LBB182_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end69:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
                                        # -- End function
	.def	 ___local_stdio_printf_options;
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,___local_stdio_printf_options
	.globl	___local_stdio_printf_options   # -- Begin function __local_stdio_printf_options
	.p2align	4, 0x90
___local_stdio_printf_options:          # @__local_stdio_printf_options
# %bb.0:
	mov	eax, offset "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	ret
                                        # -- End function
	.def	 "?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.globl	"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z" # -- Begin function ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
	.p2align	4, 0x90
"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z": # @"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
Lfunc_begin70:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 100
	mov	edi, dword ptr [ebp + 36]
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	mov	ebx, dword ptr [ebp + 32]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	test	edi, edi
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	je	LBB184_2
# %bb.1:
	mov	al, byte ptr [ebx]
	add	al, -43
	test	al, -3
	sete	dl
	jmp	LBB184_3
LBB184_2:
	xor	edx, edx
LBB184_3:
	mov	eax, dword ptr [ebp + 24]
	mov	esi, 12288
	movzx	ecx, dl
	and	esi, dword ptr [eax + 20]
	mov	eax, offset "??_C@_02MDKMJEGG@eE?$AA@"
	cmp	esi, 12288
	jne	LBB184_7
# %bb.4:
	movzx	edx, dl
	mov	eax, offset "??_C@_02OOPEBDOJ@pP?$AA@"
	lea	esi, [edx + 2]
	cmp	esi, edi
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	ja	LBB184_7
# %bb.5:
	cmp	byte ptr [ebx + ecx], 48
	jne	LBB184_7
# %bb.6:
	mov	dl, byte ptr [edx + ebx + 1]
	or	dl, 32
	cmp	dl, 120
	je	LBB184_8
LBB184_7:
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
LBB184_8:
	push	eax
	push	ebx
	call	_strcspn
	add	esp, 8
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	mov	word ptr [ebp - 86], 46
	call	_localeconv
	mov	eax, dword ptr [eax]
	mov	al, byte ptr [eax]
	mov	byte ptr [ebp - 86], al
	lea	eax, [ebp - 86]
	push	eax
	push	ebx
	call	_strcspn
	add	esp, 8
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	mov	eax, dword ptr [ebp + 24]
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 80], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 84]
	mov	dword ptr [ebp - 16], 0
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	push	eax
	call	"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.9:
	mov	ecx, dword ptr [ebp - 80]
	mov	edi, dword ptr [ebp + 36]
	mov	esi, eax
	test	ecx, ecx
	je	LBB184_12
# %bb.10:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB184_12
# %bb.11:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB184_12:
	mov	ebx, dword ptr [ebp + 32]
	cmp	edi, 15
	mov	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 68], 0
	mov	byte ptr [ebp - 84], 0
	jbe	LBB184_14
# %bb.13:
	mov	dword ptr [ebp - 16], -1
	sub	esp, 12
	mov	al, byte ptr [ebp - 112]
	lea	ecx, [ebp - 84]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp], edi
	mov	dword ptr [esp + 8], 0
	call	"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	cmp	dword ptr [ebp - 64], 15
	ja	LBB184_15
	jmp	LBB184_16
LBB184_14:
	mov	dword ptr [ebp - 68], edi
	push	edi
	push	0
	lea	eax, [ebp - 84]
	push	eax
	call	_memset
	add	esp, 12
	mov	byte ptr [ebp + edi - 84], 0
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB184_16
LBB184_15:
	mov	eax, dword ptr [ebp - 84]
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
LBB184_16:
	mov	ecx, dword ptr [esi]
	lea	eax, [ebx + edi]
	mov	edx, dword ptr [ecx + 28]
	mov	dword ptr [ebp - 16], 3
	mov	ecx, esi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	eax
	push	ebx
	call	edx
# %bb.17:
	mov	eax, dword ptr [ebp + 24]
	mov	eax, dword ptr [eax + 48]
	mov	ecx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 108], ecx
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	lea	eax, [ebp - 112]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	add	esp, 4
# %bb.18:
	mov	ecx, dword ptr [ebp - 108]
	mov	esi, eax
	test	ecx, ecx
	je	LBB184_21
# %bb.19:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB184_21
# %bb.20:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB184_21:
	mov	eax, dword ptr [esi]
	lea	edx, [ebp - 112]
	mov	ecx, esi
	mov	eax, dword ptr [eax + 20]
	mov	dword ptr [ebp - 16], 3
	push	edx
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	call	eax
# %bb.22:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 16]
	mov	dword ptr [ebp - 16], 5
	call	eax
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ebx, [ebp - 112]
	mov	byte ptr [ebp - 60], al         # 1-byte Spill
# %bb.23:
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	eax, dword ptr [ebp + 36]
	je	LBB184_29
# %bb.24:
	mov	ecx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 12]
	lea	ebx, [ebp - 112]
# %bb.25:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB184_27
# %bb.26:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB184_28
LBB184_27:
	lea	ecx, [ebp - 84]
LBB184_28:
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	mov	byte ptr [ecx + edi], al
LBB184_29:
	cmp	dword ptr [ebp - 92], 15
	jbe	LBB184_31
# %bb.30:
	mov	ebx, dword ptr [ebp - 112]
LBB184_31:
	movsx	eax, byte ptr [ebp - 60]        # 1-byte Folded Reload
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	jmp	LBB184_34
	.p2align	4, 0x90
LBB184_32:                              #   in Loop: Header=BB184_34 Depth=1
	inc	eax
	lea	ecx, [esi + edi]
	lea	edx, [esi + edi + 1]
	push	eax
	push	ecx
	push	edx
	call	_memmove
	add	esp, 12
	movzx	eax, byte ptr [ebp - 60]        # 1-byte Folded Reload
	mov	byte ptr [esi + edi], al
LBB184_33:                              #   in Loop: Header=BB184_34 Depth=1
	cmp	byte ptr [ebx + 1], 0
	lea	eax, [ebx + 1]
	cmovg	ebx, eax
LBB184_34:                              # =>This Inner Loop Header: Depth=1
	movsx	eax, byte ptr [ebx]
	mov	ecx, eax
	dec	cl
	cmp	cl, 125
	ja	LBB184_41
# %bb.35:                               #   in Loop: Header=BB184_34 Depth=1
	mov	ecx, edi
	sub	ecx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	cmp	ecx, eax
	jbe	LBB184_41
# %bb.36:                               #   in Loop: Header=BB184_34 Depth=1
	mov	ecx, dword ptr [ebp - 68]
	sub	edi, eax
	mov	eax, ecx
	sub	eax, edi
	jb	LBB184_136
# %bb.37:                               #   in Loop: Header=BB184_34 Depth=1
	mov	edx, dword ptr [ebp - 64]
	cmp	edx, ecx
	jne	LBB184_39
# %bb.38:                               #   in Loop: Header=BB184_34 Depth=1
	mov	dword ptr [ebp - 16], 5
	sub	esp, 20
	movzx	eax, byte ptr [ebp - 88]
	lea	ecx, [ebp - 84]
	mov	byte ptr [esp + 4], al
	mov	dword ptr [esp + 8], edi
	mov	dword ptr [esp + 12], 1
	mov	dword ptr [esp], 1
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	dword ptr [esp + 16], eax
	call	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	edi, dword ptr [ebp - 32]       # 4-byte Reload
	jmp	LBB184_33
	.p2align	4, 0x90
LBB184_39:                              #   in Loop: Header=BB184_34 Depth=1
	inc	ecx
	cmp	edx, 15
	lea	esi, [ebp - 84]
	mov	dword ptr [ebp - 68], ecx
	jbe	LBB184_32
# %bb.40:                               #   in Loop: Header=BB184_34 Depth=1
	mov	esi, dword ptr [ebp - 84]
	jmp	LBB184_32
LBB184_41:
	mov	edx, dword ptr [ebp + 24]
	mov	esi, dword ptr [ebp - 68]
	xor	ecx, ecx
	mov	eax, dword ptr [edx + 32]
	mov	dword ptr [ebp - 60], esi       # 4-byte Spill
	mov	edi, eax
	sub	edi, esi
	cmovb	edi, ecx
	cmp	eax, 1
	mov	eax, dword ptr [edx + 36]
	sbb	eax, 0
	mov	eax, 448
	cmovl	edi, ecx
	and	eax, dword ptr [edx + 20]
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	cmp	eax, 64
	je	LBB184_47
# %bb.42:
	cmp	eax, 256
	jne	LBB184_51
# %bb.43:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	je	LBB184_61
# %bb.44:
	test	ebx, ebx
	je	LBB184_60
# %bb.45:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB184_112
# %bb.46:
	mov	eax, dword ptr [ebp - 84]
	jmp	LBB184_113
LBB184_47:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	je	LBB184_59
# %bb.48:
	test	ebx, ebx
	je	LBB184_69
# %bb.49:
	cmp	dword ptr [ebp - 64], 15
	mov	dword ptr [ebp - 56], ecx       # 4-byte Spill
	jbe	LBB184_120
# %bb.50:
	mov	eax, dword ptr [ebp - 84]
	jmp	LBB184_121
LBB184_51:
	lea	eax, [ebp + 16]
	cmp	dword ptr [ebp - 44], 0         # 4-byte Folded Reload
	mov	ecx, dword ptr [eax]
	mov	ebx, dword ptr [eax + 4]
	mov	eax, ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	je	LBB184_72
# %bb.52:
	test	ebx, ebx
	je	LBB184_71
# %bb.53:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	jmp	LBB184_55
	.p2align	4, 0x90
LBB184_54:                              #   in Loop: Header=BB184_55 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	je	LBB184_72
LBB184_55:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB184_57
# %bb.56:                               #   in Loop: Header=BB184_55 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB184_54
LBB184_57:                              #   in Loop: Header=BB184_55 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	call	eax
# %bb.58:                               #   in Loop: Header=BB184_55 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	jne	LBB184_55
	jmp	LBB184_72
LBB184_59:
	mov	dword ptr [ebp - 56], ecx       # 4-byte Spill
	jmp	LBB184_70
LBB184_60:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB184_61:
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	cmp	dword ptr [ebp - 44], 0         # 4-byte Folded Reload
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	je	LBB184_77
# %bb.62:
	test	ebx, ebx
	je	LBB184_76
# %bb.63:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	jmp	LBB184_65
	.p2align	4, 0x90
LBB184_64:                              #   in Loop: Header=BB184_65 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	je	LBB184_77
LBB184_65:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB184_67
# %bb.66:                               #   in Loop: Header=BB184_65 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB184_64
LBB184_67:                              #   in Loop: Header=BB184_65 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 52]            # 4-byte Folded Reload
	call	eax
# %bb.68:                               #   in Loop: Header=BB184_65 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	jne	LBB184_65
	jmp	LBB184_77
LBB184_69:
	mov	al, 1
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
LBB184_70:
	mov	eax, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	ecx, byte ptr [ebp - 56]        # 1-byte Folded Reload
	lea	edx, [ebp + 16]
	mov	dword ptr [edx + 4], ebx
	and	eax, -256
	jmp	LBB184_78
LBB184_71:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB184_72:
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	cmp	dword ptr [ebp - 40], 0         # 4-byte Folded Reload
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	je	LBB184_77
# %bb.73:
	test	ebx, ebx
	je	LBB184_76
# %bb.74:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB184_128
# %bb.75:
	mov	eax, dword ptr [ebp - 84]
	jmp	LBB184_129
LBB184_76:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB184_77:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	lea	edx, [ebp + 16]
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	mov	dword ptr [edx + 4], ebx
LBB184_78:
	or	ecx, eax
	mov	dword ptr [edx], ecx
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
                                        # kill: def $cl killed $cl killed $ecx def $ecx
	mov	dword ptr [ebp - 32], ecx       # 4-byte Spill
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	sub	eax, dword ptr [ebp - 40]       # 4-byte Folded Reload
	je	LBB184_84
# %bb.80:
	test	ebx, ebx
	je	LBB184_83
# %bb.81:
	cmp	dword ptr [ebp - 64], 15
	jbe	LBB184_104
# %bb.82:
	mov	ecx, dword ptr [ebp - 84]
	jmp	LBB184_105
LBB184_83:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB184_84:
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	and	ecx, -256
	or	eax, ecx
	mov	dword ptr [ebp - 48], ecx       # 4-byte Spill
	lea	ecx, [ebp + 16]
	cmp	dword ptr [ebp - 44], 0         # 4-byte Folded Reload
	mov	dword ptr [ecx], eax
	mov	dword ptr [ecx + 4], ebx
	mov	ecx, dword ptr [ebp + 24]
	mov	dword ptr [ecx + 36], 0
	mov	dword ptr [ecx + 32], 0
	je	LBB184_93
# %bb.85:
	test	ebx, ebx
	je	LBB184_92
# %bb.86:
	movzx	eax, byte ptr [ebp + 28]
	mov	dword ptr [ebp - 40], eax       # 4-byte Spill
	jmp	LBB184_88
	.p2align	4, 0x90
LBB184_87:                              #   in Loop: Header=BB184_88 Depth=1
	dec	esi
	mov	dword ptr [edx], esi
	lea	edx, [ecx + 1]
	mov	dword ptr [eax], edx
	movzx	edx, byte ptr [ebp + 28]
	mov	byte ptr [ecx], dl
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	je	LBB184_93
LBB184_88:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [ebx + 32]
	mov	ecx, dword ptr [eax]
	test	ecx, ecx
	je	LBB184_90
# %bb.89:                               #   in Loop: Header=BB184_88 Depth=1
	mov	edx, dword ptr [ebx + 48]
	mov	esi, dword ptr [edx]
	test	esi, esi
	jg	LBB184_87
LBB184_90:                              #   in Loop: Header=BB184_88 Depth=1
	mov	eax, dword ptr [ebx]
	mov	ecx, ebx
	mov	eax, dword ptr [eax + 12]
	mov	dword ptr [ebp - 16], 5
	push	dword ptr [ebp - 40]            # 4-byte Folded Reload
	call	eax
# %bb.91:                               #   in Loop: Header=BB184_88 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	dec	dword ptr [ebp - 44]            # 4-byte Folded Spill
	jne	LBB184_88
	jmp	LBB184_93
LBB184_92:
	mov	al, 1
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
LBB184_93:
	movzx	eax, byte ptr [ebp - 32]        # 1-byte Folded Reload
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	or	ecx, eax
	mov	eax, dword ptr [ebp + 12]
	mov	dword ptr [eax], ecx
	mov	dword ptr [eax + 4], ebx
	mov	eax, dword ptr [ebp - 92]
	cmp	eax, 16
	jb	LBB184_98
# %bb.94:
	mov	ecx, dword ptr [ebp - 112]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB184_97
# %bb.95:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB184_138
# %bb.96:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB184_97:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB184_98:
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB184_103
# %bb.99:
	mov	ecx, dword ptr [ebp - 84]
	lea	edx, [eax + 1]
	cmp	edx, 4096
	jb	LBB184_102
# %bb.100:
	mov	esi, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, esi
	cmp	ecx, 32
	jae	LBB184_140
# %bb.101:
	add	eax, 36
	mov	ecx, esi
	mov	edx, eax
LBB184_102:
	push	edx
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB184_103:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [ebp + 12]
	add	esp, 100
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB184_104:
	lea	ecx, [ebp - 84]
LBB184_105:
	add	ecx, dword ptr [ebp - 40]       # 4-byte Folded Reload
	jmp	LBB184_108
	.p2align	4, 0x90
LBB184_106:                             #   in Loop: Header=BB184_108 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB184_107:                             #   in Loop: Header=BB184_108 Depth=1
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 60]       # 4-byte Reload
	inc	ecx
	dec	eax
	je	LBB184_84
LBB184_108:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 60], eax       # 4-byte Spill
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	movzx	eax, byte ptr [ecx]
	mov	ecx, dword ptr [ebx + 32]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB184_110
# %bb.109:                              #   in Loop: Header=BB184_108 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB184_106
LBB184_110:                             #   in Loop: Header=BB184_108 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.111:                              #   in Loop: Header=BB184_108 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB184_107
LBB184_112:
	lea	eax, [ebp - 84]
LBB184_113:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB184_116
	.p2align	4, 0x90
LBB184_114:                             #   in Loop: Header=BB184_116 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB184_115:                             #   in Loop: Header=BB184_116 Depth=1
	mov	eax, dword ptr [ebp - 52]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 56]       # 4-byte Reload
	inc	eax
	dec	ecx
	je	LBB184_61
LBB184_116:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 56], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 52], eax       # 4-byte Spill
	movzx	eax, byte ptr [eax]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB184_118
# %bb.117:                              #   in Loop: Header=BB184_116 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB184_114
LBB184_118:                             #   in Loop: Header=BB184_116 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.119:                              #   in Loop: Header=BB184_116 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB184_115
LBB184_120:
	lea	eax, [ebp - 84]
LBB184_121:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	mov	dword ptr [ebp - 36], ebx       # 4-byte Spill
	jmp	LBB184_124
	.p2align	4, 0x90
LBB184_122:                             #   in Loop: Header=BB184_124 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB184_123:                             #   in Loop: Header=BB184_124 Depth=1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	inc	eax
	dec	ecx
	je	LBB184_70
LBB184_124:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	movzx	eax, byte ptr [eax]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB184_126
# %bb.125:                              #   in Loop: Header=BB184_124 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB184_122
LBB184_126:                             #   in Loop: Header=BB184_124 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.127:                              #   in Loop: Header=BB184_124 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 56]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 56], eax       # 4-byte Spill
	jmp	LBB184_123
LBB184_128:
	lea	eax, [ebp - 84]
LBB184_129:
	mov	ecx, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB184_132
	.p2align	4, 0x90
LBB184_130:                             #   in Loop: Header=BB184_132 Depth=1
	dec	edi
	mov	dword ptr [esi], edi
	lea	edi, [edx + 1]
	mov	dword ptr [ecx], edi
	mov	byte ptr [edx], al
LBB184_131:                             #   in Loop: Header=BB184_132 Depth=1
	mov	eax, dword ptr [ebp - 44]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 52]       # 4-byte Reload
	inc	eax
	dec	ecx
	je	LBB184_77
LBB184_132:                             # =>This Inner Loop Header: Depth=1
	mov	dword ptr [ebp - 52], ecx       # 4-byte Spill
	mov	ecx, dword ptr [ebx + 32]
	mov	dword ptr [ebp - 44], eax       # 4-byte Spill
	movzx	eax, byte ptr [eax]
	mov	edx, dword ptr [ecx]
	test	edx, edx
	je	LBB184_134
# %bb.133:                              #   in Loop: Header=BB184_132 Depth=1
	mov	esi, dword ptr [ebx + 48]
	mov	edi, dword ptr [esi]
	test	edi, edi
	jg	LBB184_130
LBB184_134:                             #   in Loop: Header=BB184_132 Depth=1
	mov	ecx, dword ptr [ebx]
	movzx	eax, al
	mov	edx, dword ptr [ecx + 12]
	mov	dword ptr [ebp - 16], 5
	mov	ecx, ebx
	push	eax
	call	edx
# %bb.135:                              #   in Loop: Header=BB184_132 Depth=1
	cmp	eax, -1
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ecx, 1
	movzx	eax, al
	cmove	eax, ecx
	mov	dword ptr [ebp - 32], eax       # 4-byte Spill
	jmp	LBB184_131
LBB184_136:
	mov	dword ptr [ebp - 16], 5
	call	"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
# %bb.137:
LBB184_138:
	mov	dword ptr [ebp - 16], 1
	call	__invalid_parameter_noinfo_noreturn
# %bb.139:
LBB184_140:
	mov	dword ptr [ebp - 16], 2
	call	__invalid_parameter_noinfo_noreturn
# %bb.141:
	.def	 "?dtor$142@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$142@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB184_142:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$143@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$143@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB184_143:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$144@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$144@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB184_144:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 108]
	test	ecx, ecx
	je	LBB184_147
# %bb.145:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB184_147
# %bb.146:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB184_147:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$148@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$148@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB184_148:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	ecx, dword ptr [ebp - 80]
	test	ecx, ecx
	je	LBB184_151
# %bb.149:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
	test	eax, eax
	je	LBB184_151
# %bb.150:
	mov	edx, dword ptr [eax]
	mov	ecx, eax
	push	1
	call	dword ptr [edx]
LBB184_151:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?dtor$152@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$152@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB184_152:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 92]
	cmp	eax, 16
	jb	LBB184_157
# %bb.153:
	mov	ecx, dword ptr [ebp - 112]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB184_156
# %bb.154:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB184_158
# %bb.155:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB184_156:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB184_157:
	mov	dword ptr [ebp - 96], 0
	mov	dword ptr [ebp - 92], 15
	mov	byte ptr [ebp - 112], 0
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB184_158:
	call	__invalid_parameter_noinfo_noreturn
	.def	 "?dtor$159@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$159@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA":
LBB184_159:
	push	ebp
	sub	esp, 20
	add	ebp, 12
	mov	eax, dword ptr [ebp - 64]
	cmp	eax, 16
	jb	LBB184_164
# %bb.160:
	mov	ecx, dword ptr [ebp - 84]
	lea	esi, [eax + 1]
	cmp	esi, 4096
	jb	LBB184_163
# %bb.161:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB184_165
# %bb.162:
	add	eax, 36
	mov	ecx, edx
	mov	esi, eax
LBB184_163:
	push	esi
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB184_164:
	add	esp, 20
	pop	ebp
	ret                                     # CLEANUPRET
LBB184_165:
	call	__invalid_parameter_noinfo_noreturn
Lfunc_end70:
	.section	.xdata,"dr",associative,"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.p2align	2
"L__ehtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z":
	.long	-1                              # ToState
	.long	"?dtor$148@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$143@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$142@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$159@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$144@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.long	3                               # ToState
	.long	"?dtor$152@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
                                        # -- End function
	.def	 "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z
	.p2align	4, 0x90
"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
Lfunc_begin71:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 36], 2147483647 # 4-byte Folded Spill
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 2147483647
	mov	ebx, dword ptr [ecx + 16]
	sub	eax, ebx
	cmp	eax, edi
	jb	LBB185_19
# %bb.1:
	mov	esi, dword ptr [ecx + 20]
	add	edi, ebx
	mov	dword ptr [ebp - 40], ecx       # 4-byte Spill
	mov	eax, -2147483648
	mov	ecx, edi
	mov	dword ptr [ebp - 44], edi       # 4-byte Spill
	or	ecx, 15
	mov	dword ptr [ebp - 32], esi       # 4-byte Spill
	js	LBB185_5
# %bb.2:
	mov	edx, esi
	shr	edx
	mov	edi, edx
	xor	edi, 2147483647
	cmp	edi, esi
	jb	LBB185_5
# %bb.3:
	add	edx, dword ptr [ebp - 32]       # 4-byte Folded Reload
	cmp	ecx, edx
	mov	esi, edx
	cmovae	esi, ecx
	lea	eax, [esi + 1]
	cmp	eax, 4096
	jb	LBB185_6
# %bb.4:
	cmp	eax, -35
	mov	dword ptr [ebp - 36], esi       # 4-byte Spill
	jae	LBB185_20
LBB185_5:
	add	eax, 35
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	esi, dword ptr [ebp - 36]       # 4-byte Reload
	lea	edi, [eax + 35]
	and	edi, -32
	mov	dword ptr [edi - 4], eax
LBB185_9:
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	cmp	edx, 16
	mov	dword ptr [eax + 16], ecx
	mov	dword ptr [eax + 20], esi
	jb	LBB185_17
# %bb.10:
	mov	esi, dword ptr [eax]
	push	ebx
	push	esi
	push	edi
	call	_memcpy
	add	esp, 12
	mov	edx, dword ptr [ebp + 16]
	movzx	ecx, byte ptr [ebp + 20]
	lea	eax, [edi + ebx]
	push	edx
	push	ecx
	push	eax
	call	_memset
	mov	edx, dword ptr [ebp - 32]       # 4-byte Reload
	add	esp, 12
	add	ebx, dword ptr [ebp + 16]
	lea	eax, [edx + 1]
	cmp	eax, 4096
	mov	byte ptr [edi + ebx], 0
	jb	LBB185_16
# %bb.11:
	mov	ecx, dword ptr [esi - 4]
	add	esi, -4
	sub	esi, ecx
	cmp	esi, 32
	jae	LBB185_12
# %bb.15:
	add	edx, 36
	mov	esi, ecx
	mov	eax, edx
LBB185_16:
	push	eax
	push	esi
	call	"??3@YAXPAXI@Z"
	add	esp, 8
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	jmp	LBB185_18
LBB185_17:
	push	ebx
	push	eax
	push	edi
	mov	esi, eax
	call	_memcpy
	add	esp, 12
	mov	edx, dword ptr [ebp + 16]
	movzx	ecx, byte ptr [ebp + 20]
	lea	eax, [edi + ebx]
	push	edx
	push	ecx
	push	eax
	call	_memset
	add	esp, 12
	add	ebx, dword ptr [ebp + 16]
	mov	byte ptr [edi + ebx], 0
LBB185_18:
	mov	dword ptr [esi], edi
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	16
LBB185_6:
	test	eax, eax
	je	LBB185_7
# %bb.8:
	push	eax
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	edi, eax
	jmp	LBB185_9
LBB185_7:
	xor	edi, edi
	mov	esi, -1
	jmp	LBB185_9
LBB185_19:
	call	"?_Xlen_string@std@@YAXXZ"
LBB185_12:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.13:
LBB185_20:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
	.def	 "?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z@4HA":
LBB185_14:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end71:
	.section	.xdata,"dr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.p2align	2
"L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z":
	.long	-1                              # ToState
	.long	"?dtor$14@?0???$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z@4HA" # Action
	.section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
                                        # -- End function
	.def	 "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
	.globl	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z" # -- Begin function ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z
	.p2align	4, 0x90
"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z": # @"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBIP6AXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z@std@@PAX@std@@@2@QAU32@@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	push	eax
	inc	dword ptr [ecx + 4]
	mov	edx, dword ptr [esp + 24]
	mov	eax, dword ptr [esp + 32]
	mov	ecx, dword ptr [ecx]
	mov	dword ptr [eax + 4], edx
	cmp	ecx, edx
	je	LBB186_1
# %bb.2:
	cmp	dword ptr [esp + 28], 0
	je	LBB186_3
# %bb.5:
	mov	dword ptr [edx], eax
	cmp	dword ptr [ecx], edx
	jne	LBB186_7
# %bb.6:
	mov	dword ptr [ecx], eax
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jne	LBB186_38
	jmp	LBB186_8
LBB186_1:
	mov	dword ptr [edx], eax
	mov	dword ptr [edx + 4], eax
	mov	dword ptr [edx + 8], eax
	mov	ecx, eax
	jmp	LBB186_39
LBB186_3:
	mov	dword ptr [edx + 8], eax
	cmp	dword ptr [ecx + 8], edx
	je	LBB186_4
LBB186_7:
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	je	LBB186_8
LBB186_38:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	ecx, dword ptr [eax + 4]
	mov	eax, dword ptr [esp + 32]
LBB186_39:
	mov	byte ptr [ecx + 12], 1
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	12
LBB186_4:
	mov	dword ptr [ecx + 8], eax
	cmp	byte ptr [edx + 12], 0
	mov	dword ptr [esp], ecx            # 4-byte Spill
	jne	LBB186_38
LBB186_8:
	mov	eax, dword ptr [esp]            # 4-byte Reload
	mov	ebx, dword ptr [esp + 32]
	lea	ebp, [edx + 12]
	lea	esi, [eax + 4]
	jmp	LBB186_9
	.p2align	4, 0x90
LBB186_11:                              #   in Loop: Header=BB186_9 Depth=1
	mov	byte ptr [ebp], 1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	edx, edi
LBB186_37:                              #   in Loop: Header=BB186_9 Depth=1
	mov	ebx, edx
	mov	edx, dword ptr [edx + 4]
	cmp	byte ptr [edx + 12], 0
	lea	ebp, [edx + 12]
	jne	LBB186_38
LBB186_9:                               # =>This Inner Loop Header: Depth=1
	mov	edi, dword ptr [edx + 4]
	mov	eax, dword ptr [edi]
	cmp	edx, eax
	je	LBB186_10
# %bb.24:                               #   in Loop: Header=BB186_9 Depth=1
	cmp	byte ptr [eax + 12], 0
	je	LBB186_11
# %bb.25:                               #   in Loop: Header=BB186_9 Depth=1
	cmp	ebx, dword ptr [edx]
	je	LBB186_27
# %bb.26:                               #   in Loop: Header=BB186_9 Depth=1
	mov	eax, edx
	mov	edx, ebx
	jmp	LBB186_32
	.p2align	4, 0x90
LBB186_10:                              #   in Loop: Header=BB186_9 Depth=1
	mov	eax, dword ptr [edi + 8]
	cmp	byte ptr [eax + 12], 0
	je	LBB186_11
# %bb.12:                               #   in Loop: Header=BB186_9 Depth=1
	mov	ecx, dword ptr [edx + 8]
	cmp	ebx, ecx
	je	LBB186_14
# %bb.13:                               #   in Loop: Header=BB186_9 Depth=1
	mov	ebp, edx
	mov	eax, edx
	mov	edx, ebx
	jmp	LBB186_19
LBB186_27:                              #   in Loop: Header=BB186_9 Depth=1
	mov	eax, dword ptr [ebx + 8]
	mov	dword ptr [edx], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB186_29
# %bb.28:                               #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [eax + 4], edx
	mov	edi, dword ptr [edx + 4]
LBB186_29:                              #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [ebx + 4], edi
	mov	eax, esi
	cmp	dword ptr [esi], edx
	je	LBB186_31
# %bb.30:                               #   in Loop: Header=BB186_9 Depth=1
	mov	ecx, dword ptr [edx + 4]
	cmp	dword ptr [ecx + 8], edx
	lea	eax, [ecx + 8]
	cmovne	eax, ecx
LBB186_31:                              #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [eax], ebx
	mov	dword ptr [ebx + 8], edx
	mov	dword ptr [edx + 4], ebx
	mov	eax, ebx
	mov	edi, dword ptr [ebx + 4]
LBB186_32:                              #   in Loop: Header=BB186_9 Depth=1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	ecx, dword ptr [edi + 8]
	mov	eax, dword ptr [ecx]
	mov	dword ptr [edi + 8], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB186_34
# %bb.33:                               #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [eax + 4], edi
LBB186_34:                              #   in Loop: Header=BB186_9 Depth=1
	mov	eax, dword ptr [edi + 4]
	mov	dword ptr [ecx + 4], eax
	mov	eax, esi
	cmp	dword ptr [esi], edi
	je	LBB186_36
# %bb.35:                               #   in Loop: Header=BB186_9 Depth=1
	mov	ebx, dword ptr [edi + 4]
	cmp	dword ptr [ebx], edi
	lea	eax, [ebx + 8]
	cmove	eax, ebx
LBB186_36:                              #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [eax], ecx
	mov	dword ptr [ecx], edi
	mov	dword ptr [edi + 4], ecx
	jmp	LBB186_37
LBB186_14:                              #   in Loop: Header=BB186_9 Depth=1
	mov	eax, dword ptr [ebx]
	mov	dword ptr [edx + 8], eax
	cmp	byte ptr [eax + 13], 0
	jne	LBB186_16
# %bb.15:                               #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [eax + 4], edx
	mov	edi, dword ptr [edx + 4]
LBB186_16:                              #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [ebx + 4], edi
	mov	eax, esi
	cmp	dword ptr [esi], edx
	je	LBB186_18
# %bb.17:                               #   in Loop: Header=BB186_9 Depth=1
	mov	ecx, dword ptr [edx + 4]
	cmp	dword ptr [ecx], edx
	lea	eax, [ecx + 8]
	cmove	eax, ecx
LBB186_18:                              #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [eax], ebx
	mov	dword ptr [ebx], edx
	mov	dword ptr [edx + 4], ebx
	mov	eax, ebx
	mov	edi, dword ptr [ebx + 4]
	mov	ebp, dword ptr [edi]
	mov	ecx, dword ptr [ebp + 8]
LBB186_19:                              #   in Loop: Header=BB186_9 Depth=1
	mov	byte ptr [eax + 12], 1
	mov	byte ptr [edi + 12], 0
	mov	dword ptr [edi], ecx
	cmp	byte ptr [ecx + 13], 0
	jne	LBB186_21
# %bb.20:                               #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [ecx + 4], edi
LBB186_21:                              #   in Loop: Header=BB186_9 Depth=1
	mov	eax, dword ptr [edi + 4]
	mov	dword ptr [ebp + 4], eax
	mov	eax, esi
	cmp	dword ptr [esi], edi
	je	LBB186_23
# %bb.22:                               #   in Loop: Header=BB186_9 Depth=1
	mov	ecx, dword ptr [edi + 4]
	cmp	dword ptr [ecx + 8], edi
	lea	eax, [ecx + 8]
	cmovne	eax, ecx
LBB186_23:                              #   in Loop: Header=BB186_9 Depth=1
	mov	dword ptr [eax], ebp
	mov	dword ptr [ebp + 8], edi
	mov	dword ptr [edi + 4], ebp
	jmp	LBB186_37
                                        # -- End function
	.def	 "?_Throw_tree_length_error@std@@YAXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Throw_tree_length_error@std@@YAXXZ"
	.globl	"?_Throw_tree_length_error@std@@YAXXZ" # -- Begin function ?_Throw_tree_length_error@std@@YAXXZ
	.p2align	4, 0x90
"?_Throw_tree_length_error@std@@YAXXZ": # @"?_Throw_tree_length_error@std@@YAXXZ"
# %bb.0:
	push	offset "??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.globl	"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z" # -- Begin function ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	.p2align	4, 0x90
"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z": # @"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
Lfunc_begin72:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	mov	edi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	xor	esi, esi
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [eax + 4]
	mov	ecx, dword ptr [edi + edx + 32]
	mov	ebx, ecx
	sub	ebx, dword ptr [ebp + 16]
	cmovb	ebx, esi
	cmp	ecx, 1
	mov	ecx, dword ptr [edi + edx + 36]
	mov	dword ptr [ebp - 40], edi
	sbb	ecx, 0
	mov	ecx, dword ptr [edi + edx + 56]
	cmovl	ebx, esi
	test	ecx, ecx
	je	LBB188_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [eax + 4]
LBB188_2:
	cmp	dword ptr [edi + edx + 12], 0
	je	LBB188_4
# %bb.3:
	mov	byte ptr [ebp - 36], 0
	mov	ecx, 4
	jmp	LBB188_42
LBB188_4:
	mov	ecx, dword ptr [edi + edx + 60]
	test	ecx, ecx
	je	LBB188_6
# %bb.5:
	cmp	ecx, edi
	je	LBB188_6
# %bb.10:
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.11:
	mov	edi, dword ptr [ebp + 8]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [edi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [edi + ecx + 12], 0
	mov	ecx, 4
	sete	byte ptr [ebp - 36]
	jne	LBB188_42
	jmp	LBB188_12
LBB188_6:
	mov	byte ptr [ebp - 36], 1
LBB188_12:
	mov	eax, dword ptr [eax + 4]
	mov	ecx, 448
	and	ecx, dword ptr [edi + eax + 20]
	cmp	ecx, 64
	jne	LBB188_14
# %bb.13:
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	jmp	LBB188_16
	.p2align	4, 0x90
LBB188_20:                              #   in Loop: Header=BB188_14 Depth=1
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	byte ptr [esi], al
LBB188_21:                              #   in Loop: Header=BB188_14 Depth=1
	mov	edi, dword ptr [ebp + 8]
	dec	ebx
LBB188_14:                              # =>This Inner Loop Header: Depth=1
	mov	eax, dword ptr [edi]
	test	ebx, ebx
	mov	eax, dword ptr [eax + 4]
	je	LBB188_15
# %bb.18:                               #   in Loop: Header=BB188_14 Depth=1
	mov	ecx, dword ptr [edi + eax + 56]
	movzx	eax, byte ptr [edi + eax + 64]
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	edx, dword ptr [ecx + 32]
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB188_22
# %bb.19:                               #   in Loop: Header=BB188_14 Depth=1
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jg	LBB188_20
LBB188_22:                              #   in Loop: Header=BB188_14 Depth=1
	mov	edx, dword ptr [ecx]
	movzx	eax, al
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
# %bb.23:                               #   in Loop: Header=BB188_14 Depth=1
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	jne	LBB188_21
# %bb.24:
	mov	dword ptr [ebp - 44], 4         # 4-byte Folded Spill
	jmp	LBB188_25
LBB188_15:
	mov	dword ptr [ebp - 32], 0         # 4-byte Folded Spill
LBB188_16:
	mov	ecx, dword ptr [edi + eax + 56]
	mov	edx, dword ptr [ebp + 12]
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 36]
	mov	dword ptr [ebp - 48], 0
	mov	dword ptr [ebp - 16], 4
	push	0
	push	dword ptr [ebp + 16]
	push	edx
	call	eax
# %bb.17:
	xor	eax, dword ptr [ebp + 16]
	mov	edi, dword ptr [ebp + 8]
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	ecx, 4
	mov	dword ptr [ebp - 44], 0         # 4-byte Folded Spill
	or	eax, edx
	je	LBB188_26
	jmp	LBB188_35
LBB188_25:
	mov	edi, dword ptr [ebp + 8]
LBB188_26:
	test	ebx, ebx
	je	LBB188_27
# %bb.28:
	mov	eax, dword ptr [edi]
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edi + eax + 56]
	mov	al, byte ptr [edi + eax + 64]
	mov	edx, dword ptr [ecx + 32]
	mov	esi, dword ptr [edx]
	test	esi, esi
	je	LBB188_32
# %bb.29:
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jle	LBB188_32
# %bb.30:
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	dword ptr [edx], ecx
	mov	byte ptr [esi], al
	jmp	LBB188_31
LBB188_32:
	mov	edx, dword ptr [ecx]
	mov	esi, dword ptr [ebp - 44]       # 4-byte Reload
	movzx	eax, al
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 48], esi
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
# %bb.33:
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	cmp	eax, -1
	je	LBB188_34
LBB188_31:
	dec	ebx
	jmp	LBB188_25
LBB188_27:
	mov	ecx, dword ptr [ebp - 44]       # 4-byte Reload
	jmp	LBB188_35
LBB188_34:
	mov	edi, dword ptr [ebp + 8]
	mov	ecx, 4
LBB188_35:
	mov	eax, dword ptr [edi]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [edi + eax + 36], 0
	mov	dword ptr [edi + eax + 32], 0
LBB188_42:
	mov	eax, dword ptr [edi]
	mov	edx, dword ptr [eax + 4]
	xor	eax, eax
	or	ecx, dword ptr [edi + edx + 12]
	cmp	dword ptr [edi + edx + 56], 0
	sete	al
	and	ecx, 23
	shl	eax, 2
	or	ecx, eax
	mov	dword ptr [edi + edx + 12], ecx
	and	ecx, dword ptr [edi + edx + 16]
	jne	LBB188_43
# %bb.48:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB188_50
# %bb.49:
	mov	ecx, dword ptr [ebp - 40]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	edi, dword ptr [ebp + 8]
LBB188_50:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB188_52
# %bb.51:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	edi, dword ptr [ebp + 8]
LBB188_52:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, edi
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB188_43:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB188_45
# %bb.44:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB188_45:
	test	cl, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	edx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	cmove	edx, eax
	test	cl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	lea	ecx, [ebp - 68]
	cmove	eax, edx
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.46:
	mov	dword ptr [ebp - 68], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 68]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.47:
LBB188_40:                              # Block address taken
	add	ebp, 12
	jmp	LBB188_41
LBB188_41:
	mov	ecx, dword ptr [ebp - 48]
	mov	edi, dword ptr [ebp + 8]
	jmp	LBB188_42
	.def	 "?dtor$7@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$7@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB188_7:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB188_9
# %bb.8:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB188_9:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$36@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$36@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB188_36:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB188_37
# %bb.39:
	mov	eax, offset LBB188_40
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
LBB188_37:
	mov	dword ptr [ebp - 16], 5
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.38:
	.def	 "?dtor$53@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$53@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB188_53:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$54@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$54@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB188_54:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	lea	ecx, [ebp - 40]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$55@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$55@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA":
LBB188_55:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB188_57
# %bb.56:
	mov	ecx, dword ptr [ebp - 40]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB188_57:
	mov	eax, dword ptr [ebp - 40]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB188_59
# %bb.58:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB188_59:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end72:
	.section	.xdata,"dr",associative,"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.p2align	2
"L__ehtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z":
	.long	-1                              # ToState
	.long	"?dtor$7@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$53@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$54@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$55@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z":
	.long	4                               # TryLow
	.long	4                               # TryHigh
	.long	5                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z") # HandlerArray
"$handlerMap$0$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$36@?0???$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
                                        # -- End function
	.def	 "?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.globl	"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z" # -- Begin function ?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z
	.p2align	4, 0x90
"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z": # @"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
Lfunc_begin73:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 32
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	lea	eax, [ebp - 24]
	mov	edi, dword ptr [ebp + 8]
	mov	edx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], edx
	mov	dword ptr fs:[0], eax
	mov	eax, 1
	mov	edx, dword ptr [ecx + 8]
	test	edx, edx
	cmovne	eax, edx
	cmp	eax, 8
	jb	LBB189_3
	.p2align	4, 0x90
LBB189_2:
	mov	ebx, eax
	sub	ebx, edx
	cmp	ebx, edi
	jae	LBB189_5
LBB189_3:                               # =>This Inner Loop Header: Depth=1
	mov	esi, 268435455
	sub	esi, eax
	cmp	esi, eax
	jb	LBB189_22
# %bb.4:                                #   in Loop: Header=BB189_3 Depth=1
	add	eax, eax
	cmp	eax, 8
	jae	LBB189_2
	jmp	LBB189_3
LBB189_5:
	cmp	eax, 1073741824
	jae	LBB189_23
# %bb.6:
	mov	edi, dword ptr [ecx + 12]
	lea	edx, [4*eax]
	cmp	eax, 1024
	jb	LBB189_9
# %bb.7:
	cmp	eax, 1073741816
	mov	dword ptr [ebp - 16], -1
	jae	LBB189_24
# %bb.8:
	mov	esi, ecx
	add	edx, 35
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	lea	ecx, [eax + 35]
	and	ecx, -32
	mov	dword ptr [ecx - 4], eax
	jmp	LBB189_10
LBB189_9:
	mov	esi, ecx
	mov	dword ptr [ebp - 16], -1
	push	edx
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, eax
LBB189_10:
	shr	edi, 3
	mov	dword ptr [ebp - 44], ecx       # 4-byte Spill
	mov	eax, dword ptr [esi + 4]
	mov	dword ptr [ebp - 40], esi       # 4-byte Spill
	lea	edx, [ecx + 4*edi]
	mov	ecx, dword ptr [esi + 8]
	mov	dword ptr [ebp - 32], edx       # 4-byte Spill
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*edi]
	sub	esi, eax
	push	esi
	push	eax
	push	edx
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	add	esi, dword ptr [ebp - 32]       # 4-byte Folded Reload
	mov	ecx, ebx
	mov	dword ptr [ebp - 32], edi       # 4-byte Spill
	sub	ecx, edi
	mov	eax, dword ptr [eax + 4]
	jae	LBB189_11
# %bb.12:
	lea	ecx, [4*ebx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	mov	eax, dword ptr [eax + 4]
	lea	esi, [eax + 4*ecx]
	lea	eax, [eax + 4*ebx]
	sub	esi, eax
	push	esi
	push	eax
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
	call	_memmove
	add	esp, 12
	add	esi, edi
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	push	esi
	jmp	LBB189_13
LBB189_11:
	mov	edi, ecx
	mov	ecx, dword ptr [ebp - 32]       # 4-byte Reload
	lea	ecx, [4*ecx]
	mov	dword ptr [ebp - 36], ecx       # 4-byte Spill
	push	ecx
	push	eax
	push	esi
	call	_memmove
	add	esp, 12
	mov	eax, dword ptr [ebp - 32]       # 4-byte Reload
	shl	edi, 2
	lea	eax, [esi + 4*eax]
	push	edi
	push	0
	push	eax
	call	_memset
	add	esp, 12
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	push	0
	mov	edi, dword ptr [ebp - 44]       # 4-byte Reload
	push	edi
LBB189_13:
	call	_memset
	add	esp, 12
	mov	esi, dword ptr [ebp - 40]       # 4-byte Reload
	mov	ecx, dword ptr [esi + 4]
	test	ecx, ecx
	je	LBB189_21
# %bb.14:
	mov	eax, dword ptr [esi + 8]
	shl	eax, 2
	cmp	eax, 4096
	jb	LBB189_20
# %bb.15:
	mov	edx, dword ptr [ecx - 4]
	add	ecx, -4
	sub	ecx, edx
	cmp	ecx, 32
	jae	LBB189_16
# %bb.19:
	add	eax, 35
	mov	ecx, edx
LBB189_20:
	push	eax
	push	ecx
	call	"??3@YAXPAXI@Z"
	add	esp, 8
LBB189_21:
	mov	dword ptr [esi + 4], edi
	add	dword ptr [esi + 8], ebx
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 32
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
LBB189_22:
	mov	dword ptr [ebp - 16], -1
	call	"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ"
LBB189_23:
	mov	dword ptr [ebp - 16], -1
LBB189_24:
	call	"?_Throw_bad_array_new_length@std@@YAXXZ"
LBB189_16:
	mov	dword ptr [ebp - 16], 0
	call	__invalid_parameter_noinfo_noreturn
# %bb.17:
	.def	 "?dtor$18@?0??_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$18@?0??_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z@4HA":
LBB189_18:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
Lfunc_end73:
	.section	.xdata,"dr",associative,"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.p2align	2
"L__ehtable$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z":
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	("$stateUnwindMap$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z") # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z":
	.long	-1                              # ToState
	.long	"?dtor$18@?0??_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z@4HA" # Action
	.section	.text,"xr",discard,"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
                                        # -- End function
	.def	 "?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ"
	.globl	"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ" # -- Begin function ?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ
	.p2align	4, 0x90
"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ": # @"?_Xlen@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@ABEXXZ"
# %bb.0:
	push	offset "??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	call	"?_Xlength_error@std@@YAXPBD@Z"
                                        # -- End function
	.def	 "??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z"
	.globl	"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z" # -- Begin function ??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z
	.p2align	4, 0x90
"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z": # @"??$emplace_back@AAE@?$deque@EV?$allocator@E@std@@@std@@QAE?A?<decltype-auto>@@AAE@Z"
# %bb.0:
	push	ebp
	push	ebx
	push	edi
	push	esi
	mov	esi, ecx
	mov	ecx, dword ptr [ecx + 12]
	mov	eax, dword ptr [esi + 16]
	lea	edx, [eax + ecx]
	test	dl, 15
	jne	LBB191_3
# %bb.1:
	lea	edx, [eax + 16]
	shr	edx, 4
	cmp	dword ptr [esi + 8], edx
	ja	LBB191_3
# %bb.2:
	mov	ecx, esi
	push	1
	call	"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	mov	ecx, dword ptr [esi + 12]
	mov	eax, dword ptr [esi + 16]
LBB191_3:
	mov	ebp, dword ptr [esi + 8]
	mov	edx, dword ptr [esi + 4]
	mov	edi, dword ptr [esp + 20]
	mov	ebx, ebp
	add	ebp, 268435455
	shl	ebx, 4
	dec	ebx
	and	ebx, ecx
	mov	dword ptr [esi + 12], ebx
	add	ebx, eax
	mov	eax, ebx
	shr	eax, 4
	and	ebp, eax
	mov	eax, dword ptr [edx + 4*ebp]
	test	eax, eax
	jne	LBB191_5
# %bb.4:
	push	16
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	ecx, dword ptr [esi + 4]
	mov	dword ptr [ecx + 4*ebp], eax
	mov	eax, dword ptr [esi + 4]
	mov	eax, dword ptr [eax + 4*ebp]
LBB191_5:
	mov	cl, byte ptr [edi]
	and	ebx, 15
	mov	byte ptr [eax + ebx], cl
	mov	eax, dword ptr [esi + 16]
	lea	ecx, [eax + 1]
	mov	dword ptr [esi + 16], ecx
	add	eax, dword ptr [esi + 12]
	mov	edx, dword ptr [esi + 4]
	mov	esi, dword ptr [esi + 8]
	mov	ecx, eax
	dec	esi
	and	eax, 15
	shr	ecx, 4
	and	esi, ecx
	add	eax, dword ptr [edx + 4*esi]
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret	4
                                        # -- End function
	.def	 "??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z";
	.scl	2;
	.type	32;
	.endef
	.section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.globl	"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z" # -- Begin function ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	.p2align	4, 0x90
"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z": # @"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
Lfunc_begin74:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 56
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	mov	esi, dword ptr [ebp + 8]
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 44], esi
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + edx + 56]
	test	ecx, ecx
	je	LBB192_2
# %bb.1:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 4]
	mov	eax, dword ptr [esi]
	mov	edx, dword ptr [eax + 4]
LBB192_2:
	cmp	dword ptr [esi + edx + 12], 0
	je	LBB192_9
# %bb.3:
	xor	edx, edx
	mov	byte ptr [ebp - 40], 0
LBB192_4:
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	dword ptr [esi + eax + 32], 0
	mov	dword ptr [esi + eax + 36], 0
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	xor	eax, eax
	or	edx, dword ptr [esi + ecx + 12]
	cmp	dword ptr [esi + ecx + 56], 0
	sete	al
	and	edx, 23
	shl	eax, 2
	or	edx, eax
	mov	dword ptr [esi + ecx + 12], edx
	and	edx, dword ptr [esi + ecx + 16]
	jne	LBB192_5
# %bb.47:
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB192_49
# %bb.48:
	mov	ecx, dword ptr [ebp - 44]
	mov	dword ptr [ebp - 16], 2
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	mov	esi, dword ptr [ebp + 8]
LBB192_49:
	mov	eax, dword ptr [ebp - 44]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB192_51
# %bb.50:
	mov	eax, dword ptr [ecx]
	mov	eax, dword ptr [eax + 8]
	mov	dword ptr [ebp - 16], 1
	call	eax
	mov	esi, dword ptr [ebp + 8]
LBB192_51:
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	mov	eax, esi
	add	esp, 56
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
LBB192_9:
	mov	ecx, dword ptr [esi + edx + 60]
	test	ecx, ecx
	je	LBB192_11
# %bb.10:
	cmp	ecx, esi
	je	LBB192_11
# %bb.15:
	mov	dword ptr [ebp - 16], 0
	call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.16:
	mov	esi, dword ptr [ebp + 8]
	xor	edx, edx
	mov	eax, dword ptr [esi]
	mov	ecx, dword ptr [eax + 4]
	cmp	dword ptr [esi + ecx + 12], 0
	sete	byte ptr [ebp - 40]
	jne	LBB192_4
	jmp	LBB192_17
LBB192_11:
	mov	byte ptr [ebp - 40], 1
LBB192_17:
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 32]
	mov	edx, dword ptr [esi + eax + 36]
	mov	edi, ecx
	mov	ebx, edx
	add	edi, -1
	adc	ebx, -1
	cmp	ecx, 2
	mov	ecx, 448
	sbb	edx, 0
	mov	edx, 0
	cmovl	ebx, edx
	cmovl	edi, edx
	and	ecx, dword ptr [esi + eax + 20]
	cmp	ecx, 64
	jne	LBB192_19
# %bb.18:
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	dword ptr [ebp - 36], edi       # 4-byte Spill
	jmp	LBB192_28
	.p2align	4, 0x90
LBB192_23:                              #   in Loop: Header=BB192_19 Depth=1
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	dec	ebx
	mov	dword ptr [ecx], ebx
	lea	ebx, [edi + 1]
	mov	dword ptr [esi], ebx
	mov	byte ptr [edi], dl
LBB192_25:                              #   in Loop: Header=BB192_19 Depth=1
	mov	edi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edx, edx
	cmp	eax, -1
	mov	esi, dword ptr [ebp + 8]
	sete	dl
	shl	edx, 2
	add	edi, -1
	adc	ebx, -1
LBB192_19:                              # =>This Inner Loop Header: Depth=1
	test	edx, edx
	mov	dword ptr [ebp - 36], edi       # 4-byte Spill
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	jne	LBB192_26
# %bb.20:                               #   in Loop: Header=BB192_19 Depth=1
	cmp	edi, 1
	mov	eax, ebx
	sbb	eax, 0
	jl	LBB192_26
# %bb.21:                               #   in Loop: Header=BB192_19 Depth=1
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	movzx	edx, byte ptr [esi + eax + 64]
	mov	esi, dword ptr [ecx + 32]
	movzx	eax, dl
	mov	edi, dword ptr [esi]
	test	edi, edi
	je	LBB192_24
# %bb.22:                               #   in Loop: Header=BB192_19 Depth=1
	mov	ebx, dword ptr [ecx + 48]
	mov	dword ptr [ebp - 48], ebx       # 4-byte Spill
	mov	ebx, dword ptr [ebx]
	test	ebx, ebx
	jg	LBB192_23
LBB192_24:                              #   in Loop: Header=BB192_19 Depth=1
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
	jmp	LBB192_25
LBB192_26:
	test	edx, edx
	jne	LBB192_34
# %bb.27:
	mov	eax, dword ptr [esi]
	mov	eax, dword ptr [eax + 4]
LBB192_28:
	mov	ecx, dword ptr [esi + eax + 56]
	mov	dl, byte ptr [ebp + 12]
	mov	eax, dword ptr [ecx + 32]
	mov	esi, dword ptr [eax]
	test	esi, esi
	je	LBB192_31
# %bb.29:
	mov	edi, dword ptr [ecx + 48]
	mov	ebx, dword ptr [edi]
	test	ebx, ebx
	jle	LBB192_31
# %bb.30:
	dec	ebx
	lea	ecx, [esi + 1]
	mov	dword ptr [edi], ebx
	mov	dword ptr [eax], ecx
	mov	byte ptr [esi], dl
	movzx	eax, dl
	jmp	LBB192_32
LBB192_31:
	movzx	eax, dl
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
LBB192_32:
	mov	edi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edx, edx
	cmp	eax, -1
	sete	dl
	shl	edx, 2
	jmp	LBB192_33
LBB192_5:
	cmp	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], 0
	#MEMBARRIER
	jne	LBB192_7
# %bb.6:
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"+4], 5
	#MEMBARRIER
	mov	dword ptr ["?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"], offset "??_7_Iostream_error_category2@std@@6B@"
	mov	dword ptr [ebp - 16], 3
LBB192_7:
	test	dl, 2
	mov	eax, offset "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	mov	ecx, offset "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	mov	dword ptr [ebp - 16], 3
	cmove	ecx, eax
	test	dl, 4
	mov	eax, offset "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	cmove	eax, ecx
	lea	ecx, [ebp - 68]
	push	eax
	push	offset "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	push	1
	call	"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.8:
	mov	dword ptr [ebp - 68], offset "??_7failure@ios_base@std@@6B@"
	push	offset "__TI5?AVfailure@ios_base@std@@"
	lea	eax, [ebp - 68]
	push	eax
	call	__CxxThrowException@8
	add	esp, 8
# %bb.46:
LBB192_33:
	mov	esi, dword ptr [ebp + 8]
LBB192_34:
	test	edx, edx
	jne	LBB192_4
# %bb.35:
	cmp	edi, 1
	mov	eax, ebx
	sbb	eax, 0
	jl	LBB192_4
# %bb.36:
	mov	eax, dword ptr [esi]
	mov	dword ptr [ebp - 36], edi       # 4-byte Spill
	mov	dword ptr [ebp - 32], ebx       # 4-byte Spill
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [esi + eax + 56]
	mov	dl, byte ptr [esi + eax + 64]
	mov	esi, dword ptr [ecx + 32]
	movzx	eax, dl
	mov	edi, dword ptr [esi]
	test	edi, edi
	je	LBB192_39
# %bb.37:
	mov	ebx, dword ptr [ecx + 48]
	mov	dword ptr [ebp - 48], ebx       # 4-byte Spill
	mov	ebx, dword ptr [ebx]
	test	ebx, ebx
	jle	LBB192_39
# %bb.38:
	mov	ecx, dword ptr [ebp - 48]       # 4-byte Reload
	dec	ebx
	mov	dword ptr [ecx], ebx
	lea	ebx, [edi + 1]
	mov	dword ptr [esi], ebx
	mov	byte ptr [edi], dl
	jmp	LBB192_40
LBB192_39:
	mov	edx, dword ptr [ecx]
	mov	edx, dword ptr [edx + 12]
	mov	dword ptr [ebp - 16], 4
	push	eax
	call	edx
LBB192_40:
	mov	edi, dword ptr [ebp - 36]       # 4-byte Reload
	mov	ebx, dword ptr [ebp - 32]       # 4-byte Reload
	xor	edx, edx
	cmp	eax, -1
	sete	dl
	shl	edx, 2
	add	edi, -1
	adc	ebx, -1
	jmp	LBB192_33
LBB192_45:                              # Block address taken
	add	ebp, 12
	xor	edx, edx
	mov	esi, dword ptr [ebp + 8]
	jmp	LBB192_4
	.def	 "?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB192_12:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	eax, dword ptr [ebp - 44]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB192_14
# %bb.13:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB192_14:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
	.def	 "?catch$41@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?catch$41@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB192_41:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	mov	edx, dword ptr [ebp + 8]
	mov	dword ptr [ebp - 28], esp
	mov	eax, dword ptr [edx]
	mov	eax, dword ptr [eax + 4]
	mov	ecx, dword ptr [edx + eax + 12]
	and	ecx, 19
	or	ecx, 4
	mov	dword ptr [edx + eax + 12], ecx
	test	dword ptr [edx + eax + 16], ecx
	jne	LBB192_42
# %bb.44:
	mov	eax, offset LBB192_45
	add	esp, 12
	pop	ebp
	ret                                     # CATCHRET
LBB192_42:
	mov	dword ptr [ebp - 16], 5
	push	0
	push	0
	call	__CxxThrowException@8
	add	esp, 8
# %bb.43:
	.def	 "?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB192_52:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	___std_terminate
	.def	 "?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB192_53:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	lea	ecx, [ebp - 44]
	call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	call	___std_terminate
	.def	 "?dtor$54@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$54@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA":
LBB192_54:
	push	ebp
	sub	esp, 12
	add	ebp, 12
	call	"?uncaught_exception@std@@YA_NXZ"
	test	al, al
	jne	LBB192_56
# %bb.55:
	mov	ecx, dword ptr [ebp - 44]
	call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
LBB192_56:
	mov	eax, dword ptr [ebp - 44]
	mov	ecx, dword ptr [eax]
	mov	ecx, dword ptr [ecx + 4]
	mov	ecx, dword ptr [eax + ecx + 56]
	test	ecx, ecx
	je	LBB192_58
# %bb.57:
	mov	eax, dword ptr [ecx]
	call	dword ptr [eax + 8]
LBB192_58:
	add	esp, 12
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end74:
	.section	.xdata,"dr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.p2align	2
"L__ehtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z":
	.long	429065506                       # MagicNumber
	.long	6                               # MaxState
	.long	("$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z") # UnwindMap
	.long	1                               # NumTryBlocks
	.long	("$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z") # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
"$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z":
	.long	-1                              # ToState
	.long	"?dtor$12@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$52@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$53@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Action
	.long	-1                              # ToState
	.long	"?dtor$54@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Action
	.long	3                               # ToState
	.long	0                               # Action
	.long	3                               # ToState
	.long	0                               # Action
"$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z":
	.long	4                               # TryLow
	.long	4                               # TryHigh
	.long	5                               # CatchHigh
	.long	1                               # NumCatches
	.long	("$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z") # HandlerArray
"$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z":
	.long	64                              # Adjectives
	.long	0                               # Type
	.long	0                               # CatchObjOffset
	.long	"?catch$41@?0???$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z@4HA" # Handler
	.section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
                                        # -- End function
	.def	 __GLOBAL__sub_I_main.cpp;
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function _GLOBAL__sub_I_main.cpp
__GLOBAL__sub_I_main.cpp:               # @_GLOBAL__sub_I_main.cpp
Lfunc_begin75:
# %bb.0:
	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	push	esi
	sub	esp, 24
	mov	dword ptr [ebp - 28], esp
	mov	dword ptr [ebp - 16], -1
	mov	dword ptr [ebp - 20], offset ___ehhandler$_GLOBAL__sub_I_main.cpp
	lea	eax, [ebp - 24]
	mov	ecx, dword ptr fs:[0]
	mov	dword ptr [ebp - 24], ecx
	mov	dword ptr fs:[0], eax
	mov	dword ptr [ebp - 32], 16908545
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+4], 0
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"], 0
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+12], 0
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+8], 0
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"+16], 0
	push	8
	call	"??2@YAPAXI@Z"
	add	esp, 4
	mov	dword ptr [eax], offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	mov	dword ptr [eax + 4], 0
	mov	dword ptr [ebp - 36], eax       # 4-byte Spill
	mov	dword ptr ["?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"], eax
	lea	eax, [ebp - 32]
	mov	dword ptr [ebp - 16], 0
	mov	ecx, offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	push	eax
	call	"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z"
# %bb.1:
	lea	eax, [ebp - 30]
	mov	ecx, offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	push	eax
	call	"??$emplace_back@ABG@?$deque@GV?$allocator@G@std@@@std@@QAE?A?<decltype-auto>@@ABG@Z"
# %bb.2:
	push	offset "??__FsupportedExtensions@@YAXXZ"
	call	_atexit
	add	esp, 4
	mov	eax, dword ptr [ebp - 24]
	mov	dword ptr fs:[0], eax
	add	esp, 24
	pop	esi
	pop	edi
	pop	ebx
	pop	ebp
	ret
	.def	 "?dtor$3@?0?_GLOBAL__sub_I_main.cpp@4HA";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"?dtor$3@?0?_GLOBAL__sub_I_main.cpp@4HA":
LBB193_3:
	push	ebp
	sub	esp, 8
	mov	ecx, offset "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	add	ebp, 12
	call	"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	push	8
	push	dword ptr [ebp - 36]            # 4-byte Folded Reload
	call	"??3@YAXPAXI@Z"
	add	esp, 16
	pop	ebp
	ret                                     # CLEANUPRET
Lfunc_end75:
	.section	.xdata,"dr"
	.p2align	2
L__ehtable$_GLOBAL__sub_I_main.cpp:
	.long	429065506                       # MagicNumber
	.long	1                               # MaxState
	.long	($stateUnwindMap$_GLOBAL__sub_I_main.cpp) # UnwindMap
	.long	0                               # NumTryBlocks
	.long	0                               # TryBlockMap
	.long	0                               # IPMapEntries
	.long	0                               # IPToStateXData
	.long	0                               # ESTypeList
	.long	1                               # EHFlags
$stateUnwindMap$_GLOBAL__sub_I_main.cpp:
	.long	-1                              # ToState
	.long	"?dtor$3@?0?_GLOBAL__sub_I_main.cpp@4HA" # Action
	.text
                                        # -- End function
	.def	 "___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z
"___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z": # @"__ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z
"___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z": # @"__ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
"___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z": # @"__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
"___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z": # @"__ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ
"___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ": # @"__ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z
"___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z": # @"__ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z
"___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z": # @"__ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
"___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z": # @"__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
"___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z": # @"__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z";
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z
"___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z": # @"__ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 ___ehhandler$main;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90                         # -- Begin function __ehhandler$main
___ehhandler$main:                      # @"__ehhandler$main"
# %bb.0:
	mov	eax, offset L__ehtable$main
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0fileInfo@@QAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0fileInfo@@QAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0fileInfo@@QAE@XZ
"___ehhandler$??0fileInfo@@QAE@XZ":     # @"__ehhandler$??0fileInfo@@QAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??0fileInfo@@QAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
"___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z": # @"__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z
"___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z": # @"__ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z
"___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z": # @"__ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0bad_alloc@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z
"___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z": # @"__ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0bad_alloc@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0exception@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0exception@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0exception@std@@QAE@ABV01@@Z
"___ehhandler$??0exception@std@@QAE@ABV01@@Z": # @"__ehhandler$??0exception@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0exception@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z
"___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z": # @"__ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gbad_alloc@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z
"___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z": # @"__ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gbad_alloc@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gexception@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gexception@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gexception@std@@UAEPAXI@Z
"___ehhandler$??_Gexception@std@@UAEPAXI@Z": # @"__ehhandler$??_Gexception@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gexception@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
"___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ": # @"__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
"___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z": # @"__ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
"___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ": # @"__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
"___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z": # @"__ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0_Locinfo@std@@QAE@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0_Locinfo@std@@QAE@PBD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
"___ehhandler$??0_Locinfo@std@@QAE@PBD@Z": # @"__ehhandler$??0_Locinfo@std@@QAE@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0_Locinfo@std@@QAE@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1_Locinfo@std@@QAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1_Locinfo@std@@QAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1_Locinfo@std@@QAE@XZ
"___ehhandler$??1_Locinfo@std@@QAE@XZ": # @"__ehhandler$??1_Locinfo@std@@QAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1_Locinfo@std@@QAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0bad_cast@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0bad_cast@std@@QAE@ABV01@@Z
"___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z": # @"__ehhandler$??0bad_cast@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0bad_cast@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1exception@std@@UAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1exception@std@@UAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1exception@std@@UAE@XZ
"___ehhandler$??1exception@std@@UAE@XZ": # @"__ehhandler$??1exception@std@@UAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1exception@std@@UAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gbad_cast@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gbad_cast@std@@UAEPAXI@Z
"___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z": # @"__ehhandler$??_Gbad_cast@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gbad_cast@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gios_base@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gios_base@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gios_base@std@@UAEPAXI@Z
"___ehhandler$??_Gios_base@std@@UAEPAXI@Z": # @"__ehhandler$??_Gios_base@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gios_base@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ
"___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ": # @"__ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z
"___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z": # @"__ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ
"___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ": # @"__ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
"___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z": # @"__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
"___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z": # @"__ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
"___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z": # @"__ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
"___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z": # @"__ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0failure@ios_base@std@@QAE@ABV012@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z
"___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z": # @"__ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0failure@ios_base@std@@QAE@ABV012@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0system_error@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0system_error@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0system_error@std@@QAE@ABV01@@Z
"___ehhandler$??0system_error@std@@QAE@ABV01@@Z": # @"__ehhandler$??0system_error@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0system_error@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0_System_error@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0_System_error@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0_System_error@std@@QAE@ABV01@@Z
"___ehhandler$??0_System_error@std@@QAE@ABV01@@Z": # @"__ehhandler$??0_System_error@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0_System_error@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0runtime_error@std@@QAE@ABV01@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
"___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z": # @"__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0runtime_error@std@@QAE@ABV01@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
"___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z": # @"__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z
"___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z": # @"__ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gfailure@ios_base@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
"___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z": # @"__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gsystem_error@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gsystem_error@std@@UAEPAXI@Z
"___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z": # @"__ehhandler$??_Gsystem_error@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gsystem_error@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
"___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z": # @"__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_G_System_error@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_G_System_error@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_G_System_error@std@@UAEPAXI@Z
"___ehhandler$??_G_System_error@std@@UAEPAXI@Z": # @"__ehhandler$??_G_System_error@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_G_System_error@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??_Gruntime_error@std@@UAEPAXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??_Gruntime_error@std@@UAEPAXI@Z
"___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z": # @"__ehhandler$??_Gruntime_error@std@@UAEPAXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??_Gruntime_error@std@@UAEPAXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
"___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z": # @"__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
"___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z": # @"__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
"___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z": # @"__ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
"___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ": # @"__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
"___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ": # @"__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
# %bb.0:
	mov	eax, offset "L__ehtable$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
"___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ": # @"__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ
"___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ": # @"__ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z
"___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z": # @"__ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z
"___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z": # @"__ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
"___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z": # @"__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z": # @"__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z": # @"__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z": # @"__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
"___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z": # @"__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
"___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z": # @"__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z
"___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z": # @"__ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
"___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z": # @"__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
"___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z": # @"__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
"___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z": # @"__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z
"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z": # @"__ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
"___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z": # @"__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z
"___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z": # @"__ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z";
	.scl	3;
	.type	32;
	.endef
	.section	.text,"xr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.p2align	4, 0x90                         # -- Begin function __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
"___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z": # @"__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
# %bb.0:
	mov	eax, offset "L__ehtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.def	 ___ehhandler$_GLOBAL__sub_I_main.cpp;
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90                         # -- Begin function __ehhandler$_GLOBAL__sub_I_main.cpp
___ehhandler$_GLOBAL__sub_I_main.cpp:   # @"__ehhandler$_GLOBAL__sub_I_main.cpp"
# %bb.0:
	mov	eax, offset L__ehtable$_GLOBAL__sub_I_main.cpp
	jmp	___CxxFrameHandler3             # TAILCALL
                                        # -- End function
	.section	.rdata,"dr",discard,"??_C@_01GOHFPIOK@m?$AA@"
	.globl	"??_C@_01GOHFPIOK@m?$AA@"       # @"??_C@_01GOHFPIOK@m?$AA@"
"??_C@_01GOHFPIOK@m?$AA@":
	.asciz	"m"

	.section	.rdata,"dr",discard,"??_C@_01ICJEACDI@?$DL?$AA@"
	.globl	"??_C@_01ICJEACDI@?$DL?$AA@"    # @"??_C@_01ICJEACDI@?$DL?$AA@"
"??_C@_01ICJEACDI@?$DL?$AA@":
	.asciz	";"

	.section	.rdata,"dr",discard,"??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
	.globl	"??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@" # @"??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@"
"??_C@_07LFBGJHIE@?$BL?$FL38?$DL2?$DL?$AA@":
	.asciz	"\033[38;2;"

	.section	.rdata,"dr",discard,"??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@"
	.globl	"??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@" # @"??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@"
"??_C@_04MGNJNGKI@?$BL?$FL0m?$AA@":
	.asciz	"\033[0m"

	.bss
	.globl	"?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A" # @"?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	.p2align	2
"?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A":
	.zero	20

	.section	.rdata,"dr",discard,"??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@"
	.globl	"??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@" # @"??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@"
"??_C@_0BA@ECKEEFFG@?5?$HM?5Given?5size?3?5?$AA@":
	.asciz	" | Given size: "

	.section	.rdata,"dr",discard,"??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@"
	.globl	"??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@" # @"??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@"
"??_C@_0BC@HDJNNAPN@?0?5Expected?5Size?3?5?$AA@":
	.asciz	", Expected Size: "

	.bss
	.globl	"?ext0101_noop_id@@3IA"         # @"?ext0101_noop_id@@3IA"
	.p2align	2
"?ext0101_noop_id@@3IA":
	.long	0                               # 0x0

	.data
	.globl	"?ext0101_noopex_id@@3IA"       # @"?ext0101_noopex_id@@3IA"
	.p2align	2
"?ext0101_noopex_id@@3IA":
	.long	1                               # 0x1

	.globl	"?ext0101_setcolor_id@@3IA"     # @"?ext0101_setcolor_id@@3IA"
	.p2align	2
"?ext0101_setcolor_id@@3IA":
	.long	16842752                        # 0x1010000

	.globl	"?ext0101_setdebug_id@@3IA"     # @"?ext0101_setdebug_id@@3IA"
	.p2align	2
"?ext0101_setdebug_id@@3IA":
	.long	16842753                        # 0x1010001

	.globl	"?ext0102_pixel_id@@3IA"        # @"?ext0102_pixel_id@@3IA"
	.p2align	2
"?ext0102_pixel_id@@3IA":
	.long	16908288                        # 0x1020000

	.section	.rdata,"dr",discard,"??_C@_01ODHLEDKK@?$CI?$AA@"
	.globl	"??_C@_01ODHLEDKK@?$CI?$AA@"    # @"??_C@_01ODHLEDKK@?$CI?$AA@"
"??_C@_01ODHLEDKK@?$CI?$AA@":
	.asciz	"("

	.section	.rdata,"dr",discard,"??_C@_02KEGNLNML@?0?5?$AA@"
	.globl	"??_C@_02KEGNLNML@?0?5?$AA@"    # @"??_C@_02KEGNLNML@?0?5?$AA@"
"??_C@_02KEGNLNML@?0?5?$AA@":
	.asciz	", "

	.section	.rdata,"dr",discard,"??_C@_01PKGAHCOL@?$CJ?$AA@"
	.globl	"??_C@_01PKGAHCOL@?$CJ?$AA@"    # @"??_C@_01PKGAHCOL@?$CJ?$AA@"
"??_C@_01PKGAHCOL@?$CJ?$AA@":
	.asciz	")"

	.data
	.globl	"?ext0102_rect_id@@3IA"         # @"?ext0102_rect_id@@3IA"
	.p2align	2
"?ext0102_rect_id@@3IA":
	.long	16908289                        # 0x1020001

	.section	.rdata,"dr",discard,"??_C@_01EEMJAFIK@?6?$AA@"
	.globl	"??_C@_01EEMJAFIK@?6?$AA@"      # @"??_C@_01EEMJAFIK@?6?$AA@"
"??_C@_01EEMJAFIK@?6?$AA@":
	.asciz	"\n"

	.data
	.globl	"?ext0102_circle_id@@3IA"       # @"?ext0102_circle_id@@3IA"
	.p2align	2
"?ext0102_circle_id@@3IA":
	.long	16908290                        # 0x1020002

	.section	.rdata,"dr",discard,"??_C@_01CLKCMJKC@?5?$AA@"
	.globl	"??_C@_01CLKCMJKC@?5?$AA@"      # @"??_C@_01CLKCMJKC@?5?$AA@"
"??_C@_01CLKCMJKC@?5?$AA@":
	.asciz	" "

	.section	.rdata,"dr",discard,"??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@"
	.globl	"??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@" # @"??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@"
"??_C@_06HDKPNFJF@?$CJ?5?9?$DO?5?$CI?$AA@":
	.asciz	") -> ("

	.section	.rdata,"dr",discard,"??_C@_02MNMNLDAI@?$CJ?6?$AA@"
	.globl	"??_C@_02MNMNLDAI@?$CJ?6?$AA@"  # @"??_C@_02MNMNLDAI@?$CJ?6?$AA@"
"??_C@_02MNMNLDAI@?$CJ?6?$AA@":
	.asciz	")\n"

	.data
	.globl	"?ext0102_line_id@@3IA"         # @"?ext0102_line_id@@3IA"
	.p2align	2
"?ext0102_line_id@@3IA":
	.long	16908291                        # 0x1020003

	.section	.rdata,"dr",discard,"??_C@_00CNPNBAHC@?$AA@"
	.globl	"??_C@_00CNPNBAHC@?$AA@"        # @"??_C@_00CNPNBAHC@?$AA@"
"??_C@_00CNPNBAHC@?$AA@":
	.zero	1

	.section	.rdata,"dr",discard,"??_C@_03ICFFBAI@RGB?$AA@"
	.globl	"??_C@_03ICFFBAI@RGB?$AA@"      # @"??_C@_03ICFFBAI@RGB?$AA@"
"??_C@_03ICFFBAI@RGB?$AA@":
	.asciz	"RGB"

	.section	.rdata,"dr",discard,"??_C@_03CAADKAK@HSV?$AA@"
	.globl	"??_C@_03CAADKAK@HSV?$AA@"      # @"??_C@_03CAADKAK@HSV?$AA@"
"??_C@_03CAADKAK@HSV?$AA@":
	.asciz	"HSV"

	.section	.rdata,"dr",discard,"??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@"
	.globl	"??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@" # @"??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@"
"??_C@_0N@LLHJDFPM@Image?5info?3?6?$AA@":
	.asciz	"Image info:\n"

	.section	.rdata,"dr",discard,"??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@"
	.globl	"??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@" # @"??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@"
"??_C@_0M@NIJEHJNK@?5?5Version?3?5?$AA@":
	.asciz	"  Version: "

	.section	.rdata,"dr",discard,"??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@"
	.globl	"??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@" # @"??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@"
"??_C@_09ENMJHFFI@?5?5Width?3?5?$AA@":
	.asciz	"  Width: "

	.section	.rdata,"dr",discard,"??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@"
	.globl	"??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@" # @"??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@"
"??_C@_0L@FKEALEKD@?5?5Height?3?5?$AA@":
	.asciz	"  Height: "

	.section	.rdata,"dr",discard,"??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@"
	.globl	"??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@" # @"??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@"
"??_C@_0N@EPDJKGNE@?5?5Metadata?3?5?$AA@":
	.asciz	"  Metadata: "

	.section	.rdata,"dr",discard,"??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@"
	.globl	"??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@" # @"??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@"
"??_C@_0BG@HIDIFMAH@?5?5Background?5Color?3?5?$CD?$AA@":
	.asciz	"  Background Color: #"

	.section	.rdata,"dr",discard,"??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@"
	.globl	"??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@" # @"??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@"
"??_C@_0P@GKEBFNCL@?5?5Color?5Mode?3?5?$AA@":
	.asciz	"  Color Mode: "

	.section	.rdata,"dr",discard,"??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@"
	.globl	"??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@" # @"??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@"
"??_C@_0BI@KGBMIJAP@?5?5Extensions?5Needed?3?5?$HL?5?$AA@":
	.asciz	"  Extensions Needed: { "

	.section	.rdata,"dr",discard,"??_C@_03NIEPJMFE@?5?$HN?6?$AA@"
	.globl	"??_C@_03NIEPJMFE@?5?$HN?6?$AA@" # @"??_C@_03NIEPJMFE@?5?$HN?6?$AA@"
"??_C@_03NIEPJMFE@?5?$HN?6?$AA@":
	.asciz	" }\n"

	.section	.rdata,"dr",discard,"??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@"
	.globl	"??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@" # @"??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@"
"??_C@_0DJ@JGGEKIIH@Image?5uses?5one?5or?5more?5unsupport@":
	.asciz	"Image uses one or more unsupported extensions, exiting.\n"

	.section	.rdata,"dr",discard,"??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@"
	.globl	"??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@" # @"??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@"
"??_C@_0P@JALJGNBE@Proper?5usage?3?5?$AA@":
	.asciz	"Proper usage: "

	.section	.rdata,"dr",discard,"??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@"
	.globl	"??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@" # @"??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@"
"??_C@_0M@IMDICCLP@?5?$DMwvc?5file?$DO?$AA@":
	.asciz	" <wvc file>"

	.section	.rdata,"dr",discard,"??_C@_0O@HFECNAJH@Instruction?3?5?$AA@"
	.globl	"??_C@_0O@HFECNAJH@Instruction?3?5?$AA@" # @"??_C@_0O@HFECNAJH@Instruction?3?5?$AA@"
"??_C@_0O@HFECNAJH@Instruction?3?5?$AA@":
	.asciz	"Instruction: "

	.section	.bss,"bw",discard,"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.globl	"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A" # @"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.p2align	2
"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A":
	.zero	4

	.section	.bss,"bw",discard,"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.globl	"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A" # @"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.p2align	2
"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A":
	.zero	4

	.section	.bss,"bw",discard,"?id@?$numpunct@D@std@@2V0locale@2@A"
	.globl	"?id@?$numpunct@D@std@@2V0locale@2@A" # @"?id@?$numpunct@D@std@@2V0locale@2@A"
	.p2align	2
"?id@?$numpunct@D@std@@2V0locale@2@A":
	.zero	4

	.section	.rdata,"dr",discard,"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
	.globl	"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@" # @"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@":
	.asciz	"string too long"

	.section	.data,"dw",discard,"??_R0?AVbad_array_new_length@std@@@8"
	.globl	"??_R0?AVbad_array_new_length@std@@@8" # @"??_R0?AVbad_array_new_length@std@@@8"
	.p2align	4
"??_R0?AVbad_array_new_length@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVbad_array_new_length@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0bad_array_new_length@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVbad_alloc@std@@@8"
	.globl	"??_R0?AVbad_alloc@std@@@8"     # @"??_R0?AVbad_alloc@std@@@8"
	.p2align	4
"??_R0?AVbad_alloc@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVbad_alloc@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12":
	.long	16                              # 0x10
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0bad_alloc@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
	.globl	"??_R0?AVexception@std@@@8"     # @"??_R0?AVexception@std@@@8"
	.p2align	4
"??_R0?AVexception@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVexception@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVexception@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0exception@std@@QAE@ABV01@@Z"

	.section	.xdata,"dr",discard,"__CTA3?AVbad_array_new_length@std@@"
	.globl	"__CTA3?AVbad_array_new_length@std@@" # @"_CTA3?AVbad_array_new_length@std@@"
	.p2align	2
"__CTA3?AVbad_array_new_length@std@@":
	.long	3                               # 0x3
	.long	"__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"

	.section	.xdata,"dr",discard,"__TI3?AVbad_array_new_length@std@@"
	.globl	"__TI3?AVbad_array_new_length@std@@" # @"_TI3?AVbad_array_new_length@std@@"
	.p2align	2
"__TI3?AVbad_array_new_length@std@@":
	.long	0                               # 0x0
	.long	"??1exception@std@@UAE@XZ"
	.long	0
	.long	"__CTA3?AVbad_array_new_length@std@@"

	.section	.rdata,"dr",discard,"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
	.globl	"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@" # @"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@":
	.asciz	"bad array new length"

	.section	.rdata,"dr",largest,"??_7bad_array_new_length@std@@6B@"
	.p2align	2                               # @0
L___unnamed_1:
	.long	"??_R4bad_array_new_length@std@@6B@"
	.long	"??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_array_new_length@std@@6B@"
	.globl	"??_R4bad_array_new_length@std@@6B@" # @"??_R4bad_array_new_length@std@@6B@"
	.p2align	4
"??_R4bad_array_new_length@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	"??_R3bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R3bad_array_new_length@std@@8"
	.globl	"??_R3bad_array_new_length@std@@8" # @"??_R3bad_array_new_length@std@@8"
	.p2align	2
"??_R3bad_array_new_length@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	"??_R2bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R2bad_array_new_length@std@@8"
	.globl	"??_R2bad_array_new_length@std@@8" # @"??_R2bad_array_new_length@std@@8"
	.p2align	2
"??_R2bad_array_new_length@std@@8":
	.long	"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.long	"??_R1A@?0A@EA@bad_alloc@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.globl	"??_R1A@?0A@EA@bad_array_new_length@std@@8" # @"??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_array_new_length@std@@8":
	.long	"??_R0?AVbad_array_new_length@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3bad_array_new_length@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_alloc@std@@8"
	.globl	"??_R1A@?0A@EA@bad_alloc@std@@8" # @"??_R1A@?0A@EA@bad_alloc@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_alloc@std@@8":
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3bad_alloc@std@@8"

	.section	.rdata,"dr",discard,"??_R3bad_alloc@std@@8"
	.globl	"??_R3bad_alloc@std@@8"         # @"??_R3bad_alloc@std@@8"
	.p2align	2
"??_R3bad_alloc@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2bad_alloc@std@@8"

	.section	.rdata,"dr",discard,"??_R2bad_alloc@std@@8"
	.globl	"??_R2bad_alloc@std@@8"         # @"??_R2bad_alloc@std@@8"
	.p2align	2
"??_R2bad_alloc@std@@8":
	.long	"??_R1A@?0A@EA@bad_alloc@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
	.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
	.p2align	4
"??_R1A@?0A@EA@exception@std@@8":
	.long	"??_R0?AVexception@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3exception@std@@8"

	.section	.rdata,"dr",discard,"??_R3exception@std@@8"
	.globl	"??_R3exception@std@@8"         # @"??_R3exception@std@@8"
	.p2align	2
"??_R3exception@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2exception@std@@8"

	.section	.rdata,"dr",discard,"??_R2exception@std@@8"
	.globl	"??_R2exception@std@@8"         # @"??_R2exception@std@@8"
	.p2align	2
"??_R2exception@std@@8":
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",largest,"??_7bad_alloc@std@@6B@"
	.p2align	2                               # @1
L___unnamed_2:
	.long	"??_R4bad_alloc@std@@6B@"
	.long	"??_Gbad_alloc@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_alloc@std@@6B@"
	.globl	"??_R4bad_alloc@std@@6B@"       # @"??_R4bad_alloc@std@@6B@"
	.p2align	4
"??_R4bad_alloc@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVbad_alloc@std@@@8"
	.long	"??_R3bad_alloc@std@@8"

	.section	.rdata,"dr",largest,"??_7exception@std@@6B@"
	.p2align	2                               # @2
L___unnamed_3:
	.long	"??_R4exception@std@@6B@"
	.long	"??_Gexception@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
	.globl	"??_R4exception@std@@6B@"       # @"??_R4exception@std@@6B@"
	.p2align	4
"??_R4exception@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVexception@std@@@8"
	.long	"??_R3exception@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
	.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
	.asciz	"Unknown exception"

	.section	.rdata,"dr",largest,"??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	2                               # @3
L___unnamed_4:
	.long	"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"

	.section	.rdata,"dr",discard,"??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@"
	.globl	"??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@" # @"??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@"
	.p2align	2
"??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@":
	.long	0                               # 0x0
	.long	112                             # 0x70

	.section	.rdata,"dr",discard,"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	112                             # 0x70
	.long	4                               # 0x4
	.long	"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	5                               # 0x5
	.long	"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@A@3EA@ios_base@std@@8"
	.long	"??_R17A@3EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_istream@DU?$char_traits@D@std@@@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@A@3EA@ios_base@std@@8"
	.long	"??_R17A@3EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	80                              # 0x50
	.long	"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_ios@DU?$char_traits@D@std@@@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@?0A@EA@ios_base@std@@8"
	.long	"??_R17?0A@EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@ios_base@std@@8"
	.globl	"??_R1A@?0A@EA@ios_base@std@@8" # @"??_R1A@?0A@EA@ios_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@ios_base@std@@8":
	.long	"??_R0?AVios_base@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3ios_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AVios_base@std@@@8"
	.globl	"??_R0?AVios_base@std@@@8"      # @"??_R0?AVios_base@std@@@8"
	.p2align	4
"??_R0?AVios_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVios_base@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3ios_base@std@@8"
	.globl	"??_R3ios_base@std@@8"          # @"??_R3ios_base@std@@8"
	.p2align	2
"??_R3ios_base@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2ios_base@std@@8"
	.globl	"??_R2ios_base@std@@8"          # @"??_R2ios_base@std@@8"
	.p2align	2
"??_R2ios_base@std@@8":
	.long	"??_R1A@?0A@EA@ios_base@std@@8"
	.long	"??_R17?0A@EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R17?0A@EA@?$_Iosb@H@std@@8"
	.globl	"??_R17?0A@EA@?$_Iosb@H@std@@8" # @"??_R17?0A@EA@?$_Iosb@H@std@@8"
	.p2align	4
"??_R17?0A@EA@?$_Iosb@H@std@@8":
	.long	"??_R0?AV?$_Iosb@H@std@@@8"
	.long	0                               # 0x0
	.long	8                               # 0x8
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$_Iosb@H@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$_Iosb@H@std@@@8"
	.globl	"??_R0?AV?$_Iosb@H@std@@@8"     # @"??_R0?AV?$_Iosb@H@std@@@8"
	.p2align	4
"??_R0?AV?$_Iosb@H@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$_Iosb@H@std@@"

	.section	.rdata,"dr",discard,"??_R3?$_Iosb@H@std@@8"
	.globl	"??_R3?$_Iosb@H@std@@8"         # @"??_R3?$_Iosb@H@std@@8"
	.p2align	2
"??_R3?$_Iosb@H@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2?$_Iosb@H@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$_Iosb@H@std@@8"
	.globl	"??_R2?$_Iosb@H@std@@8"         # @"??_R2?$_Iosb@H@std@@8"
	.p2align	2
"??_R2?$_Iosb@H@std@@8":
	.long	"??_R1A@?0A@EA@?$_Iosb@H@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$_Iosb@H@std@@8"
	.globl	"??_R1A@?0A@EA@?$_Iosb@H@std@@8" # @"??_R1A@?0A@EA@?$_Iosb@H@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$_Iosb@H@std@@8":
	.long	"??_R0?AV?$_Iosb@H@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$_Iosb@H@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@A@3EA@ios_base@std@@8"
	.globl	"??_R1A@A@3EA@ios_base@std@@8"  # @"??_R1A@A@3EA@ios_base@std@@8"
	.p2align	4
"??_R1A@A@3EA@ios_base@std@@8":
	.long	"??_R0?AVios_base@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	64                              # 0x40
	.long	"??_R3ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R17A@3EA@?$_Iosb@H@std@@8"
	.globl	"??_R17A@3EA@?$_Iosb@H@std@@8"  # @"??_R17A@3EA@?$_Iosb@H@std@@8"
	.p2align	4
"??_R17A@3EA@?$_Iosb@H@std@@8":
	.long	"??_R0?AV?$_Iosb@H@std@@@8"
	.long	0                               # 0x0
	.long	8                               # 0x8
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	64                              # 0x40
	.long	"??_R3?$_Iosb@H@std@@8"

	.section	.rdata,"dr",largest,"??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4                               # @4
L___unnamed_5:
	.long	"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.long	"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.long	"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.long	"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.long	"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.long	"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ"
	.long	"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
	.long	"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
	.long	"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
	.long	"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
	.long	"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z"
	.long	"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"

	.section	.rdata,"dr",discard,"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.long	"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8" # @"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.globl	"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8" # @"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@"

	.section	.rdata,"dr",discard,"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8" # @"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.globl	"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8" # @"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.p2align	2
"??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.long	0

	.section	.bss,"bw",discard,"?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"
	.globl	"?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A" # @"?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A"
	.p2align	2
"?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A":
	.zero	8

	.section	.rdata,"dr",largest,"??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4                               # @5
L___unnamed_6:
	.long	"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.long	"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.long	"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ"
	.long	"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.long	"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"
	.long	"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ"
	.long	"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z"
	.long	"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z"
	.long	"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"
	.long	"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"
	.long	"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z"
	.long	"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.long	"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"

	.section	.rdata,"dr",discard,"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"
	.globl	"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@" # @"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"
"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@":
	.asciz	"invalid string position"

	.section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B"
	.globl	"?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B" # @"?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B"
	.p2align	2
"?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B":
	.long	0

	.section	.rdata,"dr",discard,"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"
	.globl	"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@" # @"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"
"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@":
	.asciz	"bad locale name"

	.section	.rdata,"dr",largest,"??_7?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.p2align	4                               # @6
L___unnamed_7:
	.long	"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.long	"??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ"
	.long	"?do_max_length@codecvt_base@std@@MBEHXZ"
	.long	"?do_encoding@codecvt_base@std@@MBEHXZ"
	.long	"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
	.long	"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z"
	.long	"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z"
	.long	"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z"

	.section	.rdata,"dr",discard,"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.globl	"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@" # @"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.p2align	4
"??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.long	"??_R3?$codecvt@DDU_Mbstatet@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.globl	"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8" # @"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.p2align	4
"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$codecvt@DDU_Mbstatet@@@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3?$codecvt@DDU_Mbstatet@@@std@@8"
	.globl	"??_R3?$codecvt@DDU_Mbstatet@@@std@@8" # @"??_R3?$codecvt@DDU_Mbstatet@@@std@@8"
	.p2align	2
"??_R3?$codecvt@DDU_Mbstatet@@@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	5                               # 0x5
	.long	"??_R2?$codecvt@DDU_Mbstatet@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$codecvt@DDU_Mbstatet@@@std@@8"
	.globl	"??_R2?$codecvt@DDU_Mbstatet@@@std@@8" # @"??_R2?$codecvt@DDU_Mbstatet@@@std@@8"
	.p2align	4
"??_R2?$codecvt@DDU_Mbstatet@@@std@@8":
	.long	"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8"
	.long	"??_R1A@?0A@EA@codecvt_base@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8" # @"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8":
	.long	"??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$codecvt@DDU_Mbstatet@@@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@codecvt_base@std@@8"
	.globl	"??_R1A@?0A@EA@codecvt_base@std@@8" # @"??_R1A@?0A@EA@codecvt_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@codecvt_base@std@@8":
	.long	"??_R0?AVcodecvt_base@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3codecvt_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AVcodecvt_base@std@@@8"
	.globl	"??_R0?AVcodecvt_base@std@@@8"  # @"??_R0?AVcodecvt_base@std@@@8"
	.p2align	4
"??_R0?AVcodecvt_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVcodecvt_base@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3codecvt_base@std@@8"
	.globl	"??_R3codecvt_base@std@@8"      # @"??_R3codecvt_base@std@@8"
	.p2align	2
"??_R3codecvt_base@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	4                               # 0x4
	.long	"??_R2codecvt_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2codecvt_base@std@@8"
	.globl	"??_R2codecvt_base@std@@8"      # @"??_R2codecvt_base@std@@8"
	.p2align	4
"??_R2codecvt_base@std@@8":
	.long	"??_R1A@?0A@EA@codecvt_base@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@facet@locale@std@@8"
	.globl	"??_R1A@?0A@EA@facet@locale@std@@8" # @"??_R1A@?0A@EA@facet@locale@std@@8"
	.p2align	4
"??_R1A@?0A@EA@facet@locale@std@@8":
	.long	"??_R0?AVfacet@locale@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3facet@locale@std@@8"

	.section	.data,"dw",discard,"??_R0?AVfacet@locale@std@@@8"
	.globl	"??_R0?AVfacet@locale@std@@@8"  # @"??_R0?AVfacet@locale@std@@@8"
	.p2align	4
"??_R0?AVfacet@locale@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVfacet@locale@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3facet@locale@std@@8"
	.globl	"??_R3facet@locale@std@@8"      # @"??_R3facet@locale@std@@8"
	.p2align	2
"??_R3facet@locale@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	3                               # 0x3
	.long	"??_R2facet@locale@std@@8"

	.section	.rdata,"dr",discard,"??_R2facet@locale@std@@8"
	.globl	"??_R2facet@locale@std@@8"      # @"??_R2facet@locale@std@@8"
	.p2align	2
"??_R2facet@locale@std@@8":
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Facet_base@std@@8"
	.globl	"??_R1A@?0A@EA@_Facet_base@std@@8" # @"??_R1A@?0A@EA@_Facet_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@_Facet_base@std@@8":
	.long	"??_R0?AV_Facet_base@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_Facet_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AV_Facet_base@std@@@8"
	.globl	"??_R0?AV_Facet_base@std@@@8"   # @"??_R0?AV_Facet_base@std@@@8"
	.p2align	4
"??_R0?AV_Facet_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV_Facet_base@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3_Facet_base@std@@8"
	.globl	"??_R3_Facet_base@std@@8"       # @"??_R3_Facet_base@std@@8"
	.p2align	2
"??_R3_Facet_base@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2_Facet_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2_Facet_base@std@@8"
	.globl	"??_R2_Facet_base@std@@8"       # @"??_R2_Facet_base@std@@8"
	.p2align	2
"??_R2_Facet_base@std@@8":
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.globl	"??_R13?0A@EA@_Crt_new_delete@std@@8" # @"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.p2align	4
"??_R13?0A@EA@_Crt_new_delete@std@@8":
	.long	"??_R0?AU_Crt_new_delete@std@@@8"
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_Crt_new_delete@std@@8"

	.section	.data,"dw",discard,"??_R0?AU_Crt_new_delete@std@@@8"
	.globl	"??_R0?AU_Crt_new_delete@std@@@8" # @"??_R0?AU_Crt_new_delete@std@@@8"
	.p2align	4
"??_R0?AU_Crt_new_delete@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AU_Crt_new_delete@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3_Crt_new_delete@std@@8"
	.globl	"??_R3_Crt_new_delete@std@@8"   # @"??_R3_Crt_new_delete@std@@8"
	.p2align	2
"??_R3_Crt_new_delete@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2_Crt_new_delete@std@@8"

	.section	.rdata,"dr",discard,"??_R2_Crt_new_delete@std@@8"
	.globl	"??_R2_Crt_new_delete@std@@8"   # @"??_R2_Crt_new_delete@std@@8"
	.p2align	2
"??_R2_Crt_new_delete@std@@8":
	.long	"??_R1A@?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Crt_new_delete@std@@8"
	.globl	"??_R1A@?0A@EA@_Crt_new_delete@std@@8" # @"??_R1A@?0A@EA@_Crt_new_delete@std@@8"
	.p2align	4
"??_R1A@?0A@EA@_Crt_new_delete@std@@8":
	.long	"??_R0?AU_Crt_new_delete@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_Crt_new_delete@std@@8"

	.section	.rdata,"dr",largest,"??_7codecvt_base@std@@6B@"
	.p2align	4                               # @7
L___unnamed_8:
	.long	"??_R4codecvt_base@std@@6B@"
	.long	"??_Gcodecvt_base@std@@UAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_always_noconv@codecvt_base@std@@MBE_NXZ"
	.long	"?do_max_length@codecvt_base@std@@MBEHXZ"
	.long	"?do_encoding@codecvt_base@std@@MBEHXZ"

	.section	.rdata,"dr",discard,"??_R4codecvt_base@std@@6B@"
	.globl	"??_R4codecvt_base@std@@6B@"    # @"??_R4codecvt_base@std@@6B@"
	.p2align	4
"??_R4codecvt_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVcodecvt_base@std@@@8"
	.long	"??_R3codecvt_base@std@@8"

	.section	.rdata,"dr",largest,"??_7facet@locale@std@@6B@"
	.p2align	2                               # @8
L___unnamed_9:
	.long	"??_R4facet@locale@std@@6B@"
	.long	"??_Gfacet@locale@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"

	.section	.rdata,"dr",discard,"??_R4facet@locale@std@@6B@"
	.globl	"??_R4facet@locale@std@@6B@"    # @"??_R4facet@locale@std@@6B@"
	.p2align	4
"??_R4facet@locale@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVfacet@locale@std@@@8"
	.long	"??_R3facet@locale@std@@8"

	.section	.rdata,"dr",largest,"??_7_Facet_base@std@@6B@"
	.p2align	2                               # @9
L___unnamed_10:
	.long	"??_R4_Facet_base@std@@6B@"
	.long	"??_G_Facet_base@std@@UAEPAXI@Z"
	.long	__purecall
	.long	__purecall

	.section	.rdata,"dr",discard,"??_R4_Facet_base@std@@6B@"
	.globl	"??_R4_Facet_base@std@@6B@"     # @"??_R4_Facet_base@std@@6B@"
	.p2align	4
"??_R4_Facet_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV_Facet_base@std@@@8"
	.long	"??_R3_Facet_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AVbad_cast@std@@@8"
	.globl	"??_R0?AVbad_cast@std@@@8"      # @"??_R0?AVbad_cast@std@@@8"
	.p2align	4
"??_R0?AVbad_cast@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVbad_cast@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVbad_cast@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0bad_cast@std@@QAE@ABV01@@Z"

	.section	.xdata,"dr",discard,"__CTA2?AVbad_cast@std@@"
	.globl	"__CTA2?AVbad_cast@std@@"       # @"_CTA2?AVbad_cast@std@@"
	.p2align	2
"__CTA2?AVbad_cast@std@@":
	.long	2                               # 0x2
	.long	"__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"

	.section	.xdata,"dr",discard,"__TI2?AVbad_cast@std@@"
	.globl	"__TI2?AVbad_cast@std@@"        # @"_TI2?AVbad_cast@std@@"
	.p2align	2
"__TI2?AVbad_cast@std@@":
	.long	0                               # 0x0
	.long	"??1exception@std@@UAE@XZ"
	.long	0
	.long	"__CTA2?AVbad_cast@std@@"

	.section	.rdata,"dr",discard,"??_C@_08EPJLHIJG@bad?5cast?$AA@"
	.globl	"??_C@_08EPJLHIJG@bad?5cast?$AA@" # @"??_C@_08EPJLHIJG@bad?5cast?$AA@"
"??_C@_08EPJLHIJG@bad?5cast?$AA@":
	.asciz	"bad cast"

	.section	.rdata,"dr",largest,"??_7bad_cast@std@@6B@"
	.p2align	2                               # @10
L___unnamed_11:
	.long	"??_R4bad_cast@std@@6B@"
	.long	"??_Gbad_cast@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4bad_cast@std@@6B@"
	.globl	"??_R4bad_cast@std@@6B@"        # @"??_R4bad_cast@std@@6B@"
	.p2align	4
"??_R4bad_cast@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVbad_cast@std@@@8"
	.long	"??_R3bad_cast@std@@8"

	.section	.rdata,"dr",discard,"??_R3bad_cast@std@@8"
	.globl	"??_R3bad_cast@std@@8"          # @"??_R3bad_cast@std@@8"
	.p2align	2
"??_R3bad_cast@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2bad_cast@std@@8"

	.section	.rdata,"dr",discard,"??_R2bad_cast@std@@8"
	.globl	"??_R2bad_cast@std@@8"          # @"??_R2bad_cast@std@@8"
	.p2align	2
"??_R2bad_cast@std@@8":
	.long	"??_R1A@?0A@EA@bad_cast@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_cast@std@@8"
	.globl	"??_R1A@?0A@EA@bad_cast@std@@8" # @"??_R1A@?0A@EA@bad_cast@std@@8"
	.p2align	4
"??_R1A@?0A@EA@bad_cast@std@@8":
	.long	"??_R0?AVbad_cast@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3bad_cast@std@@8"

	.section	.rdata,"dr",largest,"??_7ios_base@std@@6B@"
	.p2align	2                               # @11
L___unnamed_12:
	.long	"??_R4ios_base@std@@6B@"
	.long	"??_Gios_base@std@@UAEPAXI@Z"

	.section	.rdata,"dr",discard,"??_R4ios_base@std@@6B@"
	.globl	"??_R4ios_base@std@@6B@"        # @"??_R4ios_base@std@@6B@"
	.p2align	4
"??_R4ios_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVios_base@std@@@8"
	.long	"??_R3ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
	.globl	"??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@" # @"??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@"
"??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@":
	.asciz	"deque<T> too long"

	.section	.rdata,"dr",largest,"??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	2                               # @12
L___unnamed_13:
	.long	"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",largest,"??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	2                               # @13
L___unnamed_14:
	.long	"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.long	"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"

	.section	.rdata,"dr",discard,"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.globl	"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@" # @"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.p2align	4
"??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	24                              # 0x18
	.long	4                               # 0x4
	.long	"??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.long	"??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
	.globl	"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@" # @"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@":
	.asciz	"ios_base::badbit set"

	.section	.rdata,"dr",discard,"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
	.globl	"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@" # @"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@":
	.asciz	"ios_base::failbit set"

	.section	.rdata,"dr",discard,"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
	.globl	"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@" # @"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@":
	.asciz	"ios_base::eofbit set"

	.section	.data,"dw",discard,"??_R0?AVfailure@ios_base@std@@@8"
	.globl	"??_R0?AVfailure@ios_base@std@@@8" # @"??_R0?AVfailure@ios_base@std@@@8"
	.p2align	4
"??_R0?AVfailure@ios_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVfailure@ios_base@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20"
	.globl	"__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20" # @"_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20"
	.p2align	4
"__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20":
	.long	0                               # 0x0
	.long	"??_R0?AVfailure@ios_base@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	20                              # 0x14
	.long	"??0failure@ios_base@std@@QAE@ABV012@@Z"

	.section	.data,"dw",discard,"??_R0?AVsystem_error@std@@@8"
	.globl	"??_R0?AVsystem_error@std@@@8"  # @"??_R0?AVsystem_error@std@@@8"
	.p2align	4
"??_R0?AVsystem_error@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVsystem_error@std@@"
	.zero	1

	.section	.xdata,"dr",discard,"__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20"
	.globl	"__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20" # @"_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20"
	.p2align	4
"__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20":
	.long	0                               # 0x0
	.long	"??_R0?AVsystem_error@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	20                              # 0x14
	.long	"??0system_error@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AV_System_error@std@@@8"
	.globl	"??_R0?AV_System_error@std@@@8" # @"??_R0?AV_System_error@std@@@8"
	.p2align	4
"??_R0?AV_System_error@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV_System_error@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20"
	.globl	"__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20" # @"_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20"
	.p2align	4
"__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20":
	.long	0                               # 0x0
	.long	"??_R0?AV_System_error@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	20                              # 0x14
	.long	"??0_System_error@std@@QAE@ABV01@@Z"

	.section	.data,"dw",discard,"??_R0?AVruntime_error@std@@@8"
	.globl	"??_R0?AVruntime_error@std@@@8" # @"??_R0?AVruntime_error@std@@@8"
	.p2align	4
"??_R0?AVruntime_error@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVruntime_error@std@@"

	.section	.xdata,"dr",discard,"__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12"
	.globl	"__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12" # @"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12"
	.p2align	4
"__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12":
	.long	0                               # 0x0
	.long	"??_R0?AVruntime_error@std@@@8"
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	12                              # 0xc
	.long	"??0runtime_error@std@@QAE@ABV01@@Z"

	.section	.xdata,"dr",discard,"__CTA5?AVfailure@ios_base@std@@"
	.globl	"__CTA5?AVfailure@ios_base@std@@" # @"_CTA5?AVfailure@ios_base@std@@"
	.p2align	4
"__CTA5?AVfailure@ios_base@std@@":
	.long	5                               # 0x5
	.long	"__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20"
	.long	"__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20"
	.long	"__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20"
	.long	"__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12"
	.long	"__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12"

	.section	.xdata,"dr",discard,"__TI5?AVfailure@ios_base@std@@"
	.globl	"__TI5?AVfailure@ios_base@std@@" # @"_TI5?AVfailure@ios_base@std@@"
	.p2align	2
"__TI5?AVfailure@ios_base@std@@":
	.long	0                               # 0x0
	.long	"??1exception@std@@UAE@XZ"
	.long	0
	.long	"__CTA5?AVfailure@ios_base@std@@"

	.section	.bss,"bw",discard,"?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	.globl	"?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A" # @"?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	.p2align	2
"?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A":
	.zero	8

	.section	.rdata,"dr",largest,"??_7_Iostream_error_category2@std@@6B@"
	.p2align	4                               # @14
L___unnamed_15:
	.long	"??_R4_Iostream_error_category2@std@@6B@"
	.long	"??_G_Iostream_error_category2@std@@UAEPAXI@Z"
	.long	"?name@_Iostream_error_category2@std@@UBEPBDXZ"
	.long	"?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
	.long	"?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z"
	.long	"?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z"
	.long	"?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z"

	.section	.rdata,"dr",discard,"??_R4_Iostream_error_category2@std@@6B@"
	.globl	"??_R4_Iostream_error_category2@std@@6B@" # @"??_R4_Iostream_error_category2@std@@6B@"
	.p2align	4
"??_R4_Iostream_error_category2@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV_Iostream_error_category2@std@@@8"
	.long	"??_R3_Iostream_error_category2@std@@8"

	.section	.data,"dw",discard,"??_R0?AV_Iostream_error_category2@std@@@8"
	.globl	"??_R0?AV_Iostream_error_category2@std@@@8" # @"??_R0?AV_Iostream_error_category2@std@@@8"
	.p2align	4
"??_R0?AV_Iostream_error_category2@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV_Iostream_error_category2@std@@"

	.section	.rdata,"dr",discard,"??_R3_Iostream_error_category2@std@@8"
	.globl	"??_R3_Iostream_error_category2@std@@8" # @"??_R3_Iostream_error_category2@std@@8"
	.p2align	2
"??_R3_Iostream_error_category2@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2_Iostream_error_category2@std@@8"

	.section	.rdata,"dr",discard,"??_R2_Iostream_error_category2@std@@8"
	.globl	"??_R2_Iostream_error_category2@std@@8" # @"??_R2_Iostream_error_category2@std@@8"
	.p2align	2
"??_R2_Iostream_error_category2@std@@8":
	.long	"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
	.long	"??_R1A@?0A@EA@error_category@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
	.globl	"??_R1A@?0A@EA@_Iostream_error_category2@std@@8" # @"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
	.p2align	4
"??_R1A@?0A@EA@_Iostream_error_category2@std@@8":
	.long	"??_R0?AV_Iostream_error_category2@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_Iostream_error_category2@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@error_category@std@@8"
	.globl	"??_R1A@?0A@EA@error_category@std@@8" # @"??_R1A@?0A@EA@error_category@std@@8"
	.p2align	4
"??_R1A@?0A@EA@error_category@std@@8":
	.long	"??_R0?AVerror_category@std@@@8"
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3error_category@std@@8"

	.section	.data,"dw",discard,"??_R0?AVerror_category@std@@@8"
	.globl	"??_R0?AVerror_category@std@@@8" # @"??_R0?AVerror_category@std@@@8"
	.p2align	4
"??_R0?AVerror_category@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AVerror_category@std@@"
	.zero	3

	.section	.rdata,"dr",discard,"??_R3error_category@std@@8"
	.globl	"??_R3error_category@std@@8"    # @"??_R3error_category@std@@8"
	.p2align	2
"??_R3error_category@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	"??_R2error_category@std@@8"

	.section	.rdata,"dr",discard,"??_R2error_category@std@@8"
	.globl	"??_R2error_category@std@@8"    # @"??_R2error_category@std@@8"
	.p2align	2
"??_R2error_category@std@@8":
	.long	"??_R1A@?0A@EA@error_category@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_C@_08LLGCOLLL@iostream?$AA@"
	.globl	"??_C@_08LLGCOLLL@iostream?$AA@" # @"??_C@_08LLGCOLLL@iostream?$AA@"
"??_C@_08LLGCOLLL@iostream?$AA@":
	.asciz	"iostream"

	.section	.rdata,"dr",discard,"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
	.globl	"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB" # @"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB":
	.asciz	"iostream stream error"

	.section	.rdata,"dr",largest,"??_7failure@ios_base@std@@6B@"
	.p2align	2                               # @15
L___unnamed_16:
	.long	"??_R4failure@ios_base@std@@6B@"
	.long	"??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4failure@ios_base@std@@6B@"
	.globl	"??_R4failure@ios_base@std@@6B@" # @"??_R4failure@ios_base@std@@6B@"
	.p2align	4
"??_R4failure@ios_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVfailure@ios_base@std@@@8"
	.long	"??_R3failure@ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R3failure@ios_base@std@@8"
	.globl	"??_R3failure@ios_base@std@@8"  # @"??_R3failure@ios_base@std@@8"
	.p2align	2
"??_R3failure@ios_base@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	5                               # 0x5
	.long	"??_R2failure@ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2failure@ios_base@std@@8"
	.globl	"??_R2failure@ios_base@std@@8"  # @"??_R2failure@ios_base@std@@8"
	.p2align	4
"??_R2failure@ios_base@std@@8":
	.long	"??_R1A@?0A@EA@failure@ios_base@std@@8"
	.long	"??_R1A@?0A@EA@system_error@std@@8"
	.long	"??_R1A@?0A@EA@_System_error@std@@8"
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@failure@ios_base@std@@8"
	.globl	"??_R1A@?0A@EA@failure@ios_base@std@@8" # @"??_R1A@?0A@EA@failure@ios_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@failure@ios_base@std@@8":
	.long	"??_R0?AVfailure@ios_base@std@@@8"
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3failure@ios_base@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@system_error@std@@8"
	.globl	"??_R1A@?0A@EA@system_error@std@@8" # @"??_R1A@?0A@EA@system_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@system_error@std@@8":
	.long	"??_R0?AVsystem_error@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3system_error@std@@8"

	.section	.rdata,"dr",discard,"??_R3system_error@std@@8"
	.globl	"??_R3system_error@std@@8"      # @"??_R3system_error@std@@8"
	.p2align	2
"??_R3system_error@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	4                               # 0x4
	.long	"??_R2system_error@std@@8"

	.section	.rdata,"dr",discard,"??_R2system_error@std@@8"
	.globl	"??_R2system_error@std@@8"      # @"??_R2system_error@std@@8"
	.p2align	4
"??_R2system_error@std@@8":
	.long	"??_R1A@?0A@EA@system_error@std@@8"
	.long	"??_R1A@?0A@EA@_System_error@std@@8"
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@_System_error@std@@8"
	.globl	"??_R1A@?0A@EA@_System_error@std@@8" # @"??_R1A@?0A@EA@_System_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@_System_error@std@@8":
	.long	"??_R0?AV_System_error@std@@@8"
	.long	2                               # 0x2
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3_System_error@std@@8"

	.section	.rdata,"dr",discard,"??_R3_System_error@std@@8"
	.globl	"??_R3_System_error@std@@8"     # @"??_R3_System_error@std@@8"
	.p2align	2
"??_R3_System_error@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	"??_R2_System_error@std@@8"

	.section	.rdata,"dr",discard,"??_R2_System_error@std@@8"
	.globl	"??_R2_System_error@std@@8"     # @"??_R2_System_error@std@@8"
	.p2align	2
"??_R2_System_error@std@@8":
	.long	"??_R1A@?0A@EA@_System_error@std@@8"
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@runtime_error@std@@8"
	.globl	"??_R1A@?0A@EA@runtime_error@std@@8" # @"??_R1A@?0A@EA@runtime_error@std@@8"
	.p2align	4
"??_R1A@?0A@EA@runtime_error@std@@8":
	.long	"??_R0?AVruntime_error@std@@@8"
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3runtime_error@std@@8"

	.section	.rdata,"dr",discard,"??_R3runtime_error@std@@8"
	.globl	"??_R3runtime_error@std@@8"     # @"??_R3runtime_error@std@@8"
	.p2align	2
"??_R3runtime_error@std@@8":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	2                               # 0x2
	.long	"??_R2runtime_error@std@@8"

	.section	.rdata,"dr",discard,"??_R2runtime_error@std@@8"
	.globl	"??_R2runtime_error@std@@8"     # @"??_R2runtime_error@std@@8"
	.p2align	2
"??_R2runtime_error@std@@8":
	.long	"??_R1A@?0A@EA@runtime_error@std@@8"
	.long	"??_R1A@?0A@EA@exception@std@@8"
	.long	0

	.section	.rdata,"dr",largest,"??_7system_error@std@@6B@"
	.p2align	2                               # @16
L___unnamed_17:
	.long	"??_R4system_error@std@@6B@"
	.long	"??_Gsystem_error@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4system_error@std@@6B@"
	.globl	"??_R4system_error@std@@6B@"    # @"??_R4system_error@std@@6B@"
	.p2align	4
"??_R4system_error@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVsystem_error@std@@@8"
	.long	"??_R3system_error@std@@8"

	.section	.rdata,"dr",largest,"??_7_System_error@std@@6B@"
	.p2align	2                               # @17
L___unnamed_18:
	.long	"??_R4_System_error@std@@6B@"
	.long	"??_G_System_error@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4_System_error@std@@6B@"
	.globl	"??_R4_System_error@std@@6B@"   # @"??_R4_System_error@std@@6B@"
	.p2align	4
"??_R4_System_error@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV_System_error@std@@@8"
	.long	"??_R3_System_error@std@@8"

	.section	.rdata,"dr",discard,"??_C@_02LMMGGCAJ@?3?5?$AA@"
	.globl	"??_C@_02LMMGGCAJ@?3?5?$AA@"    # @"??_C@_02LMMGGCAJ@?3?5?$AA@"
"??_C@_02LMMGGCAJ@?3?5?$AA@":
	.asciz	": "

	.section	.rdata,"dr",largest,"??_7runtime_error@std@@6B@"
	.p2align	2                               # @18
L___unnamed_19:
	.long	"??_R4runtime_error@std@@6B@"
	.long	"??_Gruntime_error@std@@UAEPAXI@Z"
	.long	"?what@exception@std@@UBEPBDXZ"

	.section	.rdata,"dr",discard,"??_R4runtime_error@std@@6B@"
	.globl	"??_R4runtime_error@std@@6B@"   # @"??_R4runtime_error@std@@6B@"
	.p2align	4
"??_R4runtime_error@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AVruntime_error@std@@@8"
	.long	"??_R3runtime_error@std@@8"

	.section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B"
	.globl	"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B" # @"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B"
	.p2align	2
"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B":
	.long	0

	.section	.rdata,"dr",largest,"??_7?$ctype@D@std@@6B@"
	.p2align	4                               # @19
L___unnamed_20:
	.long	"??_R4?$ctype@D@std@@6B@"
	.long	"??_G?$ctype@D@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z"
	.long	"?do_tolower@?$ctype@D@std@@MBEDD@Z"
	.long	"?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z"
	.long	"?do_toupper@?$ctype@D@std@@MBEDD@Z"
	.long	"?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z"
	.long	"?do_widen@?$ctype@D@std@@MBEDD@Z"
	.long	"?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z"
	.long	"?do_narrow@?$ctype@D@std@@MBEDDD@Z"

	.section	.rdata,"dr",discard,"??_R4?$ctype@D@std@@6B@"
	.globl	"??_R4?$ctype@D@std@@6B@"       # @"??_R4?$ctype@D@std@@6B@"
	.p2align	4
"??_R4?$ctype@D@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$ctype@D@std@@@8"
	.long	"??_R3?$ctype@D@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$ctype@D@std@@@8"
	.globl	"??_R0?AV?$ctype@D@std@@@8"     # @"??_R0?AV?$ctype@D@std@@@8"
	.p2align	4
"??_R0?AV?$ctype@D@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$ctype@D@std@@"

	.section	.rdata,"dr",discard,"??_R3?$ctype@D@std@@8"
	.globl	"??_R3?$ctype@D@std@@8"         # @"??_R3?$ctype@D@std@@8"
	.p2align	2
"??_R3?$ctype@D@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	5                               # 0x5
	.long	"??_R2?$ctype@D@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$ctype@D@std@@8"
	.globl	"??_R2?$ctype@D@std@@8"         # @"??_R2?$ctype@D@std@@8"
	.p2align	4
"??_R2?$ctype@D@std@@8":
	.long	"??_R1A@?0A@EA@?$ctype@D@std@@8"
	.long	"??_R1A@?0A@EA@ctype_base@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$ctype@D@std@@8"
	.globl	"??_R1A@?0A@EA@?$ctype@D@std@@8" # @"??_R1A@?0A@EA@?$ctype@D@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$ctype@D@std@@8":
	.long	"??_R0?AV?$ctype@D@std@@@8"
	.long	4                               # 0x4
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$ctype@D@std@@8"

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@ctype_base@std@@8"
	.globl	"??_R1A@?0A@EA@ctype_base@std@@8" # @"??_R1A@?0A@EA@ctype_base@std@@8"
	.p2align	4
"??_R1A@?0A@EA@ctype_base@std@@8":
	.long	"??_R0?AUctype_base@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3ctype_base@std@@8"

	.section	.data,"dw",discard,"??_R0?AUctype_base@std@@@8"
	.globl	"??_R0?AUctype_base@std@@@8"    # @"??_R0?AUctype_base@std@@@8"
	.p2align	4
"??_R0?AUctype_base@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AUctype_base@std@@"
	.zero	3

	.section	.rdata,"dr",discard,"??_R3ctype_base@std@@8"
	.globl	"??_R3ctype_base@std@@8"        # @"??_R3ctype_base@std@@8"
	.p2align	2
"??_R3ctype_base@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	4                               # 0x4
	.long	"??_R2ctype_base@std@@8"

	.section	.rdata,"dr",discard,"??_R2ctype_base@std@@8"
	.globl	"??_R2ctype_base@std@@8"        # @"??_R2ctype_base@std@@8"
	.p2align	4
"??_R2ctype_base@std@@8":
	.long	"??_R1A@?0A@EA@ctype_base@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",largest,"??_7ctype_base@std@@6B@"
	.p2align	2                               # @20
L___unnamed_21:
	.long	"??_R4ctype_base@std@@6B@"
	.long	"??_Gctype_base@std@@UAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"

	.section	.rdata,"dr",discard,"??_R4ctype_base@std@@6B@"
	.globl	"??_R4ctype_base@std@@6B@"      # @"??_R4ctype_base@std@@6B@"
	.p2align	4
"??_R4ctype_base@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AUctype_base@std@@@8"
	.long	"??_R3ctype_base@std@@8"

	.section	.rdata,"dr",discard,"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
	.globl	"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@" # @"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@":
	.asciz	"vector too long"

	.section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B"
	.globl	"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B" # @"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B"
	.p2align	2
"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B":
	.long	0

	.section	.rdata,"dr",largest,"??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.p2align	4                               # @21
L___unnamed_22:
	.long	"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.long	"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z"
	.long	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"

	.section	.rdata,"dr",discard,"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.globl	"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@" # @"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.p2align	4
"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.long	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.globl	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8" # @"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.p2align	4
"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@"
	.zero	2

	.section	.rdata,"dr",discard,"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.globl	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.p2align	2
"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	4                               # 0x4
	.long	"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.globl	"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.p2align	4
"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
	.long	"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.globl	"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
	.long	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"

	.section	.rdata,"dr",discard,"??_C@_02BBAHNLBA@?$CFp?$AA@"
	.globl	"??_C@_02BBAHNLBA@?$CFp?$AA@"   # @"??_C@_02BBAHNLBA@?$CFp?$AA@"
"??_C@_02BBAHNLBA@?$CFp?$AA@":
	.asciz	"%p"

	.section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B"
	.globl	"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B" # @"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B"
	.p2align	2
"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B":
	.long	0

	.section	.rdata,"dr",largest,"??_7?$numpunct@D@std@@6B@"
	.p2align	4                               # @22
L___unnamed_23:
	.long	"??_R4?$numpunct@D@std@@6B@"
	.long	"??_G?$numpunct@D@std@@MAEPAXI@Z"
	.long	"?_Incref@facet@locale@std@@UAEXXZ"
	.long	"?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ"
	.long	"?do_decimal_point@?$numpunct@D@std@@MBEDXZ"
	.long	"?do_thousands_sep@?$numpunct@D@std@@MBEDXZ"
	.long	"?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.long	"?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
	.long	"?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"

	.section	.rdata,"dr",discard,"??_R4?$numpunct@D@std@@6B@"
	.globl	"??_R4?$numpunct@D@std@@6B@"    # @"??_R4?$numpunct@D@std@@6B@"
	.p2align	4
"??_R4?$numpunct@D@std@@6B@":
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	"??_R0?AV?$numpunct@D@std@@@8"
	.long	"??_R3?$numpunct@D@std@@8"

	.section	.data,"dw",discard,"??_R0?AV?$numpunct@D@std@@@8"
	.globl	"??_R0?AV?$numpunct@D@std@@@8"  # @"??_R0?AV?$numpunct@D@std@@@8"
	.p2align	4
"??_R0?AV?$numpunct@D@std@@@8":
	.long	"??_7type_info@@6B@"
	.long	0
	.asciz	".?AV?$numpunct@D@std@@"
	.zero	1

	.section	.rdata,"dr",discard,"??_R3?$numpunct@D@std@@8"
	.globl	"??_R3?$numpunct@D@std@@8"      # @"??_R3?$numpunct@D@std@@8"
	.p2align	2
"??_R3?$numpunct@D@std@@8":
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	4                               # 0x4
	.long	"??_R2?$numpunct@D@std@@8"

	.section	.rdata,"dr",discard,"??_R2?$numpunct@D@std@@8"
	.globl	"??_R2?$numpunct@D@std@@8"      # @"??_R2?$numpunct@D@std@@8"
	.p2align	4
"??_R2?$numpunct@D@std@@8":
	.long	"??_R1A@?0A@EA@?$numpunct@D@std@@8"
	.long	"??_R1A@?0A@EA@facet@locale@std@@8"
	.long	"??_R1A@?0A@EA@_Facet_base@std@@8"
	.long	"??_R13?0A@EA@_Crt_new_delete@std@@8"
	.long	0

	.section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$numpunct@D@std@@8"
	.globl	"??_R1A@?0A@EA@?$numpunct@D@std@@8" # @"??_R1A@?0A@EA@?$numpunct@D@std@@8"
	.p2align	4
"??_R1A@?0A@EA@?$numpunct@D@std@@8":
	.long	"??_R0?AV?$numpunct@D@std@@@8"
	.long	3                               # 0x3
	.long	0                               # 0x0
	.long	4294967295                      # 0xffffffff
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	"??_R3?$numpunct@D@std@@8"

	.section	.bss,"bw",discard,"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.globl	"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA" # @"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.p2align	3
"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA":
	.quad	0                               # 0x0

	.section	.rdata,"dr",discard,"??_C@_02MDKMJEGG@eE?$AA@"
	.globl	"??_C@_02MDKMJEGG@eE?$AA@"      # @"??_C@_02MDKMJEGG@eE?$AA@"
"??_C@_02MDKMJEGG@eE?$AA@":
	.asciz	"eE"

	.section	.rdata,"dr",discard,"??_C@_02OOPEBDOJ@pP?$AA@"
	.globl	"??_C@_02OOPEBDOJ@pP?$AA@"      # @"??_C@_02OOPEBDOJ@pP?$AA@"
"??_C@_02OOPEBDOJ@pP?$AA@":
	.asciz	"pP"

	.section	.rdata,"dr",discard,"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"
	.globl	"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@" # @"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"
"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@":
	.asciz	"map/set too long"

	.section	.CRT$XCU,"dr",associative,"?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.p2align	2
	.long	"??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ"
	.section	.CRT$XCU,"dr",associative,"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.p2align	2
	.long	"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
	.section	.CRT$XCU,"dr",associative,"?id@?$numpunct@D@std@@2V0locale@2@A"
	.p2align	2
	.long	"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
	.section	.CRT$XCU,"dr"
	.p2align	2
	.long	__GLOBAL__sub_I_main.cpp
	.section	.drectve,"yn"
	.ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
	.ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=0\""
	.ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MT_StaticRelease\""
	.ascii	" /DEFAULTLIB:libcpmt.lib"
	.ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
	.ascii	" /DEFAULTLIB:uuid.lib"
	.ascii	" /DEFAULTLIB:uuid.lib"
	.safeseh	"___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	.safeseh	"___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	.safeseh	"___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.safeseh	"___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.safeseh	"___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.safeseh	"___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.safeseh	"___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	.safeseh	"___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.safeseh	"___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.safeseh	"___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.safeseh	___ehhandler$main
	.safeseh	"___ehhandler$??0fileInfo@@QAE@XZ"
	.safeseh	"___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.safeseh	"___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.safeseh	"___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.safeseh	"___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.safeseh	"___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.safeseh	"___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.safeseh	"___ehhandler$??0_Locinfo@std@@QAE@PBD@Z"
	.safeseh	"___ehhandler$??1_Locinfo@std@@QAE@XZ"
	.safeseh	"___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??1exception@std@@UAE@XZ"
	.safeseh	"___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gios_base@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.safeseh	"___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.safeseh	"___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.safeseh	"___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.safeseh	"___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.safeseh	"___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.safeseh	"___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z"
	.safeseh	"___ehhandler$??0system_error@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0_System_error@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z"
	.safeseh	"___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.safeseh	"___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.safeseh	"___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.safeseh	"___ehhandler$??_G_System_error@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z"
	.safeseh	"___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.safeseh	"___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.safeseh	"___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.safeseh	"___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.safeseh	"___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.safeseh	"___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.safeseh	"___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.safeseh	"___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.safeseh	"___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.safeseh	"___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.safeseh	"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.safeseh	"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.safeseh	"___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.safeseh	"___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.safeseh	"___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.safeseh	"___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.safeseh	"___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.safeseh	"___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.safeseh	"___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.safeseh	"___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.safeseh	"___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.safeseh	"___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.safeseh	"___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.safeseh	___ehhandler$_GLOBAL__sub_I_main.cpp
	.globl	"??_7bad_array_new_length@std@@6B@"
.set "??_7bad_array_new_length@std@@6B@", L___unnamed_1+4
	.globl	"??_7bad_alloc@std@@6B@"
.set "??_7bad_alloc@std@@6B@", L___unnamed_2+4
	.globl	"??_7exception@std@@6B@"
.set "??_7exception@std@@6B@", L___unnamed_3+4
	.globl	"??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_4+4
	.globl	"??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_5+4
	.globl	"??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_6+4
	.globl	"??_7?$codecvt@DDU_Mbstatet@@@std@@6B@"
.set "??_7?$codecvt@DDU_Mbstatet@@@std@@6B@", L___unnamed_7+4
	.globl	"??_7codecvt_base@std@@6B@"
.set "??_7codecvt_base@std@@6B@", L___unnamed_8+4
	.globl	"??_7facet@locale@std@@6B@"
.set "??_7facet@locale@std@@6B@", L___unnamed_9+4
	.globl	"??_7_Facet_base@std@@6B@"
.set "??_7_Facet_base@std@@6B@", L___unnamed_10+4
	.globl	"??_7bad_cast@std@@6B@"
.set "??_7bad_cast@std@@6B@", L___unnamed_11+4
	.globl	"??_7ios_base@std@@6B@"
.set "??_7ios_base@std@@6B@", L___unnamed_12+4
	.globl	"??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_13+4
	.globl	"??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
.set "??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@", L___unnamed_14+4
	.globl	"??_7_Iostream_error_category2@std@@6B@"
.set "??_7_Iostream_error_category2@std@@6B@", L___unnamed_15+4
	.globl	"??_7failure@ios_base@std@@6B@"
.set "??_7failure@ios_base@std@@6B@", L___unnamed_16+4
	.globl	"??_7system_error@std@@6B@"
.set "??_7system_error@std@@6B@", L___unnamed_17+4
	.globl	"??_7_System_error@std@@6B@"
.set "??_7_System_error@std@@6B@", L___unnamed_18+4
	.globl	"??_7runtime_error@std@@6B@"
.set "??_7runtime_error@std@@6B@", L___unnamed_19+4
	.globl	"??_7?$ctype@D@std@@6B@"
.set "??_7?$ctype@D@std@@6B@", L___unnamed_20+4
	.globl	"??_7ctype_base@std@@6B@"
.set "??_7ctype_base@std@@6B@", L___unnamed_21+4
	.globl	"??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
.set "??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@", L___unnamed_22+4
	.globl	"??_7?$numpunct@D@std@@6B@"
.set "??_7?$numpunct@D@std@@6B@", L___unnamed_23+4
	.ascii	" /INCLUDE:?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.ascii	" /INCLUDE:?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.ascii	" /INCLUDE:?id@?$numpunct@D@std@@2V0locale@2@A"
	.addrsig
	.addrsig_sym ___CxxFrameHandler3
	.addrsig_sym "??__FsupportedExtensions@@YAXXZ"
	.addrsig_sym "?ext0101_noop_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0101_noopex_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0101_setcolor_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0101_setdebug_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0102_pixel_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0102_rect_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "?ext0102_line_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym "??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ"
	.addrsig_sym "??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
	.addrsig_sym "??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
	.addrsig_sym __GLOBAL__sub_I_main.cpp
	.addrsig_sym "___ehhandler$?concolor_fg_rgb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@EEE@Z"
	.addrsig_sym "___ehhandler$?readFile@@YA?AV?$deque@EV?$allocator@E@std@@@std@@PBD@Z"
	.addrsig_sym "___ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z"
	.addrsig_sym "___ehhandler$?seekg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z"
	.addrsig_sym "___ehhandler$?tellg@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@U_Mbstatet@@@2@XZ"
	.addrsig_sym "___ehhandler$??$insert@V?$istream_iterator@EDU?$char_traits@D@std@@H@std@@$0A@@?$deque@EV?$allocator@E@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@E@std@@@std@@@1@V?$istream_iterator@EDU?$char_traits@D@std@@H@1@1@Z"
	.addrsig_sym "___ehhandler$?saveImage@@YAXPBDPAV?$deque@EV?$allocator@E@std@@@std@@II@Z"
	.addrsig_sym "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z"
	.addrsig_sym "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z"
	.addrsig_sym "___ehhandler$?ext0102_circle_inst@@YAXAAV?$deque@EV?$allocator@E@std@@@std@@AAVfileInfo@@@Z"
	.addrsig_sym ___ehhandler$main
	.addrsig_sym "___ehhandler$??0fileInfo@@QAE@XZ"
	.addrsig_sym "___ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@QBDI@Z@PBD@Z"
	.addrsig_sym "___ehhandler$??0bad_array_new_length@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0bad_alloc@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0exception@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??_Gbad_array_new_length@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gbad_alloc@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gexception@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"
	.addrsig_sym "___ehhandler$??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.addrsig_sym "___ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??push_back@01@QAEXD@Z@D@Z"
	.addrsig_sym "___ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z"
	.addrsig_sym "___ehhandler$??0_Locinfo@std@@QAE@PBD@Z"
	.addrsig_sym "___ehhandler$??1_Locinfo@std@@QAE@XZ"
	.addrsig_sym "___ehhandler$??0bad_cast@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??1exception@std@@UAE@XZ"
	.addrsig_sym "___ehhandler$??_Gbad_cast@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gios_base@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$?_Tidy@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXXZ"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IQBDI@Z@IPBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IQBDI@Z@IPBDI@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@QBDI@Z@PBDI@Z"
	.addrsig_sym "___ehhandler$?_Growmap@?$deque@GV?$allocator@G@std@@@std@@AAEXI@Z"
	.addrsig_sym "___ehhandler$?_Tidy@?$deque@GV?$allocator@G@std@@@std@@AAEXXZ"
	.addrsig_sym "___ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z"
	.addrsig_sym "___ehhandler$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z"
	.addrsig_sym "___ehhandler$??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z"
	.addrsig_sym "___ehhandler$??0failure@ios_base@std@@QAE@ABV012@@Z"
	.addrsig_sym "___ehhandler$??0system_error@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0_System_error@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0runtime_error@std@@QAE@ABV01@@Z"
	.addrsig_sym "___ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z"
	.addrsig_sym "___ehhandler$??_Gfailure@ios_base@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
	.addrsig_sym "___ehhandler$??_Gsystem_error@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
	.addrsig_sym "___ehhandler$??_G_System_error@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??_Gruntime_error@std@@UAEPAXI@Z"
	.addrsig_sym "___ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z"
	.addrsig_sym "___ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.addrsig_sym "___ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z"
	.addrsig_sym "___ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ"
	.addrsig_sym "___ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ"
	.addrsig_sym "___ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"
	.addrsig_sym "___ehhandler$?_Tidy@?$deque@EV?$allocator@E@std@@@std@@AAEXXZ"
	.addrsig_sym "___ehhandler$??$?5DU?$char_traits@D@std@@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAD@Z"
	.addrsig_sym "___ehhandler$?_Growmap@?$deque@EV?$allocator@E@std@@@std@@AAEXI@Z"
	.addrsig_sym "___ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z"
	.addrsig_sym "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z"
	.addrsig_sym "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z"
	.addrsig_sym "___ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z"
	.addrsig_sym "___ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z"
	.addrsig_sym "___ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_for@V<lambda_1>@?0??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??assign@01@QAEAAV01@ID@Z@D@Z"
	.addrsig_sym "___ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z"
	.addrsig_sym "___ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@IID@Z@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??insert@01@QAEAAV01@IID@Z@IID@Z"
	.addrsig_sym "___ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z"
	.addrsig_sym "___ehhandler$??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@ID@Z@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?0??append@01@QAEAAV01@ID@Z@ID@Z"
	.addrsig_sym "___ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z"
	.addrsig_sym "___ehhandler$?_Growmap@?$deque@Uextension@@V?$allocator@Uextension@@@std@@@std@@AAEXI@Z"
	.addrsig_sym "___ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z"
	.addrsig_sym ___ehhandler$_GLOBAL__sub_I_main.cpp
	.addrsig_sym "?supportedExtensions@@3V?$deque@GV?$allocator@G@std@@@std@@A"
	.addrsig_sym "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
	.addrsig_sym "?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A"
	.addrsig_sym "?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
	.addrsig_sym "?id@?$numpunct@D@std@@2V0locale@2@A"
	.addrsig_sym "??_7type_info@@6B@"
	.addrsig_sym "??_R0?AVbad_array_new_length@std@@@8"
	.addrsig_sym "??_R0?AVbad_alloc@std@@@8"
	.addrsig_sym "??_R0?AVexception@std@@@8"
	.addrsig_sym "??_R4bad_array_new_length@std@@6B@"
	.addrsig_sym "??_R3bad_array_new_length@std@@8"
	.addrsig_sym "??_R2bad_array_new_length@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_array_new_length@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_alloc@std@@8"
	.addrsig_sym "??_R3bad_alloc@std@@8"
	.addrsig_sym "??_R2bad_alloc@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@exception@std@@8"
	.addrsig_sym "??_R3exception@std@@8"
	.addrsig_sym "??_R2exception@std@@8"
	.addrsig_sym "??_R4bad_alloc@std@@6B@"
	.addrsig_sym "??_R4exception@std@@6B@"
	.addrsig_sym "??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@ios_base@std@@8"
	.addrsig_sym "??_R0?AVios_base@std@@@8"
	.addrsig_sym "??_R3ios_base@std@@8"
	.addrsig_sym "??_R2ios_base@std@@8"
	.addrsig_sym "??_R17?0A@EA@?$_Iosb@H@std@@8"
	.addrsig_sym "??_R0?AV?$_Iosb@H@std@@@8"
	.addrsig_sym "??_R3?$_Iosb@H@std@@8"
	.addrsig_sym "??_R2?$_Iosb@H@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$_Iosb@H@std@@8"
	.addrsig_sym "??_R1A@A@3EA@ios_base@std@@8"
	.addrsig_sym "??_R17A@3EA@?$_Iosb@H@std@@8"
	.addrsig_sym "??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8"
	.addrsig_sym "??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8"
	.addrsig_sym "??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@"
	.addrsig_sym "??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8"
	.addrsig_sym "??_R3?$codecvt@DDU_Mbstatet@@@std@@8"
	.addrsig_sym "??_R2?$codecvt@DDU_Mbstatet@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@codecvt_base@std@@8"
	.addrsig_sym "??_R0?AVcodecvt_base@std@@@8"
	.addrsig_sym "??_R3codecvt_base@std@@8"
	.addrsig_sym "??_R2codecvt_base@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@facet@locale@std@@8"
	.addrsig_sym "??_R0?AVfacet@locale@std@@@8"
	.addrsig_sym "??_R3facet@locale@std@@8"
	.addrsig_sym "??_R2facet@locale@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@_Facet_base@std@@8"
	.addrsig_sym "??_R0?AV_Facet_base@std@@@8"
	.addrsig_sym "??_R3_Facet_base@std@@8"
	.addrsig_sym "??_R2_Facet_base@std@@8"
	.addrsig_sym "??_R13?0A@EA@_Crt_new_delete@std@@8"
	.addrsig_sym "??_R0?AU_Crt_new_delete@std@@@8"
	.addrsig_sym "??_R3_Crt_new_delete@std@@8"
	.addrsig_sym "??_R2_Crt_new_delete@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@_Crt_new_delete@std@@8"
	.addrsig_sym "??_R4codecvt_base@std@@6B@"
	.addrsig_sym "??_R4facet@locale@std@@6B@"
	.addrsig_sym "??_R4_Facet_base@std@@6B@"
	.addrsig_sym "??_R0?AVbad_cast@std@@@8"
	.addrsig_sym "??_R4bad_cast@std@@6B@"
	.addrsig_sym "??_R3bad_cast@std@@8"
	.addrsig_sym "??_R2bad_cast@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@bad_cast@std@@8"
	.addrsig_sym "??_R4ios_base@std@@6B@"
	.addrsig_sym "??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@"
	.addrsig_sym "??_R0?AVfailure@ios_base@std@@@8"
	.addrsig_sym "??_R0?AVsystem_error@std@@@8"
	.addrsig_sym "??_R0?AV_System_error@std@@@8"
	.addrsig_sym "??_R0?AVruntime_error@std@@@8"
	.addrsig_sym "?_Storage@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4PAU?$atomic@I@1@A"
	.addrsig_sym "??_R4_Iostream_error_category2@std@@6B@"
	.addrsig_sym "??_R0?AV_Iostream_error_category2@std@@@8"
	.addrsig_sym "??_R3_Iostream_error_category2@std@@8"
	.addrsig_sym "??_R2_Iostream_error_category2@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@error_category@std@@8"
	.addrsig_sym "??_R0?AVerror_category@std@@@8"
	.addrsig_sym "??_R3error_category@std@@8"
	.addrsig_sym "??_R2error_category@std@@8"
	.addrsig_sym "?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
	.addrsig_sym "??_R4failure@ios_base@std@@6B@"
	.addrsig_sym "??_R3failure@ios_base@std@@8"
	.addrsig_sym "??_R2failure@ios_base@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@failure@ios_base@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@system_error@std@@8"
	.addrsig_sym "??_R3system_error@std@@8"
	.addrsig_sym "??_R2system_error@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@_System_error@std@@8"
	.addrsig_sym "??_R3_System_error@std@@8"
	.addrsig_sym "??_R2_System_error@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@runtime_error@std@@8"
	.addrsig_sym "??_R3runtime_error@std@@8"
	.addrsig_sym "??_R2runtime_error@std@@8"
	.addrsig_sym "??_R4system_error@std@@6B@"
	.addrsig_sym "??_R4_System_error@std@@6B@"
	.addrsig_sym "??_R4runtime_error@std@@6B@"
	.addrsig_sym "??_R4?$ctype@D@std@@6B@"
	.addrsig_sym "??_R0?AV?$ctype@D@std@@@8"
	.addrsig_sym "??_R3?$ctype@D@std@@8"
	.addrsig_sym "??_R2?$ctype@D@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$ctype@D@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@ctype_base@std@@8"
	.addrsig_sym "??_R0?AUctype_base@std@@@8"
	.addrsig_sym "??_R3ctype_base@std@@8"
	.addrsig_sym "??_R2ctype_base@std@@8"
	.addrsig_sym "??_R4ctype_base@std@@6B@"
	.addrsig_sym "??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
	.addrsig_sym "??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
	.addrsig_sym "??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.addrsig_sym "??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
	.addrsig_sym "??_R4?$numpunct@D@std@@6B@"
	.addrsig_sym "??_R0?AV?$numpunct@D@std@@@8"
	.addrsig_sym "??_R3?$numpunct@D@std@@8"
	.addrsig_sym "??_R2?$numpunct@D@std@@8"
	.addrsig_sym "??_R1A@?0A@EA@?$numpunct@D@std@@8"
	.addrsig_sym "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
	.globl	__fltused
